
test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006fc4  080000c0  080000c0  000010c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000154  08007084  08007084  00008084  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080071d8  080071d8  00009208  2**0
                  CONTENTS
  4 .ARM          00000008  080071d8  080071d8  000081d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080071e0  080071e0  00009208  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080071e0  080071e0  000081e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080071e4  080071e4  000081e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000208  20000000  080071e8  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001080  20000208  080073f0  00009208  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001288  080073f0  00009288  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00009208  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016504  00000000  00000000  00009230  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003425  00000000  00000000  0001f734  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001398  00000000  00000000  00022b60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f48  00000000  00000000  00023ef8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000398c  00000000  00000000  00024e40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001788e  00000000  00000000  000287cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a96e9  00000000  00000000  0004005a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e9743  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004af8  00000000  00000000  000e9788  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  000ee280  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000208 	.word	0x20000208
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800706c 	.word	0x0800706c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000020c 	.word	0x2000020c
 8000104:	0800706c 	.word	0x0800706c

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	@ 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f8f0 	bl	8000414 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			@ (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__divsi3>:
 8000240:	4603      	mov	r3, r0
 8000242:	430b      	orrs	r3, r1
 8000244:	d47f      	bmi.n	8000346 <__divsi3+0x106>
 8000246:	2200      	movs	r2, #0
 8000248:	0843      	lsrs	r3, r0, #1
 800024a:	428b      	cmp	r3, r1
 800024c:	d374      	bcc.n	8000338 <__divsi3+0xf8>
 800024e:	0903      	lsrs	r3, r0, #4
 8000250:	428b      	cmp	r3, r1
 8000252:	d35f      	bcc.n	8000314 <__divsi3+0xd4>
 8000254:	0a03      	lsrs	r3, r0, #8
 8000256:	428b      	cmp	r3, r1
 8000258:	d344      	bcc.n	80002e4 <__divsi3+0xa4>
 800025a:	0b03      	lsrs	r3, r0, #12
 800025c:	428b      	cmp	r3, r1
 800025e:	d328      	bcc.n	80002b2 <__divsi3+0x72>
 8000260:	0c03      	lsrs	r3, r0, #16
 8000262:	428b      	cmp	r3, r1
 8000264:	d30d      	bcc.n	8000282 <__divsi3+0x42>
 8000266:	22ff      	movs	r2, #255	@ 0xff
 8000268:	0209      	lsls	r1, r1, #8
 800026a:	ba12      	rev	r2, r2
 800026c:	0c03      	lsrs	r3, r0, #16
 800026e:	428b      	cmp	r3, r1
 8000270:	d302      	bcc.n	8000278 <__divsi3+0x38>
 8000272:	1212      	asrs	r2, r2, #8
 8000274:	0209      	lsls	r1, r1, #8
 8000276:	d065      	beq.n	8000344 <__divsi3+0x104>
 8000278:	0b03      	lsrs	r3, r0, #12
 800027a:	428b      	cmp	r3, r1
 800027c:	d319      	bcc.n	80002b2 <__divsi3+0x72>
 800027e:	e000      	b.n	8000282 <__divsi3+0x42>
 8000280:	0a09      	lsrs	r1, r1, #8
 8000282:	0bc3      	lsrs	r3, r0, #15
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x4c>
 8000288:	03cb      	lsls	r3, r1, #15
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0b83      	lsrs	r3, r0, #14
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x58>
 8000294:	038b      	lsls	r3, r1, #14
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0b43      	lsrs	r3, r0, #13
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x64>
 80002a0:	034b      	lsls	r3, r1, #13
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0b03      	lsrs	r3, r0, #12
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x70>
 80002ac:	030b      	lsls	r3, r1, #12
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0ac3      	lsrs	r3, r0, #11
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x7c>
 80002b8:	02cb      	lsls	r3, r1, #11
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0a83      	lsrs	r3, r0, #10
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x88>
 80002c4:	028b      	lsls	r3, r1, #10
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0a43      	lsrs	r3, r0, #9
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x94>
 80002d0:	024b      	lsls	r3, r1, #9
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0a03      	lsrs	r3, r0, #8
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0xa0>
 80002dc:	020b      	lsls	r3, r1, #8
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	d2cd      	bcs.n	8000280 <__divsi3+0x40>
 80002e4:	09c3      	lsrs	r3, r0, #7
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xae>
 80002ea:	01cb      	lsls	r3, r1, #7
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	0983      	lsrs	r3, r0, #6
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xba>
 80002f6:	018b      	lsls	r3, r1, #6
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0943      	lsrs	r3, r0, #5
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xc6>
 8000302:	014b      	lsls	r3, r1, #5
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0903      	lsrs	r3, r0, #4
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xd2>
 800030e:	010b      	lsls	r3, r1, #4
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	08c3      	lsrs	r3, r0, #3
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xde>
 800031a:	00cb      	lsls	r3, r1, #3
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	0883      	lsrs	r3, r0, #2
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xea>
 8000326:	008b      	lsls	r3, r1, #2
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0843      	lsrs	r3, r0, #1
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xf6>
 8000332:	004b      	lsls	r3, r1, #1
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	1a41      	subs	r1, r0, r1
 800033a:	d200      	bcs.n	800033e <__divsi3+0xfe>
 800033c:	4601      	mov	r1, r0
 800033e:	4152      	adcs	r2, r2
 8000340:	4610      	mov	r0, r2
 8000342:	4770      	bx	lr
 8000344:	e05d      	b.n	8000402 <__divsi3+0x1c2>
 8000346:	0fca      	lsrs	r2, r1, #31
 8000348:	d000      	beq.n	800034c <__divsi3+0x10c>
 800034a:	4249      	negs	r1, r1
 800034c:	1003      	asrs	r3, r0, #32
 800034e:	d300      	bcc.n	8000352 <__divsi3+0x112>
 8000350:	4240      	negs	r0, r0
 8000352:	4053      	eors	r3, r2
 8000354:	2200      	movs	r2, #0
 8000356:	469c      	mov	ip, r3
 8000358:	0903      	lsrs	r3, r0, #4
 800035a:	428b      	cmp	r3, r1
 800035c:	d32d      	bcc.n	80003ba <__divsi3+0x17a>
 800035e:	0a03      	lsrs	r3, r0, #8
 8000360:	428b      	cmp	r3, r1
 8000362:	d312      	bcc.n	800038a <__divsi3+0x14a>
 8000364:	22fc      	movs	r2, #252	@ 0xfc
 8000366:	0189      	lsls	r1, r1, #6
 8000368:	ba12      	rev	r2, r2
 800036a:	0a03      	lsrs	r3, r0, #8
 800036c:	428b      	cmp	r3, r1
 800036e:	d30c      	bcc.n	800038a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	1192      	asrs	r2, r2, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d308      	bcc.n	800038a <__divsi3+0x14a>
 8000378:	0189      	lsls	r1, r1, #6
 800037a:	1192      	asrs	r2, r2, #6
 800037c:	428b      	cmp	r3, r1
 800037e:	d304      	bcc.n	800038a <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	d03a      	beq.n	80003fa <__divsi3+0x1ba>
 8000384:	1192      	asrs	r2, r2, #6
 8000386:	e000      	b.n	800038a <__divsi3+0x14a>
 8000388:	0989      	lsrs	r1, r1, #6
 800038a:	09c3      	lsrs	r3, r0, #7
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x154>
 8000390:	01cb      	lsls	r3, r1, #7
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	0983      	lsrs	r3, r0, #6
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x160>
 800039c:	018b      	lsls	r3, r1, #6
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0943      	lsrs	r3, r0, #5
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x16c>
 80003a8:	014b      	lsls	r3, r1, #5
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0903      	lsrs	r3, r0, #4
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x178>
 80003b4:	010b      	lsls	r3, r1, #4
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	08c3      	lsrs	r3, r0, #3
 80003bc:	428b      	cmp	r3, r1
 80003be:	d301      	bcc.n	80003c4 <__divsi3+0x184>
 80003c0:	00cb      	lsls	r3, r1, #3
 80003c2:	1ac0      	subs	r0, r0, r3
 80003c4:	4152      	adcs	r2, r2
 80003c6:	0883      	lsrs	r3, r0, #2
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x190>
 80003cc:	008b      	lsls	r3, r1, #2
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	d2d9      	bcs.n	8000388 <__divsi3+0x148>
 80003d4:	0843      	lsrs	r3, r0, #1
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d301      	bcc.n	80003de <__divsi3+0x19e>
 80003da:	004b      	lsls	r3, r1, #1
 80003dc:	1ac0      	subs	r0, r0, r3
 80003de:	4152      	adcs	r2, r2
 80003e0:	1a41      	subs	r1, r0, r1
 80003e2:	d200      	bcs.n	80003e6 <__divsi3+0x1a6>
 80003e4:	4601      	mov	r1, r0
 80003e6:	4663      	mov	r3, ip
 80003e8:	4152      	adcs	r2, r2
 80003ea:	105b      	asrs	r3, r3, #1
 80003ec:	4610      	mov	r0, r2
 80003ee:	d301      	bcc.n	80003f4 <__divsi3+0x1b4>
 80003f0:	4240      	negs	r0, r0
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d500      	bpl.n	80003f8 <__divsi3+0x1b8>
 80003f6:	4249      	negs	r1, r1
 80003f8:	4770      	bx	lr
 80003fa:	4663      	mov	r3, ip
 80003fc:	105b      	asrs	r3, r3, #1
 80003fe:	d300      	bcc.n	8000402 <__divsi3+0x1c2>
 8000400:	4240      	negs	r0, r0
 8000402:	b501      	push	{r0, lr}
 8000404:	2000      	movs	r0, #0
 8000406:	f000 f805 	bl	8000414 <__aeabi_idiv0>
 800040a:	bd02      	pop	{r1, pc}

0800040c <__aeabi_idivmod>:
 800040c:	2900      	cmp	r1, #0
 800040e:	d0f8      	beq.n	8000402 <__divsi3+0x1c2>
 8000410:	e716      	b.n	8000240 <__divsi3>
 8000412:	4770      	bx	lr

08000414 <__aeabi_idiv0>:
 8000414:	4770      	bx	lr
 8000416:	46c0      	nop			@ (mov r8, r8)

08000418 <__aeabi_uldivmod>:
 8000418:	2b00      	cmp	r3, #0
 800041a:	d111      	bne.n	8000440 <__aeabi_uldivmod+0x28>
 800041c:	2a00      	cmp	r2, #0
 800041e:	d10f      	bne.n	8000440 <__aeabi_uldivmod+0x28>
 8000420:	2900      	cmp	r1, #0
 8000422:	d100      	bne.n	8000426 <__aeabi_uldivmod+0xe>
 8000424:	2800      	cmp	r0, #0
 8000426:	d002      	beq.n	800042e <__aeabi_uldivmod+0x16>
 8000428:	2100      	movs	r1, #0
 800042a:	43c9      	mvns	r1, r1
 800042c:	0008      	movs	r0, r1
 800042e:	b407      	push	{r0, r1, r2}
 8000430:	4802      	ldr	r0, [pc, #8]	@ (800043c <__aeabi_uldivmod+0x24>)
 8000432:	a102      	add	r1, pc, #8	@ (adr r1, 800043c <__aeabi_uldivmod+0x24>)
 8000434:	1840      	adds	r0, r0, r1
 8000436:	9002      	str	r0, [sp, #8]
 8000438:	bd03      	pop	{r0, r1, pc}
 800043a:	46c0      	nop			@ (mov r8, r8)
 800043c:	ffffffd9 	.word	0xffffffd9
 8000440:	b403      	push	{r0, r1}
 8000442:	4668      	mov	r0, sp
 8000444:	b501      	push	{r0, lr}
 8000446:	9802      	ldr	r0, [sp, #8]
 8000448:	f000 f806 	bl	8000458 <__udivmoddi4>
 800044c:	9b01      	ldr	r3, [sp, #4]
 800044e:	469e      	mov	lr, r3
 8000450:	b002      	add	sp, #8
 8000452:	bc0c      	pop	{r2, r3}
 8000454:	4770      	bx	lr
 8000456:	46c0      	nop			@ (mov r8, r8)

08000458 <__udivmoddi4>:
 8000458:	b5f0      	push	{r4, r5, r6, r7, lr}
 800045a:	4657      	mov	r7, sl
 800045c:	464e      	mov	r6, r9
 800045e:	4645      	mov	r5, r8
 8000460:	46de      	mov	lr, fp
 8000462:	b5e0      	push	{r5, r6, r7, lr}
 8000464:	0004      	movs	r4, r0
 8000466:	000d      	movs	r5, r1
 8000468:	4692      	mov	sl, r2
 800046a:	4699      	mov	r9, r3
 800046c:	b083      	sub	sp, #12
 800046e:	428b      	cmp	r3, r1
 8000470:	d830      	bhi.n	80004d4 <__udivmoddi4+0x7c>
 8000472:	d02d      	beq.n	80004d0 <__udivmoddi4+0x78>
 8000474:	4649      	mov	r1, r9
 8000476:	4650      	mov	r0, sl
 8000478:	f000 f8ba 	bl	80005f0 <__clzdi2>
 800047c:	0029      	movs	r1, r5
 800047e:	0006      	movs	r6, r0
 8000480:	0020      	movs	r0, r4
 8000482:	f000 f8b5 	bl	80005f0 <__clzdi2>
 8000486:	1a33      	subs	r3, r6, r0
 8000488:	4698      	mov	r8, r3
 800048a:	3b20      	subs	r3, #32
 800048c:	d434      	bmi.n	80004f8 <__udivmoddi4+0xa0>
 800048e:	469b      	mov	fp, r3
 8000490:	4653      	mov	r3, sl
 8000492:	465a      	mov	r2, fp
 8000494:	4093      	lsls	r3, r2
 8000496:	4642      	mov	r2, r8
 8000498:	001f      	movs	r7, r3
 800049a:	4653      	mov	r3, sl
 800049c:	4093      	lsls	r3, r2
 800049e:	001e      	movs	r6, r3
 80004a0:	42af      	cmp	r7, r5
 80004a2:	d83b      	bhi.n	800051c <__udivmoddi4+0xc4>
 80004a4:	42af      	cmp	r7, r5
 80004a6:	d100      	bne.n	80004aa <__udivmoddi4+0x52>
 80004a8:	e079      	b.n	800059e <__udivmoddi4+0x146>
 80004aa:	465b      	mov	r3, fp
 80004ac:	1ba4      	subs	r4, r4, r6
 80004ae:	41bd      	sbcs	r5, r7
 80004b0:	2b00      	cmp	r3, #0
 80004b2:	da00      	bge.n	80004b6 <__udivmoddi4+0x5e>
 80004b4:	e076      	b.n	80005a4 <__udivmoddi4+0x14c>
 80004b6:	2200      	movs	r2, #0
 80004b8:	2300      	movs	r3, #0
 80004ba:	9200      	str	r2, [sp, #0]
 80004bc:	9301      	str	r3, [sp, #4]
 80004be:	2301      	movs	r3, #1
 80004c0:	465a      	mov	r2, fp
 80004c2:	4093      	lsls	r3, r2
 80004c4:	9301      	str	r3, [sp, #4]
 80004c6:	2301      	movs	r3, #1
 80004c8:	4642      	mov	r2, r8
 80004ca:	4093      	lsls	r3, r2
 80004cc:	9300      	str	r3, [sp, #0]
 80004ce:	e029      	b.n	8000524 <__udivmoddi4+0xcc>
 80004d0:	4282      	cmp	r2, r0
 80004d2:	d9cf      	bls.n	8000474 <__udivmoddi4+0x1c>
 80004d4:	2200      	movs	r2, #0
 80004d6:	2300      	movs	r3, #0
 80004d8:	9200      	str	r2, [sp, #0]
 80004da:	9301      	str	r3, [sp, #4]
 80004dc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80004de:	2b00      	cmp	r3, #0
 80004e0:	d001      	beq.n	80004e6 <__udivmoddi4+0x8e>
 80004e2:	601c      	str	r4, [r3, #0]
 80004e4:	605d      	str	r5, [r3, #4]
 80004e6:	9800      	ldr	r0, [sp, #0]
 80004e8:	9901      	ldr	r1, [sp, #4]
 80004ea:	b003      	add	sp, #12
 80004ec:	bcf0      	pop	{r4, r5, r6, r7}
 80004ee:	46bb      	mov	fp, r7
 80004f0:	46b2      	mov	sl, r6
 80004f2:	46a9      	mov	r9, r5
 80004f4:	46a0      	mov	r8, r4
 80004f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004f8:	4642      	mov	r2, r8
 80004fa:	469b      	mov	fp, r3
 80004fc:	2320      	movs	r3, #32
 80004fe:	1a9b      	subs	r3, r3, r2
 8000500:	4652      	mov	r2, sl
 8000502:	40da      	lsrs	r2, r3
 8000504:	4641      	mov	r1, r8
 8000506:	0013      	movs	r3, r2
 8000508:	464a      	mov	r2, r9
 800050a:	408a      	lsls	r2, r1
 800050c:	0017      	movs	r7, r2
 800050e:	4642      	mov	r2, r8
 8000510:	431f      	orrs	r7, r3
 8000512:	4653      	mov	r3, sl
 8000514:	4093      	lsls	r3, r2
 8000516:	001e      	movs	r6, r3
 8000518:	42af      	cmp	r7, r5
 800051a:	d9c3      	bls.n	80004a4 <__udivmoddi4+0x4c>
 800051c:	2200      	movs	r2, #0
 800051e:	2300      	movs	r3, #0
 8000520:	9200      	str	r2, [sp, #0]
 8000522:	9301      	str	r3, [sp, #4]
 8000524:	4643      	mov	r3, r8
 8000526:	2b00      	cmp	r3, #0
 8000528:	d0d8      	beq.n	80004dc <__udivmoddi4+0x84>
 800052a:	07fb      	lsls	r3, r7, #31
 800052c:	0872      	lsrs	r2, r6, #1
 800052e:	431a      	orrs	r2, r3
 8000530:	4646      	mov	r6, r8
 8000532:	087b      	lsrs	r3, r7, #1
 8000534:	e00e      	b.n	8000554 <__udivmoddi4+0xfc>
 8000536:	42ab      	cmp	r3, r5
 8000538:	d101      	bne.n	800053e <__udivmoddi4+0xe6>
 800053a:	42a2      	cmp	r2, r4
 800053c:	d80c      	bhi.n	8000558 <__udivmoddi4+0x100>
 800053e:	1aa4      	subs	r4, r4, r2
 8000540:	419d      	sbcs	r5, r3
 8000542:	2001      	movs	r0, #1
 8000544:	1924      	adds	r4, r4, r4
 8000546:	416d      	adcs	r5, r5
 8000548:	2100      	movs	r1, #0
 800054a:	3e01      	subs	r6, #1
 800054c:	1824      	adds	r4, r4, r0
 800054e:	414d      	adcs	r5, r1
 8000550:	2e00      	cmp	r6, #0
 8000552:	d006      	beq.n	8000562 <__udivmoddi4+0x10a>
 8000554:	42ab      	cmp	r3, r5
 8000556:	d9ee      	bls.n	8000536 <__udivmoddi4+0xde>
 8000558:	3e01      	subs	r6, #1
 800055a:	1924      	adds	r4, r4, r4
 800055c:	416d      	adcs	r5, r5
 800055e:	2e00      	cmp	r6, #0
 8000560:	d1f8      	bne.n	8000554 <__udivmoddi4+0xfc>
 8000562:	9800      	ldr	r0, [sp, #0]
 8000564:	9901      	ldr	r1, [sp, #4]
 8000566:	465b      	mov	r3, fp
 8000568:	1900      	adds	r0, r0, r4
 800056a:	4169      	adcs	r1, r5
 800056c:	2b00      	cmp	r3, #0
 800056e:	db24      	blt.n	80005ba <__udivmoddi4+0x162>
 8000570:	002b      	movs	r3, r5
 8000572:	465a      	mov	r2, fp
 8000574:	4644      	mov	r4, r8
 8000576:	40d3      	lsrs	r3, r2
 8000578:	002a      	movs	r2, r5
 800057a:	40e2      	lsrs	r2, r4
 800057c:	001c      	movs	r4, r3
 800057e:	465b      	mov	r3, fp
 8000580:	0015      	movs	r5, r2
 8000582:	2b00      	cmp	r3, #0
 8000584:	db2a      	blt.n	80005dc <__udivmoddi4+0x184>
 8000586:	0026      	movs	r6, r4
 8000588:	409e      	lsls	r6, r3
 800058a:	0033      	movs	r3, r6
 800058c:	0026      	movs	r6, r4
 800058e:	4647      	mov	r7, r8
 8000590:	40be      	lsls	r6, r7
 8000592:	0032      	movs	r2, r6
 8000594:	1a80      	subs	r0, r0, r2
 8000596:	4199      	sbcs	r1, r3
 8000598:	9000      	str	r0, [sp, #0]
 800059a:	9101      	str	r1, [sp, #4]
 800059c:	e79e      	b.n	80004dc <__udivmoddi4+0x84>
 800059e:	42a3      	cmp	r3, r4
 80005a0:	d8bc      	bhi.n	800051c <__udivmoddi4+0xc4>
 80005a2:	e782      	b.n	80004aa <__udivmoddi4+0x52>
 80005a4:	4642      	mov	r2, r8
 80005a6:	2320      	movs	r3, #32
 80005a8:	2100      	movs	r1, #0
 80005aa:	1a9b      	subs	r3, r3, r2
 80005ac:	2200      	movs	r2, #0
 80005ae:	9100      	str	r1, [sp, #0]
 80005b0:	9201      	str	r2, [sp, #4]
 80005b2:	2201      	movs	r2, #1
 80005b4:	40da      	lsrs	r2, r3
 80005b6:	9201      	str	r2, [sp, #4]
 80005b8:	e785      	b.n	80004c6 <__udivmoddi4+0x6e>
 80005ba:	4642      	mov	r2, r8
 80005bc:	2320      	movs	r3, #32
 80005be:	1a9b      	subs	r3, r3, r2
 80005c0:	002a      	movs	r2, r5
 80005c2:	4646      	mov	r6, r8
 80005c4:	409a      	lsls	r2, r3
 80005c6:	0023      	movs	r3, r4
 80005c8:	40f3      	lsrs	r3, r6
 80005ca:	4644      	mov	r4, r8
 80005cc:	4313      	orrs	r3, r2
 80005ce:	002a      	movs	r2, r5
 80005d0:	40e2      	lsrs	r2, r4
 80005d2:	001c      	movs	r4, r3
 80005d4:	465b      	mov	r3, fp
 80005d6:	0015      	movs	r5, r2
 80005d8:	2b00      	cmp	r3, #0
 80005da:	dad4      	bge.n	8000586 <__udivmoddi4+0x12e>
 80005dc:	4642      	mov	r2, r8
 80005de:	002f      	movs	r7, r5
 80005e0:	2320      	movs	r3, #32
 80005e2:	0026      	movs	r6, r4
 80005e4:	4097      	lsls	r7, r2
 80005e6:	1a9b      	subs	r3, r3, r2
 80005e8:	40de      	lsrs	r6, r3
 80005ea:	003b      	movs	r3, r7
 80005ec:	4333      	orrs	r3, r6
 80005ee:	e7cd      	b.n	800058c <__udivmoddi4+0x134>

080005f0 <__clzdi2>:
 80005f0:	b510      	push	{r4, lr}
 80005f2:	2900      	cmp	r1, #0
 80005f4:	d103      	bne.n	80005fe <__clzdi2+0xe>
 80005f6:	f000 f807 	bl	8000608 <__clzsi2>
 80005fa:	3020      	adds	r0, #32
 80005fc:	e002      	b.n	8000604 <__clzdi2+0x14>
 80005fe:	0008      	movs	r0, r1
 8000600:	f000 f802 	bl	8000608 <__clzsi2>
 8000604:	bd10      	pop	{r4, pc}
 8000606:	46c0      	nop			@ (mov r8, r8)

08000608 <__clzsi2>:
 8000608:	211c      	movs	r1, #28
 800060a:	2301      	movs	r3, #1
 800060c:	041b      	lsls	r3, r3, #16
 800060e:	4298      	cmp	r0, r3
 8000610:	d301      	bcc.n	8000616 <__clzsi2+0xe>
 8000612:	0c00      	lsrs	r0, r0, #16
 8000614:	3910      	subs	r1, #16
 8000616:	0a1b      	lsrs	r3, r3, #8
 8000618:	4298      	cmp	r0, r3
 800061a:	d301      	bcc.n	8000620 <__clzsi2+0x18>
 800061c:	0a00      	lsrs	r0, r0, #8
 800061e:	3908      	subs	r1, #8
 8000620:	091b      	lsrs	r3, r3, #4
 8000622:	4298      	cmp	r0, r3
 8000624:	d301      	bcc.n	800062a <__clzsi2+0x22>
 8000626:	0900      	lsrs	r0, r0, #4
 8000628:	3904      	subs	r1, #4
 800062a:	a202      	add	r2, pc, #8	@ (adr r2, 8000634 <__clzsi2+0x2c>)
 800062c:	5c10      	ldrb	r0, [r2, r0]
 800062e:	1840      	adds	r0, r0, r1
 8000630:	4770      	bx	lr
 8000632:	46c0      	nop			@ (mov r8, r8)
 8000634:	02020304 	.word	0x02020304
 8000638:	01010101 	.word	0x01010101
	...

08000644 <Display_Update>:
int currentDigit = 0;
// global variable to track debug mode
uint32_t debugTimestamp = 0;
uint8_t debugActive = 0;

void Display_Update(void) {
 8000644:	b590      	push	{r4, r7, lr}
 8000646:	b085      	sub	sp, #20
 8000648:	af00      	add	r7, sp, #0
    for (int digit = 0; digit < 4; digit++) {
 800064a:	2300      	movs	r3, #0
 800064c:	60fb      	str	r3, [r7, #12]
 800064e:	e054      	b.n	80006fa <Display_Update+0xb6>
        // Turn off all digits
        for (int i = 0; i < 4; i++)
 8000650:	2300      	movs	r3, #0
 8000652:	60bb      	str	r3, [r7, #8]
 8000654:	e00e      	b.n	8000674 <Display_Update+0x30>
            HAL_GPIO_WritePin(digitPorts[i], digitPins[i], GPIO_PIN_RESET);
 8000656:	4b2d      	ldr	r3, [pc, #180]	@ (800070c <Display_Update+0xc8>)
 8000658:	68ba      	ldr	r2, [r7, #8]
 800065a:	0092      	lsls	r2, r2, #2
 800065c:	58d0      	ldr	r0, [r2, r3]
 800065e:	4b2c      	ldr	r3, [pc, #176]	@ (8000710 <Display_Update+0xcc>)
 8000660:	68ba      	ldr	r2, [r7, #8]
 8000662:	0052      	lsls	r2, r2, #1
 8000664:	5ad3      	ldrh	r3, [r2, r3]
 8000666:	2200      	movs	r2, #0
 8000668:	0019      	movs	r1, r3
 800066a:	f001 faf5 	bl	8001c58 <HAL_GPIO_WritePin>
        for (int i = 0; i < 4; i++)
 800066e:	68bb      	ldr	r3, [r7, #8]
 8000670:	3301      	adds	r3, #1
 8000672:	60bb      	str	r3, [r7, #8]
 8000674:	68bb      	ldr	r3, [r7, #8]
 8000676:	2b03      	cmp	r3, #3
 8000678:	dded      	ble.n	8000656 <Display_Update+0x12>

        // Set segments for current digit
        for (int seg = 0; seg < 8; seg++) {
 800067a:	2300      	movs	r3, #0
 800067c:	607b      	str	r3, [r7, #4]
 800067e:	e01b      	b.n	80006b8 <Display_Update+0x74>
            HAL_GPIO_WritePin(segmentPorts[seg], segmentPins[seg],
 8000680:	4b24      	ldr	r3, [pc, #144]	@ (8000714 <Display_Update+0xd0>)
 8000682:	687a      	ldr	r2, [r7, #4]
 8000684:	0092      	lsls	r2, r2, #2
 8000686:	58d0      	ldr	r0, [r2, r3]
 8000688:	4b23      	ldr	r3, [pc, #140]	@ (8000718 <Display_Update+0xd4>)
 800068a:	687a      	ldr	r2, [r7, #4]
 800068c:	0052      	lsls	r2, r2, #1
 800068e:	5ad4      	ldrh	r4, [r2, r3]
                segmentMap[digits[digit]][seg] ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000690:	4b22      	ldr	r3, [pc, #136]	@ (800071c <Display_Update+0xd8>)
 8000692:	68fa      	ldr	r2, [r7, #12]
 8000694:	0092      	lsls	r2, r2, #2
 8000696:	58d2      	ldr	r2, [r2, r3]
 8000698:	4b21      	ldr	r3, [pc, #132]	@ (8000720 <Display_Update+0xdc>)
 800069a:	00d1      	lsls	r1, r2, #3
 800069c:	687a      	ldr	r2, [r7, #4]
 800069e:	188a      	adds	r2, r1, r2
 80006a0:	0092      	lsls	r2, r2, #2
 80006a2:	58d3      	ldr	r3, [r2, r3]
            HAL_GPIO_WritePin(segmentPorts[seg], segmentPins[seg],
 80006a4:	1e5a      	subs	r2, r3, #1
 80006a6:	4193      	sbcs	r3, r2
 80006a8:	b2db      	uxtb	r3, r3
 80006aa:	001a      	movs	r2, r3
 80006ac:	0021      	movs	r1, r4
 80006ae:	f001 fad3 	bl	8001c58 <HAL_GPIO_WritePin>
        for (int seg = 0; seg < 8; seg++) {
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	3301      	adds	r3, #1
 80006b6:	607b      	str	r3, [r7, #4]
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	2b07      	cmp	r3, #7
 80006bc:	dde0      	ble.n	8000680 <Display_Update+0x3c>
        }

        // Enable current digit
        HAL_GPIO_WritePin(digitPorts[digit], digitPins[digit], GPIO_PIN_SET);
 80006be:	4b13      	ldr	r3, [pc, #76]	@ (800070c <Display_Update+0xc8>)
 80006c0:	68fa      	ldr	r2, [r7, #12]
 80006c2:	0092      	lsls	r2, r2, #2
 80006c4:	58d0      	ldr	r0, [r2, r3]
 80006c6:	4b12      	ldr	r3, [pc, #72]	@ (8000710 <Display_Update+0xcc>)
 80006c8:	68fa      	ldr	r2, [r7, #12]
 80006ca:	0052      	lsls	r2, r2, #1
 80006cc:	5ad3      	ldrh	r3, [r2, r3]
 80006ce:	2201      	movs	r2, #1
 80006d0:	0019      	movs	r1, r3
 80006d2:	f001 fac1 	bl	8001c58 <HAL_GPIO_WritePin>
        osDelay(2);  // Display each digit for 2ms
 80006d6:	2002      	movs	r0, #2
 80006d8:	f004 ffc9 	bl	800566e <osDelay>
        HAL_GPIO_WritePin(digitPorts[digit], digitPins[digit], GPIO_PIN_RESET);
 80006dc:	4b0b      	ldr	r3, [pc, #44]	@ (800070c <Display_Update+0xc8>)
 80006de:	68fa      	ldr	r2, [r7, #12]
 80006e0:	0092      	lsls	r2, r2, #2
 80006e2:	58d0      	ldr	r0, [r2, r3]
 80006e4:	4b0a      	ldr	r3, [pc, #40]	@ (8000710 <Display_Update+0xcc>)
 80006e6:	68fa      	ldr	r2, [r7, #12]
 80006e8:	0052      	lsls	r2, r2, #1
 80006ea:	5ad3      	ldrh	r3, [r2, r3]
 80006ec:	2200      	movs	r2, #0
 80006ee:	0019      	movs	r1, r3
 80006f0:	f001 fab2 	bl	8001c58 <HAL_GPIO_WritePin>
    for (int digit = 0; digit < 4; digit++) {
 80006f4:	68fb      	ldr	r3, [r7, #12]
 80006f6:	3301      	adds	r3, #1
 80006f8:	60fb      	str	r3, [r7, #12]
 80006fa:	68fb      	ldr	r3, [r7, #12]
 80006fc:	2b03      	cmp	r3, #3
 80006fe:	dda7      	ble.n	8000650 <Display_Update+0xc>
    }
}
 8000700:	46c0      	nop			@ (mov r8, r8)
 8000702:	46c0      	nop			@ (mov r8, r8)
 8000704:	46bd      	mov	sp, r7
 8000706:	b005      	add	sp, #20
 8000708:	bd90      	pop	{r4, r7, pc}
 800070a:	46c0      	nop			@ (mov r8, r8)
 800070c:	20000000 	.word	0x20000000
 8000710:	20000010 	.word	0x20000010
 8000714:	20000018 	.word	0x20000018
 8000718:	20000038 	.word	0x20000038
 800071c:	20000240 	.word	0x20000240
 8000720:	20000048 	.word	0x20000048

08000724 <UpdateDisplayFromTime>:

void UpdateDisplayFromTime(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b084      	sub	sp, #16
 8000728:	af00      	add	r7, sp, #0
	uint32_t totalSeconds = totalTime / 1000;
 800072a:	4b24      	ldr	r3, [pc, #144]	@ (80007bc <UpdateDisplayFromTime+0x98>)
 800072c:	681b      	ldr	r3, [r3, #0]
 800072e:	22fa      	movs	r2, #250	@ 0xfa
 8000730:	0091      	lsls	r1, r2, #2
 8000732:	0018      	movs	r0, r3
 8000734:	f7ff fcfa 	bl	800012c <__udivsi3>
 8000738:	0003      	movs	r3, r0
 800073a:	60fb      	str	r3, [r7, #12]
	uint32_t minutes = totalSeconds / 60;
 800073c:	68fb      	ldr	r3, [r7, #12]
 800073e:	213c      	movs	r1, #60	@ 0x3c
 8000740:	0018      	movs	r0, r3
 8000742:	f7ff fcf3 	bl	800012c <__udivsi3>
 8000746:	0003      	movs	r3, r0
 8000748:	60bb      	str	r3, [r7, #8]
	uint32_t seconds = totalSeconds % 60;
 800074a:	68fb      	ldr	r3, [r7, #12]
 800074c:	213c      	movs	r1, #60	@ 0x3c
 800074e:	0018      	movs	r0, r3
 8000750:	f7ff fd72 	bl	8000238 <__aeabi_uidivmod>
 8000754:	000b      	movs	r3, r1
 8000756:	607b      	str	r3, [r7, #4]

	// MM:SS
	digits[0] = (minutes / 10) % 10;
 8000758:	68bb      	ldr	r3, [r7, #8]
 800075a:	210a      	movs	r1, #10
 800075c:	0018      	movs	r0, r3
 800075e:	f7ff fce5 	bl	800012c <__udivsi3>
 8000762:	0003      	movs	r3, r0
 8000764:	210a      	movs	r1, #10
 8000766:	0018      	movs	r0, r3
 8000768:	f7ff fd66 	bl	8000238 <__aeabi_uidivmod>
 800076c:	000b      	movs	r3, r1
 800076e:	001a      	movs	r2, r3
 8000770:	4b13      	ldr	r3, [pc, #76]	@ (80007c0 <UpdateDisplayFromTime+0x9c>)
 8000772:	601a      	str	r2, [r3, #0]
	digits[1] =  minutes % 10;
 8000774:	68bb      	ldr	r3, [r7, #8]
 8000776:	210a      	movs	r1, #10
 8000778:	0018      	movs	r0, r3
 800077a:	f7ff fd5d 	bl	8000238 <__aeabi_uidivmod>
 800077e:	000b      	movs	r3, r1
 8000780:	001a      	movs	r2, r3
 8000782:	4b0f      	ldr	r3, [pc, #60]	@ (80007c0 <UpdateDisplayFromTime+0x9c>)
 8000784:	605a      	str	r2, [r3, #4]
	digits[2] = (seconds / 10) % 10;
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	210a      	movs	r1, #10
 800078a:	0018      	movs	r0, r3
 800078c:	f7ff fcce 	bl	800012c <__udivsi3>
 8000790:	0003      	movs	r3, r0
 8000792:	210a      	movs	r1, #10
 8000794:	0018      	movs	r0, r3
 8000796:	f7ff fd4f 	bl	8000238 <__aeabi_uidivmod>
 800079a:	000b      	movs	r3, r1
 800079c:	001a      	movs	r2, r3
 800079e:	4b08      	ldr	r3, [pc, #32]	@ (80007c0 <UpdateDisplayFromTime+0x9c>)
 80007a0:	609a      	str	r2, [r3, #8]
	digits[3] =  seconds % 10;
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	210a      	movs	r1, #10
 80007a6:	0018      	movs	r0, r3
 80007a8:	f7ff fd46 	bl	8000238 <__aeabi_uidivmod>
 80007ac:	000b      	movs	r3, r1
 80007ae:	001a      	movs	r2, r3
 80007b0:	4b03      	ldr	r3, [pc, #12]	@ (80007c0 <UpdateDisplayFromTime+0x9c>)
 80007b2:	60da      	str	r2, [r3, #12]
}
 80007b4:	46c0      	nop			@ (mov r8, r8)
 80007b6:	46bd      	mov	sp, r7
 80007b8:	b004      	add	sp, #16
 80007ba:	bd80      	pop	{r7, pc}
 80007bc:	20000234 	.word	0x20000234
 80007c0:	20000240 	.word	0x20000240

080007c4 <StartDefaultTask>:


void StartDefaultTask(void const * argument)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b084      	sub	sp, #16
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
    uint32_t lastSampledTime = HAL_GetTick();
 80007cc:	f000 fdd0 	bl	8001370 <HAL_GetTick>
 80007d0:	0003      	movs	r3, r0
 80007d2:	60fb      	str	r3, [r7, #12]

    for(;;)
    {
        uint32_t now = HAL_GetTick();
 80007d4:	f000 fdcc 	bl	8001370 <HAL_GetTick>
 80007d8:	0003      	movs	r3, r0
 80007da:	60bb      	str	r3, [r7, #8]

        switch(startFlag) {
 80007dc:	4b20      	ldr	r3, [pc, #128]	@ (8000860 <StartDefaultTask+0x9c>)
 80007de:	781b      	ldrb	r3, [r3, #0]
 80007e0:	b2db      	uxtb	r3, r3
 80007e2:	2b04      	cmp	r3, #4
 80007e4:	d837      	bhi.n	8000856 <StartDefaultTask+0x92>
 80007e6:	009a      	lsls	r2, r3, #2
 80007e8:	4b1e      	ldr	r3, [pc, #120]	@ (8000864 <StartDefaultTask+0xa0>)
 80007ea:	18d3      	adds	r3, r2, r3
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	469f      	mov	pc, r3
        case 0: // idle
            break;

        case 1: // start or resume
            startTime       = now;          // remember momentul preluării
 80007f0:	4b1d      	ldr	r3, [pc, #116]	@ (8000868 <StartDefaultTask+0xa4>)
 80007f2:	68ba      	ldr	r2, [r7, #8]
 80007f4:	601a      	str	r2, [r3, #0]
            lastRunTime     = now;          // for UART pacing in Task01
 80007f6:	4b1d      	ldr	r3, [pc, #116]	@ (800086c <StartDefaultTask+0xa8>)
 80007f8:	68ba      	ldr	r2, [r7, #8]
 80007fa:	601a      	str	r2, [r3, #0]
            lastSampledTime = now;          // for delta accumulation
 80007fc:	68bb      	ldr	r3, [r7, #8]
 80007fe:	60fb      	str	r3, [r7, #12]
            startFlag       = 2;            // transition to running
 8000800:	4b17      	ldr	r3, [pc, #92]	@ (8000860 <StartDefaultTask+0x9c>)
 8000802:	2202      	movs	r2, #2
 8000804:	701a      	strb	r2, [r3, #0]
            break;
 8000806:	e026      	b.n	8000856 <StartDefaultTask+0x92>

        case 2: // running
            totalTime += (now - lastSampledTime);
 8000808:	68ba      	ldr	r2, [r7, #8]
 800080a:	68fb      	ldr	r3, [r7, #12]
 800080c:	1ad2      	subs	r2, r2, r3
 800080e:	4b18      	ldr	r3, [pc, #96]	@ (8000870 <StartDefaultTask+0xac>)
 8000810:	681b      	ldr	r3, [r3, #0]
 8000812:	18d2      	adds	r2, r2, r3
 8000814:	4b16      	ldr	r3, [pc, #88]	@ (8000870 <StartDefaultTask+0xac>)
 8000816:	601a      	str	r2, [r3, #0]
            lastSampledTime = now;
 8000818:	68bb      	ldr	r3, [r7, #8]
 800081a:	60fb      	str	r3, [r7, #12]
            break;
 800081c:	e01b      	b.n	8000856 <StartDefaultTask+0x92>

        case 3: // stop
            elapsedTime += now - startTime;
 800081e:	4b12      	ldr	r3, [pc, #72]	@ (8000868 <StartDefaultTask+0xa4>)
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	68ba      	ldr	r2, [r7, #8]
 8000824:	1ad2      	subs	r2, r2, r3
 8000826:	4b13      	ldr	r3, [pc, #76]	@ (8000874 <StartDefaultTask+0xb0>)
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	18d2      	adds	r2, r2, r3
 800082c:	4b11      	ldr	r3, [pc, #68]	@ (8000874 <StartDefaultTask+0xb0>)
 800082e:	601a      	str	r2, [r3, #0]
            totalTime    = elapsedTime;
 8000830:	4b10      	ldr	r3, [pc, #64]	@ (8000874 <StartDefaultTask+0xb0>)
 8000832:	681a      	ldr	r2, [r3, #0]
 8000834:	4b0e      	ldr	r3, [pc, #56]	@ (8000870 <StartDefaultTask+0xac>)
 8000836:	601a      	str	r2, [r3, #0]
            startFlag    = 0; // pause
 8000838:	4b09      	ldr	r3, [pc, #36]	@ (8000860 <StartDefaultTask+0x9c>)
 800083a:	2200      	movs	r2, #0
 800083c:	701a      	strb	r2, [r3, #0]
            break;
 800083e:	e00a      	b.n	8000856 <StartDefaultTask+0x92>

        case 4: // reset
            elapsedTime = 0;
 8000840:	4b0c      	ldr	r3, [pc, #48]	@ (8000874 <StartDefaultTask+0xb0>)
 8000842:	2200      	movs	r2, #0
 8000844:	601a      	str	r2, [r3, #0]
            totalTime   = 0;
 8000846:	4b0a      	ldr	r3, [pc, #40]	@ (8000870 <StartDefaultTask+0xac>)
 8000848:	2200      	movs	r2, #0
 800084a:	601a      	str	r2, [r3, #0]
            startFlag   = 0;
 800084c:	4b04      	ldr	r3, [pc, #16]	@ (8000860 <StartDefaultTask+0x9c>)
 800084e:	2200      	movs	r2, #0
 8000850:	701a      	strb	r2, [r3, #0]
            break;
 8000852:	e000      	b.n	8000856 <StartDefaultTask+0x92>
            break;
 8000854:	46c0      	nop			@ (mov r8, r8)
        }

        osDelay(1);
 8000856:	2001      	movs	r0, #1
 8000858:	f004 ff09 	bl	800566e <osDelay>
    {
 800085c:	e7ba      	b.n	80007d4 <StartDefaultTask+0x10>
 800085e:	46c0      	nop			@ (mov r8, r8)
 8000860:	20000224 	.word	0x20000224
 8000864:	08007108 	.word	0x08007108
 8000868:	20000228 	.word	0x20000228
 800086c:	20000230 	.word	0x20000230
 8000870:	20000234 	.word	0x20000234
 8000874:	2000022c 	.word	0x2000022c

08000878 <StartTask01>:
    }
}

void StartTask01(void const * argument)
{
 8000878:	b590      	push	{r4, r7, lr}
 800087a:	b093      	sub	sp, #76	@ 0x4c
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
    for(;;)
    {
        if (startFlag == 2)  // running
 8000880:	4b16      	ldr	r3, [pc, #88]	@ (80008dc <StartTask01+0x64>)
 8000882:	781b      	ldrb	r3, [r3, #0]
 8000884:	b2db      	uxtb	r3, r3
 8000886:	2b02      	cmp	r3, #2
 8000888:	d121      	bne.n	80008ce <StartTask01+0x56>
        {
            uint32_t currentTime = HAL_GetTick();
 800088a:	f000 fd71 	bl	8001370 <HAL_GetTick>
 800088e:	0003      	movs	r3, r0
 8000890:	647b      	str	r3, [r7, #68]	@ 0x44
            if ((currentTime - lastRunTime) >= 500) // au trecut 500 ms
 8000892:	4b13      	ldr	r3, [pc, #76]	@ (80008e0 <StartTask01+0x68>)
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8000898:	1ad2      	subs	r2, r2, r3
 800089a:	23fa      	movs	r3, #250	@ 0xfa
 800089c:	005b      	lsls	r3, r3, #1
 800089e:	429a      	cmp	r2, r3
 80008a0:	d317      	bcc.n	80008d2 <StartTask01+0x5a>
            {
                lastRunTime = currentTime;
 80008a2:	4b0f      	ldr	r3, [pc, #60]	@ (80008e0 <StartTask01+0x68>)
 80008a4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80008a6:	601a      	str	r2, [r3, #0]

                char buffer[50];
                int len = sprintf(buffer, "Timp: %lu ms\r\n", totalTime);
 80008a8:	4b0e      	ldr	r3, [pc, #56]	@ (80008e4 <StartTask01+0x6c>)
 80008aa:	681a      	ldr	r2, [r3, #0]
 80008ac:	490e      	ldr	r1, [pc, #56]	@ (80008e8 <StartTask01+0x70>)
 80008ae:	240c      	movs	r4, #12
 80008b0:	193b      	adds	r3, r7, r4
 80008b2:	0018      	movs	r0, r3
 80008b4:	f005 fedc 	bl	8006670 <siprintf>
 80008b8:	0003      	movs	r3, r0
 80008ba:	643b      	str	r3, [r7, #64]	@ 0x40
                HAL_UART_Transmit(&huart2, (uint8_t*)buffer, len, HAL_MAX_DELAY);
 80008bc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80008be:	b29a      	uxth	r2, r3
 80008c0:	2301      	movs	r3, #1
 80008c2:	425b      	negs	r3, r3
 80008c4:	1939      	adds	r1, r7, r4
 80008c6:	4809      	ldr	r0, [pc, #36]	@ (80008ec <StartTask01+0x74>)
 80008c8:	f002 fda8 	bl	800341c <HAL_UART_Transmit>
 80008cc:	e001      	b.n	80008d2 <StartTask01+0x5a>
            }
        }
        else if (startFlag == 0)  // paused -> show final total
 80008ce:	4b03      	ldr	r3, [pc, #12]	@ (80008dc <StartTask01+0x64>)
 80008d0:	781b      	ldrb	r3, [r3, #0]
        {
            // optional: transmit once if needed
        }

        osDelay(1);
 80008d2:	2001      	movs	r0, #1
 80008d4:	f004 fecb 	bl	800566e <osDelay>
        if (startFlag == 2)  // running
 80008d8:	e7d2      	b.n	8000880 <StartTask01+0x8>
 80008da:	46c0      	nop			@ (mov r8, r8)
 80008dc:	20000224 	.word	0x20000224
 80008e0:	20000230 	.word	0x20000230
 80008e4:	20000234 	.word	0x20000234
 80008e8:	08007084 	.word	0x08007084
 80008ec:	20000300 	.word	0x20000300

080008f0 <StartTask02>:
    }
}

void StartTask02(void const * argument)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b084      	sub	sp, #16
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
	// Recepție UART activă permanent
	HAL_UART_Receive_IT(&huart2, &rxData, 1);
 80008f8:	4916      	ldr	r1, [pc, #88]	@ (8000954 <StartTask02+0x64>)
 80008fa:	4b17      	ldr	r3, [pc, #92]	@ (8000958 <StartTask02+0x68>)
 80008fc:	2201      	movs	r2, #1
 80008fe:	0018      	movs	r0, r3
 8000900:	f002 fe30 	bl	8003564 <HAL_UART_Receive_IT>

	for (;;)
	{
		uint32_t now = HAL_GetTick();
 8000904:	f000 fd34 	bl	8001370 <HAL_GetTick>
 8000908:	0003      	movs	r3, r0
 800090a:	60fb      	str	r3, [r7, #12]

		if(debugActive)
 800090c:	4b13      	ldr	r3, [pc, #76]	@ (800095c <StartTask02+0x6c>)
 800090e:	781b      	ldrb	r3, [r3, #0]
 8000910:	2b00      	cmp	r3, #0
 8000912:	d00e      	beq.n	8000932 <StartTask02+0x42>
		{
		    if(now - debugTimestamp < 2000)
 8000914:	4b12      	ldr	r3, [pc, #72]	@ (8000960 <StartTask02+0x70>)
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	68fa      	ldr	r2, [r7, #12]
 800091a:	1ad2      	subs	r2, r2, r3
 800091c:	23fa      	movs	r3, #250	@ 0xfa
 800091e:	00db      	lsls	r3, r3, #3
 8000920:	429a      	cmp	r2, r3
 8000922:	d202      	bcs.n	800092a <StartTask02+0x3a>
		    {
		        // Keep showing debug values
		        Display_Update();
 8000924:	f7ff fe8e 	bl	8000644 <Display_Update>
 8000928:	e7ec      	b.n	8000904 <StartTask02+0x14>
		    }
		    else
		    {
		        debugActive = 0; // Debug mode expired
 800092a:	4b0c      	ldr	r3, [pc, #48]	@ (800095c <StartTask02+0x6c>)
 800092c:	2200      	movs	r2, #0
 800092e:	701a      	strb	r2, [r3, #0]
 8000930:	e7e8      	b.n	8000904 <StartTask02+0x14>
		    }
		}
		else if(now - lastTimeDisplayed > 100)
 8000932:	4b0c      	ldr	r3, [pc, #48]	@ (8000964 <StartTask02+0x74>)
 8000934:	681b      	ldr	r3, [r3, #0]
 8000936:	68fa      	ldr	r2, [r7, #12]
 8000938:	1ad3      	subs	r3, r2, r3
 800093a:	2b64      	cmp	r3, #100	@ 0x64
 800093c:	d9e2      	bls.n	8000904 <StartTask02+0x14>
		{
		    UpdateDisplayFromTime();
 800093e:	f7ff fef1 	bl	8000724 <UpdateDisplayFromTime>
		    lastTimeDisplayed = HAL_GetTick();
 8000942:	f000 fd15 	bl	8001370 <HAL_GetTick>
 8000946:	0002      	movs	r2, r0
 8000948:	4b06      	ldr	r3, [pc, #24]	@ (8000964 <StartTask02+0x74>)
 800094a:	601a      	str	r2, [r3, #0]
		    Display_Update();
 800094c:	f7ff fe7a 	bl	8000644 <Display_Update>
	{
 8000950:	e7d8      	b.n	8000904 <StartTask02+0x14>
 8000952:	46c0      	nop			@ (mov r8, r8)
 8000954:	2000023c 	.word	0x2000023c
 8000958:	20000300 	.word	0x20000300
 800095c:	20000254 	.word	0x20000254
 8000960:	20000250 	.word	0x20000250
 8000964:	20000238 	.word	0x20000238

08000968 <HAL_UART_RxCpltCallback>:

}

// Callback UART
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000968:	b590      	push	{r4, r7, lr}
 800096a:	b087      	sub	sp, #28
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART2)
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	4a36      	ldr	r2, [pc, #216]	@ (8000a50 <HAL_UART_RxCpltCallback+0xe8>)
 8000976:	4293      	cmp	r3, r2
 8000978:	d166      	bne.n	8000a48 <HAL_UART_RxCpltCallback+0xe0>
	{
		// Debug: trimitem caracterul primit înapoi
		HAL_UART_Transmit(&huart2, &rxData, 1, HAL_MAX_DELAY);
 800097a:	2301      	movs	r3, #1
 800097c:	425b      	negs	r3, r3
 800097e:	4935      	ldr	r1, [pc, #212]	@ (8000a54 <HAL_UART_RxCpltCallback+0xec>)
 8000980:	4835      	ldr	r0, [pc, #212]	@ (8000a58 <HAL_UART_RxCpltCallback+0xf0>)
 8000982:	2201      	movs	r2, #1
 8000984:	f002 fd4a 	bl	800341c <HAL_UART_Transmit>

		if (rxData == 'S')  // Start
 8000988:	4b32      	ldr	r3, [pc, #200]	@ (8000a54 <HAL_UART_RxCpltCallback+0xec>)
 800098a:	781b      	ldrb	r3, [r3, #0]
 800098c:	2b53      	cmp	r3, #83	@ 0x53
 800098e:	d10a      	bne.n	80009a6 <HAL_UART_RxCpltCallback+0x3e>
		{
			HAL_GPIO_WritePin(GPIOA, LED_GREEN_Pin, GPIO_PIN_SET);
 8000990:	23a0      	movs	r3, #160	@ 0xa0
 8000992:	05db      	lsls	r3, r3, #23
 8000994:	2201      	movs	r2, #1
 8000996:	2120      	movs	r1, #32
 8000998:	0018      	movs	r0, r3
 800099a:	f001 f95d 	bl	8001c58 <HAL_GPIO_WritePin>
			startFlag = 1;
 800099e:	4b2f      	ldr	r3, [pc, #188]	@ (8000a5c <HAL_UART_RxCpltCallback+0xf4>)
 80009a0:	2201      	movs	r2, #1
 80009a2:	701a      	strb	r2, [r3, #0]
 80009a4:	e04a      	b.n	8000a3c <HAL_UART_RxCpltCallback+0xd4>
		}
		else if (rxData == 'T') // Stop
 80009a6:	4b2b      	ldr	r3, [pc, #172]	@ (8000a54 <HAL_UART_RxCpltCallback+0xec>)
 80009a8:	781b      	ldrb	r3, [r3, #0]
 80009aa:	2b54      	cmp	r3, #84	@ 0x54
 80009ac:	d10a      	bne.n	80009c4 <HAL_UART_RxCpltCallback+0x5c>
		{
			HAL_GPIO_WritePin(GPIOA, LED_GREEN_Pin, GPIO_PIN_RESET);
 80009ae:	23a0      	movs	r3, #160	@ 0xa0
 80009b0:	05db      	lsls	r3, r3, #23
 80009b2:	2200      	movs	r2, #0
 80009b4:	2120      	movs	r1, #32
 80009b6:	0018      	movs	r0, r3
 80009b8:	f001 f94e 	bl	8001c58 <HAL_GPIO_WritePin>
			startFlag = 3;
 80009bc:	4b27      	ldr	r3, [pc, #156]	@ (8000a5c <HAL_UART_RxCpltCallback+0xf4>)
 80009be:	2203      	movs	r2, #3
 80009c0:	701a      	strb	r2, [r3, #0]
 80009c2:	e03b      	b.n	8000a3c <HAL_UART_RxCpltCallback+0xd4>
		}
		else if (rxData == 'R') // Reset (opțional)
 80009c4:	4b23      	ldr	r3, [pc, #140]	@ (8000a54 <HAL_UART_RxCpltCallback+0xec>)
 80009c6:	781b      	ldrb	r3, [r3, #0]
 80009c8:	2b52      	cmp	r3, #82	@ 0x52
 80009ca:	d109      	bne.n	80009e0 <HAL_UART_RxCpltCallback+0x78>
		{
			startFlag = 4; // va reseta timerul
 80009cc:	4b23      	ldr	r3, [pc, #140]	@ (8000a5c <HAL_UART_RxCpltCallback+0xf4>)
 80009ce:	2204      	movs	r2, #4
 80009d0:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_TogglePin(GPIOA, LED_GREEN_Pin);
 80009d2:	23a0      	movs	r3, #160	@ 0xa0
 80009d4:	05db      	lsls	r3, r3, #23
 80009d6:	2120      	movs	r1, #32
 80009d8:	0018      	movs	r0, r3
 80009da:	f001 f95a 	bl	8001c92 <HAL_GPIO_TogglePin>
 80009de:	e02d      	b.n	8000a3c <HAL_UART_RxCpltCallback+0xd4>
		}
		else if (rxData == 'Z') // Debug: afișăm cifra 1
 80009e0:	4b1c      	ldr	r3, [pc, #112]	@ (8000a54 <HAL_UART_RxCpltCallback+0xec>)
 80009e2:	781b      	ldrb	r3, [r3, #0]
 80009e4:	2b5a      	cmp	r3, #90	@ 0x5a
 80009e6:	d129      	bne.n	8000a3c <HAL_UART_RxCpltCallback+0xd4>
		{
			startFlag = 0;
 80009e8:	4b1c      	ldr	r3, [pc, #112]	@ (8000a5c <HAL_UART_RxCpltCallback+0xf4>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	701a      	strb	r2, [r3, #0]
			digits[0] = 1;
 80009ee:	4b1c      	ldr	r3, [pc, #112]	@ (8000a60 <HAL_UART_RxCpltCallback+0xf8>)
 80009f0:	2201      	movs	r2, #1
 80009f2:	601a      	str	r2, [r3, #0]
			digits[1] = 2;
 80009f4:	4b1a      	ldr	r3, [pc, #104]	@ (8000a60 <HAL_UART_RxCpltCallback+0xf8>)
 80009f6:	2202      	movs	r2, #2
 80009f8:	605a      	str	r2, [r3, #4]
			digits[2] = 3;
 80009fa:	4b19      	ldr	r3, [pc, #100]	@ (8000a60 <HAL_UART_RxCpltCallback+0xf8>)
 80009fc:	2203      	movs	r2, #3
 80009fe:	609a      	str	r2, [r3, #8]
			digits[3] = 4;
 8000a00:	4b17      	ldr	r3, [pc, #92]	@ (8000a60 <HAL_UART_RxCpltCallback+0xf8>)
 8000a02:	2204      	movs	r2, #4
 8000a04:	60da      	str	r2, [r3, #12]

			debugActive = 1;                 // enable debug
 8000a06:	4b17      	ldr	r3, [pc, #92]	@ (8000a64 <HAL_UART_RxCpltCallback+0xfc>)
 8000a08:	2201      	movs	r2, #1
 8000a0a:	701a      	strb	r2, [r3, #0]
			debugTimestamp = HAL_GetTick();  // store the current time
 8000a0c:	f000 fcb0 	bl	8001370 <HAL_GetTick>
 8000a10:	0002      	movs	r2, r0
 8000a12:	4b15      	ldr	r3, [pc, #84]	@ (8000a68 <HAL_UART_RxCpltCallback+0x100>)
 8000a14:	601a      	str	r2, [r3, #0]

			char dbgMsg[] = "DEBUG: \r\n";
 8000a16:	240c      	movs	r4, #12
 8000a18:	193b      	adds	r3, r7, r4
 8000a1a:	4a14      	ldr	r2, [pc, #80]	@ (8000a6c <HAL_UART_RxCpltCallback+0x104>)
 8000a1c:	ca03      	ldmia	r2!, {r0, r1}
 8000a1e:	c303      	stmia	r3!, {r0, r1}
 8000a20:	8812      	ldrh	r2, [r2, #0]
 8000a22:	801a      	strh	r2, [r3, #0]
			HAL_UART_Transmit(&huart2, (uint8_t*)dbgMsg, strlen(dbgMsg), HAL_MAX_DELAY);
 8000a24:	193b      	adds	r3, r7, r4
 8000a26:	0018      	movs	r0, r3
 8000a28:	f7ff fb6e 	bl	8000108 <strlen>
 8000a2c:	0003      	movs	r3, r0
 8000a2e:	b29a      	uxth	r2, r3
 8000a30:	2301      	movs	r3, #1
 8000a32:	425b      	negs	r3, r3
 8000a34:	1939      	adds	r1, r7, r4
 8000a36:	4808      	ldr	r0, [pc, #32]	@ (8000a58 <HAL_UART_RxCpltCallback+0xf0>)
 8000a38:	f002 fcf0 	bl	800341c <HAL_UART_Transmit>
		}
		// Re-armăm recepția
		HAL_UART_Receive_IT(&huart2, &rxData, 1);
 8000a3c:	4905      	ldr	r1, [pc, #20]	@ (8000a54 <HAL_UART_RxCpltCallback+0xec>)
 8000a3e:	4b06      	ldr	r3, [pc, #24]	@ (8000a58 <HAL_UART_RxCpltCallback+0xf0>)
 8000a40:	2201      	movs	r2, #1
 8000a42:	0018      	movs	r0, r3
 8000a44:	f002 fd8e 	bl	8003564 <HAL_UART_Receive_IT>
	}
}
 8000a48:	46c0      	nop			@ (mov r8, r8)
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	b007      	add	sp, #28
 8000a4e:	bd90      	pop	{r4, r7, pc}
 8000a50:	40004400 	.word	0x40004400
 8000a54:	2000023c 	.word	0x2000023c
 8000a58:	20000300 	.word	0x20000300
 8000a5c:	20000224 	.word	0x20000224
 8000a60:	20000240 	.word	0x20000240
 8000a64:	20000254 	.word	0x20000254
 8000a68:	20000250 	.word	0x20000250
 8000a6c:	08007094 	.word	0x08007094

08000a70 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a70:	b5b0      	push	{r4, r5, r7, lr}
 8000a72:	b090      	sub	sp, #64	@ 0x40
 8000a74:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a76:	f000 fc49 	bl	800130c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a7a:	f000 f845 	bl	8000b08 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a7e:	f000 f94d 	bl	8000d1c <MX_GPIO_Init>
  MX_DMA_Init();
 8000a82:	f000 f92d 	bl	8000ce0 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000a86:	f000 f8dd 	bl	8000c44 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000a8a:	f000 f885 	bl	8000b98 <MX_TIM2_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000a8e:	252c      	movs	r5, #44	@ 0x2c
 8000a90:	197b      	adds	r3, r7, r5
 8000a92:	4a17      	ldr	r2, [pc, #92]	@ (8000af0 <main+0x80>)
 8000a94:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000a96:	c313      	stmia	r3!, {r0, r1, r4}
 8000a98:	ca03      	ldmia	r2!, {r0, r1}
 8000a9a:	c303      	stmia	r3!, {r0, r1}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000a9c:	197b      	adds	r3, r7, r5
 8000a9e:	2100      	movs	r1, #0
 8000aa0:	0018      	movs	r0, r3
 8000aa2:	f004 fdbc 	bl	800561e <osThreadCreate>
 8000aa6:	0002      	movs	r2, r0
 8000aa8:	4b12      	ldr	r3, [pc, #72]	@ (8000af4 <main+0x84>)
 8000aaa:	601a      	str	r2, [r3, #0]

  /* definition and creation of myTask02 */
  osThreadDef(myTask02, StartTask02, osPriorityBelowNormal, 0, 128);
 8000aac:	2518      	movs	r5, #24
 8000aae:	197b      	adds	r3, r7, r5
 8000ab0:	4a11      	ldr	r2, [pc, #68]	@ (8000af8 <main+0x88>)
 8000ab2:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000ab4:	c313      	stmia	r3!, {r0, r1, r4}
 8000ab6:	ca03      	ldmia	r2!, {r0, r1}
 8000ab8:	c303      	stmia	r3!, {r0, r1}
  myTask02Handle = osThreadCreate(osThread(myTask02), NULL);
 8000aba:	197b      	adds	r3, r7, r5
 8000abc:	2100      	movs	r1, #0
 8000abe:	0018      	movs	r0, r3
 8000ac0:	f004 fdad 	bl	800561e <osThreadCreate>
 8000ac4:	0002      	movs	r2, r0
 8000ac6:	4b0d      	ldr	r3, [pc, #52]	@ (8000afc <main+0x8c>)
 8000ac8:	601a      	str	r2, [r3, #0]

  /* definition and creation of myTask01 */
  osThreadDef(myTask01, StartTask01, osPriorityRealtime, 0, 128);
 8000aca:	1d3b      	adds	r3, r7, #4
 8000acc:	4a0c      	ldr	r2, [pc, #48]	@ (8000b00 <main+0x90>)
 8000ace:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000ad0:	c313      	stmia	r3!, {r0, r1, r4}
 8000ad2:	ca03      	ldmia	r2!, {r0, r1}
 8000ad4:	c303      	stmia	r3!, {r0, r1}
  myTask01Handle = osThreadCreate(osThread(myTask01), NULL);
 8000ad6:	1d3b      	adds	r3, r7, #4
 8000ad8:	2100      	movs	r1, #0
 8000ada:	0018      	movs	r0, r3
 8000adc:	f004 fd9f 	bl	800561e <osThreadCreate>
 8000ae0:	0002      	movs	r2, r0
 8000ae2:	4b08      	ldr	r3, [pc, #32]	@ (8000b04 <main+0x94>)
 8000ae4:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000ae6:	f004 fd92 	bl	800560e <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000aea:	46c0      	nop			@ (mov r8, r8)
 8000aec:	e7fd      	b.n	8000aea <main+0x7a>
 8000aee:	46c0      	nop			@ (mov r8, r8)
 8000af0:	080070ac 	.word	0x080070ac
 8000af4:	20000394 	.word	0x20000394
 8000af8:	080070cc 	.word	0x080070cc
 8000afc:	20000398 	.word	0x20000398
 8000b00:	080070ec 	.word	0x080070ec
 8000b04:	2000039c 	.word	0x2000039c

08000b08 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b08:	b590      	push	{r4, r7, lr}
 8000b0a:	b093      	sub	sp, #76	@ 0x4c
 8000b0c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b0e:	2410      	movs	r4, #16
 8000b10:	193b      	adds	r3, r7, r4
 8000b12:	0018      	movs	r0, r3
 8000b14:	2338      	movs	r3, #56	@ 0x38
 8000b16:	001a      	movs	r2, r3
 8000b18:	2100      	movs	r1, #0
 8000b1a:	f005 fdc9 	bl	80066b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b1e:	003b      	movs	r3, r7
 8000b20:	0018      	movs	r0, r3
 8000b22:	2310      	movs	r3, #16
 8000b24:	001a      	movs	r2, r3
 8000b26:	2100      	movs	r1, #0
 8000b28:	f005 fdc2 	bl	80066b0 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b2c:	2380      	movs	r3, #128	@ 0x80
 8000b2e:	009b      	lsls	r3, r3, #2
 8000b30:	0018      	movs	r0, r3
 8000b32:	f001 f8c9 	bl	8001cc8 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b36:	193b      	adds	r3, r7, r4
 8000b38:	2202      	movs	r2, #2
 8000b3a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b3c:	193b      	adds	r3, r7, r4
 8000b3e:	2280      	movs	r2, #128	@ 0x80
 8000b40:	0052      	lsls	r2, r2, #1
 8000b42:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000b44:	193b      	adds	r3, r7, r4
 8000b46:	2200      	movs	r2, #0
 8000b48:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b4a:	193b      	adds	r3, r7, r4
 8000b4c:	2240      	movs	r2, #64	@ 0x40
 8000b4e:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000b50:	193b      	adds	r3, r7, r4
 8000b52:	2200      	movs	r2, #0
 8000b54:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b56:	193b      	adds	r3, r7, r4
 8000b58:	0018      	movs	r0, r3
 8000b5a:	f001 f901 	bl	8001d60 <HAL_RCC_OscConfig>
 8000b5e:	1e03      	subs	r3, r0, #0
 8000b60:	d001      	beq.n	8000b66 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8000b62:	f000 f9d7 	bl	8000f14 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b66:	003b      	movs	r3, r7
 8000b68:	2207      	movs	r2, #7
 8000b6a:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000b6c:	003b      	movs	r3, r7
 8000b6e:	2200      	movs	r2, #0
 8000b70:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b72:	003b      	movs	r3, r7
 8000b74:	2200      	movs	r2, #0
 8000b76:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b78:	003b      	movs	r3, r7
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000b7e:	003b      	movs	r3, r7
 8000b80:	2100      	movs	r1, #0
 8000b82:	0018      	movs	r0, r3
 8000b84:	f001 fc06 	bl	8002394 <HAL_RCC_ClockConfig>
 8000b88:	1e03      	subs	r3, r0, #0
 8000b8a:	d001      	beq.n	8000b90 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8000b8c:	f000 f9c2 	bl	8000f14 <Error_Handler>
  }
}
 8000b90:	46c0      	nop			@ (mov r8, r8)
 8000b92:	46bd      	mov	sp, r7
 8000b94:	b013      	add	sp, #76	@ 0x4c
 8000b96:	bd90      	pop	{r4, r7, pc}

08000b98 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b088      	sub	sp, #32
 8000b9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b9e:	2310      	movs	r3, #16
 8000ba0:	18fb      	adds	r3, r7, r3
 8000ba2:	0018      	movs	r0, r3
 8000ba4:	2310      	movs	r3, #16
 8000ba6:	001a      	movs	r2, r3
 8000ba8:	2100      	movs	r1, #0
 8000baa:	f005 fd81 	bl	80066b0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bae:	1d3b      	adds	r3, r7, #4
 8000bb0:	0018      	movs	r0, r3
 8000bb2:	230c      	movs	r3, #12
 8000bb4:	001a      	movs	r2, r3
 8000bb6:	2100      	movs	r1, #0
 8000bb8:	f005 fd7a 	bl	80066b0 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000bbc:	4b1e      	ldr	r3, [pc, #120]	@ (8000c38 <MX_TIM2_Init+0xa0>)
 8000bbe:	2280      	movs	r2, #128	@ 0x80
 8000bc0:	05d2      	lsls	r2, r2, #23
 8000bc2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 16000-1;
 8000bc4:	4b1c      	ldr	r3, [pc, #112]	@ (8000c38 <MX_TIM2_Init+0xa0>)
 8000bc6:	4a1d      	ldr	r2, [pc, #116]	@ (8000c3c <MX_TIM2_Init+0xa4>)
 8000bc8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bca:	4b1b      	ldr	r3, [pc, #108]	@ (8000c38 <MX_TIM2_Init+0xa0>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8000bd0:	4b19      	ldr	r3, [pc, #100]	@ (8000c38 <MX_TIM2_Init+0xa0>)
 8000bd2:	4a1b      	ldr	r2, [pc, #108]	@ (8000c40 <MX_TIM2_Init+0xa8>)
 8000bd4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bd6:	4b18      	ldr	r3, [pc, #96]	@ (8000c38 <MX_TIM2_Init+0xa0>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bdc:	4b16      	ldr	r3, [pc, #88]	@ (8000c38 <MX_TIM2_Init+0xa0>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000be2:	4b15      	ldr	r3, [pc, #84]	@ (8000c38 <MX_TIM2_Init+0xa0>)
 8000be4:	0018      	movs	r0, r3
 8000be6:	f001 ff61 	bl	8002aac <HAL_TIM_Base_Init>
 8000bea:	1e03      	subs	r3, r0, #0
 8000bec:	d001      	beq.n	8000bf2 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8000bee:	f000 f991 	bl	8000f14 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000bf2:	2110      	movs	r1, #16
 8000bf4:	187b      	adds	r3, r7, r1
 8000bf6:	2280      	movs	r2, #128	@ 0x80
 8000bf8:	0152      	lsls	r2, r2, #5
 8000bfa:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000bfc:	187a      	adds	r2, r7, r1
 8000bfe:	4b0e      	ldr	r3, [pc, #56]	@ (8000c38 <MX_TIM2_Init+0xa0>)
 8000c00:	0011      	movs	r1, r2
 8000c02:	0018      	movs	r0, r3
 8000c04:	f002 f90e 	bl	8002e24 <HAL_TIM_ConfigClockSource>
 8000c08:	1e03      	subs	r3, r0, #0
 8000c0a:	d001      	beq.n	8000c10 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8000c0c:	f000 f982 	bl	8000f14 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c10:	1d3b      	adds	r3, r7, #4
 8000c12:	2200      	movs	r2, #0
 8000c14:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c16:	1d3b      	adds	r3, r7, #4
 8000c18:	2200      	movs	r2, #0
 8000c1a:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000c1c:	1d3a      	adds	r2, r7, #4
 8000c1e:	4b06      	ldr	r3, [pc, #24]	@ (8000c38 <MX_TIM2_Init+0xa0>)
 8000c20:	0011      	movs	r1, r2
 8000c22:	0018      	movs	r0, r3
 8000c24:	f002 fb1e 	bl	8003264 <HAL_TIMEx_MasterConfigSynchronization>
 8000c28:	1e03      	subs	r3, r0, #0
 8000c2a:	d001      	beq.n	8000c30 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8000c2c:	f000 f972 	bl	8000f14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000c30:	46c0      	nop			@ (mov r8, r8)
 8000c32:	46bd      	mov	sp, r7
 8000c34:	b008      	add	sp, #32
 8000c36:	bd80      	pop	{r7, pc}
 8000c38:	20000258 	.word	0x20000258
 8000c3c:	00003e7f 	.word	0x00003e7f
 8000c40:	000003e7 	.word	0x000003e7

08000c44 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c48:	4b23      	ldr	r3, [pc, #140]	@ (8000cd8 <MX_USART2_UART_Init+0x94>)
 8000c4a:	4a24      	ldr	r2, [pc, #144]	@ (8000cdc <MX_USART2_UART_Init+0x98>)
 8000c4c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000c4e:	4b22      	ldr	r3, [pc, #136]	@ (8000cd8 <MX_USART2_UART_Init+0x94>)
 8000c50:	22e1      	movs	r2, #225	@ 0xe1
 8000c52:	0252      	lsls	r2, r2, #9
 8000c54:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c56:	4b20      	ldr	r3, [pc, #128]	@ (8000cd8 <MX_USART2_UART_Init+0x94>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c5c:	4b1e      	ldr	r3, [pc, #120]	@ (8000cd8 <MX_USART2_UART_Init+0x94>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c62:	4b1d      	ldr	r3, [pc, #116]	@ (8000cd8 <MX_USART2_UART_Init+0x94>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c68:	4b1b      	ldr	r3, [pc, #108]	@ (8000cd8 <MX_USART2_UART_Init+0x94>)
 8000c6a:	220c      	movs	r2, #12
 8000c6c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c6e:	4b1a      	ldr	r3, [pc, #104]	@ (8000cd8 <MX_USART2_UART_Init+0x94>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c74:	4b18      	ldr	r3, [pc, #96]	@ (8000cd8 <MX_USART2_UART_Init+0x94>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c7a:	4b17      	ldr	r3, [pc, #92]	@ (8000cd8 <MX_USART2_UART_Init+0x94>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000c80:	4b15      	ldr	r3, [pc, #84]	@ (8000cd8 <MX_USART2_UART_Init+0x94>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c86:	4b14      	ldr	r3, [pc, #80]	@ (8000cd8 <MX_USART2_UART_Init+0x94>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c8c:	4b12      	ldr	r3, [pc, #72]	@ (8000cd8 <MX_USART2_UART_Init+0x94>)
 8000c8e:	0018      	movs	r0, r3
 8000c90:	f002 fb6e 	bl	8003370 <HAL_UART_Init>
 8000c94:	1e03      	subs	r3, r0, #0
 8000c96:	d001      	beq.n	8000c9c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000c98:	f000 f93c 	bl	8000f14 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c9c:	4b0e      	ldr	r3, [pc, #56]	@ (8000cd8 <MX_USART2_UART_Init+0x94>)
 8000c9e:	2100      	movs	r1, #0
 8000ca0:	0018      	movs	r0, r3
 8000ca2:	f004 fbbb 	bl	800541c <HAL_UARTEx_SetTxFifoThreshold>
 8000ca6:	1e03      	subs	r3, r0, #0
 8000ca8:	d001      	beq.n	8000cae <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000caa:	f000 f933 	bl	8000f14 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000cae:	4b0a      	ldr	r3, [pc, #40]	@ (8000cd8 <MX_USART2_UART_Init+0x94>)
 8000cb0:	2100      	movs	r1, #0
 8000cb2:	0018      	movs	r0, r3
 8000cb4:	f004 fbf2 	bl	800549c <HAL_UARTEx_SetRxFifoThreshold>
 8000cb8:	1e03      	subs	r3, r0, #0
 8000cba:	d001      	beq.n	8000cc0 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000cbc:	f000 f92a 	bl	8000f14 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000cc0:	4b05      	ldr	r3, [pc, #20]	@ (8000cd8 <MX_USART2_UART_Init+0x94>)
 8000cc2:	0018      	movs	r0, r3
 8000cc4:	f004 fb70 	bl	80053a8 <HAL_UARTEx_DisableFifoMode>
 8000cc8:	1e03      	subs	r3, r0, #0
 8000cca:	d001      	beq.n	8000cd0 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000ccc:	f000 f922 	bl	8000f14 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000cd0:	46c0      	nop			@ (mov r8, r8)
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	46c0      	nop			@ (mov r8, r8)
 8000cd8:	20000300 	.word	0x20000300
 8000cdc:	40004400 	.word	0x40004400

08000ce0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b082      	sub	sp, #8
 8000ce4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000ce6:	4b0c      	ldr	r3, [pc, #48]	@ (8000d18 <MX_DMA_Init+0x38>)
 8000ce8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000cea:	4b0b      	ldr	r3, [pc, #44]	@ (8000d18 <MX_DMA_Init+0x38>)
 8000cec:	2101      	movs	r1, #1
 8000cee:	430a      	orrs	r2, r1
 8000cf0:	639a      	str	r2, [r3, #56]	@ 0x38
 8000cf2:	4b09      	ldr	r3, [pc, #36]	@ (8000d18 <MX_DMA_Init+0x38>)
 8000cf4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000cf6:	2201      	movs	r2, #1
 8000cf8:	4013      	ands	r3, r2
 8000cfa:	607b      	str	r3, [r7, #4]
 8000cfc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 3, 0);
 8000cfe:	2200      	movs	r2, #0
 8000d00:	2103      	movs	r1, #3
 8000d02:	2009      	movs	r0, #9
 8000d04:	f000 fbc6 	bl	8001494 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000d08:	2009      	movs	r0, #9
 8000d0a:	f000 fbd8 	bl	80014be <HAL_NVIC_EnableIRQ>

}
 8000d0e:	46c0      	nop			@ (mov r8, r8)
 8000d10:	46bd      	mov	sp, r7
 8000d12:	b002      	add	sp, #8
 8000d14:	bd80      	pop	{r7, pc}
 8000d16:	46c0      	nop			@ (mov r8, r8)
 8000d18:	40021000 	.word	0x40021000

08000d1c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d1c:	b590      	push	{r4, r7, lr}
 8000d1e:	b08b      	sub	sp, #44	@ 0x2c
 8000d20:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d22:	2414      	movs	r4, #20
 8000d24:	193b      	adds	r3, r7, r4
 8000d26:	0018      	movs	r0, r3
 8000d28:	2314      	movs	r3, #20
 8000d2a:	001a      	movs	r2, r3
 8000d2c:	2100      	movs	r1, #0
 8000d2e:	f005 fcbf 	bl	80066b0 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d32:	4b67      	ldr	r3, [pc, #412]	@ (8000ed0 <MX_GPIO_Init+0x1b4>)
 8000d34:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000d36:	4b66      	ldr	r3, [pc, #408]	@ (8000ed0 <MX_GPIO_Init+0x1b4>)
 8000d38:	2104      	movs	r1, #4
 8000d3a:	430a      	orrs	r2, r1
 8000d3c:	635a      	str	r2, [r3, #52]	@ 0x34
 8000d3e:	4b64      	ldr	r3, [pc, #400]	@ (8000ed0 <MX_GPIO_Init+0x1b4>)
 8000d40:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000d42:	2204      	movs	r2, #4
 8000d44:	4013      	ands	r3, r2
 8000d46:	613b      	str	r3, [r7, #16]
 8000d48:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000d4a:	4b61      	ldr	r3, [pc, #388]	@ (8000ed0 <MX_GPIO_Init+0x1b4>)
 8000d4c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000d4e:	4b60      	ldr	r3, [pc, #384]	@ (8000ed0 <MX_GPIO_Init+0x1b4>)
 8000d50:	2120      	movs	r1, #32
 8000d52:	430a      	orrs	r2, r1
 8000d54:	635a      	str	r2, [r3, #52]	@ 0x34
 8000d56:	4b5e      	ldr	r3, [pc, #376]	@ (8000ed0 <MX_GPIO_Init+0x1b4>)
 8000d58:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000d5a:	2220      	movs	r2, #32
 8000d5c:	4013      	ands	r3, r2
 8000d5e:	60fb      	str	r3, [r7, #12]
 8000d60:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d62:	4b5b      	ldr	r3, [pc, #364]	@ (8000ed0 <MX_GPIO_Init+0x1b4>)
 8000d64:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000d66:	4b5a      	ldr	r3, [pc, #360]	@ (8000ed0 <MX_GPIO_Init+0x1b4>)
 8000d68:	2101      	movs	r1, #1
 8000d6a:	430a      	orrs	r2, r1
 8000d6c:	635a      	str	r2, [r3, #52]	@ 0x34
 8000d6e:	4b58      	ldr	r3, [pc, #352]	@ (8000ed0 <MX_GPIO_Init+0x1b4>)
 8000d70:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000d72:	2201      	movs	r2, #1
 8000d74:	4013      	ands	r3, r2
 8000d76:	60bb      	str	r3, [r7, #8]
 8000d78:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d7a:	4b55      	ldr	r3, [pc, #340]	@ (8000ed0 <MX_GPIO_Init+0x1b4>)
 8000d7c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000d7e:	4b54      	ldr	r3, [pc, #336]	@ (8000ed0 <MX_GPIO_Init+0x1b4>)
 8000d80:	2102      	movs	r1, #2
 8000d82:	430a      	orrs	r2, r1
 8000d84:	635a      	str	r2, [r3, #52]	@ 0x34
 8000d86:	4b52      	ldr	r3, [pc, #328]	@ (8000ed0 <MX_GPIO_Init+0x1b4>)
 8000d88:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000d8a:	2202      	movs	r2, #2
 8000d8c:	4013      	ands	r3, r2
 8000d8e:	607b      	str	r3, [r7, #4]
 8000d90:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d92:	4b4f      	ldr	r3, [pc, #316]	@ (8000ed0 <MX_GPIO_Init+0x1b4>)
 8000d94:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000d96:	4b4e      	ldr	r3, [pc, #312]	@ (8000ed0 <MX_GPIO_Init+0x1b4>)
 8000d98:	2108      	movs	r1, #8
 8000d9a:	430a      	orrs	r2, r1
 8000d9c:	635a      	str	r2, [r3, #52]	@ 0x34
 8000d9e:	4b4c      	ldr	r3, [pc, #304]	@ (8000ed0 <MX_GPIO_Init+0x1b4>)
 8000da0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000da2:	2208      	movs	r2, #8
 8000da4:	4013      	ands	r3, r2
 8000da6:	603b      	str	r3, [r7, #0]
 8000da8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Dig2_GPIO_Port, Dig2_Pin, GPIO_PIN_RESET);
 8000daa:	4b4a      	ldr	r3, [pc, #296]	@ (8000ed4 <MX_GPIO_Init+0x1b8>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	2102      	movs	r1, #2
 8000db0:	0018      	movs	r0, r3
 8000db2:	f000 ff51 	bl	8001c58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Dig3_Pin|Dig4_Pin, GPIO_PIN_RESET);
 8000db6:	4b48      	ldr	r3, [pc, #288]	@ (8000ed8 <MX_GPIO_Init+0x1bc>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	210c      	movs	r1, #12
 8000dbc:	0018      	movs	r0, r3
 8000dbe:	f000 ff4b 	bl	8001c58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, B_Pin|C_Pin|D_Pin|LED_GREEN_Pin
 8000dc2:	4946      	ldr	r1, [pc, #280]	@ (8000edc <MX_GPIO_Init+0x1c0>)
 8000dc4:	23a0      	movs	r3, #160	@ 0xa0
 8000dc6:	05db      	lsls	r3, r3, #23
 8000dc8:	2200      	movs	r2, #0
 8000dca:	0018      	movs	r0, r3
 8000dcc:	f000 ff44 	bl	8001c58 <HAL_GPIO_WritePin>
                          |DP_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, E_Pin|F_Pin|G_Pin|Dig1_Pin, GPIO_PIN_RESET);
 8000dd0:	4943      	ldr	r1, [pc, #268]	@ (8000ee0 <MX_GPIO_Init+0x1c4>)
 8000dd2:	4b44      	ldr	r3, [pc, #272]	@ (8000ee4 <MX_GPIO_Init+0x1c8>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	0018      	movs	r0, r3
 8000dd8:	f000 ff3e 	bl	8001c58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(A_GPIO_Port, A_Pin, GPIO_PIN_RESET);
 8000ddc:	4b42      	ldr	r3, [pc, #264]	@ (8000ee8 <MX_GPIO_Init+0x1cc>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	2120      	movs	r1, #32
 8000de2:	0018      	movs	r0, r3
 8000de4:	f000 ff38 	bl	8001c58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Dig2_Pin */
  GPIO_InitStruct.Pin = Dig2_Pin;
 8000de8:	193b      	adds	r3, r7, r4
 8000dea:	2202      	movs	r2, #2
 8000dec:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dee:	193b      	adds	r3, r7, r4
 8000df0:	2201      	movs	r2, #1
 8000df2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df4:	193b      	adds	r3, r7, r4
 8000df6:	2200      	movs	r2, #0
 8000df8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dfa:	193b      	adds	r3, r7, r4
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(Dig2_GPIO_Port, &GPIO_InitStruct);
 8000e00:	193b      	adds	r3, r7, r4
 8000e02:	4a34      	ldr	r2, [pc, #208]	@ (8000ed4 <MX_GPIO_Init+0x1b8>)
 8000e04:	0019      	movs	r1, r3
 8000e06:	0010      	movs	r0, r2
 8000e08:	f000 fdc2 	bl	8001990 <HAL_GPIO_Init>

  /*Configure GPIO pins : Dig3_Pin Dig4_Pin */
  GPIO_InitStruct.Pin = Dig3_Pin|Dig4_Pin;
 8000e0c:	193b      	adds	r3, r7, r4
 8000e0e:	220c      	movs	r2, #12
 8000e10:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e12:	193b      	adds	r3, r7, r4
 8000e14:	2201      	movs	r2, #1
 8000e16:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e18:	193b      	adds	r3, r7, r4
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e1e:	193b      	adds	r3, r7, r4
 8000e20:	2200      	movs	r2, #0
 8000e22:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e24:	193b      	adds	r3, r7, r4
 8000e26:	4a2c      	ldr	r2, [pc, #176]	@ (8000ed8 <MX_GPIO_Init+0x1bc>)
 8000e28:	0019      	movs	r1, r3
 8000e2a:	0010      	movs	r0, r2
 8000e2c:	f000 fdb0 	bl	8001990 <HAL_GPIO_Init>

  /*Configure GPIO pins : B_Pin C_Pin D_Pin DP_Pin */
  GPIO_InitStruct.Pin = B_Pin|C_Pin|D_Pin|DP_Pin;
 8000e30:	193b      	adds	r3, r7, r4
 8000e32:	4a2e      	ldr	r2, [pc, #184]	@ (8000eec <MX_GPIO_Init+0x1d0>)
 8000e34:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e36:	193b      	adds	r3, r7, r4
 8000e38:	2201      	movs	r2, #1
 8000e3a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3c:	193b      	adds	r3, r7, r4
 8000e3e:	2200      	movs	r2, #0
 8000e40:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e42:	193b      	adds	r3, r7, r4
 8000e44:	2200      	movs	r2, #0
 8000e46:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e48:	193a      	adds	r2, r7, r4
 8000e4a:	23a0      	movs	r3, #160	@ 0xa0
 8000e4c:	05db      	lsls	r3, r3, #23
 8000e4e:	0011      	movs	r1, r2
 8000e50:	0018      	movs	r0, r3
 8000e52:	f000 fd9d 	bl	8001990 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 8000e56:	193b      	adds	r3, r7, r4
 8000e58:	2220      	movs	r2, #32
 8000e5a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e5c:	193b      	adds	r3, r7, r4
 8000e5e:	2201      	movs	r2, #1
 8000e60:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e62:	193b      	adds	r3, r7, r4
 8000e64:	2200      	movs	r2, #0
 8000e66:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e68:	193b      	adds	r3, r7, r4
 8000e6a:	2202      	movs	r2, #2
 8000e6c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 8000e6e:	193a      	adds	r2, r7, r4
 8000e70:	23a0      	movs	r3, #160	@ 0xa0
 8000e72:	05db      	lsls	r3, r3, #23
 8000e74:	0011      	movs	r1, r2
 8000e76:	0018      	movs	r0, r3
 8000e78:	f000 fd8a 	bl	8001990 <HAL_GPIO_Init>

  /*Configure GPIO pins : E_Pin F_Pin G_Pin Dig1_Pin */
  GPIO_InitStruct.Pin = E_Pin|F_Pin|G_Pin|Dig1_Pin;
 8000e7c:	193b      	adds	r3, r7, r4
 8000e7e:	4a18      	ldr	r2, [pc, #96]	@ (8000ee0 <MX_GPIO_Init+0x1c4>)
 8000e80:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e82:	193b      	adds	r3, r7, r4
 8000e84:	2201      	movs	r2, #1
 8000e86:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e88:	193b      	adds	r3, r7, r4
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e8e:	193b      	adds	r3, r7, r4
 8000e90:	2200      	movs	r2, #0
 8000e92:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e94:	193b      	adds	r3, r7, r4
 8000e96:	4a13      	ldr	r2, [pc, #76]	@ (8000ee4 <MX_GPIO_Init+0x1c8>)
 8000e98:	0019      	movs	r1, r3
 8000e9a:	0010      	movs	r0, r2
 8000e9c:	f000 fd78 	bl	8001990 <HAL_GPIO_Init>

  /*Configure GPIO pin : A_Pin */
  GPIO_InitStruct.Pin = A_Pin;
 8000ea0:	0021      	movs	r1, r4
 8000ea2:	187b      	adds	r3, r7, r1
 8000ea4:	2220      	movs	r2, #32
 8000ea6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ea8:	187b      	adds	r3, r7, r1
 8000eaa:	2201      	movs	r2, #1
 8000eac:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eae:	187b      	adds	r3, r7, r1
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eb4:	187b      	adds	r3, r7, r1
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(A_GPIO_Port, &GPIO_InitStruct);
 8000eba:	187b      	adds	r3, r7, r1
 8000ebc:	4a0a      	ldr	r2, [pc, #40]	@ (8000ee8 <MX_GPIO_Init+0x1cc>)
 8000ebe:	0019      	movs	r1, r3
 8000ec0:	0010      	movs	r0, r2
 8000ec2:	f000 fd65 	bl	8001990 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000ec6:	46c0      	nop			@ (mov r8, r8)
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	b00b      	add	sp, #44	@ 0x2c
 8000ecc:	bd90      	pop	{r4, r7, pc}
 8000ece:	46c0      	nop			@ (mov r8, r8)
 8000ed0:	40021000 	.word	0x40021000
 8000ed4:	50001400 	.word	0x50001400
 8000ed8:	50000800 	.word	0x50000800
 8000edc:	00008033 	.word	0x00008033
 8000ee0:	00001882 	.word	0x00001882
 8000ee4:	50000400 	.word	0x50000400
 8000ee8:	50000c00 	.word	0x50000c00
 8000eec:	00008013 	.word	0x00008013

08000ef0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b082      	sub	sp, #8
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	4a04      	ldr	r2, [pc, #16]	@ (8000f10 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000efe:	4293      	cmp	r3, r2
 8000f00:	d101      	bne.n	8000f06 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000f02:	f000 fa23 	bl	800134c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000f06:	46c0      	nop			@ (mov r8, r8)
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	b002      	add	sp, #8
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	46c0      	nop			@ (mov r8, r8)
 8000f10:	40012c00 	.word	0x40012c00

08000f14 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f18:	b672      	cpsid	i
}
 8000f1a:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f1c:	46c0      	nop			@ (mov r8, r8)
 8000f1e:	e7fd      	b.n	8000f1c <Error_Handler+0x8>

08000f20 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b082      	sub	sp, #8
 8000f24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f26:	4b12      	ldr	r3, [pc, #72]	@ (8000f70 <HAL_MspInit+0x50>)
 8000f28:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000f2a:	4b11      	ldr	r3, [pc, #68]	@ (8000f70 <HAL_MspInit+0x50>)
 8000f2c:	2101      	movs	r1, #1
 8000f2e:	430a      	orrs	r2, r1
 8000f30:	641a      	str	r2, [r3, #64]	@ 0x40
 8000f32:	4b0f      	ldr	r3, [pc, #60]	@ (8000f70 <HAL_MspInit+0x50>)
 8000f34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f36:	2201      	movs	r2, #1
 8000f38:	4013      	ands	r3, r2
 8000f3a:	607b      	str	r3, [r7, #4]
 8000f3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f3e:	4b0c      	ldr	r3, [pc, #48]	@ (8000f70 <HAL_MspInit+0x50>)
 8000f40:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000f42:	4b0b      	ldr	r3, [pc, #44]	@ (8000f70 <HAL_MspInit+0x50>)
 8000f44:	2180      	movs	r1, #128	@ 0x80
 8000f46:	0549      	lsls	r1, r1, #21
 8000f48:	430a      	orrs	r2, r1
 8000f4a:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000f4c:	4b08      	ldr	r3, [pc, #32]	@ (8000f70 <HAL_MspInit+0x50>)
 8000f4e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000f50:	2380      	movs	r3, #128	@ 0x80
 8000f52:	055b      	lsls	r3, r3, #21
 8000f54:	4013      	ands	r3, r2
 8000f56:	603b      	str	r3, [r7, #0]
 8000f58:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 8000f5a:	2302      	movs	r3, #2
 8000f5c:	425b      	negs	r3, r3
 8000f5e:	2200      	movs	r2, #0
 8000f60:	2103      	movs	r1, #3
 8000f62:	0018      	movs	r0, r3
 8000f64:	f000 fa96 	bl	8001494 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f68:	46c0      	nop			@ (mov r8, r8)
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	b002      	add	sp, #8
 8000f6e:	bd80      	pop	{r7, pc}
 8000f70:	40021000 	.word	0x40021000

08000f74 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b084      	sub	sp, #16
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681a      	ldr	r2, [r3, #0]
 8000f80:	2380      	movs	r3, #128	@ 0x80
 8000f82:	05db      	lsls	r3, r3, #23
 8000f84:	429a      	cmp	r2, r3
 8000f86:	d136      	bne.n	8000ff6 <HAL_TIM_Base_MspInit+0x82>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000f88:	4b1d      	ldr	r3, [pc, #116]	@ (8001000 <HAL_TIM_Base_MspInit+0x8c>)
 8000f8a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000f8c:	4b1c      	ldr	r3, [pc, #112]	@ (8001000 <HAL_TIM_Base_MspInit+0x8c>)
 8000f8e:	2101      	movs	r1, #1
 8000f90:	430a      	orrs	r2, r1
 8000f92:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000f94:	4b1a      	ldr	r3, [pc, #104]	@ (8001000 <HAL_TIM_Base_MspInit+0x8c>)
 8000f96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000f98:	2201      	movs	r2, #1
 8000f9a:	4013      	ands	r3, r2
 8000f9c:	60fb      	str	r3, [r7, #12]
 8000f9e:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 DMA Init */
    /* TIM2_UP Init */
    hdma_tim2_up.Instance = DMA1_Channel1;
 8000fa0:	4b18      	ldr	r3, [pc, #96]	@ (8001004 <HAL_TIM_Base_MspInit+0x90>)
 8000fa2:	4a19      	ldr	r2, [pc, #100]	@ (8001008 <HAL_TIM_Base_MspInit+0x94>)
 8000fa4:	601a      	str	r2, [r3, #0]
    hdma_tim2_up.Init.Request = DMA_REQUEST_TIM2_UP;
 8000fa6:	4b17      	ldr	r3, [pc, #92]	@ (8001004 <HAL_TIM_Base_MspInit+0x90>)
 8000fa8:	221f      	movs	r2, #31
 8000faa:	605a      	str	r2, [r3, #4]
    hdma_tim2_up.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000fac:	4b15      	ldr	r3, [pc, #84]	@ (8001004 <HAL_TIM_Base_MspInit+0x90>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	609a      	str	r2, [r3, #8]
    hdma_tim2_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8000fb2:	4b14      	ldr	r3, [pc, #80]	@ (8001004 <HAL_TIM_Base_MspInit+0x90>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	60da      	str	r2, [r3, #12]
    hdma_tim2_up.Init.MemInc = DMA_MINC_ENABLE;
 8000fb8:	4b12      	ldr	r3, [pc, #72]	@ (8001004 <HAL_TIM_Base_MspInit+0x90>)
 8000fba:	2280      	movs	r2, #128	@ 0x80
 8000fbc:	611a      	str	r2, [r3, #16]
    hdma_tim2_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000fbe:	4b11      	ldr	r3, [pc, #68]	@ (8001004 <HAL_TIM_Base_MspInit+0x90>)
 8000fc0:	2280      	movs	r2, #128	@ 0x80
 8000fc2:	0092      	lsls	r2, r2, #2
 8000fc4:	615a      	str	r2, [r3, #20]
    hdma_tim2_up.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000fc6:	4b0f      	ldr	r3, [pc, #60]	@ (8001004 <HAL_TIM_Base_MspInit+0x90>)
 8000fc8:	2280      	movs	r2, #128	@ 0x80
 8000fca:	0112      	lsls	r2, r2, #4
 8000fcc:	619a      	str	r2, [r3, #24]
    hdma_tim2_up.Init.Mode = DMA_NORMAL;
 8000fce:	4b0d      	ldr	r3, [pc, #52]	@ (8001004 <HAL_TIM_Base_MspInit+0x90>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	61da      	str	r2, [r3, #28]
    hdma_tim2_up.Init.Priority = DMA_PRIORITY_LOW;
 8000fd4:	4b0b      	ldr	r3, [pc, #44]	@ (8001004 <HAL_TIM_Base_MspInit+0x90>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim2_up) != HAL_OK)
 8000fda:	4b0a      	ldr	r3, [pc, #40]	@ (8001004 <HAL_TIM_Base_MspInit+0x90>)
 8000fdc:	0018      	movs	r0, r3
 8000fde:	f000 fa7f 	bl	80014e0 <HAL_DMA_Init>
 8000fe2:	1e03      	subs	r3, r0, #0
 8000fe4:	d001      	beq.n	8000fea <HAL_TIM_Base_MspInit+0x76>
    {
      Error_Handler();
 8000fe6:	f7ff ff95 	bl	8000f14 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim2_up);
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	4a05      	ldr	r2, [pc, #20]	@ (8001004 <HAL_TIM_Base_MspInit+0x90>)
 8000fee:	621a      	str	r2, [r3, #32]
 8000ff0:	4b04      	ldr	r3, [pc, #16]	@ (8001004 <HAL_TIM_Base_MspInit+0x90>)
 8000ff2:	687a      	ldr	r2, [r7, #4]
 8000ff4:	629a      	str	r2, [r3, #40]	@ 0x28

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8000ff6:	46c0      	nop			@ (mov r8, r8)
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	b004      	add	sp, #16
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	46c0      	nop			@ (mov r8, r8)
 8001000:	40021000 	.word	0x40021000
 8001004:	200002a4 	.word	0x200002a4
 8001008:	40020008 	.word	0x40020008

0800100c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800100c:	b590      	push	{r4, r7, lr}
 800100e:	b097      	sub	sp, #92	@ 0x5c
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001014:	2344      	movs	r3, #68	@ 0x44
 8001016:	18fb      	adds	r3, r7, r3
 8001018:	0018      	movs	r0, r3
 800101a:	2314      	movs	r3, #20
 800101c:	001a      	movs	r2, r3
 800101e:	2100      	movs	r1, #0
 8001020:	f005 fb46 	bl	80066b0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001024:	2410      	movs	r4, #16
 8001026:	193b      	adds	r3, r7, r4
 8001028:	0018      	movs	r0, r3
 800102a:	2334      	movs	r3, #52	@ 0x34
 800102c:	001a      	movs	r2, r3
 800102e:	2100      	movs	r1, #0
 8001030:	f005 fb3e 	bl	80066b0 <memset>
  if(huart->Instance==USART2)
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	4a26      	ldr	r2, [pc, #152]	@ (80010d4 <HAL_UART_MspInit+0xc8>)
 800103a:	4293      	cmp	r3, r2
 800103c:	d146      	bne.n	80010cc <HAL_UART_MspInit+0xc0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800103e:	193b      	adds	r3, r7, r4
 8001040:	2202      	movs	r2, #2
 8001042:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001044:	193b      	adds	r3, r7, r4
 8001046:	2200      	movs	r2, #0
 8001048:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800104a:	193b      	adds	r3, r7, r4
 800104c:	0018      	movs	r0, r3
 800104e:	f001 fb75 	bl	800273c <HAL_RCCEx_PeriphCLKConfig>
 8001052:	1e03      	subs	r3, r0, #0
 8001054:	d001      	beq.n	800105a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001056:	f7ff ff5d 	bl	8000f14 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800105a:	4b1f      	ldr	r3, [pc, #124]	@ (80010d8 <HAL_UART_MspInit+0xcc>)
 800105c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800105e:	4b1e      	ldr	r3, [pc, #120]	@ (80010d8 <HAL_UART_MspInit+0xcc>)
 8001060:	2180      	movs	r1, #128	@ 0x80
 8001062:	0289      	lsls	r1, r1, #10
 8001064:	430a      	orrs	r2, r1
 8001066:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001068:	4b1b      	ldr	r3, [pc, #108]	@ (80010d8 <HAL_UART_MspInit+0xcc>)
 800106a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800106c:	2380      	movs	r3, #128	@ 0x80
 800106e:	029b      	lsls	r3, r3, #10
 8001070:	4013      	ands	r3, r2
 8001072:	60fb      	str	r3, [r7, #12]
 8001074:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001076:	4b18      	ldr	r3, [pc, #96]	@ (80010d8 <HAL_UART_MspInit+0xcc>)
 8001078:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800107a:	4b17      	ldr	r3, [pc, #92]	@ (80010d8 <HAL_UART_MspInit+0xcc>)
 800107c:	2101      	movs	r1, #1
 800107e:	430a      	orrs	r2, r1
 8001080:	635a      	str	r2, [r3, #52]	@ 0x34
 8001082:	4b15      	ldr	r3, [pc, #84]	@ (80010d8 <HAL_UART_MspInit+0xcc>)
 8001084:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001086:	2201      	movs	r2, #1
 8001088:	4013      	ands	r3, r2
 800108a:	60bb      	str	r3, [r7, #8]
 800108c:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 800108e:	2144      	movs	r1, #68	@ 0x44
 8001090:	187b      	adds	r3, r7, r1
 8001092:	220c      	movs	r2, #12
 8001094:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001096:	187b      	adds	r3, r7, r1
 8001098:	2202      	movs	r2, #2
 800109a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800109c:	187b      	adds	r3, r7, r1
 800109e:	2200      	movs	r2, #0
 80010a0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010a2:	187b      	adds	r3, r7, r1
 80010a4:	2200      	movs	r2, #0
 80010a6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80010a8:	187b      	adds	r3, r7, r1
 80010aa:	2201      	movs	r2, #1
 80010ac:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010ae:	187a      	adds	r2, r7, r1
 80010b0:	23a0      	movs	r3, #160	@ 0xa0
 80010b2:	05db      	lsls	r3, r3, #23
 80010b4:	0011      	movs	r1, r2
 80010b6:	0018      	movs	r0, r3
 80010b8:	f000 fc6a 	bl	8001990 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 3, 0);
 80010bc:	2200      	movs	r2, #0
 80010be:	2103      	movs	r1, #3
 80010c0:	201c      	movs	r0, #28
 80010c2:	f000 f9e7 	bl	8001494 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80010c6:	201c      	movs	r0, #28
 80010c8:	f000 f9f9 	bl	80014be <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 80010cc:	46c0      	nop			@ (mov r8, r8)
 80010ce:	46bd      	mov	sp, r7
 80010d0:	b017      	add	sp, #92	@ 0x5c
 80010d2:	bd90      	pop	{r4, r7, pc}
 80010d4:	40004400 	.word	0x40004400
 80010d8:	40021000 	.word	0x40021000

080010dc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010dc:	b5b0      	push	{r4, r5, r7, lr}
 80010de:	b08c      	sub	sp, #48	@ 0x30
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80010e4:	232b      	movs	r3, #43	@ 0x2b
 80010e6:	18fb      	adds	r3, r7, r3
 80010e8:	2200      	movs	r2, #0
 80010ea:	701a      	strb	r2, [r3, #0]

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80010ec:	4b38      	ldr	r3, [pc, #224]	@ (80011d0 <HAL_InitTick+0xf4>)
 80010ee:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80010f0:	4b37      	ldr	r3, [pc, #220]	@ (80011d0 <HAL_InitTick+0xf4>)
 80010f2:	2180      	movs	r1, #128	@ 0x80
 80010f4:	0109      	lsls	r1, r1, #4
 80010f6:	430a      	orrs	r2, r1
 80010f8:	641a      	str	r2, [r3, #64]	@ 0x40
 80010fa:	4b35      	ldr	r3, [pc, #212]	@ (80011d0 <HAL_InitTick+0xf4>)
 80010fc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80010fe:	2380      	movs	r3, #128	@ 0x80
 8001100:	011b      	lsls	r3, r3, #4
 8001102:	4013      	ands	r3, r2
 8001104:	60bb      	str	r3, [r7, #8]
 8001106:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001108:	230c      	movs	r3, #12
 800110a:	18fa      	adds	r2, r7, r3
 800110c:	2410      	movs	r4, #16
 800110e:	193b      	adds	r3, r7, r4
 8001110:	0011      	movs	r1, r2
 8001112:	0018      	movs	r0, r3
 8001114:	f001 fae8 	bl	80026e8 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001118:	193b      	adds	r3, r7, r4
 800111a:	68db      	ldr	r3, [r3, #12]
 800111c:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Compute TIM1 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800111e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001120:	2b00      	cmp	r3, #0
 8001122:	d104      	bne.n	800112e <HAL_InitTick+0x52>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001124:	f001 faca 	bl	80026bc <HAL_RCC_GetPCLK1Freq>
 8001128:	0003      	movs	r3, r0
 800112a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800112c:	e004      	b.n	8001138 <HAL_InitTick+0x5c>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800112e:	f001 fac5 	bl	80026bc <HAL_RCC_GetPCLK1Freq>
 8001132:	0003      	movs	r3, r0
 8001134:	005b      	lsls	r3, r3, #1
 8001136:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001138:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800113a:	4926      	ldr	r1, [pc, #152]	@ (80011d4 <HAL_InitTick+0xf8>)
 800113c:	0018      	movs	r0, r3
 800113e:	f7fe fff5 	bl	800012c <__udivsi3>
 8001142:	0003      	movs	r3, r0
 8001144:	3b01      	subs	r3, #1
 8001146:	623b      	str	r3, [r7, #32]

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001148:	4b23      	ldr	r3, [pc, #140]	@ (80011d8 <HAL_InitTick+0xfc>)
 800114a:	4a24      	ldr	r2, [pc, #144]	@ (80011dc <HAL_InitTick+0x100>)
 800114c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800114e:	4b22      	ldr	r3, [pc, #136]	@ (80011d8 <HAL_InitTick+0xfc>)
 8001150:	4a23      	ldr	r2, [pc, #140]	@ (80011e0 <HAL_InitTick+0x104>)
 8001152:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001154:	4b20      	ldr	r3, [pc, #128]	@ (80011d8 <HAL_InitTick+0xfc>)
 8001156:	6a3a      	ldr	r2, [r7, #32]
 8001158:	605a      	str	r2, [r3, #4]
  htim1.Init.ClockDivision = 0;
 800115a:	4b1f      	ldr	r3, [pc, #124]	@ (80011d8 <HAL_InitTick+0xfc>)
 800115c:	2200      	movs	r2, #0
 800115e:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001160:	4b1d      	ldr	r3, [pc, #116]	@ (80011d8 <HAL_InitTick+0xfc>)
 8001162:	2200      	movs	r2, #0
 8001164:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001166:	4b1c      	ldr	r3, [pc, #112]	@ (80011d8 <HAL_InitTick+0xfc>)
 8001168:	2200      	movs	r2, #0
 800116a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 800116c:	252b      	movs	r5, #43	@ 0x2b
 800116e:	197c      	adds	r4, r7, r5
 8001170:	4b19      	ldr	r3, [pc, #100]	@ (80011d8 <HAL_InitTick+0xfc>)
 8001172:	0018      	movs	r0, r3
 8001174:	f001 fc9a 	bl	8002aac <HAL_TIM_Base_Init>
 8001178:	0003      	movs	r3, r0
 800117a:	7023      	strb	r3, [r4, #0]
  if (status == HAL_OK)
 800117c:	197b      	adds	r3, r7, r5
 800117e:	781b      	ldrb	r3, [r3, #0]
 8001180:	2b00      	cmp	r3, #0
 8001182:	d11e      	bne.n	80011c2 <HAL_InitTick+0xe6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8001184:	197c      	adds	r4, r7, r5
 8001186:	4b14      	ldr	r3, [pc, #80]	@ (80011d8 <HAL_InitTick+0xfc>)
 8001188:	0018      	movs	r0, r3
 800118a:	f001 fce7 	bl	8002b5c <HAL_TIM_Base_Start_IT>
 800118e:	0003      	movs	r3, r0
 8001190:	7023      	strb	r3, [r4, #0]
    if (status == HAL_OK)
 8001192:	197b      	adds	r3, r7, r5
 8001194:	781b      	ldrb	r3, [r3, #0]
 8001196:	2b00      	cmp	r3, #0
 8001198:	d113      	bne.n	80011c2 <HAL_InitTick+0xe6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn);
 800119a:	200d      	movs	r0, #13
 800119c:	f000 f98f 	bl	80014be <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	2b03      	cmp	r3, #3
 80011a4:	d809      	bhi.n	80011ba <HAL_InitTick+0xde>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, TickPriority, 0U);
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	2200      	movs	r2, #0
 80011aa:	0019      	movs	r1, r3
 80011ac:	200d      	movs	r0, #13
 80011ae:	f000 f971 	bl	8001494 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80011b2:	4b0c      	ldr	r3, [pc, #48]	@ (80011e4 <HAL_InitTick+0x108>)
 80011b4:	687a      	ldr	r2, [r7, #4]
 80011b6:	601a      	str	r2, [r3, #0]
 80011b8:	e003      	b.n	80011c2 <HAL_InitTick+0xe6>
      }
      else
      {
        status = HAL_ERROR;
 80011ba:	232b      	movs	r3, #43	@ 0x2b
 80011bc:	18fb      	adds	r3, r7, r3
 80011be:	2201      	movs	r2, #1
 80011c0:	701a      	strb	r2, [r3, #0]
      }
    }
  }

 /* Return function status */
  return status;
 80011c2:	232b      	movs	r3, #43	@ 0x2b
 80011c4:	18fb      	adds	r3, r7, r3
 80011c6:	781b      	ldrb	r3, [r3, #0]
}
 80011c8:	0018      	movs	r0, r3
 80011ca:	46bd      	mov	sp, r7
 80011cc:	b00c      	add	sp, #48	@ 0x30
 80011ce:	bdb0      	pop	{r4, r5, r7, pc}
 80011d0:	40021000 	.word	0x40021000
 80011d4:	000f4240 	.word	0x000f4240
 80011d8:	200003a0 	.word	0x200003a0
 80011dc:	40012c00 	.word	0x40012c00
 80011e0:	000003e7 	.word	0x000003e7
 80011e4:	200001ac 	.word	0x200001ac

080011e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80011ec:	46c0      	nop			@ (mov r8, r8)
 80011ee:	e7fd      	b.n	80011ec <NMI_Handler+0x4>

080011f0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011f4:	46c0      	nop			@ (mov r8, r8)
 80011f6:	e7fd      	b.n	80011f4 <HardFault_Handler+0x4>

080011f8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_up);
 80011fc:	4b03      	ldr	r3, [pc, #12]	@ (800120c <DMA1_Channel1_IRQHandler+0x14>)
 80011fe:	0018      	movs	r0, r3
 8001200:	f000 fac4 	bl	800178c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001204:	46c0      	nop			@ (mov r8, r8)
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}
 800120a:	46c0      	nop			@ (mov r8, r8)
 800120c:	200002a4 	.word	0x200002a4

08001210 <TIM1_BRK_UP_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 break, update, trigger and commutation interrupts.
  */
void TIM1_BRK_UP_TRG_COM_IRQHandler(void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001214:	4b03      	ldr	r3, [pc, #12]	@ (8001224 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x14>)
 8001216:	0018      	movs	r0, r3
 8001218:	f001 fcfc 	bl	8002c14 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 1 */
}
 800121c:	46c0      	nop			@ (mov r8, r8)
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}
 8001222:	46c0      	nop			@ (mov r8, r8)
 8001224:	200003a0 	.word	0x200003a0

08001228 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800122c:	4b03      	ldr	r3, [pc, #12]	@ (800123c <USART2_IRQHandler+0x14>)
 800122e:	0018      	movs	r0, r3
 8001230:	f002 f9f6 	bl	8003620 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001234:	46c0      	nop			@ (mov r8, r8)
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}
 800123a:	46c0      	nop			@ (mov r8, r8)
 800123c:	20000300 	.word	0x20000300

08001240 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b086      	sub	sp, #24
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001248:	4a14      	ldr	r2, [pc, #80]	@ (800129c <_sbrk+0x5c>)
 800124a:	4b15      	ldr	r3, [pc, #84]	@ (80012a0 <_sbrk+0x60>)
 800124c:	1ad3      	subs	r3, r2, r3
 800124e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001250:	697b      	ldr	r3, [r7, #20]
 8001252:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001254:	4b13      	ldr	r3, [pc, #76]	@ (80012a4 <_sbrk+0x64>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	2b00      	cmp	r3, #0
 800125a:	d102      	bne.n	8001262 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800125c:	4b11      	ldr	r3, [pc, #68]	@ (80012a4 <_sbrk+0x64>)
 800125e:	4a12      	ldr	r2, [pc, #72]	@ (80012a8 <_sbrk+0x68>)
 8001260:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001262:	4b10      	ldr	r3, [pc, #64]	@ (80012a4 <_sbrk+0x64>)
 8001264:	681a      	ldr	r2, [r3, #0]
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	18d3      	adds	r3, r2, r3
 800126a:	693a      	ldr	r2, [r7, #16]
 800126c:	429a      	cmp	r2, r3
 800126e:	d207      	bcs.n	8001280 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001270:	f005 fa86 	bl	8006780 <__errno>
 8001274:	0003      	movs	r3, r0
 8001276:	220c      	movs	r2, #12
 8001278:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800127a:	2301      	movs	r3, #1
 800127c:	425b      	negs	r3, r3
 800127e:	e009      	b.n	8001294 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001280:	4b08      	ldr	r3, [pc, #32]	@ (80012a4 <_sbrk+0x64>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001286:	4b07      	ldr	r3, [pc, #28]	@ (80012a4 <_sbrk+0x64>)
 8001288:	681a      	ldr	r2, [r3, #0]
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	18d2      	adds	r2, r2, r3
 800128e:	4b05      	ldr	r3, [pc, #20]	@ (80012a4 <_sbrk+0x64>)
 8001290:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8001292:	68fb      	ldr	r3, [r7, #12]
}
 8001294:	0018      	movs	r0, r3
 8001296:	46bd      	mov	sp, r7
 8001298:	b006      	add	sp, #24
 800129a:	bd80      	pop	{r7, pc}
 800129c:	20009000 	.word	0x20009000
 80012a0:	00000400 	.word	0x00000400
 80012a4:	200003ec 	.word	0x200003ec
 80012a8:	20001288 	.word	0x20001288

080012ac <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80012b0:	46c0      	nop			@ (mov r8, r8)
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}
	...

080012b8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80012b8:	480d      	ldr	r0, [pc, #52]	@ (80012f0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80012ba:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80012bc:	f7ff fff6 	bl	80012ac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80012c0:	480c      	ldr	r0, [pc, #48]	@ (80012f4 <LoopForever+0x6>)
  ldr r1, =_edata
 80012c2:	490d      	ldr	r1, [pc, #52]	@ (80012f8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80012c4:	4a0d      	ldr	r2, [pc, #52]	@ (80012fc <LoopForever+0xe>)
  movs r3, #0
 80012c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012c8:	e002      	b.n	80012d0 <LoopCopyDataInit>

080012ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012ce:	3304      	adds	r3, #4

080012d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012d4:	d3f9      	bcc.n	80012ca <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012d6:	4a0a      	ldr	r2, [pc, #40]	@ (8001300 <LoopForever+0x12>)
  ldr r4, =_ebss
 80012d8:	4c0a      	ldr	r4, [pc, #40]	@ (8001304 <LoopForever+0x16>)
  movs r3, #0
 80012da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012dc:	e001      	b.n	80012e2 <LoopFillZerobss>

080012de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012e0:	3204      	adds	r2, #4

080012e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012e4:	d3fb      	bcc.n	80012de <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80012e6:	f005 fa51 	bl	800678c <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80012ea:	f7ff fbc1 	bl	8000a70 <main>

080012ee <LoopForever>:

LoopForever:
  b LoopForever
 80012ee:	e7fe      	b.n	80012ee <LoopForever>
  ldr   r0, =_estack
 80012f0:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 80012f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012f8:	20000208 	.word	0x20000208
  ldr r2, =_sidata
 80012fc:	080071e8 	.word	0x080071e8
  ldr r2, =_sbss
 8001300:	20000208 	.word	0x20000208
  ldr r4, =_ebss
 8001304:	20001288 	.word	0x20001288

08001308 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001308:	e7fe      	b.n	8001308 <ADC1_COMP_IRQHandler>
	...

0800130c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b082      	sub	sp, #8
 8001310:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001312:	1dfb      	adds	r3, r7, #7
 8001314:	2200      	movs	r2, #0
 8001316:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001318:	4b0b      	ldr	r3, [pc, #44]	@ (8001348 <HAL_Init+0x3c>)
 800131a:	681a      	ldr	r2, [r3, #0]
 800131c:	4b0a      	ldr	r3, [pc, #40]	@ (8001348 <HAL_Init+0x3c>)
 800131e:	2180      	movs	r1, #128	@ 0x80
 8001320:	0049      	lsls	r1, r1, #1
 8001322:	430a      	orrs	r2, r1
 8001324:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001326:	2003      	movs	r0, #3
 8001328:	f7ff fed8 	bl	80010dc <HAL_InitTick>
 800132c:	1e03      	subs	r3, r0, #0
 800132e:	d003      	beq.n	8001338 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8001330:	1dfb      	adds	r3, r7, #7
 8001332:	2201      	movs	r2, #1
 8001334:	701a      	strb	r2, [r3, #0]
 8001336:	e001      	b.n	800133c <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8001338:	f7ff fdf2 	bl	8000f20 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800133c:	1dfb      	adds	r3, r7, #7
 800133e:	781b      	ldrb	r3, [r3, #0]
}
 8001340:	0018      	movs	r0, r3
 8001342:	46bd      	mov	sp, r7
 8001344:	b002      	add	sp, #8
 8001346:	bd80      	pop	{r7, pc}
 8001348:	40022000 	.word	0x40022000

0800134c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001350:	4b05      	ldr	r3, [pc, #20]	@ (8001368 <HAL_IncTick+0x1c>)
 8001352:	781b      	ldrb	r3, [r3, #0]
 8001354:	001a      	movs	r2, r3
 8001356:	4b05      	ldr	r3, [pc, #20]	@ (800136c <HAL_IncTick+0x20>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	18d2      	adds	r2, r2, r3
 800135c:	4b03      	ldr	r3, [pc, #12]	@ (800136c <HAL_IncTick+0x20>)
 800135e:	601a      	str	r2, [r3, #0]
}
 8001360:	46c0      	nop			@ (mov r8, r8)
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}
 8001366:	46c0      	nop			@ (mov r8, r8)
 8001368:	200001b0 	.word	0x200001b0
 800136c:	200003f0 	.word	0x200003f0

08001370 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	af00      	add	r7, sp, #0
  return uwTick;
 8001374:	4b02      	ldr	r3, [pc, #8]	@ (8001380 <HAL_GetTick+0x10>)
 8001376:	681b      	ldr	r3, [r3, #0]
}
 8001378:	0018      	movs	r0, r3
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}
 800137e:	46c0      	nop			@ (mov r8, r8)
 8001380:	200003f0 	.word	0x200003f0

08001384 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b082      	sub	sp, #8
 8001388:	af00      	add	r7, sp, #0
 800138a:	0002      	movs	r2, r0
 800138c:	1dfb      	adds	r3, r7, #7
 800138e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001390:	1dfb      	adds	r3, r7, #7
 8001392:	781b      	ldrb	r3, [r3, #0]
 8001394:	2b7f      	cmp	r3, #127	@ 0x7f
 8001396:	d809      	bhi.n	80013ac <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001398:	1dfb      	adds	r3, r7, #7
 800139a:	781b      	ldrb	r3, [r3, #0]
 800139c:	001a      	movs	r2, r3
 800139e:	231f      	movs	r3, #31
 80013a0:	401a      	ands	r2, r3
 80013a2:	4b04      	ldr	r3, [pc, #16]	@ (80013b4 <__NVIC_EnableIRQ+0x30>)
 80013a4:	2101      	movs	r1, #1
 80013a6:	4091      	lsls	r1, r2
 80013a8:	000a      	movs	r2, r1
 80013aa:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 80013ac:	46c0      	nop			@ (mov r8, r8)
 80013ae:	46bd      	mov	sp, r7
 80013b0:	b002      	add	sp, #8
 80013b2:	bd80      	pop	{r7, pc}
 80013b4:	e000e100 	.word	0xe000e100

080013b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013b8:	b590      	push	{r4, r7, lr}
 80013ba:	b083      	sub	sp, #12
 80013bc:	af00      	add	r7, sp, #0
 80013be:	0002      	movs	r2, r0
 80013c0:	6039      	str	r1, [r7, #0]
 80013c2:	1dfb      	adds	r3, r7, #7
 80013c4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80013c6:	1dfb      	adds	r3, r7, #7
 80013c8:	781b      	ldrb	r3, [r3, #0]
 80013ca:	2b7f      	cmp	r3, #127	@ 0x7f
 80013cc:	d828      	bhi.n	8001420 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80013ce:	4a2f      	ldr	r2, [pc, #188]	@ (800148c <__NVIC_SetPriority+0xd4>)
 80013d0:	1dfb      	adds	r3, r7, #7
 80013d2:	781b      	ldrb	r3, [r3, #0]
 80013d4:	b25b      	sxtb	r3, r3
 80013d6:	089b      	lsrs	r3, r3, #2
 80013d8:	33c0      	adds	r3, #192	@ 0xc0
 80013da:	009b      	lsls	r3, r3, #2
 80013dc:	589b      	ldr	r3, [r3, r2]
 80013de:	1dfa      	adds	r2, r7, #7
 80013e0:	7812      	ldrb	r2, [r2, #0]
 80013e2:	0011      	movs	r1, r2
 80013e4:	2203      	movs	r2, #3
 80013e6:	400a      	ands	r2, r1
 80013e8:	00d2      	lsls	r2, r2, #3
 80013ea:	21ff      	movs	r1, #255	@ 0xff
 80013ec:	4091      	lsls	r1, r2
 80013ee:	000a      	movs	r2, r1
 80013f0:	43d2      	mvns	r2, r2
 80013f2:	401a      	ands	r2, r3
 80013f4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	019b      	lsls	r3, r3, #6
 80013fa:	22ff      	movs	r2, #255	@ 0xff
 80013fc:	401a      	ands	r2, r3
 80013fe:	1dfb      	adds	r3, r7, #7
 8001400:	781b      	ldrb	r3, [r3, #0]
 8001402:	0018      	movs	r0, r3
 8001404:	2303      	movs	r3, #3
 8001406:	4003      	ands	r3, r0
 8001408:	00db      	lsls	r3, r3, #3
 800140a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800140c:	481f      	ldr	r0, [pc, #124]	@ (800148c <__NVIC_SetPriority+0xd4>)
 800140e:	1dfb      	adds	r3, r7, #7
 8001410:	781b      	ldrb	r3, [r3, #0]
 8001412:	b25b      	sxtb	r3, r3
 8001414:	089b      	lsrs	r3, r3, #2
 8001416:	430a      	orrs	r2, r1
 8001418:	33c0      	adds	r3, #192	@ 0xc0
 800141a:	009b      	lsls	r3, r3, #2
 800141c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800141e:	e031      	b.n	8001484 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001420:	4a1b      	ldr	r2, [pc, #108]	@ (8001490 <__NVIC_SetPriority+0xd8>)
 8001422:	1dfb      	adds	r3, r7, #7
 8001424:	781b      	ldrb	r3, [r3, #0]
 8001426:	0019      	movs	r1, r3
 8001428:	230f      	movs	r3, #15
 800142a:	400b      	ands	r3, r1
 800142c:	3b08      	subs	r3, #8
 800142e:	089b      	lsrs	r3, r3, #2
 8001430:	3306      	adds	r3, #6
 8001432:	009b      	lsls	r3, r3, #2
 8001434:	18d3      	adds	r3, r2, r3
 8001436:	3304      	adds	r3, #4
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	1dfa      	adds	r2, r7, #7
 800143c:	7812      	ldrb	r2, [r2, #0]
 800143e:	0011      	movs	r1, r2
 8001440:	2203      	movs	r2, #3
 8001442:	400a      	ands	r2, r1
 8001444:	00d2      	lsls	r2, r2, #3
 8001446:	21ff      	movs	r1, #255	@ 0xff
 8001448:	4091      	lsls	r1, r2
 800144a:	000a      	movs	r2, r1
 800144c:	43d2      	mvns	r2, r2
 800144e:	401a      	ands	r2, r3
 8001450:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	019b      	lsls	r3, r3, #6
 8001456:	22ff      	movs	r2, #255	@ 0xff
 8001458:	401a      	ands	r2, r3
 800145a:	1dfb      	adds	r3, r7, #7
 800145c:	781b      	ldrb	r3, [r3, #0]
 800145e:	0018      	movs	r0, r3
 8001460:	2303      	movs	r3, #3
 8001462:	4003      	ands	r3, r0
 8001464:	00db      	lsls	r3, r3, #3
 8001466:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001468:	4809      	ldr	r0, [pc, #36]	@ (8001490 <__NVIC_SetPriority+0xd8>)
 800146a:	1dfb      	adds	r3, r7, #7
 800146c:	781b      	ldrb	r3, [r3, #0]
 800146e:	001c      	movs	r4, r3
 8001470:	230f      	movs	r3, #15
 8001472:	4023      	ands	r3, r4
 8001474:	3b08      	subs	r3, #8
 8001476:	089b      	lsrs	r3, r3, #2
 8001478:	430a      	orrs	r2, r1
 800147a:	3306      	adds	r3, #6
 800147c:	009b      	lsls	r3, r3, #2
 800147e:	18c3      	adds	r3, r0, r3
 8001480:	3304      	adds	r3, #4
 8001482:	601a      	str	r2, [r3, #0]
}
 8001484:	46c0      	nop			@ (mov r8, r8)
 8001486:	46bd      	mov	sp, r7
 8001488:	b003      	add	sp, #12
 800148a:	bd90      	pop	{r4, r7, pc}
 800148c:	e000e100 	.word	0xe000e100
 8001490:	e000ed00 	.word	0xe000ed00

08001494 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b084      	sub	sp, #16
 8001498:	af00      	add	r7, sp, #0
 800149a:	60b9      	str	r1, [r7, #8]
 800149c:	607a      	str	r2, [r7, #4]
 800149e:	210f      	movs	r1, #15
 80014a0:	187b      	adds	r3, r7, r1
 80014a2:	1c02      	adds	r2, r0, #0
 80014a4:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80014a6:	68ba      	ldr	r2, [r7, #8]
 80014a8:	187b      	adds	r3, r7, r1
 80014aa:	781b      	ldrb	r3, [r3, #0]
 80014ac:	b25b      	sxtb	r3, r3
 80014ae:	0011      	movs	r1, r2
 80014b0:	0018      	movs	r0, r3
 80014b2:	f7ff ff81 	bl	80013b8 <__NVIC_SetPriority>
}
 80014b6:	46c0      	nop			@ (mov r8, r8)
 80014b8:	46bd      	mov	sp, r7
 80014ba:	b004      	add	sp, #16
 80014bc:	bd80      	pop	{r7, pc}

080014be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014be:	b580      	push	{r7, lr}
 80014c0:	b082      	sub	sp, #8
 80014c2:	af00      	add	r7, sp, #0
 80014c4:	0002      	movs	r2, r0
 80014c6:	1dfb      	adds	r3, r7, #7
 80014c8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014ca:	1dfb      	adds	r3, r7, #7
 80014cc:	781b      	ldrb	r3, [r3, #0]
 80014ce:	b25b      	sxtb	r3, r3
 80014d0:	0018      	movs	r0, r3
 80014d2:	f7ff ff57 	bl	8001384 <__NVIC_EnableIRQ>
}
 80014d6:	46c0      	nop			@ (mov r8, r8)
 80014d8:	46bd      	mov	sp, r7
 80014da:	b002      	add	sp, #8
 80014dc:	bd80      	pop	{r7, pc}
	...

080014e0 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b082      	sub	sp, #8
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d101      	bne.n	80014f2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80014ee:	2301      	movs	r3, #1
 80014f0:	e077      	b.n	80015e2 <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	4a3d      	ldr	r2, [pc, #244]	@ (80015ec <HAL_DMA_Init+0x10c>)
 80014f8:	4694      	mov	ip, r2
 80014fa:	4463      	add	r3, ip
 80014fc:	2114      	movs	r1, #20
 80014fe:	0018      	movs	r0, r3
 8001500:	f7fe fe14 	bl	800012c <__udivsi3>
 8001504:	0003      	movs	r3, r0
 8001506:	009a      	lsls	r2, r3, #2
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	641a      	str	r2, [r3, #64]	@ 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	2225      	movs	r2, #37	@ 0x25
 8001510:	2102      	movs	r1, #2
 8001512:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	681a      	ldr	r2, [r3, #0]
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	4934      	ldr	r1, [pc, #208]	@ (80015f0 <HAL_DMA_Init+0x110>)
 8001520:	400a      	ands	r2, r1
 8001522:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	6819      	ldr	r1, [r3, #0]
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	689a      	ldr	r2, [r3, #8]
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	68db      	ldr	r3, [r3, #12]
 8001532:	431a      	orrs	r2, r3
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	691b      	ldr	r3, [r3, #16]
 8001538:	431a      	orrs	r2, r3
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	695b      	ldr	r3, [r3, #20]
 800153e:	431a      	orrs	r2, r3
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	699b      	ldr	r3, [r3, #24]
 8001544:	431a      	orrs	r2, r3
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	69db      	ldr	r3, [r3, #28]
 800154a:	431a      	orrs	r2, r3
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	6a1b      	ldr	r3, [r3, #32]
 8001550:	431a      	orrs	r2, r3
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	430a      	orrs	r2, r1
 8001558:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	0018      	movs	r0, r3
 800155e:	f000 f9c7 	bl	80018f0 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	689a      	ldr	r2, [r3, #8]
 8001566:	2380      	movs	r3, #128	@ 0x80
 8001568:	01db      	lsls	r3, r3, #7
 800156a:	429a      	cmp	r2, r3
 800156c:	d102      	bne.n	8001574 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	2200      	movs	r2, #0
 8001572:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	685a      	ldr	r2, [r3, #4]
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800157c:	213f      	movs	r1, #63	@ 0x3f
 800157e:	400a      	ands	r2, r1
 8001580:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001586:	687a      	ldr	r2, [r7, #4]
 8001588:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800158a:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	685b      	ldr	r3, [r3, #4]
 8001590:	2b00      	cmp	r3, #0
 8001592:	d011      	beq.n	80015b8 <HAL_DMA_Init+0xd8>
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	685b      	ldr	r3, [r3, #4]
 8001598:	2b04      	cmp	r3, #4
 800159a:	d80d      	bhi.n	80015b8 <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	0018      	movs	r0, r3
 80015a0:	f000 f9d2 	bl	8001948 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80015a8:	2200      	movs	r2, #0
 80015aa:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80015b0:	687a      	ldr	r2, [r7, #4]
 80015b2:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 80015b4:	605a      	str	r2, [r3, #4]
 80015b6:	e008      	b.n	80015ca <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	2200      	movs	r2, #0
 80015bc:	651a      	str	r2, [r3, #80]	@ 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	2200      	movs	r2, #0
 80015c2:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	2200      	movs	r2, #0
 80015c8:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	2200      	movs	r2, #0
 80015ce:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	2225      	movs	r2, #37	@ 0x25
 80015d4:	2101      	movs	r1, #1
 80015d6:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	2224      	movs	r2, #36	@ 0x24
 80015dc:	2100      	movs	r1, #0
 80015de:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80015e0:	2300      	movs	r3, #0
}
 80015e2:	0018      	movs	r0, r3
 80015e4:	46bd      	mov	sp, r7
 80015e6:	b002      	add	sp, #8
 80015e8:	bd80      	pop	{r7, pc}
 80015ea:	46c0      	nop			@ (mov r8, r8)
 80015ec:	bffdfff8 	.word	0xbffdfff8
 80015f0:	ffff800f 	.word	0xffff800f

080015f4 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b082      	sub	sp, #8
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d101      	bne.n	8001606 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8001602:	2301      	movs	r3, #1
 8001604:	e050      	b.n	80016a8 <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	2225      	movs	r2, #37	@ 0x25
 800160a:	5c9b      	ldrb	r3, [r3, r2]
 800160c:	b2db      	uxtb	r3, r3
 800160e:	2b02      	cmp	r3, #2
 8001610:	d008      	beq.n	8001624 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	2204      	movs	r2, #4
 8001616:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	2224      	movs	r2, #36	@ 0x24
 800161c:	2100      	movs	r1, #0
 800161e:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8001620:	2301      	movs	r3, #1
 8001622:	e041      	b.n	80016a8 <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	681a      	ldr	r2, [r3, #0]
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	210e      	movs	r1, #14
 8001630:	438a      	bics	r2, r1
 8001632:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001638:	681a      	ldr	r2, [r3, #0]
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800163e:	491c      	ldr	r1, [pc, #112]	@ (80016b0 <HAL_DMA_Abort+0xbc>)
 8001640:	400a      	ands	r2, r1
 8001642:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	681a      	ldr	r2, [r3, #0]
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	2101      	movs	r1, #1
 8001650:	438a      	bics	r2, r1
 8001652:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 8001654:	4b17      	ldr	r3, [pc, #92]	@ (80016b4 <HAL_DMA_Abort+0xc0>)
 8001656:	6859      	ldr	r1, [r3, #4]
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800165c:	221c      	movs	r2, #28
 800165e:	4013      	ands	r3, r2
 8001660:	2201      	movs	r2, #1
 8001662:	409a      	lsls	r2, r3
 8001664:	4b13      	ldr	r3, [pc, #76]	@ (80016b4 <HAL_DMA_Abort+0xc0>)
 8001666:	430a      	orrs	r2, r1
 8001668:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800166e:	687a      	ldr	r2, [r7, #4]
 8001670:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8001672:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001678:	2b00      	cmp	r3, #0
 800167a:	d00c      	beq.n	8001696 <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001680:	681a      	ldr	r2, [r3, #0]
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001686:	490a      	ldr	r1, [pc, #40]	@ (80016b0 <HAL_DMA_Abort+0xbc>)
 8001688:	400a      	ands	r2, r1
 800168a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001690:	687a      	ldr	r2, [r7, #4]
 8001692:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8001694:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	2225      	movs	r2, #37	@ 0x25
 800169a:	2101      	movs	r1, #1
 800169c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	2224      	movs	r2, #36	@ 0x24
 80016a2:	2100      	movs	r1, #0
 80016a4:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 80016a6:	2300      	movs	r3, #0
}
 80016a8:	0018      	movs	r0, r3
 80016aa:	46bd      	mov	sp, r7
 80016ac:	b002      	add	sp, #8
 80016ae:	bd80      	pop	{r7, pc}
 80016b0:	fffffeff 	.word	0xfffffeff
 80016b4:	40020000 	.word	0x40020000

080016b8 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b084      	sub	sp, #16
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80016c0:	210f      	movs	r1, #15
 80016c2:	187b      	adds	r3, r7, r1
 80016c4:	2200      	movs	r2, #0
 80016c6:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	2225      	movs	r2, #37	@ 0x25
 80016cc:	5c9b      	ldrb	r3, [r3, r2]
 80016ce:	b2db      	uxtb	r3, r3
 80016d0:	2b02      	cmp	r3, #2
 80016d2:	d006      	beq.n	80016e2 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	2204      	movs	r2, #4
 80016d8:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80016da:	187b      	adds	r3, r7, r1
 80016dc:	2201      	movs	r2, #1
 80016de:	701a      	strb	r2, [r3, #0]
 80016e0:	e049      	b.n	8001776 <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	681a      	ldr	r2, [r3, #0]
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	210e      	movs	r1, #14
 80016ee:	438a      	bics	r2, r1
 80016f0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	681a      	ldr	r2, [r3, #0]
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	2101      	movs	r1, #1
 80016fe:	438a      	bics	r2, r1
 8001700:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001706:	681a      	ldr	r2, [r3, #0]
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800170c:	491d      	ldr	r1, [pc, #116]	@ (8001784 <HAL_DMA_Abort_IT+0xcc>)
 800170e:	400a      	ands	r2, r1
 8001710:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 8001712:	4b1d      	ldr	r3, [pc, #116]	@ (8001788 <HAL_DMA_Abort_IT+0xd0>)
 8001714:	6859      	ldr	r1, [r3, #4]
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800171a:	221c      	movs	r2, #28
 800171c:	4013      	ands	r3, r2
 800171e:	2201      	movs	r2, #1
 8001720:	409a      	lsls	r2, r3
 8001722:	4b19      	ldr	r3, [pc, #100]	@ (8001788 <HAL_DMA_Abort_IT+0xd0>)
 8001724:	430a      	orrs	r2, r1
 8001726:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800172c:	687a      	ldr	r2, [r7, #4]
 800172e:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8001730:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001736:	2b00      	cmp	r3, #0
 8001738:	d00c      	beq.n	8001754 <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800173e:	681a      	ldr	r2, [r3, #0]
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001744:	490f      	ldr	r1, [pc, #60]	@ (8001784 <HAL_DMA_Abort_IT+0xcc>)
 8001746:	400a      	ands	r2, r1
 8001748:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800174e:	687a      	ldr	r2, [r7, #4]
 8001750:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8001752:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	2225      	movs	r2, #37	@ 0x25
 8001758:	2101      	movs	r1, #1
 800175a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	2224      	movs	r2, #36	@ 0x24
 8001760:	2100      	movs	r1, #0
 8001762:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001768:	2b00      	cmp	r3, #0
 800176a:	d004      	beq.n	8001776 <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001770:	687a      	ldr	r2, [r7, #4]
 8001772:	0010      	movs	r0, r2
 8001774:	4798      	blx	r3
    }
  }
  return status;
 8001776:	230f      	movs	r3, #15
 8001778:	18fb      	adds	r3, r7, r3
 800177a:	781b      	ldrb	r3, [r3, #0]
}
 800177c:	0018      	movs	r0, r3
 800177e:	46bd      	mov	sp, r7
 8001780:	b004      	add	sp, #16
 8001782:	bd80      	pop	{r7, pc}
 8001784:	fffffeff 	.word	0xfffffeff
 8001788:	40020000 	.word	0x40020000

0800178c <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b084      	sub	sp, #16
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 8001794:	4b55      	ldr	r3, [pc, #340]	@ (80018ec <HAL_DMA_IRQHandler+0x160>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017a6:	221c      	movs	r2, #28
 80017a8:	4013      	ands	r3, r2
 80017aa:	2204      	movs	r2, #4
 80017ac:	409a      	lsls	r2, r3
 80017ae:	0013      	movs	r3, r2
 80017b0:	68fa      	ldr	r2, [r7, #12]
 80017b2:	4013      	ands	r3, r2
 80017b4:	d027      	beq.n	8001806 <HAL_DMA_IRQHandler+0x7a>
 80017b6:	68bb      	ldr	r3, [r7, #8]
 80017b8:	2204      	movs	r2, #4
 80017ba:	4013      	ands	r3, r2
 80017bc:	d023      	beq.n	8001806 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	2220      	movs	r2, #32
 80017c6:	4013      	ands	r3, r2
 80017c8:	d107      	bne.n	80017da <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	681a      	ldr	r2, [r3, #0]
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	2104      	movs	r1, #4
 80017d6:	438a      	bics	r2, r1
 80017d8:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 80017da:	4b44      	ldr	r3, [pc, #272]	@ (80018ec <HAL_DMA_IRQHandler+0x160>)
 80017dc:	6859      	ldr	r1, [r3, #4]
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017e2:	221c      	movs	r2, #28
 80017e4:	4013      	ands	r3, r2
 80017e6:	2204      	movs	r2, #4
 80017e8:	409a      	lsls	r2, r3
 80017ea:	4b40      	ldr	r3, [pc, #256]	@ (80018ec <HAL_DMA_IRQHandler+0x160>)
 80017ec:	430a      	orrs	r2, r1
 80017ee:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d100      	bne.n	80017fa <HAL_DMA_IRQHandler+0x6e>
 80017f8:	e073      	b.n	80018e2 <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017fe:	687a      	ldr	r2, [r7, #4]
 8001800:	0010      	movs	r0, r2
 8001802:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8001804:	e06d      	b.n	80018e2 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800180a:	221c      	movs	r2, #28
 800180c:	4013      	ands	r3, r2
 800180e:	2202      	movs	r2, #2
 8001810:	409a      	lsls	r2, r3
 8001812:	0013      	movs	r3, r2
 8001814:	68fa      	ldr	r2, [r7, #12]
 8001816:	4013      	ands	r3, r2
 8001818:	d02e      	beq.n	8001878 <HAL_DMA_IRQHandler+0xec>
 800181a:	68bb      	ldr	r3, [r7, #8]
 800181c:	2202      	movs	r2, #2
 800181e:	4013      	ands	r3, r2
 8001820:	d02a      	beq.n	8001878 <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	2220      	movs	r2, #32
 800182a:	4013      	ands	r3, r2
 800182c:	d10b      	bne.n	8001846 <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	681a      	ldr	r2, [r3, #0]
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	210a      	movs	r1, #10
 800183a:	438a      	bics	r2, r1
 800183c:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	2225      	movs	r2, #37	@ 0x25
 8001842:	2101      	movs	r1, #1
 8001844:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8001846:	4b29      	ldr	r3, [pc, #164]	@ (80018ec <HAL_DMA_IRQHandler+0x160>)
 8001848:	6859      	ldr	r1, [r3, #4]
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800184e:	221c      	movs	r2, #28
 8001850:	4013      	ands	r3, r2
 8001852:	2202      	movs	r2, #2
 8001854:	409a      	lsls	r2, r3
 8001856:	4b25      	ldr	r3, [pc, #148]	@ (80018ec <HAL_DMA_IRQHandler+0x160>)
 8001858:	430a      	orrs	r2, r1
 800185a:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	2224      	movs	r2, #36	@ 0x24
 8001860:	2100      	movs	r1, #0
 8001862:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001868:	2b00      	cmp	r3, #0
 800186a:	d03a      	beq.n	80018e2 <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001870:	687a      	ldr	r2, [r7, #4]
 8001872:	0010      	movs	r0, r2
 8001874:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8001876:	e034      	b.n	80018e2 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800187c:	221c      	movs	r2, #28
 800187e:	4013      	ands	r3, r2
 8001880:	2208      	movs	r2, #8
 8001882:	409a      	lsls	r2, r3
 8001884:	0013      	movs	r3, r2
 8001886:	68fa      	ldr	r2, [r7, #12]
 8001888:	4013      	ands	r3, r2
 800188a:	d02b      	beq.n	80018e4 <HAL_DMA_IRQHandler+0x158>
 800188c:	68bb      	ldr	r3, [r7, #8]
 800188e:	2208      	movs	r2, #8
 8001890:	4013      	ands	r3, r2
 8001892:	d027      	beq.n	80018e4 <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	681a      	ldr	r2, [r3, #0]
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	210e      	movs	r1, #14
 80018a0:	438a      	bics	r2, r1
 80018a2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 80018a4:	4b11      	ldr	r3, [pc, #68]	@ (80018ec <HAL_DMA_IRQHandler+0x160>)
 80018a6:	6859      	ldr	r1, [r3, #4]
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018ac:	221c      	movs	r2, #28
 80018ae:	4013      	ands	r3, r2
 80018b0:	2201      	movs	r2, #1
 80018b2:	409a      	lsls	r2, r3
 80018b4:	4b0d      	ldr	r3, [pc, #52]	@ (80018ec <HAL_DMA_IRQHandler+0x160>)
 80018b6:	430a      	orrs	r2, r1
 80018b8:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	2201      	movs	r2, #1
 80018be:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	2225      	movs	r2, #37	@ 0x25
 80018c4:	2101      	movs	r1, #1
 80018c6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	2224      	movs	r2, #36	@ 0x24
 80018cc:	2100      	movs	r1, #0
 80018ce:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d005      	beq.n	80018e4 <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80018dc:	687a      	ldr	r2, [r7, #4]
 80018de:	0010      	movs	r0, r2
 80018e0:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80018e2:	46c0      	nop			@ (mov r8, r8)
 80018e4:	46c0      	nop			@ (mov r8, r8)
}
 80018e6:	46bd      	mov	sp, r7
 80018e8:	b004      	add	sp, #16
 80018ea:	bd80      	pop	{r7, pc}
 80018ec:	40020000 	.word	0x40020000

080018f0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b084      	sub	sp, #16
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018fc:	089b      	lsrs	r3, r3, #2
 80018fe:	4a10      	ldr	r2, [pc, #64]	@ (8001940 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 8001900:	4694      	mov	ip, r2
 8001902:	4463      	add	r3, ip
 8001904:	009b      	lsls	r3, r3, #2
 8001906:	001a      	movs	r2, r3
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	001a      	movs	r2, r3
 8001912:	23ff      	movs	r3, #255	@ 0xff
 8001914:	4013      	ands	r3, r2
 8001916:	3b08      	subs	r3, #8
 8001918:	2114      	movs	r1, #20
 800191a:	0018      	movs	r0, r3
 800191c:	f7fe fc06 	bl	800012c <__udivsi3>
 8001920:	0003      	movs	r3, r0
 8001922:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	4a07      	ldr	r2, [pc, #28]	@ (8001944 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8001928:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	221f      	movs	r2, #31
 800192e:	4013      	ands	r3, r2
 8001930:	2201      	movs	r2, #1
 8001932:	409a      	lsls	r2, r3
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	64da      	str	r2, [r3, #76]	@ 0x4c
}
 8001938:	46c0      	nop			@ (mov r8, r8)
 800193a:	46bd      	mov	sp, r7
 800193c:	b004      	add	sp, #16
 800193e:	bd80      	pop	{r7, pc}
 8001940:	10008200 	.word	0x10008200
 8001944:	40020880 	.word	0x40020880

08001948 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b084      	sub	sp, #16
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	685b      	ldr	r3, [r3, #4]
 8001954:	223f      	movs	r2, #63	@ 0x3f
 8001956:	4013      	ands	r3, r2
 8001958:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	4a0a      	ldr	r2, [pc, #40]	@ (8001988 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800195e:	4694      	mov	ip, r2
 8001960:	4463      	add	r3, ip
 8001962:	009b      	lsls	r3, r3, #2
 8001964:	001a      	movs	r2, r3
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	651a      	str	r2, [r3, #80]	@ 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	4a07      	ldr	r2, [pc, #28]	@ (800198c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800196e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	3b01      	subs	r3, #1
 8001974:	2203      	movs	r2, #3
 8001976:	4013      	ands	r3, r2
 8001978:	2201      	movs	r2, #1
 800197a:	409a      	lsls	r2, r3
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	659a      	str	r2, [r3, #88]	@ 0x58
}
 8001980:	46c0      	nop			@ (mov r8, r8)
 8001982:	46bd      	mov	sp, r7
 8001984:	b004      	add	sp, #16
 8001986:	bd80      	pop	{r7, pc}
 8001988:	1000823f 	.word	0x1000823f
 800198c:	40020940 	.word	0x40020940

08001990 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b086      	sub	sp, #24
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
 8001998:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800199a:	2300      	movs	r3, #0
 800199c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800199e:	e147      	b.n	8001c30 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	2101      	movs	r1, #1
 80019a6:	697a      	ldr	r2, [r7, #20]
 80019a8:	4091      	lsls	r1, r2
 80019aa:	000a      	movs	r2, r1
 80019ac:	4013      	ands	r3, r2
 80019ae:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d100      	bne.n	80019b8 <HAL_GPIO_Init+0x28>
 80019b6:	e138      	b.n	8001c2a <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	2203      	movs	r2, #3
 80019be:	4013      	ands	r3, r2
 80019c0:	2b01      	cmp	r3, #1
 80019c2:	d005      	beq.n	80019d0 <HAL_GPIO_Init+0x40>
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	685b      	ldr	r3, [r3, #4]
 80019c8:	2203      	movs	r2, #3
 80019ca:	4013      	ands	r3, r2
 80019cc:	2b02      	cmp	r3, #2
 80019ce:	d130      	bne.n	8001a32 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	689b      	ldr	r3, [r3, #8]
 80019d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80019d6:	697b      	ldr	r3, [r7, #20]
 80019d8:	005b      	lsls	r3, r3, #1
 80019da:	2203      	movs	r2, #3
 80019dc:	409a      	lsls	r2, r3
 80019de:	0013      	movs	r3, r2
 80019e0:	43da      	mvns	r2, r3
 80019e2:	693b      	ldr	r3, [r7, #16]
 80019e4:	4013      	ands	r3, r2
 80019e6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	68da      	ldr	r2, [r3, #12]
 80019ec:	697b      	ldr	r3, [r7, #20]
 80019ee:	005b      	lsls	r3, r3, #1
 80019f0:	409a      	lsls	r2, r3
 80019f2:	0013      	movs	r3, r2
 80019f4:	693a      	ldr	r2, [r7, #16]
 80019f6:	4313      	orrs	r3, r2
 80019f8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	693a      	ldr	r2, [r7, #16]
 80019fe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	685b      	ldr	r3, [r3, #4]
 8001a04:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001a06:	2201      	movs	r2, #1
 8001a08:	697b      	ldr	r3, [r7, #20]
 8001a0a:	409a      	lsls	r2, r3
 8001a0c:	0013      	movs	r3, r2
 8001a0e:	43da      	mvns	r2, r3
 8001a10:	693b      	ldr	r3, [r7, #16]
 8001a12:	4013      	ands	r3, r2
 8001a14:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	685b      	ldr	r3, [r3, #4]
 8001a1a:	091b      	lsrs	r3, r3, #4
 8001a1c:	2201      	movs	r2, #1
 8001a1e:	401a      	ands	r2, r3
 8001a20:	697b      	ldr	r3, [r7, #20]
 8001a22:	409a      	lsls	r2, r3
 8001a24:	0013      	movs	r3, r2
 8001a26:	693a      	ldr	r2, [r7, #16]
 8001a28:	4313      	orrs	r3, r2
 8001a2a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	693a      	ldr	r2, [r7, #16]
 8001a30:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	685b      	ldr	r3, [r3, #4]
 8001a36:	2203      	movs	r2, #3
 8001a38:	4013      	ands	r3, r2
 8001a3a:	2b03      	cmp	r3, #3
 8001a3c:	d017      	beq.n	8001a6e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	68db      	ldr	r3, [r3, #12]
 8001a42:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001a44:	697b      	ldr	r3, [r7, #20]
 8001a46:	005b      	lsls	r3, r3, #1
 8001a48:	2203      	movs	r2, #3
 8001a4a:	409a      	lsls	r2, r3
 8001a4c:	0013      	movs	r3, r2
 8001a4e:	43da      	mvns	r2, r3
 8001a50:	693b      	ldr	r3, [r7, #16]
 8001a52:	4013      	ands	r3, r2
 8001a54:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001a56:	683b      	ldr	r3, [r7, #0]
 8001a58:	689a      	ldr	r2, [r3, #8]
 8001a5a:	697b      	ldr	r3, [r7, #20]
 8001a5c:	005b      	lsls	r3, r3, #1
 8001a5e:	409a      	lsls	r2, r3
 8001a60:	0013      	movs	r3, r2
 8001a62:	693a      	ldr	r2, [r7, #16]
 8001a64:	4313      	orrs	r3, r2
 8001a66:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	693a      	ldr	r2, [r7, #16]
 8001a6c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	685b      	ldr	r3, [r3, #4]
 8001a72:	2203      	movs	r2, #3
 8001a74:	4013      	ands	r3, r2
 8001a76:	2b02      	cmp	r3, #2
 8001a78:	d123      	bne.n	8001ac2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001a7a:	697b      	ldr	r3, [r7, #20]
 8001a7c:	08da      	lsrs	r2, r3, #3
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	3208      	adds	r2, #8
 8001a82:	0092      	lsls	r2, r2, #2
 8001a84:	58d3      	ldr	r3, [r2, r3]
 8001a86:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001a88:	697b      	ldr	r3, [r7, #20]
 8001a8a:	2207      	movs	r2, #7
 8001a8c:	4013      	ands	r3, r2
 8001a8e:	009b      	lsls	r3, r3, #2
 8001a90:	220f      	movs	r2, #15
 8001a92:	409a      	lsls	r2, r3
 8001a94:	0013      	movs	r3, r2
 8001a96:	43da      	mvns	r2, r3
 8001a98:	693b      	ldr	r3, [r7, #16]
 8001a9a:	4013      	ands	r3, r2
 8001a9c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	691a      	ldr	r2, [r3, #16]
 8001aa2:	697b      	ldr	r3, [r7, #20]
 8001aa4:	2107      	movs	r1, #7
 8001aa6:	400b      	ands	r3, r1
 8001aa8:	009b      	lsls	r3, r3, #2
 8001aaa:	409a      	lsls	r2, r3
 8001aac:	0013      	movs	r3, r2
 8001aae:	693a      	ldr	r2, [r7, #16]
 8001ab0:	4313      	orrs	r3, r2
 8001ab2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001ab4:	697b      	ldr	r3, [r7, #20]
 8001ab6:	08da      	lsrs	r2, r3, #3
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	3208      	adds	r2, #8
 8001abc:	0092      	lsls	r2, r2, #2
 8001abe:	6939      	ldr	r1, [r7, #16]
 8001ac0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001ac8:	697b      	ldr	r3, [r7, #20]
 8001aca:	005b      	lsls	r3, r3, #1
 8001acc:	2203      	movs	r2, #3
 8001ace:	409a      	lsls	r2, r3
 8001ad0:	0013      	movs	r3, r2
 8001ad2:	43da      	mvns	r2, r3
 8001ad4:	693b      	ldr	r3, [r7, #16]
 8001ad6:	4013      	ands	r3, r2
 8001ad8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	685b      	ldr	r3, [r3, #4]
 8001ade:	2203      	movs	r2, #3
 8001ae0:	401a      	ands	r2, r3
 8001ae2:	697b      	ldr	r3, [r7, #20]
 8001ae4:	005b      	lsls	r3, r3, #1
 8001ae6:	409a      	lsls	r2, r3
 8001ae8:	0013      	movs	r3, r2
 8001aea:	693a      	ldr	r2, [r7, #16]
 8001aec:	4313      	orrs	r3, r2
 8001aee:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	693a      	ldr	r2, [r7, #16]
 8001af4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	685a      	ldr	r2, [r3, #4]
 8001afa:	23c0      	movs	r3, #192	@ 0xc0
 8001afc:	029b      	lsls	r3, r3, #10
 8001afe:	4013      	ands	r3, r2
 8001b00:	d100      	bne.n	8001b04 <HAL_GPIO_Init+0x174>
 8001b02:	e092      	b.n	8001c2a <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8001b04:	4a50      	ldr	r2, [pc, #320]	@ (8001c48 <HAL_GPIO_Init+0x2b8>)
 8001b06:	697b      	ldr	r3, [r7, #20]
 8001b08:	089b      	lsrs	r3, r3, #2
 8001b0a:	3318      	adds	r3, #24
 8001b0c:	009b      	lsls	r3, r3, #2
 8001b0e:	589b      	ldr	r3, [r3, r2]
 8001b10:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8001b12:	697b      	ldr	r3, [r7, #20]
 8001b14:	2203      	movs	r2, #3
 8001b16:	4013      	ands	r3, r2
 8001b18:	00db      	lsls	r3, r3, #3
 8001b1a:	220f      	movs	r2, #15
 8001b1c:	409a      	lsls	r2, r3
 8001b1e:	0013      	movs	r3, r2
 8001b20:	43da      	mvns	r2, r3
 8001b22:	693b      	ldr	r3, [r7, #16]
 8001b24:	4013      	ands	r3, r2
 8001b26:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8001b28:	687a      	ldr	r2, [r7, #4]
 8001b2a:	23a0      	movs	r3, #160	@ 0xa0
 8001b2c:	05db      	lsls	r3, r3, #23
 8001b2e:	429a      	cmp	r2, r3
 8001b30:	d013      	beq.n	8001b5a <HAL_GPIO_Init+0x1ca>
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	4a45      	ldr	r2, [pc, #276]	@ (8001c4c <HAL_GPIO_Init+0x2bc>)
 8001b36:	4293      	cmp	r3, r2
 8001b38:	d00d      	beq.n	8001b56 <HAL_GPIO_Init+0x1c6>
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	4a44      	ldr	r2, [pc, #272]	@ (8001c50 <HAL_GPIO_Init+0x2c0>)
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	d007      	beq.n	8001b52 <HAL_GPIO_Init+0x1c2>
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	4a43      	ldr	r2, [pc, #268]	@ (8001c54 <HAL_GPIO_Init+0x2c4>)
 8001b46:	4293      	cmp	r3, r2
 8001b48:	d101      	bne.n	8001b4e <HAL_GPIO_Init+0x1be>
 8001b4a:	2303      	movs	r3, #3
 8001b4c:	e006      	b.n	8001b5c <HAL_GPIO_Init+0x1cc>
 8001b4e:	2305      	movs	r3, #5
 8001b50:	e004      	b.n	8001b5c <HAL_GPIO_Init+0x1cc>
 8001b52:	2302      	movs	r3, #2
 8001b54:	e002      	b.n	8001b5c <HAL_GPIO_Init+0x1cc>
 8001b56:	2301      	movs	r3, #1
 8001b58:	e000      	b.n	8001b5c <HAL_GPIO_Init+0x1cc>
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	697a      	ldr	r2, [r7, #20]
 8001b5e:	2103      	movs	r1, #3
 8001b60:	400a      	ands	r2, r1
 8001b62:	00d2      	lsls	r2, r2, #3
 8001b64:	4093      	lsls	r3, r2
 8001b66:	693a      	ldr	r2, [r7, #16]
 8001b68:	4313      	orrs	r3, r2
 8001b6a:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8001b6c:	4936      	ldr	r1, [pc, #216]	@ (8001c48 <HAL_GPIO_Init+0x2b8>)
 8001b6e:	697b      	ldr	r3, [r7, #20]
 8001b70:	089b      	lsrs	r3, r3, #2
 8001b72:	3318      	adds	r3, #24
 8001b74:	009b      	lsls	r3, r3, #2
 8001b76:	693a      	ldr	r2, [r7, #16]
 8001b78:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001b7a:	4b33      	ldr	r3, [pc, #204]	@ (8001c48 <HAL_GPIO_Init+0x2b8>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	43da      	mvns	r2, r3
 8001b84:	693b      	ldr	r3, [r7, #16]
 8001b86:	4013      	ands	r3, r2
 8001b88:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	685a      	ldr	r2, [r3, #4]
 8001b8e:	2380      	movs	r3, #128	@ 0x80
 8001b90:	035b      	lsls	r3, r3, #13
 8001b92:	4013      	ands	r3, r2
 8001b94:	d003      	beq.n	8001b9e <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8001b96:	693a      	ldr	r2, [r7, #16]
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	4313      	orrs	r3, r2
 8001b9c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001b9e:	4b2a      	ldr	r3, [pc, #168]	@ (8001c48 <HAL_GPIO_Init+0x2b8>)
 8001ba0:	693a      	ldr	r2, [r7, #16]
 8001ba2:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8001ba4:	4b28      	ldr	r3, [pc, #160]	@ (8001c48 <HAL_GPIO_Init+0x2b8>)
 8001ba6:	685b      	ldr	r3, [r3, #4]
 8001ba8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	43da      	mvns	r2, r3
 8001bae:	693b      	ldr	r3, [r7, #16]
 8001bb0:	4013      	ands	r3, r2
 8001bb2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	685a      	ldr	r2, [r3, #4]
 8001bb8:	2380      	movs	r3, #128	@ 0x80
 8001bba:	039b      	lsls	r3, r3, #14
 8001bbc:	4013      	ands	r3, r2
 8001bbe:	d003      	beq.n	8001bc8 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8001bc0:	693a      	ldr	r2, [r7, #16]
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	4313      	orrs	r3, r2
 8001bc6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001bc8:	4b1f      	ldr	r3, [pc, #124]	@ (8001c48 <HAL_GPIO_Init+0x2b8>)
 8001bca:	693a      	ldr	r2, [r7, #16]
 8001bcc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001bce:	4a1e      	ldr	r2, [pc, #120]	@ (8001c48 <HAL_GPIO_Init+0x2b8>)
 8001bd0:	2384      	movs	r3, #132	@ 0x84
 8001bd2:	58d3      	ldr	r3, [r2, r3]
 8001bd4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	43da      	mvns	r2, r3
 8001bda:	693b      	ldr	r3, [r7, #16]
 8001bdc:	4013      	ands	r3, r2
 8001bde:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	685a      	ldr	r2, [r3, #4]
 8001be4:	2380      	movs	r3, #128	@ 0x80
 8001be6:	029b      	lsls	r3, r3, #10
 8001be8:	4013      	ands	r3, r2
 8001bea:	d003      	beq.n	8001bf4 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8001bec:	693a      	ldr	r2, [r7, #16]
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	4313      	orrs	r3, r2
 8001bf2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001bf4:	4914      	ldr	r1, [pc, #80]	@ (8001c48 <HAL_GPIO_Init+0x2b8>)
 8001bf6:	2284      	movs	r2, #132	@ 0x84
 8001bf8:	693b      	ldr	r3, [r7, #16]
 8001bfa:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8001bfc:	4a12      	ldr	r2, [pc, #72]	@ (8001c48 <HAL_GPIO_Init+0x2b8>)
 8001bfe:	2380      	movs	r3, #128	@ 0x80
 8001c00:	58d3      	ldr	r3, [r2, r3]
 8001c02:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	43da      	mvns	r2, r3
 8001c08:	693b      	ldr	r3, [r7, #16]
 8001c0a:	4013      	ands	r3, r2
 8001c0c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	685a      	ldr	r2, [r3, #4]
 8001c12:	2380      	movs	r3, #128	@ 0x80
 8001c14:	025b      	lsls	r3, r3, #9
 8001c16:	4013      	ands	r3, r2
 8001c18:	d003      	beq.n	8001c22 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8001c1a:	693a      	ldr	r2, [r7, #16]
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	4313      	orrs	r3, r2
 8001c20:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001c22:	4909      	ldr	r1, [pc, #36]	@ (8001c48 <HAL_GPIO_Init+0x2b8>)
 8001c24:	2280      	movs	r2, #128	@ 0x80
 8001c26:	693b      	ldr	r3, [r7, #16]
 8001c28:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8001c2a:	697b      	ldr	r3, [r7, #20]
 8001c2c:	3301      	adds	r3, #1
 8001c2e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	681a      	ldr	r2, [r3, #0]
 8001c34:	697b      	ldr	r3, [r7, #20]
 8001c36:	40da      	lsrs	r2, r3
 8001c38:	1e13      	subs	r3, r2, #0
 8001c3a:	d000      	beq.n	8001c3e <HAL_GPIO_Init+0x2ae>
 8001c3c:	e6b0      	b.n	80019a0 <HAL_GPIO_Init+0x10>
  }
}
 8001c3e:	46c0      	nop			@ (mov r8, r8)
 8001c40:	46c0      	nop			@ (mov r8, r8)
 8001c42:	46bd      	mov	sp, r7
 8001c44:	b006      	add	sp, #24
 8001c46:	bd80      	pop	{r7, pc}
 8001c48:	40021800 	.word	0x40021800
 8001c4c:	50000400 	.word	0x50000400
 8001c50:	50000800 	.word	0x50000800
 8001c54:	50000c00 	.word	0x50000c00

08001c58 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b082      	sub	sp, #8
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
 8001c60:	0008      	movs	r0, r1
 8001c62:	0011      	movs	r1, r2
 8001c64:	1cbb      	adds	r3, r7, #2
 8001c66:	1c02      	adds	r2, r0, #0
 8001c68:	801a      	strh	r2, [r3, #0]
 8001c6a:	1c7b      	adds	r3, r7, #1
 8001c6c:	1c0a      	adds	r2, r1, #0
 8001c6e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001c70:	1c7b      	adds	r3, r7, #1
 8001c72:	781b      	ldrb	r3, [r3, #0]
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d004      	beq.n	8001c82 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001c78:	1cbb      	adds	r3, r7, #2
 8001c7a:	881a      	ldrh	r2, [r3, #0]
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001c80:	e003      	b.n	8001c8a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001c82:	1cbb      	adds	r3, r7, #2
 8001c84:	881a      	ldrh	r2, [r3, #0]
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001c8a:	46c0      	nop			@ (mov r8, r8)
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	b002      	add	sp, #8
 8001c90:	bd80      	pop	{r7, pc}

08001c92 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001c92:	b580      	push	{r7, lr}
 8001c94:	b084      	sub	sp, #16
 8001c96:	af00      	add	r7, sp, #0
 8001c98:	6078      	str	r0, [r7, #4]
 8001c9a:	000a      	movs	r2, r1
 8001c9c:	1cbb      	adds	r3, r7, #2
 8001c9e:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	695b      	ldr	r3, [r3, #20]
 8001ca4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001ca6:	1cbb      	adds	r3, r7, #2
 8001ca8:	881b      	ldrh	r3, [r3, #0]
 8001caa:	68fa      	ldr	r2, [r7, #12]
 8001cac:	4013      	ands	r3, r2
 8001cae:	041a      	lsls	r2, r3, #16
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	43db      	mvns	r3, r3
 8001cb4:	1cb9      	adds	r1, r7, #2
 8001cb6:	8809      	ldrh	r1, [r1, #0]
 8001cb8:	400b      	ands	r3, r1
 8001cba:	431a      	orrs	r2, r3
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	619a      	str	r2, [r3, #24]
}
 8001cc0:	46c0      	nop			@ (mov r8, r8)
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	b004      	add	sp, #16
 8001cc6:	bd80      	pop	{r7, pc}

08001cc8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b084      	sub	sp, #16
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001cd0:	4b19      	ldr	r3, [pc, #100]	@ (8001d38 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	4a19      	ldr	r2, [pc, #100]	@ (8001d3c <HAL_PWREx_ControlVoltageScaling+0x74>)
 8001cd6:	4013      	ands	r3, r2
 8001cd8:	0019      	movs	r1, r3
 8001cda:	4b17      	ldr	r3, [pc, #92]	@ (8001d38 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001cdc:	687a      	ldr	r2, [r7, #4]
 8001cde:	430a      	orrs	r2, r1
 8001ce0:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001ce2:	687a      	ldr	r2, [r7, #4]
 8001ce4:	2380      	movs	r3, #128	@ 0x80
 8001ce6:	009b      	lsls	r3, r3, #2
 8001ce8:	429a      	cmp	r2, r3
 8001cea:	d11f      	bne.n	8001d2c <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8001cec:	4b14      	ldr	r3, [pc, #80]	@ (8001d40 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8001cee:	681a      	ldr	r2, [r3, #0]
 8001cf0:	0013      	movs	r3, r2
 8001cf2:	005b      	lsls	r3, r3, #1
 8001cf4:	189b      	adds	r3, r3, r2
 8001cf6:	005b      	lsls	r3, r3, #1
 8001cf8:	4912      	ldr	r1, [pc, #72]	@ (8001d44 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8001cfa:	0018      	movs	r0, r3
 8001cfc:	f7fe fa16 	bl	800012c <__udivsi3>
 8001d00:	0003      	movs	r3, r0
 8001d02:	3301      	adds	r3, #1
 8001d04:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001d06:	e008      	b.n	8001d1a <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d003      	beq.n	8001d16 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	3b01      	subs	r3, #1
 8001d12:	60fb      	str	r3, [r7, #12]
 8001d14:	e001      	b.n	8001d1a <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8001d16:	2303      	movs	r3, #3
 8001d18:	e009      	b.n	8001d2e <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001d1a:	4b07      	ldr	r3, [pc, #28]	@ (8001d38 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001d1c:	695a      	ldr	r2, [r3, #20]
 8001d1e:	2380      	movs	r3, #128	@ 0x80
 8001d20:	00db      	lsls	r3, r3, #3
 8001d22:	401a      	ands	r2, r3
 8001d24:	2380      	movs	r3, #128	@ 0x80
 8001d26:	00db      	lsls	r3, r3, #3
 8001d28:	429a      	cmp	r2, r3
 8001d2a:	d0ed      	beq.n	8001d08 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8001d2c:	2300      	movs	r3, #0
}
 8001d2e:	0018      	movs	r0, r3
 8001d30:	46bd      	mov	sp, r7
 8001d32:	b004      	add	sp, #16
 8001d34:	bd80      	pop	{r7, pc}
 8001d36:	46c0      	nop			@ (mov r8, r8)
 8001d38:	40007000 	.word	0x40007000
 8001d3c:	fffff9ff 	.word	0xfffff9ff
 8001d40:	200001a8 	.word	0x200001a8
 8001d44:	000f4240 	.word	0x000f4240

08001d48 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8001d4c:	4b03      	ldr	r3, [pc, #12]	@ (8001d5c <LL_RCC_GetAPB1Prescaler+0x14>)
 8001d4e:	689a      	ldr	r2, [r3, #8]
 8001d50:	23e0      	movs	r3, #224	@ 0xe0
 8001d52:	01db      	lsls	r3, r3, #7
 8001d54:	4013      	ands	r3, r2
}
 8001d56:	0018      	movs	r0, r3
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	bd80      	pop	{r7, pc}
 8001d5c:	40021000 	.word	0x40021000

08001d60 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b088      	sub	sp, #32
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d101      	bne.n	8001d72 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d6e:	2301      	movs	r3, #1
 8001d70:	e2fe      	b.n	8002370 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	2201      	movs	r2, #1
 8001d78:	4013      	ands	r3, r2
 8001d7a:	d100      	bne.n	8001d7e <HAL_RCC_OscConfig+0x1e>
 8001d7c:	e07c      	b.n	8001e78 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d7e:	4bc3      	ldr	r3, [pc, #780]	@ (800208c <HAL_RCC_OscConfig+0x32c>)
 8001d80:	689b      	ldr	r3, [r3, #8]
 8001d82:	2238      	movs	r2, #56	@ 0x38
 8001d84:	4013      	ands	r3, r2
 8001d86:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001d88:	4bc0      	ldr	r3, [pc, #768]	@ (800208c <HAL_RCC_OscConfig+0x32c>)
 8001d8a:	68db      	ldr	r3, [r3, #12]
 8001d8c:	2203      	movs	r2, #3
 8001d8e:	4013      	ands	r3, r2
 8001d90:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8001d92:	69bb      	ldr	r3, [r7, #24]
 8001d94:	2b10      	cmp	r3, #16
 8001d96:	d102      	bne.n	8001d9e <HAL_RCC_OscConfig+0x3e>
 8001d98:	697b      	ldr	r3, [r7, #20]
 8001d9a:	2b03      	cmp	r3, #3
 8001d9c:	d002      	beq.n	8001da4 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8001d9e:	69bb      	ldr	r3, [r7, #24]
 8001da0:	2b08      	cmp	r3, #8
 8001da2:	d10b      	bne.n	8001dbc <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001da4:	4bb9      	ldr	r3, [pc, #740]	@ (800208c <HAL_RCC_OscConfig+0x32c>)
 8001da6:	681a      	ldr	r2, [r3, #0]
 8001da8:	2380      	movs	r3, #128	@ 0x80
 8001daa:	029b      	lsls	r3, r3, #10
 8001dac:	4013      	ands	r3, r2
 8001dae:	d062      	beq.n	8001e76 <HAL_RCC_OscConfig+0x116>
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	685b      	ldr	r3, [r3, #4]
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d15e      	bne.n	8001e76 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8001db8:	2301      	movs	r3, #1
 8001dba:	e2d9      	b.n	8002370 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	685a      	ldr	r2, [r3, #4]
 8001dc0:	2380      	movs	r3, #128	@ 0x80
 8001dc2:	025b      	lsls	r3, r3, #9
 8001dc4:	429a      	cmp	r2, r3
 8001dc6:	d107      	bne.n	8001dd8 <HAL_RCC_OscConfig+0x78>
 8001dc8:	4bb0      	ldr	r3, [pc, #704]	@ (800208c <HAL_RCC_OscConfig+0x32c>)
 8001dca:	681a      	ldr	r2, [r3, #0]
 8001dcc:	4baf      	ldr	r3, [pc, #700]	@ (800208c <HAL_RCC_OscConfig+0x32c>)
 8001dce:	2180      	movs	r1, #128	@ 0x80
 8001dd0:	0249      	lsls	r1, r1, #9
 8001dd2:	430a      	orrs	r2, r1
 8001dd4:	601a      	str	r2, [r3, #0]
 8001dd6:	e020      	b.n	8001e1a <HAL_RCC_OscConfig+0xba>
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	685a      	ldr	r2, [r3, #4]
 8001ddc:	23a0      	movs	r3, #160	@ 0xa0
 8001dde:	02db      	lsls	r3, r3, #11
 8001de0:	429a      	cmp	r2, r3
 8001de2:	d10e      	bne.n	8001e02 <HAL_RCC_OscConfig+0xa2>
 8001de4:	4ba9      	ldr	r3, [pc, #676]	@ (800208c <HAL_RCC_OscConfig+0x32c>)
 8001de6:	681a      	ldr	r2, [r3, #0]
 8001de8:	4ba8      	ldr	r3, [pc, #672]	@ (800208c <HAL_RCC_OscConfig+0x32c>)
 8001dea:	2180      	movs	r1, #128	@ 0x80
 8001dec:	02c9      	lsls	r1, r1, #11
 8001dee:	430a      	orrs	r2, r1
 8001df0:	601a      	str	r2, [r3, #0]
 8001df2:	4ba6      	ldr	r3, [pc, #664]	@ (800208c <HAL_RCC_OscConfig+0x32c>)
 8001df4:	681a      	ldr	r2, [r3, #0]
 8001df6:	4ba5      	ldr	r3, [pc, #660]	@ (800208c <HAL_RCC_OscConfig+0x32c>)
 8001df8:	2180      	movs	r1, #128	@ 0x80
 8001dfa:	0249      	lsls	r1, r1, #9
 8001dfc:	430a      	orrs	r2, r1
 8001dfe:	601a      	str	r2, [r3, #0]
 8001e00:	e00b      	b.n	8001e1a <HAL_RCC_OscConfig+0xba>
 8001e02:	4ba2      	ldr	r3, [pc, #648]	@ (800208c <HAL_RCC_OscConfig+0x32c>)
 8001e04:	681a      	ldr	r2, [r3, #0]
 8001e06:	4ba1      	ldr	r3, [pc, #644]	@ (800208c <HAL_RCC_OscConfig+0x32c>)
 8001e08:	49a1      	ldr	r1, [pc, #644]	@ (8002090 <HAL_RCC_OscConfig+0x330>)
 8001e0a:	400a      	ands	r2, r1
 8001e0c:	601a      	str	r2, [r3, #0]
 8001e0e:	4b9f      	ldr	r3, [pc, #636]	@ (800208c <HAL_RCC_OscConfig+0x32c>)
 8001e10:	681a      	ldr	r2, [r3, #0]
 8001e12:	4b9e      	ldr	r3, [pc, #632]	@ (800208c <HAL_RCC_OscConfig+0x32c>)
 8001e14:	499f      	ldr	r1, [pc, #636]	@ (8002094 <HAL_RCC_OscConfig+0x334>)
 8001e16:	400a      	ands	r2, r1
 8001e18:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	685b      	ldr	r3, [r3, #4]
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d014      	beq.n	8001e4c <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e22:	f7ff faa5 	bl	8001370 <HAL_GetTick>
 8001e26:	0003      	movs	r3, r0
 8001e28:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e2a:	e008      	b.n	8001e3e <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e2c:	f7ff faa0 	bl	8001370 <HAL_GetTick>
 8001e30:	0002      	movs	r2, r0
 8001e32:	693b      	ldr	r3, [r7, #16]
 8001e34:	1ad3      	subs	r3, r2, r3
 8001e36:	2b64      	cmp	r3, #100	@ 0x64
 8001e38:	d901      	bls.n	8001e3e <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8001e3a:	2303      	movs	r3, #3
 8001e3c:	e298      	b.n	8002370 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e3e:	4b93      	ldr	r3, [pc, #588]	@ (800208c <HAL_RCC_OscConfig+0x32c>)
 8001e40:	681a      	ldr	r2, [r3, #0]
 8001e42:	2380      	movs	r3, #128	@ 0x80
 8001e44:	029b      	lsls	r3, r3, #10
 8001e46:	4013      	ands	r3, r2
 8001e48:	d0f0      	beq.n	8001e2c <HAL_RCC_OscConfig+0xcc>
 8001e4a:	e015      	b.n	8001e78 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e4c:	f7ff fa90 	bl	8001370 <HAL_GetTick>
 8001e50:	0003      	movs	r3, r0
 8001e52:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001e54:	e008      	b.n	8001e68 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e56:	f7ff fa8b 	bl	8001370 <HAL_GetTick>
 8001e5a:	0002      	movs	r2, r0
 8001e5c:	693b      	ldr	r3, [r7, #16]
 8001e5e:	1ad3      	subs	r3, r2, r3
 8001e60:	2b64      	cmp	r3, #100	@ 0x64
 8001e62:	d901      	bls.n	8001e68 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001e64:	2303      	movs	r3, #3
 8001e66:	e283      	b.n	8002370 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001e68:	4b88      	ldr	r3, [pc, #544]	@ (800208c <HAL_RCC_OscConfig+0x32c>)
 8001e6a:	681a      	ldr	r2, [r3, #0]
 8001e6c:	2380      	movs	r3, #128	@ 0x80
 8001e6e:	029b      	lsls	r3, r3, #10
 8001e70:	4013      	ands	r3, r2
 8001e72:	d1f0      	bne.n	8001e56 <HAL_RCC_OscConfig+0xf6>
 8001e74:	e000      	b.n	8001e78 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e76:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	2202      	movs	r2, #2
 8001e7e:	4013      	ands	r3, r2
 8001e80:	d100      	bne.n	8001e84 <HAL_RCC_OscConfig+0x124>
 8001e82:	e099      	b.n	8001fb8 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001e84:	4b81      	ldr	r3, [pc, #516]	@ (800208c <HAL_RCC_OscConfig+0x32c>)
 8001e86:	689b      	ldr	r3, [r3, #8]
 8001e88:	2238      	movs	r2, #56	@ 0x38
 8001e8a:	4013      	ands	r3, r2
 8001e8c:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001e8e:	4b7f      	ldr	r3, [pc, #508]	@ (800208c <HAL_RCC_OscConfig+0x32c>)
 8001e90:	68db      	ldr	r3, [r3, #12]
 8001e92:	2203      	movs	r2, #3
 8001e94:	4013      	ands	r3, r2
 8001e96:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8001e98:	69bb      	ldr	r3, [r7, #24]
 8001e9a:	2b10      	cmp	r3, #16
 8001e9c:	d102      	bne.n	8001ea4 <HAL_RCC_OscConfig+0x144>
 8001e9e:	697b      	ldr	r3, [r7, #20]
 8001ea0:	2b02      	cmp	r3, #2
 8001ea2:	d002      	beq.n	8001eaa <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8001ea4:	69bb      	ldr	r3, [r7, #24]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d135      	bne.n	8001f16 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001eaa:	4b78      	ldr	r3, [pc, #480]	@ (800208c <HAL_RCC_OscConfig+0x32c>)
 8001eac:	681a      	ldr	r2, [r3, #0]
 8001eae:	2380      	movs	r3, #128	@ 0x80
 8001eb0:	00db      	lsls	r3, r3, #3
 8001eb2:	4013      	ands	r3, r2
 8001eb4:	d005      	beq.n	8001ec2 <HAL_RCC_OscConfig+0x162>
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	68db      	ldr	r3, [r3, #12]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d101      	bne.n	8001ec2 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	e256      	b.n	8002370 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ec2:	4b72      	ldr	r3, [pc, #456]	@ (800208c <HAL_RCC_OscConfig+0x32c>)
 8001ec4:	685b      	ldr	r3, [r3, #4]
 8001ec6:	4a74      	ldr	r2, [pc, #464]	@ (8002098 <HAL_RCC_OscConfig+0x338>)
 8001ec8:	4013      	ands	r3, r2
 8001eca:	0019      	movs	r1, r3
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	695b      	ldr	r3, [r3, #20]
 8001ed0:	021a      	lsls	r2, r3, #8
 8001ed2:	4b6e      	ldr	r3, [pc, #440]	@ (800208c <HAL_RCC_OscConfig+0x32c>)
 8001ed4:	430a      	orrs	r2, r1
 8001ed6:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001ed8:	69bb      	ldr	r3, [r7, #24]
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d112      	bne.n	8001f04 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001ede:	4b6b      	ldr	r3, [pc, #428]	@ (800208c <HAL_RCC_OscConfig+0x32c>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	4a6e      	ldr	r2, [pc, #440]	@ (800209c <HAL_RCC_OscConfig+0x33c>)
 8001ee4:	4013      	ands	r3, r2
 8001ee6:	0019      	movs	r1, r3
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	691a      	ldr	r2, [r3, #16]
 8001eec:	4b67      	ldr	r3, [pc, #412]	@ (800208c <HAL_RCC_OscConfig+0x32c>)
 8001eee:	430a      	orrs	r2, r1
 8001ef0:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8001ef2:	4b66      	ldr	r3, [pc, #408]	@ (800208c <HAL_RCC_OscConfig+0x32c>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	0adb      	lsrs	r3, r3, #11
 8001ef8:	2207      	movs	r2, #7
 8001efa:	4013      	ands	r3, r2
 8001efc:	4a68      	ldr	r2, [pc, #416]	@ (80020a0 <HAL_RCC_OscConfig+0x340>)
 8001efe:	40da      	lsrs	r2, r3
 8001f00:	4b68      	ldr	r3, [pc, #416]	@ (80020a4 <HAL_RCC_OscConfig+0x344>)
 8001f02:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001f04:	4b68      	ldr	r3, [pc, #416]	@ (80020a8 <HAL_RCC_OscConfig+0x348>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	0018      	movs	r0, r3
 8001f0a:	f7ff f8e7 	bl	80010dc <HAL_InitTick>
 8001f0e:	1e03      	subs	r3, r0, #0
 8001f10:	d051      	beq.n	8001fb6 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8001f12:	2301      	movs	r3, #1
 8001f14:	e22c      	b.n	8002370 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	68db      	ldr	r3, [r3, #12]
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d030      	beq.n	8001f80 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001f1e:	4b5b      	ldr	r3, [pc, #364]	@ (800208c <HAL_RCC_OscConfig+0x32c>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	4a5e      	ldr	r2, [pc, #376]	@ (800209c <HAL_RCC_OscConfig+0x33c>)
 8001f24:	4013      	ands	r3, r2
 8001f26:	0019      	movs	r1, r3
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	691a      	ldr	r2, [r3, #16]
 8001f2c:	4b57      	ldr	r3, [pc, #348]	@ (800208c <HAL_RCC_OscConfig+0x32c>)
 8001f2e:	430a      	orrs	r2, r1
 8001f30:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8001f32:	4b56      	ldr	r3, [pc, #344]	@ (800208c <HAL_RCC_OscConfig+0x32c>)
 8001f34:	681a      	ldr	r2, [r3, #0]
 8001f36:	4b55      	ldr	r3, [pc, #340]	@ (800208c <HAL_RCC_OscConfig+0x32c>)
 8001f38:	2180      	movs	r1, #128	@ 0x80
 8001f3a:	0049      	lsls	r1, r1, #1
 8001f3c:	430a      	orrs	r2, r1
 8001f3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f40:	f7ff fa16 	bl	8001370 <HAL_GetTick>
 8001f44:	0003      	movs	r3, r0
 8001f46:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f48:	e008      	b.n	8001f5c <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f4a:	f7ff fa11 	bl	8001370 <HAL_GetTick>
 8001f4e:	0002      	movs	r2, r0
 8001f50:	693b      	ldr	r3, [r7, #16]
 8001f52:	1ad3      	subs	r3, r2, r3
 8001f54:	2b02      	cmp	r3, #2
 8001f56:	d901      	bls.n	8001f5c <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8001f58:	2303      	movs	r3, #3
 8001f5a:	e209      	b.n	8002370 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f5c:	4b4b      	ldr	r3, [pc, #300]	@ (800208c <HAL_RCC_OscConfig+0x32c>)
 8001f5e:	681a      	ldr	r2, [r3, #0]
 8001f60:	2380      	movs	r3, #128	@ 0x80
 8001f62:	00db      	lsls	r3, r3, #3
 8001f64:	4013      	ands	r3, r2
 8001f66:	d0f0      	beq.n	8001f4a <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f68:	4b48      	ldr	r3, [pc, #288]	@ (800208c <HAL_RCC_OscConfig+0x32c>)
 8001f6a:	685b      	ldr	r3, [r3, #4]
 8001f6c:	4a4a      	ldr	r2, [pc, #296]	@ (8002098 <HAL_RCC_OscConfig+0x338>)
 8001f6e:	4013      	ands	r3, r2
 8001f70:	0019      	movs	r1, r3
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	695b      	ldr	r3, [r3, #20]
 8001f76:	021a      	lsls	r2, r3, #8
 8001f78:	4b44      	ldr	r3, [pc, #272]	@ (800208c <HAL_RCC_OscConfig+0x32c>)
 8001f7a:	430a      	orrs	r2, r1
 8001f7c:	605a      	str	r2, [r3, #4]
 8001f7e:	e01b      	b.n	8001fb8 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8001f80:	4b42      	ldr	r3, [pc, #264]	@ (800208c <HAL_RCC_OscConfig+0x32c>)
 8001f82:	681a      	ldr	r2, [r3, #0]
 8001f84:	4b41      	ldr	r3, [pc, #260]	@ (800208c <HAL_RCC_OscConfig+0x32c>)
 8001f86:	4949      	ldr	r1, [pc, #292]	@ (80020ac <HAL_RCC_OscConfig+0x34c>)
 8001f88:	400a      	ands	r2, r1
 8001f8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f8c:	f7ff f9f0 	bl	8001370 <HAL_GetTick>
 8001f90:	0003      	movs	r3, r0
 8001f92:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001f94:	e008      	b.n	8001fa8 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f96:	f7ff f9eb 	bl	8001370 <HAL_GetTick>
 8001f9a:	0002      	movs	r2, r0
 8001f9c:	693b      	ldr	r3, [r7, #16]
 8001f9e:	1ad3      	subs	r3, r2, r3
 8001fa0:	2b02      	cmp	r3, #2
 8001fa2:	d901      	bls.n	8001fa8 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8001fa4:	2303      	movs	r3, #3
 8001fa6:	e1e3      	b.n	8002370 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001fa8:	4b38      	ldr	r3, [pc, #224]	@ (800208c <HAL_RCC_OscConfig+0x32c>)
 8001faa:	681a      	ldr	r2, [r3, #0]
 8001fac:	2380      	movs	r3, #128	@ 0x80
 8001fae:	00db      	lsls	r3, r3, #3
 8001fb0:	4013      	ands	r3, r2
 8001fb2:	d1f0      	bne.n	8001f96 <HAL_RCC_OscConfig+0x236>
 8001fb4:	e000      	b.n	8001fb8 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001fb6:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	2208      	movs	r2, #8
 8001fbe:	4013      	ands	r3, r2
 8001fc0:	d047      	beq.n	8002052 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001fc2:	4b32      	ldr	r3, [pc, #200]	@ (800208c <HAL_RCC_OscConfig+0x32c>)
 8001fc4:	689b      	ldr	r3, [r3, #8]
 8001fc6:	2238      	movs	r2, #56	@ 0x38
 8001fc8:	4013      	ands	r3, r2
 8001fca:	2b18      	cmp	r3, #24
 8001fcc:	d10a      	bne.n	8001fe4 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8001fce:	4b2f      	ldr	r3, [pc, #188]	@ (800208c <HAL_RCC_OscConfig+0x32c>)
 8001fd0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001fd2:	2202      	movs	r2, #2
 8001fd4:	4013      	ands	r3, r2
 8001fd6:	d03c      	beq.n	8002052 <HAL_RCC_OscConfig+0x2f2>
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	699b      	ldr	r3, [r3, #24]
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d138      	bne.n	8002052 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8001fe0:	2301      	movs	r3, #1
 8001fe2:	e1c5      	b.n	8002370 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	699b      	ldr	r3, [r3, #24]
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d019      	beq.n	8002020 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8001fec:	4b27      	ldr	r3, [pc, #156]	@ (800208c <HAL_RCC_OscConfig+0x32c>)
 8001fee:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001ff0:	4b26      	ldr	r3, [pc, #152]	@ (800208c <HAL_RCC_OscConfig+0x32c>)
 8001ff2:	2101      	movs	r1, #1
 8001ff4:	430a      	orrs	r2, r1
 8001ff6:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ff8:	f7ff f9ba 	bl	8001370 <HAL_GetTick>
 8001ffc:	0003      	movs	r3, r0
 8001ffe:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002000:	e008      	b.n	8002014 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002002:	f7ff f9b5 	bl	8001370 <HAL_GetTick>
 8002006:	0002      	movs	r2, r0
 8002008:	693b      	ldr	r3, [r7, #16]
 800200a:	1ad3      	subs	r3, r2, r3
 800200c:	2b02      	cmp	r3, #2
 800200e:	d901      	bls.n	8002014 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8002010:	2303      	movs	r3, #3
 8002012:	e1ad      	b.n	8002370 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002014:	4b1d      	ldr	r3, [pc, #116]	@ (800208c <HAL_RCC_OscConfig+0x32c>)
 8002016:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002018:	2202      	movs	r2, #2
 800201a:	4013      	ands	r3, r2
 800201c:	d0f1      	beq.n	8002002 <HAL_RCC_OscConfig+0x2a2>
 800201e:	e018      	b.n	8002052 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8002020:	4b1a      	ldr	r3, [pc, #104]	@ (800208c <HAL_RCC_OscConfig+0x32c>)
 8002022:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002024:	4b19      	ldr	r3, [pc, #100]	@ (800208c <HAL_RCC_OscConfig+0x32c>)
 8002026:	2101      	movs	r1, #1
 8002028:	438a      	bics	r2, r1
 800202a:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800202c:	f7ff f9a0 	bl	8001370 <HAL_GetTick>
 8002030:	0003      	movs	r3, r0
 8002032:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002034:	e008      	b.n	8002048 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002036:	f7ff f99b 	bl	8001370 <HAL_GetTick>
 800203a:	0002      	movs	r2, r0
 800203c:	693b      	ldr	r3, [r7, #16]
 800203e:	1ad3      	subs	r3, r2, r3
 8002040:	2b02      	cmp	r3, #2
 8002042:	d901      	bls.n	8002048 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8002044:	2303      	movs	r3, #3
 8002046:	e193      	b.n	8002370 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002048:	4b10      	ldr	r3, [pc, #64]	@ (800208c <HAL_RCC_OscConfig+0x32c>)
 800204a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800204c:	2202      	movs	r2, #2
 800204e:	4013      	ands	r3, r2
 8002050:	d1f1      	bne.n	8002036 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	2204      	movs	r2, #4
 8002058:	4013      	ands	r3, r2
 800205a:	d100      	bne.n	800205e <HAL_RCC_OscConfig+0x2fe>
 800205c:	e0c6      	b.n	80021ec <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 800205e:	231f      	movs	r3, #31
 8002060:	18fb      	adds	r3, r7, r3
 8002062:	2200      	movs	r2, #0
 8002064:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002066:	4b09      	ldr	r3, [pc, #36]	@ (800208c <HAL_RCC_OscConfig+0x32c>)
 8002068:	689b      	ldr	r3, [r3, #8]
 800206a:	2238      	movs	r2, #56	@ 0x38
 800206c:	4013      	ands	r3, r2
 800206e:	2b20      	cmp	r3, #32
 8002070:	d11e      	bne.n	80020b0 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8002072:	4b06      	ldr	r3, [pc, #24]	@ (800208c <HAL_RCC_OscConfig+0x32c>)
 8002074:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002076:	2202      	movs	r2, #2
 8002078:	4013      	ands	r3, r2
 800207a:	d100      	bne.n	800207e <HAL_RCC_OscConfig+0x31e>
 800207c:	e0b6      	b.n	80021ec <HAL_RCC_OscConfig+0x48c>
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	689b      	ldr	r3, [r3, #8]
 8002082:	2b00      	cmp	r3, #0
 8002084:	d000      	beq.n	8002088 <HAL_RCC_OscConfig+0x328>
 8002086:	e0b1      	b.n	80021ec <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8002088:	2301      	movs	r3, #1
 800208a:	e171      	b.n	8002370 <HAL_RCC_OscConfig+0x610>
 800208c:	40021000 	.word	0x40021000
 8002090:	fffeffff 	.word	0xfffeffff
 8002094:	fffbffff 	.word	0xfffbffff
 8002098:	ffff80ff 	.word	0xffff80ff
 800209c:	ffffc7ff 	.word	0xffffc7ff
 80020a0:	00f42400 	.word	0x00f42400
 80020a4:	200001a8 	.word	0x200001a8
 80020a8:	200001ac 	.word	0x200001ac
 80020ac:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80020b0:	4bb1      	ldr	r3, [pc, #708]	@ (8002378 <HAL_RCC_OscConfig+0x618>)
 80020b2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80020b4:	2380      	movs	r3, #128	@ 0x80
 80020b6:	055b      	lsls	r3, r3, #21
 80020b8:	4013      	ands	r3, r2
 80020ba:	d101      	bne.n	80020c0 <HAL_RCC_OscConfig+0x360>
 80020bc:	2301      	movs	r3, #1
 80020be:	e000      	b.n	80020c2 <HAL_RCC_OscConfig+0x362>
 80020c0:	2300      	movs	r3, #0
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d011      	beq.n	80020ea <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80020c6:	4bac      	ldr	r3, [pc, #688]	@ (8002378 <HAL_RCC_OscConfig+0x618>)
 80020c8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80020ca:	4bab      	ldr	r3, [pc, #684]	@ (8002378 <HAL_RCC_OscConfig+0x618>)
 80020cc:	2180      	movs	r1, #128	@ 0x80
 80020ce:	0549      	lsls	r1, r1, #21
 80020d0:	430a      	orrs	r2, r1
 80020d2:	63da      	str	r2, [r3, #60]	@ 0x3c
 80020d4:	4ba8      	ldr	r3, [pc, #672]	@ (8002378 <HAL_RCC_OscConfig+0x618>)
 80020d6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80020d8:	2380      	movs	r3, #128	@ 0x80
 80020da:	055b      	lsls	r3, r3, #21
 80020dc:	4013      	ands	r3, r2
 80020de:	60fb      	str	r3, [r7, #12]
 80020e0:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80020e2:	231f      	movs	r3, #31
 80020e4:	18fb      	adds	r3, r7, r3
 80020e6:	2201      	movs	r2, #1
 80020e8:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80020ea:	4ba4      	ldr	r3, [pc, #656]	@ (800237c <HAL_RCC_OscConfig+0x61c>)
 80020ec:	681a      	ldr	r2, [r3, #0]
 80020ee:	2380      	movs	r3, #128	@ 0x80
 80020f0:	005b      	lsls	r3, r3, #1
 80020f2:	4013      	ands	r3, r2
 80020f4:	d11a      	bne.n	800212c <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80020f6:	4ba1      	ldr	r3, [pc, #644]	@ (800237c <HAL_RCC_OscConfig+0x61c>)
 80020f8:	681a      	ldr	r2, [r3, #0]
 80020fa:	4ba0      	ldr	r3, [pc, #640]	@ (800237c <HAL_RCC_OscConfig+0x61c>)
 80020fc:	2180      	movs	r1, #128	@ 0x80
 80020fe:	0049      	lsls	r1, r1, #1
 8002100:	430a      	orrs	r2, r1
 8002102:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8002104:	f7ff f934 	bl	8001370 <HAL_GetTick>
 8002108:	0003      	movs	r3, r0
 800210a:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800210c:	e008      	b.n	8002120 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800210e:	f7ff f92f 	bl	8001370 <HAL_GetTick>
 8002112:	0002      	movs	r2, r0
 8002114:	693b      	ldr	r3, [r7, #16]
 8002116:	1ad3      	subs	r3, r2, r3
 8002118:	2b02      	cmp	r3, #2
 800211a:	d901      	bls.n	8002120 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 800211c:	2303      	movs	r3, #3
 800211e:	e127      	b.n	8002370 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002120:	4b96      	ldr	r3, [pc, #600]	@ (800237c <HAL_RCC_OscConfig+0x61c>)
 8002122:	681a      	ldr	r2, [r3, #0]
 8002124:	2380      	movs	r3, #128	@ 0x80
 8002126:	005b      	lsls	r3, r3, #1
 8002128:	4013      	ands	r3, r2
 800212a:	d0f0      	beq.n	800210e <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	689b      	ldr	r3, [r3, #8]
 8002130:	2b01      	cmp	r3, #1
 8002132:	d106      	bne.n	8002142 <HAL_RCC_OscConfig+0x3e2>
 8002134:	4b90      	ldr	r3, [pc, #576]	@ (8002378 <HAL_RCC_OscConfig+0x618>)
 8002136:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002138:	4b8f      	ldr	r3, [pc, #572]	@ (8002378 <HAL_RCC_OscConfig+0x618>)
 800213a:	2101      	movs	r1, #1
 800213c:	430a      	orrs	r2, r1
 800213e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002140:	e01c      	b.n	800217c <HAL_RCC_OscConfig+0x41c>
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	689b      	ldr	r3, [r3, #8]
 8002146:	2b05      	cmp	r3, #5
 8002148:	d10c      	bne.n	8002164 <HAL_RCC_OscConfig+0x404>
 800214a:	4b8b      	ldr	r3, [pc, #556]	@ (8002378 <HAL_RCC_OscConfig+0x618>)
 800214c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800214e:	4b8a      	ldr	r3, [pc, #552]	@ (8002378 <HAL_RCC_OscConfig+0x618>)
 8002150:	2104      	movs	r1, #4
 8002152:	430a      	orrs	r2, r1
 8002154:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002156:	4b88      	ldr	r3, [pc, #544]	@ (8002378 <HAL_RCC_OscConfig+0x618>)
 8002158:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800215a:	4b87      	ldr	r3, [pc, #540]	@ (8002378 <HAL_RCC_OscConfig+0x618>)
 800215c:	2101      	movs	r1, #1
 800215e:	430a      	orrs	r2, r1
 8002160:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002162:	e00b      	b.n	800217c <HAL_RCC_OscConfig+0x41c>
 8002164:	4b84      	ldr	r3, [pc, #528]	@ (8002378 <HAL_RCC_OscConfig+0x618>)
 8002166:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002168:	4b83      	ldr	r3, [pc, #524]	@ (8002378 <HAL_RCC_OscConfig+0x618>)
 800216a:	2101      	movs	r1, #1
 800216c:	438a      	bics	r2, r1
 800216e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002170:	4b81      	ldr	r3, [pc, #516]	@ (8002378 <HAL_RCC_OscConfig+0x618>)
 8002172:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002174:	4b80      	ldr	r3, [pc, #512]	@ (8002378 <HAL_RCC_OscConfig+0x618>)
 8002176:	2104      	movs	r1, #4
 8002178:	438a      	bics	r2, r1
 800217a:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	689b      	ldr	r3, [r3, #8]
 8002180:	2b00      	cmp	r3, #0
 8002182:	d014      	beq.n	80021ae <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002184:	f7ff f8f4 	bl	8001370 <HAL_GetTick>
 8002188:	0003      	movs	r3, r0
 800218a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800218c:	e009      	b.n	80021a2 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800218e:	f7ff f8ef 	bl	8001370 <HAL_GetTick>
 8002192:	0002      	movs	r2, r0
 8002194:	693b      	ldr	r3, [r7, #16]
 8002196:	1ad3      	subs	r3, r2, r3
 8002198:	4a79      	ldr	r2, [pc, #484]	@ (8002380 <HAL_RCC_OscConfig+0x620>)
 800219a:	4293      	cmp	r3, r2
 800219c:	d901      	bls.n	80021a2 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 800219e:	2303      	movs	r3, #3
 80021a0:	e0e6      	b.n	8002370 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80021a2:	4b75      	ldr	r3, [pc, #468]	@ (8002378 <HAL_RCC_OscConfig+0x618>)
 80021a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021a6:	2202      	movs	r2, #2
 80021a8:	4013      	ands	r3, r2
 80021aa:	d0f0      	beq.n	800218e <HAL_RCC_OscConfig+0x42e>
 80021ac:	e013      	b.n	80021d6 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021ae:	f7ff f8df 	bl	8001370 <HAL_GetTick>
 80021b2:	0003      	movs	r3, r0
 80021b4:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80021b6:	e009      	b.n	80021cc <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021b8:	f7ff f8da 	bl	8001370 <HAL_GetTick>
 80021bc:	0002      	movs	r2, r0
 80021be:	693b      	ldr	r3, [r7, #16]
 80021c0:	1ad3      	subs	r3, r2, r3
 80021c2:	4a6f      	ldr	r2, [pc, #444]	@ (8002380 <HAL_RCC_OscConfig+0x620>)
 80021c4:	4293      	cmp	r3, r2
 80021c6:	d901      	bls.n	80021cc <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 80021c8:	2303      	movs	r3, #3
 80021ca:	e0d1      	b.n	8002370 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80021cc:	4b6a      	ldr	r3, [pc, #424]	@ (8002378 <HAL_RCC_OscConfig+0x618>)
 80021ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021d0:	2202      	movs	r2, #2
 80021d2:	4013      	ands	r3, r2
 80021d4:	d1f0      	bne.n	80021b8 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80021d6:	231f      	movs	r3, #31
 80021d8:	18fb      	adds	r3, r7, r3
 80021da:	781b      	ldrb	r3, [r3, #0]
 80021dc:	2b01      	cmp	r3, #1
 80021de:	d105      	bne.n	80021ec <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80021e0:	4b65      	ldr	r3, [pc, #404]	@ (8002378 <HAL_RCC_OscConfig+0x618>)
 80021e2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80021e4:	4b64      	ldr	r3, [pc, #400]	@ (8002378 <HAL_RCC_OscConfig+0x618>)
 80021e6:	4967      	ldr	r1, [pc, #412]	@ (8002384 <HAL_RCC_OscConfig+0x624>)
 80021e8:	400a      	ands	r2, r1
 80021ea:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	69db      	ldr	r3, [r3, #28]
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d100      	bne.n	80021f6 <HAL_RCC_OscConfig+0x496>
 80021f4:	e0bb      	b.n	800236e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80021f6:	4b60      	ldr	r3, [pc, #384]	@ (8002378 <HAL_RCC_OscConfig+0x618>)
 80021f8:	689b      	ldr	r3, [r3, #8]
 80021fa:	2238      	movs	r2, #56	@ 0x38
 80021fc:	4013      	ands	r3, r2
 80021fe:	2b10      	cmp	r3, #16
 8002200:	d100      	bne.n	8002204 <HAL_RCC_OscConfig+0x4a4>
 8002202:	e07b      	b.n	80022fc <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	69db      	ldr	r3, [r3, #28]
 8002208:	2b02      	cmp	r3, #2
 800220a:	d156      	bne.n	80022ba <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800220c:	4b5a      	ldr	r3, [pc, #360]	@ (8002378 <HAL_RCC_OscConfig+0x618>)
 800220e:	681a      	ldr	r2, [r3, #0]
 8002210:	4b59      	ldr	r3, [pc, #356]	@ (8002378 <HAL_RCC_OscConfig+0x618>)
 8002212:	495d      	ldr	r1, [pc, #372]	@ (8002388 <HAL_RCC_OscConfig+0x628>)
 8002214:	400a      	ands	r2, r1
 8002216:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002218:	f7ff f8aa 	bl	8001370 <HAL_GetTick>
 800221c:	0003      	movs	r3, r0
 800221e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002220:	e008      	b.n	8002234 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002222:	f7ff f8a5 	bl	8001370 <HAL_GetTick>
 8002226:	0002      	movs	r2, r0
 8002228:	693b      	ldr	r3, [r7, #16]
 800222a:	1ad3      	subs	r3, r2, r3
 800222c:	2b02      	cmp	r3, #2
 800222e:	d901      	bls.n	8002234 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8002230:	2303      	movs	r3, #3
 8002232:	e09d      	b.n	8002370 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002234:	4b50      	ldr	r3, [pc, #320]	@ (8002378 <HAL_RCC_OscConfig+0x618>)
 8002236:	681a      	ldr	r2, [r3, #0]
 8002238:	2380      	movs	r3, #128	@ 0x80
 800223a:	049b      	lsls	r3, r3, #18
 800223c:	4013      	ands	r3, r2
 800223e:	d1f0      	bne.n	8002222 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002240:	4b4d      	ldr	r3, [pc, #308]	@ (8002378 <HAL_RCC_OscConfig+0x618>)
 8002242:	68db      	ldr	r3, [r3, #12]
 8002244:	4a51      	ldr	r2, [pc, #324]	@ (800238c <HAL_RCC_OscConfig+0x62c>)
 8002246:	4013      	ands	r3, r2
 8002248:	0019      	movs	r1, r3
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6a1a      	ldr	r2, [r3, #32]
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002252:	431a      	orrs	r2, r3
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002258:	021b      	lsls	r3, r3, #8
 800225a:	431a      	orrs	r2, r3
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002260:	431a      	orrs	r2, r3
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002266:	431a      	orrs	r2, r3
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800226c:	431a      	orrs	r2, r3
 800226e:	4b42      	ldr	r3, [pc, #264]	@ (8002378 <HAL_RCC_OscConfig+0x618>)
 8002270:	430a      	orrs	r2, r1
 8002272:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002274:	4b40      	ldr	r3, [pc, #256]	@ (8002378 <HAL_RCC_OscConfig+0x618>)
 8002276:	681a      	ldr	r2, [r3, #0]
 8002278:	4b3f      	ldr	r3, [pc, #252]	@ (8002378 <HAL_RCC_OscConfig+0x618>)
 800227a:	2180      	movs	r1, #128	@ 0x80
 800227c:	0449      	lsls	r1, r1, #17
 800227e:	430a      	orrs	r2, r1
 8002280:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8002282:	4b3d      	ldr	r3, [pc, #244]	@ (8002378 <HAL_RCC_OscConfig+0x618>)
 8002284:	68da      	ldr	r2, [r3, #12]
 8002286:	4b3c      	ldr	r3, [pc, #240]	@ (8002378 <HAL_RCC_OscConfig+0x618>)
 8002288:	2180      	movs	r1, #128	@ 0x80
 800228a:	0549      	lsls	r1, r1, #21
 800228c:	430a      	orrs	r2, r1
 800228e:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002290:	f7ff f86e 	bl	8001370 <HAL_GetTick>
 8002294:	0003      	movs	r3, r0
 8002296:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002298:	e008      	b.n	80022ac <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800229a:	f7ff f869 	bl	8001370 <HAL_GetTick>
 800229e:	0002      	movs	r2, r0
 80022a0:	693b      	ldr	r3, [r7, #16]
 80022a2:	1ad3      	subs	r3, r2, r3
 80022a4:	2b02      	cmp	r3, #2
 80022a6:	d901      	bls.n	80022ac <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 80022a8:	2303      	movs	r3, #3
 80022aa:	e061      	b.n	8002370 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022ac:	4b32      	ldr	r3, [pc, #200]	@ (8002378 <HAL_RCC_OscConfig+0x618>)
 80022ae:	681a      	ldr	r2, [r3, #0]
 80022b0:	2380      	movs	r3, #128	@ 0x80
 80022b2:	049b      	lsls	r3, r3, #18
 80022b4:	4013      	ands	r3, r2
 80022b6:	d0f0      	beq.n	800229a <HAL_RCC_OscConfig+0x53a>
 80022b8:	e059      	b.n	800236e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022ba:	4b2f      	ldr	r3, [pc, #188]	@ (8002378 <HAL_RCC_OscConfig+0x618>)
 80022bc:	681a      	ldr	r2, [r3, #0]
 80022be:	4b2e      	ldr	r3, [pc, #184]	@ (8002378 <HAL_RCC_OscConfig+0x618>)
 80022c0:	4931      	ldr	r1, [pc, #196]	@ (8002388 <HAL_RCC_OscConfig+0x628>)
 80022c2:	400a      	ands	r2, r1
 80022c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022c6:	f7ff f853 	bl	8001370 <HAL_GetTick>
 80022ca:	0003      	movs	r3, r0
 80022cc:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80022ce:	e008      	b.n	80022e2 <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022d0:	f7ff f84e 	bl	8001370 <HAL_GetTick>
 80022d4:	0002      	movs	r2, r0
 80022d6:	693b      	ldr	r3, [r7, #16]
 80022d8:	1ad3      	subs	r3, r2, r3
 80022da:	2b02      	cmp	r3, #2
 80022dc:	d901      	bls.n	80022e2 <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 80022de:	2303      	movs	r3, #3
 80022e0:	e046      	b.n	8002370 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80022e2:	4b25      	ldr	r3, [pc, #148]	@ (8002378 <HAL_RCC_OscConfig+0x618>)
 80022e4:	681a      	ldr	r2, [r3, #0]
 80022e6:	2380      	movs	r3, #128	@ 0x80
 80022e8:	049b      	lsls	r3, r3, #18
 80022ea:	4013      	ands	r3, r2
 80022ec:	d1f0      	bne.n	80022d0 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 80022ee:	4b22      	ldr	r3, [pc, #136]	@ (8002378 <HAL_RCC_OscConfig+0x618>)
 80022f0:	68da      	ldr	r2, [r3, #12]
 80022f2:	4b21      	ldr	r3, [pc, #132]	@ (8002378 <HAL_RCC_OscConfig+0x618>)
 80022f4:	4926      	ldr	r1, [pc, #152]	@ (8002390 <HAL_RCC_OscConfig+0x630>)
 80022f6:	400a      	ands	r2, r1
 80022f8:	60da      	str	r2, [r3, #12]
 80022fa:	e038      	b.n	800236e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	69db      	ldr	r3, [r3, #28]
 8002300:	2b01      	cmp	r3, #1
 8002302:	d101      	bne.n	8002308 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8002304:	2301      	movs	r3, #1
 8002306:	e033      	b.n	8002370 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8002308:	4b1b      	ldr	r3, [pc, #108]	@ (8002378 <HAL_RCC_OscConfig+0x618>)
 800230a:	68db      	ldr	r3, [r3, #12]
 800230c:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800230e:	697b      	ldr	r3, [r7, #20]
 8002310:	2203      	movs	r2, #3
 8002312:	401a      	ands	r2, r3
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	6a1b      	ldr	r3, [r3, #32]
 8002318:	429a      	cmp	r2, r3
 800231a:	d126      	bne.n	800236a <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800231c:	697b      	ldr	r3, [r7, #20]
 800231e:	2270      	movs	r2, #112	@ 0x70
 8002320:	401a      	ands	r2, r3
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002326:	429a      	cmp	r2, r3
 8002328:	d11f      	bne.n	800236a <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800232a:	697a      	ldr	r2, [r7, #20]
 800232c:	23fe      	movs	r3, #254	@ 0xfe
 800232e:	01db      	lsls	r3, r3, #7
 8002330:	401a      	ands	r2, r3
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002336:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002338:	429a      	cmp	r2, r3
 800233a:	d116      	bne.n	800236a <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800233c:	697a      	ldr	r2, [r7, #20]
 800233e:	23f8      	movs	r3, #248	@ 0xf8
 8002340:	039b      	lsls	r3, r3, #14
 8002342:	401a      	ands	r2, r3
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002348:	429a      	cmp	r2, r3
 800234a:	d10e      	bne.n	800236a <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800234c:	697a      	ldr	r2, [r7, #20]
 800234e:	23e0      	movs	r3, #224	@ 0xe0
 8002350:	051b      	lsls	r3, r3, #20
 8002352:	401a      	ands	r2, r3
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002358:	429a      	cmp	r2, r3
 800235a:	d106      	bne.n	800236a <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800235c:	697b      	ldr	r3, [r7, #20]
 800235e:	0f5b      	lsrs	r3, r3, #29
 8002360:	075a      	lsls	r2, r3, #29
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002366:	429a      	cmp	r2, r3
 8002368:	d001      	beq.n	800236e <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 800236a:	2301      	movs	r3, #1
 800236c:	e000      	b.n	8002370 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 800236e:	2300      	movs	r3, #0
}
 8002370:	0018      	movs	r0, r3
 8002372:	46bd      	mov	sp, r7
 8002374:	b008      	add	sp, #32
 8002376:	bd80      	pop	{r7, pc}
 8002378:	40021000 	.word	0x40021000
 800237c:	40007000 	.word	0x40007000
 8002380:	00001388 	.word	0x00001388
 8002384:	efffffff 	.word	0xefffffff
 8002388:	feffffff 	.word	0xfeffffff
 800238c:	11c1808c 	.word	0x11c1808c
 8002390:	eefefffc 	.word	0xeefefffc

08002394 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b084      	sub	sp, #16
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
 800239c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d101      	bne.n	80023a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80023a4:	2301      	movs	r3, #1
 80023a6:	e0e9      	b.n	800257c <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80023a8:	4b76      	ldr	r3, [pc, #472]	@ (8002584 <HAL_RCC_ClockConfig+0x1f0>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	2207      	movs	r2, #7
 80023ae:	4013      	ands	r3, r2
 80023b0:	683a      	ldr	r2, [r7, #0]
 80023b2:	429a      	cmp	r2, r3
 80023b4:	d91e      	bls.n	80023f4 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023b6:	4b73      	ldr	r3, [pc, #460]	@ (8002584 <HAL_RCC_ClockConfig+0x1f0>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	2207      	movs	r2, #7
 80023bc:	4393      	bics	r3, r2
 80023be:	0019      	movs	r1, r3
 80023c0:	4b70      	ldr	r3, [pc, #448]	@ (8002584 <HAL_RCC_ClockConfig+0x1f0>)
 80023c2:	683a      	ldr	r2, [r7, #0]
 80023c4:	430a      	orrs	r2, r1
 80023c6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80023c8:	f7fe ffd2 	bl	8001370 <HAL_GetTick>
 80023cc:	0003      	movs	r3, r0
 80023ce:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80023d0:	e009      	b.n	80023e6 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023d2:	f7fe ffcd 	bl	8001370 <HAL_GetTick>
 80023d6:	0002      	movs	r2, r0
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	1ad3      	subs	r3, r2, r3
 80023dc:	4a6a      	ldr	r2, [pc, #424]	@ (8002588 <HAL_RCC_ClockConfig+0x1f4>)
 80023de:	4293      	cmp	r3, r2
 80023e0:	d901      	bls.n	80023e6 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80023e2:	2303      	movs	r3, #3
 80023e4:	e0ca      	b.n	800257c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80023e6:	4b67      	ldr	r3, [pc, #412]	@ (8002584 <HAL_RCC_ClockConfig+0x1f0>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	2207      	movs	r2, #7
 80023ec:	4013      	ands	r3, r2
 80023ee:	683a      	ldr	r2, [r7, #0]
 80023f0:	429a      	cmp	r2, r3
 80023f2:	d1ee      	bne.n	80023d2 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	2202      	movs	r2, #2
 80023fa:	4013      	ands	r3, r2
 80023fc:	d015      	beq.n	800242a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	2204      	movs	r2, #4
 8002404:	4013      	ands	r3, r2
 8002406:	d006      	beq.n	8002416 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002408:	4b60      	ldr	r3, [pc, #384]	@ (800258c <HAL_RCC_ClockConfig+0x1f8>)
 800240a:	689a      	ldr	r2, [r3, #8]
 800240c:	4b5f      	ldr	r3, [pc, #380]	@ (800258c <HAL_RCC_ClockConfig+0x1f8>)
 800240e:	21e0      	movs	r1, #224	@ 0xe0
 8002410:	01c9      	lsls	r1, r1, #7
 8002412:	430a      	orrs	r2, r1
 8002414:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002416:	4b5d      	ldr	r3, [pc, #372]	@ (800258c <HAL_RCC_ClockConfig+0x1f8>)
 8002418:	689b      	ldr	r3, [r3, #8]
 800241a:	4a5d      	ldr	r2, [pc, #372]	@ (8002590 <HAL_RCC_ClockConfig+0x1fc>)
 800241c:	4013      	ands	r3, r2
 800241e:	0019      	movs	r1, r3
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	689a      	ldr	r2, [r3, #8]
 8002424:	4b59      	ldr	r3, [pc, #356]	@ (800258c <HAL_RCC_ClockConfig+0x1f8>)
 8002426:	430a      	orrs	r2, r1
 8002428:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	2201      	movs	r2, #1
 8002430:	4013      	ands	r3, r2
 8002432:	d057      	beq.n	80024e4 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	685b      	ldr	r3, [r3, #4]
 8002438:	2b01      	cmp	r3, #1
 800243a:	d107      	bne.n	800244c <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800243c:	4b53      	ldr	r3, [pc, #332]	@ (800258c <HAL_RCC_ClockConfig+0x1f8>)
 800243e:	681a      	ldr	r2, [r3, #0]
 8002440:	2380      	movs	r3, #128	@ 0x80
 8002442:	029b      	lsls	r3, r3, #10
 8002444:	4013      	ands	r3, r2
 8002446:	d12b      	bne.n	80024a0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002448:	2301      	movs	r3, #1
 800244a:	e097      	b.n	800257c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	685b      	ldr	r3, [r3, #4]
 8002450:	2b02      	cmp	r3, #2
 8002452:	d107      	bne.n	8002464 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002454:	4b4d      	ldr	r3, [pc, #308]	@ (800258c <HAL_RCC_ClockConfig+0x1f8>)
 8002456:	681a      	ldr	r2, [r3, #0]
 8002458:	2380      	movs	r3, #128	@ 0x80
 800245a:	049b      	lsls	r3, r3, #18
 800245c:	4013      	ands	r3, r2
 800245e:	d11f      	bne.n	80024a0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002460:	2301      	movs	r3, #1
 8002462:	e08b      	b.n	800257c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	2b00      	cmp	r3, #0
 800246a:	d107      	bne.n	800247c <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800246c:	4b47      	ldr	r3, [pc, #284]	@ (800258c <HAL_RCC_ClockConfig+0x1f8>)
 800246e:	681a      	ldr	r2, [r3, #0]
 8002470:	2380      	movs	r3, #128	@ 0x80
 8002472:	00db      	lsls	r3, r3, #3
 8002474:	4013      	ands	r3, r2
 8002476:	d113      	bne.n	80024a0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002478:	2301      	movs	r3, #1
 800247a:	e07f      	b.n	800257c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	685b      	ldr	r3, [r3, #4]
 8002480:	2b03      	cmp	r3, #3
 8002482:	d106      	bne.n	8002492 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002484:	4b41      	ldr	r3, [pc, #260]	@ (800258c <HAL_RCC_ClockConfig+0x1f8>)
 8002486:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002488:	2202      	movs	r2, #2
 800248a:	4013      	ands	r3, r2
 800248c:	d108      	bne.n	80024a0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800248e:	2301      	movs	r3, #1
 8002490:	e074      	b.n	800257c <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002492:	4b3e      	ldr	r3, [pc, #248]	@ (800258c <HAL_RCC_ClockConfig+0x1f8>)
 8002494:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002496:	2202      	movs	r2, #2
 8002498:	4013      	ands	r3, r2
 800249a:	d101      	bne.n	80024a0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800249c:	2301      	movs	r3, #1
 800249e:	e06d      	b.n	800257c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80024a0:	4b3a      	ldr	r3, [pc, #232]	@ (800258c <HAL_RCC_ClockConfig+0x1f8>)
 80024a2:	689b      	ldr	r3, [r3, #8]
 80024a4:	2207      	movs	r2, #7
 80024a6:	4393      	bics	r3, r2
 80024a8:	0019      	movs	r1, r3
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	685a      	ldr	r2, [r3, #4]
 80024ae:	4b37      	ldr	r3, [pc, #220]	@ (800258c <HAL_RCC_ClockConfig+0x1f8>)
 80024b0:	430a      	orrs	r2, r1
 80024b2:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80024b4:	f7fe ff5c 	bl	8001370 <HAL_GetTick>
 80024b8:	0003      	movs	r3, r0
 80024ba:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024bc:	e009      	b.n	80024d2 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024be:	f7fe ff57 	bl	8001370 <HAL_GetTick>
 80024c2:	0002      	movs	r2, r0
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	1ad3      	subs	r3, r2, r3
 80024c8:	4a2f      	ldr	r2, [pc, #188]	@ (8002588 <HAL_RCC_ClockConfig+0x1f4>)
 80024ca:	4293      	cmp	r3, r2
 80024cc:	d901      	bls.n	80024d2 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80024ce:	2303      	movs	r3, #3
 80024d0:	e054      	b.n	800257c <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024d2:	4b2e      	ldr	r3, [pc, #184]	@ (800258c <HAL_RCC_ClockConfig+0x1f8>)
 80024d4:	689b      	ldr	r3, [r3, #8]
 80024d6:	2238      	movs	r2, #56	@ 0x38
 80024d8:	401a      	ands	r2, r3
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	685b      	ldr	r3, [r3, #4]
 80024de:	00db      	lsls	r3, r3, #3
 80024e0:	429a      	cmp	r2, r3
 80024e2:	d1ec      	bne.n	80024be <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80024e4:	4b27      	ldr	r3, [pc, #156]	@ (8002584 <HAL_RCC_ClockConfig+0x1f0>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	2207      	movs	r2, #7
 80024ea:	4013      	ands	r3, r2
 80024ec:	683a      	ldr	r2, [r7, #0]
 80024ee:	429a      	cmp	r2, r3
 80024f0:	d21e      	bcs.n	8002530 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024f2:	4b24      	ldr	r3, [pc, #144]	@ (8002584 <HAL_RCC_ClockConfig+0x1f0>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	2207      	movs	r2, #7
 80024f8:	4393      	bics	r3, r2
 80024fa:	0019      	movs	r1, r3
 80024fc:	4b21      	ldr	r3, [pc, #132]	@ (8002584 <HAL_RCC_ClockConfig+0x1f0>)
 80024fe:	683a      	ldr	r2, [r7, #0]
 8002500:	430a      	orrs	r2, r1
 8002502:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002504:	f7fe ff34 	bl	8001370 <HAL_GetTick>
 8002508:	0003      	movs	r3, r0
 800250a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800250c:	e009      	b.n	8002522 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800250e:	f7fe ff2f 	bl	8001370 <HAL_GetTick>
 8002512:	0002      	movs	r2, r0
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	1ad3      	subs	r3, r2, r3
 8002518:	4a1b      	ldr	r2, [pc, #108]	@ (8002588 <HAL_RCC_ClockConfig+0x1f4>)
 800251a:	4293      	cmp	r3, r2
 800251c:	d901      	bls.n	8002522 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 800251e:	2303      	movs	r3, #3
 8002520:	e02c      	b.n	800257c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002522:	4b18      	ldr	r3, [pc, #96]	@ (8002584 <HAL_RCC_ClockConfig+0x1f0>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	2207      	movs	r2, #7
 8002528:	4013      	ands	r3, r2
 800252a:	683a      	ldr	r2, [r7, #0]
 800252c:	429a      	cmp	r2, r3
 800252e:	d1ee      	bne.n	800250e <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	2204      	movs	r2, #4
 8002536:	4013      	ands	r3, r2
 8002538:	d009      	beq.n	800254e <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800253a:	4b14      	ldr	r3, [pc, #80]	@ (800258c <HAL_RCC_ClockConfig+0x1f8>)
 800253c:	689b      	ldr	r3, [r3, #8]
 800253e:	4a15      	ldr	r2, [pc, #84]	@ (8002594 <HAL_RCC_ClockConfig+0x200>)
 8002540:	4013      	ands	r3, r2
 8002542:	0019      	movs	r1, r3
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	68da      	ldr	r2, [r3, #12]
 8002548:	4b10      	ldr	r3, [pc, #64]	@ (800258c <HAL_RCC_ClockConfig+0x1f8>)
 800254a:	430a      	orrs	r2, r1
 800254c:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800254e:	f000 f829 	bl	80025a4 <HAL_RCC_GetSysClockFreq>
 8002552:	0001      	movs	r1, r0
 8002554:	4b0d      	ldr	r3, [pc, #52]	@ (800258c <HAL_RCC_ClockConfig+0x1f8>)
 8002556:	689b      	ldr	r3, [r3, #8]
 8002558:	0a1b      	lsrs	r3, r3, #8
 800255a:	220f      	movs	r2, #15
 800255c:	401a      	ands	r2, r3
 800255e:	4b0e      	ldr	r3, [pc, #56]	@ (8002598 <HAL_RCC_ClockConfig+0x204>)
 8002560:	0092      	lsls	r2, r2, #2
 8002562:	58d3      	ldr	r3, [r2, r3]
 8002564:	221f      	movs	r2, #31
 8002566:	4013      	ands	r3, r2
 8002568:	000a      	movs	r2, r1
 800256a:	40da      	lsrs	r2, r3
 800256c:	4b0b      	ldr	r3, [pc, #44]	@ (800259c <HAL_RCC_ClockConfig+0x208>)
 800256e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002570:	4b0b      	ldr	r3, [pc, #44]	@ (80025a0 <HAL_RCC_ClockConfig+0x20c>)
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	0018      	movs	r0, r3
 8002576:	f7fe fdb1 	bl	80010dc <HAL_InitTick>
 800257a:	0003      	movs	r3, r0
}
 800257c:	0018      	movs	r0, r3
 800257e:	46bd      	mov	sp, r7
 8002580:	b004      	add	sp, #16
 8002582:	bd80      	pop	{r7, pc}
 8002584:	40022000 	.word	0x40022000
 8002588:	00001388 	.word	0x00001388
 800258c:	40021000 	.word	0x40021000
 8002590:	fffff0ff 	.word	0xfffff0ff
 8002594:	ffff8fff 	.word	0xffff8fff
 8002598:	0800711c 	.word	0x0800711c
 800259c:	200001a8 	.word	0x200001a8
 80025a0:	200001ac 	.word	0x200001ac

080025a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b086      	sub	sp, #24
 80025a8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80025aa:	4b3c      	ldr	r3, [pc, #240]	@ (800269c <HAL_RCC_GetSysClockFreq+0xf8>)
 80025ac:	689b      	ldr	r3, [r3, #8]
 80025ae:	2238      	movs	r2, #56	@ 0x38
 80025b0:	4013      	ands	r3, r2
 80025b2:	d10f      	bne.n	80025d4 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80025b4:	4b39      	ldr	r3, [pc, #228]	@ (800269c <HAL_RCC_GetSysClockFreq+0xf8>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	0adb      	lsrs	r3, r3, #11
 80025ba:	2207      	movs	r2, #7
 80025bc:	4013      	ands	r3, r2
 80025be:	2201      	movs	r2, #1
 80025c0:	409a      	lsls	r2, r3
 80025c2:	0013      	movs	r3, r2
 80025c4:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80025c6:	6839      	ldr	r1, [r7, #0]
 80025c8:	4835      	ldr	r0, [pc, #212]	@ (80026a0 <HAL_RCC_GetSysClockFreq+0xfc>)
 80025ca:	f7fd fdaf 	bl	800012c <__udivsi3>
 80025ce:	0003      	movs	r3, r0
 80025d0:	613b      	str	r3, [r7, #16]
 80025d2:	e05d      	b.n	8002690 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80025d4:	4b31      	ldr	r3, [pc, #196]	@ (800269c <HAL_RCC_GetSysClockFreq+0xf8>)
 80025d6:	689b      	ldr	r3, [r3, #8]
 80025d8:	2238      	movs	r2, #56	@ 0x38
 80025da:	4013      	ands	r3, r2
 80025dc:	2b08      	cmp	r3, #8
 80025de:	d102      	bne.n	80025e6 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80025e0:	4b30      	ldr	r3, [pc, #192]	@ (80026a4 <HAL_RCC_GetSysClockFreq+0x100>)
 80025e2:	613b      	str	r3, [r7, #16]
 80025e4:	e054      	b.n	8002690 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80025e6:	4b2d      	ldr	r3, [pc, #180]	@ (800269c <HAL_RCC_GetSysClockFreq+0xf8>)
 80025e8:	689b      	ldr	r3, [r3, #8]
 80025ea:	2238      	movs	r2, #56	@ 0x38
 80025ec:	4013      	ands	r3, r2
 80025ee:	2b10      	cmp	r3, #16
 80025f0:	d138      	bne.n	8002664 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80025f2:	4b2a      	ldr	r3, [pc, #168]	@ (800269c <HAL_RCC_GetSysClockFreq+0xf8>)
 80025f4:	68db      	ldr	r3, [r3, #12]
 80025f6:	2203      	movs	r2, #3
 80025f8:	4013      	ands	r3, r2
 80025fa:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80025fc:	4b27      	ldr	r3, [pc, #156]	@ (800269c <HAL_RCC_GetSysClockFreq+0xf8>)
 80025fe:	68db      	ldr	r3, [r3, #12]
 8002600:	091b      	lsrs	r3, r3, #4
 8002602:	2207      	movs	r2, #7
 8002604:	4013      	ands	r3, r2
 8002606:	3301      	adds	r3, #1
 8002608:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	2b03      	cmp	r3, #3
 800260e:	d10d      	bne.n	800262c <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002610:	68b9      	ldr	r1, [r7, #8]
 8002612:	4824      	ldr	r0, [pc, #144]	@ (80026a4 <HAL_RCC_GetSysClockFreq+0x100>)
 8002614:	f7fd fd8a 	bl	800012c <__udivsi3>
 8002618:	0003      	movs	r3, r0
 800261a:	0019      	movs	r1, r3
 800261c:	4b1f      	ldr	r3, [pc, #124]	@ (800269c <HAL_RCC_GetSysClockFreq+0xf8>)
 800261e:	68db      	ldr	r3, [r3, #12]
 8002620:	0a1b      	lsrs	r3, r3, #8
 8002622:	227f      	movs	r2, #127	@ 0x7f
 8002624:	4013      	ands	r3, r2
 8002626:	434b      	muls	r3, r1
 8002628:	617b      	str	r3, [r7, #20]
        break;
 800262a:	e00d      	b.n	8002648 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 800262c:	68b9      	ldr	r1, [r7, #8]
 800262e:	481c      	ldr	r0, [pc, #112]	@ (80026a0 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002630:	f7fd fd7c 	bl	800012c <__udivsi3>
 8002634:	0003      	movs	r3, r0
 8002636:	0019      	movs	r1, r3
 8002638:	4b18      	ldr	r3, [pc, #96]	@ (800269c <HAL_RCC_GetSysClockFreq+0xf8>)
 800263a:	68db      	ldr	r3, [r3, #12]
 800263c:	0a1b      	lsrs	r3, r3, #8
 800263e:	227f      	movs	r2, #127	@ 0x7f
 8002640:	4013      	ands	r3, r2
 8002642:	434b      	muls	r3, r1
 8002644:	617b      	str	r3, [r7, #20]
        break;
 8002646:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8002648:	4b14      	ldr	r3, [pc, #80]	@ (800269c <HAL_RCC_GetSysClockFreq+0xf8>)
 800264a:	68db      	ldr	r3, [r3, #12]
 800264c:	0f5b      	lsrs	r3, r3, #29
 800264e:	2207      	movs	r2, #7
 8002650:	4013      	ands	r3, r2
 8002652:	3301      	adds	r3, #1
 8002654:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8002656:	6879      	ldr	r1, [r7, #4]
 8002658:	6978      	ldr	r0, [r7, #20]
 800265a:	f7fd fd67 	bl	800012c <__udivsi3>
 800265e:	0003      	movs	r3, r0
 8002660:	613b      	str	r3, [r7, #16]
 8002662:	e015      	b.n	8002690 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002664:	4b0d      	ldr	r3, [pc, #52]	@ (800269c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002666:	689b      	ldr	r3, [r3, #8]
 8002668:	2238      	movs	r2, #56	@ 0x38
 800266a:	4013      	ands	r3, r2
 800266c:	2b20      	cmp	r3, #32
 800266e:	d103      	bne.n	8002678 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8002670:	2380      	movs	r3, #128	@ 0x80
 8002672:	021b      	lsls	r3, r3, #8
 8002674:	613b      	str	r3, [r7, #16]
 8002676:	e00b      	b.n	8002690 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002678:	4b08      	ldr	r3, [pc, #32]	@ (800269c <HAL_RCC_GetSysClockFreq+0xf8>)
 800267a:	689b      	ldr	r3, [r3, #8]
 800267c:	2238      	movs	r2, #56	@ 0x38
 800267e:	4013      	ands	r3, r2
 8002680:	2b18      	cmp	r3, #24
 8002682:	d103      	bne.n	800268c <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8002684:	23fa      	movs	r3, #250	@ 0xfa
 8002686:	01db      	lsls	r3, r3, #7
 8002688:	613b      	str	r3, [r7, #16]
 800268a:	e001      	b.n	8002690 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 800268c:	2300      	movs	r3, #0
 800268e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002690:	693b      	ldr	r3, [r7, #16]
}
 8002692:	0018      	movs	r0, r3
 8002694:	46bd      	mov	sp, r7
 8002696:	b006      	add	sp, #24
 8002698:	bd80      	pop	{r7, pc}
 800269a:	46c0      	nop			@ (mov r8, r8)
 800269c:	40021000 	.word	0x40021000
 80026a0:	00f42400 	.word	0x00f42400
 80026a4:	007a1200 	.word	0x007a1200

080026a8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80026ac:	4b02      	ldr	r3, [pc, #8]	@ (80026b8 <HAL_RCC_GetHCLKFreq+0x10>)
 80026ae:	681b      	ldr	r3, [r3, #0]
}
 80026b0:	0018      	movs	r0, r3
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bd80      	pop	{r7, pc}
 80026b6:	46c0      	nop			@ (mov r8, r8)
 80026b8:	200001a8 	.word	0x200001a8

080026bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80026bc:	b5b0      	push	{r4, r5, r7, lr}
 80026be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80026c0:	f7ff fff2 	bl	80026a8 <HAL_RCC_GetHCLKFreq>
 80026c4:	0004      	movs	r4, r0
 80026c6:	f7ff fb3f 	bl	8001d48 <LL_RCC_GetAPB1Prescaler>
 80026ca:	0003      	movs	r3, r0
 80026cc:	0b1a      	lsrs	r2, r3, #12
 80026ce:	4b05      	ldr	r3, [pc, #20]	@ (80026e4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80026d0:	0092      	lsls	r2, r2, #2
 80026d2:	58d3      	ldr	r3, [r2, r3]
 80026d4:	221f      	movs	r2, #31
 80026d6:	4013      	ands	r3, r2
 80026d8:	40dc      	lsrs	r4, r3
 80026da:	0023      	movs	r3, r4
}
 80026dc:	0018      	movs	r0, r3
 80026de:	46bd      	mov	sp, r7
 80026e0:	bdb0      	pop	{r4, r5, r7, pc}
 80026e2:	46c0      	nop			@ (mov r8, r8)
 80026e4:	0800715c 	.word	0x0800715c

080026e8 <HAL_RCC_GetClockConfig>:
  *                           will be configured.
  * @param  pFLatency         Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b082      	sub	sp, #8
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
 80026f0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	2207      	movs	r2, #7
 80026f6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80026f8:	4b0e      	ldr	r3, [pc, #56]	@ (8002734 <HAL_RCC_GetClockConfig+0x4c>)
 80026fa:	689b      	ldr	r3, [r3, #8]
 80026fc:	2207      	movs	r2, #7
 80026fe:	401a      	ands	r2, r3
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002704:	4b0b      	ldr	r3, [pc, #44]	@ (8002734 <HAL_RCC_GetClockConfig+0x4c>)
 8002706:	689a      	ldr	r2, [r3, #8]
 8002708:	23f0      	movs	r3, #240	@ 0xf0
 800270a:	011b      	lsls	r3, r3, #4
 800270c:	401a      	ands	r2, r3
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE);
 8002712:	4b08      	ldr	r3, [pc, #32]	@ (8002734 <HAL_RCC_GetClockConfig+0x4c>)
 8002714:	689a      	ldr	r2, [r3, #8]
 8002716:	23e0      	movs	r3, #224	@ 0xe0
 8002718:	01db      	lsls	r3, r3, #7
 800271a:	401a      	ands	r2, r3
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	60da      	str	r2, [r3, #12]


  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002720:	4b05      	ldr	r3, [pc, #20]	@ (8002738 <HAL_RCC_GetClockConfig+0x50>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	2207      	movs	r2, #7
 8002726:	401a      	ands	r2, r3
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	601a      	str	r2, [r3, #0]
}
 800272c:	46c0      	nop			@ (mov r8, r8)
 800272e:	46bd      	mov	sp, r7
 8002730:	b002      	add	sp, #8
 8002732:	bd80      	pop	{r7, pc}
 8002734:	40021000 	.word	0x40021000
 8002738:	40022000 	.word	0x40022000

0800273c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b086      	sub	sp, #24
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8002744:	2313      	movs	r3, #19
 8002746:	18fb      	adds	r3, r7, r3
 8002748:	2200      	movs	r2, #0
 800274a:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800274c:	2312      	movs	r3, #18
 800274e:	18fb      	adds	r3, r7, r3
 8002750:	2200      	movs	r2, #0
 8002752:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681a      	ldr	r2, [r3, #0]
 8002758:	2380      	movs	r3, #128	@ 0x80
 800275a:	029b      	lsls	r3, r3, #10
 800275c:	4013      	ands	r3, r2
 800275e:	d100      	bne.n	8002762 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8002760:	e0a3      	b.n	80028aa <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002762:	2011      	movs	r0, #17
 8002764:	183b      	adds	r3, r7, r0
 8002766:	2200      	movs	r2, #0
 8002768:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800276a:	4bc3      	ldr	r3, [pc, #780]	@ (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800276c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800276e:	2380      	movs	r3, #128	@ 0x80
 8002770:	055b      	lsls	r3, r3, #21
 8002772:	4013      	ands	r3, r2
 8002774:	d110      	bne.n	8002798 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002776:	4bc0      	ldr	r3, [pc, #768]	@ (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002778:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800277a:	4bbf      	ldr	r3, [pc, #764]	@ (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800277c:	2180      	movs	r1, #128	@ 0x80
 800277e:	0549      	lsls	r1, r1, #21
 8002780:	430a      	orrs	r2, r1
 8002782:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002784:	4bbc      	ldr	r3, [pc, #752]	@ (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002786:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002788:	2380      	movs	r3, #128	@ 0x80
 800278a:	055b      	lsls	r3, r3, #21
 800278c:	4013      	ands	r3, r2
 800278e:	60bb      	str	r3, [r7, #8]
 8002790:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002792:	183b      	adds	r3, r7, r0
 8002794:	2201      	movs	r2, #1
 8002796:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002798:	4bb8      	ldr	r3, [pc, #736]	@ (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 800279a:	681a      	ldr	r2, [r3, #0]
 800279c:	4bb7      	ldr	r3, [pc, #732]	@ (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 800279e:	2180      	movs	r1, #128	@ 0x80
 80027a0:	0049      	lsls	r1, r1, #1
 80027a2:	430a      	orrs	r2, r1
 80027a4:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80027a6:	f7fe fde3 	bl	8001370 <HAL_GetTick>
 80027aa:	0003      	movs	r3, r0
 80027ac:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80027ae:	e00b      	b.n	80027c8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027b0:	f7fe fdde 	bl	8001370 <HAL_GetTick>
 80027b4:	0002      	movs	r2, r0
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	1ad3      	subs	r3, r2, r3
 80027ba:	2b02      	cmp	r3, #2
 80027bc:	d904      	bls.n	80027c8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 80027be:	2313      	movs	r3, #19
 80027c0:	18fb      	adds	r3, r7, r3
 80027c2:	2203      	movs	r2, #3
 80027c4:	701a      	strb	r2, [r3, #0]
        break;
 80027c6:	e005      	b.n	80027d4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80027c8:	4bac      	ldr	r3, [pc, #688]	@ (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80027ca:	681a      	ldr	r2, [r3, #0]
 80027cc:	2380      	movs	r3, #128	@ 0x80
 80027ce:	005b      	lsls	r3, r3, #1
 80027d0:	4013      	ands	r3, r2
 80027d2:	d0ed      	beq.n	80027b0 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 80027d4:	2313      	movs	r3, #19
 80027d6:	18fb      	adds	r3, r7, r3
 80027d8:	781b      	ldrb	r3, [r3, #0]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d154      	bne.n	8002888 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80027de:	4ba6      	ldr	r3, [pc, #664]	@ (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80027e0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80027e2:	23c0      	movs	r3, #192	@ 0xc0
 80027e4:	009b      	lsls	r3, r3, #2
 80027e6:	4013      	ands	r3, r2
 80027e8:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80027ea:	697b      	ldr	r3, [r7, #20]
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d019      	beq.n	8002824 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027f4:	697a      	ldr	r2, [r7, #20]
 80027f6:	429a      	cmp	r2, r3
 80027f8:	d014      	beq.n	8002824 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80027fa:	4b9f      	ldr	r3, [pc, #636]	@ (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80027fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027fe:	4aa0      	ldr	r2, [pc, #640]	@ (8002a80 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8002800:	4013      	ands	r3, r2
 8002802:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002804:	4b9c      	ldr	r3, [pc, #624]	@ (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002806:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002808:	4b9b      	ldr	r3, [pc, #620]	@ (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800280a:	2180      	movs	r1, #128	@ 0x80
 800280c:	0249      	lsls	r1, r1, #9
 800280e:	430a      	orrs	r2, r1
 8002810:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002812:	4b99      	ldr	r3, [pc, #612]	@ (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002814:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002816:	4b98      	ldr	r3, [pc, #608]	@ (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002818:	499a      	ldr	r1, [pc, #616]	@ (8002a84 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 800281a:	400a      	ands	r2, r1
 800281c:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800281e:	4b96      	ldr	r3, [pc, #600]	@ (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002820:	697a      	ldr	r2, [r7, #20]
 8002822:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002824:	697b      	ldr	r3, [r7, #20]
 8002826:	2201      	movs	r2, #1
 8002828:	4013      	ands	r3, r2
 800282a:	d016      	beq.n	800285a <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800282c:	f7fe fda0 	bl	8001370 <HAL_GetTick>
 8002830:	0003      	movs	r3, r0
 8002832:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002834:	e00c      	b.n	8002850 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002836:	f7fe fd9b 	bl	8001370 <HAL_GetTick>
 800283a:	0002      	movs	r2, r0
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	1ad3      	subs	r3, r2, r3
 8002840:	4a91      	ldr	r2, [pc, #580]	@ (8002a88 <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 8002842:	4293      	cmp	r3, r2
 8002844:	d904      	bls.n	8002850 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8002846:	2313      	movs	r3, #19
 8002848:	18fb      	adds	r3, r7, r3
 800284a:	2203      	movs	r2, #3
 800284c:	701a      	strb	r2, [r3, #0]
            break;
 800284e:	e004      	b.n	800285a <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002850:	4b89      	ldr	r3, [pc, #548]	@ (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002852:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002854:	2202      	movs	r2, #2
 8002856:	4013      	ands	r3, r2
 8002858:	d0ed      	beq.n	8002836 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 800285a:	2313      	movs	r3, #19
 800285c:	18fb      	adds	r3, r7, r3
 800285e:	781b      	ldrb	r3, [r3, #0]
 8002860:	2b00      	cmp	r3, #0
 8002862:	d10a      	bne.n	800287a <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002864:	4b84      	ldr	r3, [pc, #528]	@ (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002866:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002868:	4a85      	ldr	r2, [pc, #532]	@ (8002a80 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 800286a:	4013      	ands	r3, r2
 800286c:	0019      	movs	r1, r3
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002872:	4b81      	ldr	r3, [pc, #516]	@ (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002874:	430a      	orrs	r2, r1
 8002876:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002878:	e00c      	b.n	8002894 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800287a:	2312      	movs	r3, #18
 800287c:	18fb      	adds	r3, r7, r3
 800287e:	2213      	movs	r2, #19
 8002880:	18ba      	adds	r2, r7, r2
 8002882:	7812      	ldrb	r2, [r2, #0]
 8002884:	701a      	strb	r2, [r3, #0]
 8002886:	e005      	b.n	8002894 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002888:	2312      	movs	r3, #18
 800288a:	18fb      	adds	r3, r7, r3
 800288c:	2213      	movs	r2, #19
 800288e:	18ba      	adds	r2, r7, r2
 8002890:	7812      	ldrb	r2, [r2, #0]
 8002892:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002894:	2311      	movs	r3, #17
 8002896:	18fb      	adds	r3, r7, r3
 8002898:	781b      	ldrb	r3, [r3, #0]
 800289a:	2b01      	cmp	r3, #1
 800289c:	d105      	bne.n	80028aa <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800289e:	4b76      	ldr	r3, [pc, #472]	@ (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80028a0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80028a2:	4b75      	ldr	r3, [pc, #468]	@ (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80028a4:	4979      	ldr	r1, [pc, #484]	@ (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x350>)
 80028a6:	400a      	ands	r2, r1
 80028a8:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	2201      	movs	r2, #1
 80028b0:	4013      	ands	r3, r2
 80028b2:	d009      	beq.n	80028c8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80028b4:	4b70      	ldr	r3, [pc, #448]	@ (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80028b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028b8:	2203      	movs	r2, #3
 80028ba:	4393      	bics	r3, r2
 80028bc:	0019      	movs	r1, r3
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	685a      	ldr	r2, [r3, #4]
 80028c2:	4b6d      	ldr	r3, [pc, #436]	@ (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80028c4:	430a      	orrs	r2, r1
 80028c6:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	2202      	movs	r2, #2
 80028ce:	4013      	ands	r3, r2
 80028d0:	d009      	beq.n	80028e6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80028d2:	4b69      	ldr	r3, [pc, #420]	@ (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80028d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028d6:	220c      	movs	r2, #12
 80028d8:	4393      	bics	r3, r2
 80028da:	0019      	movs	r1, r3
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	689a      	ldr	r2, [r3, #8]
 80028e0:	4b65      	ldr	r3, [pc, #404]	@ (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80028e2:	430a      	orrs	r2, r1
 80028e4:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	2210      	movs	r2, #16
 80028ec:	4013      	ands	r3, r2
 80028ee:	d009      	beq.n	8002904 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80028f0:	4b61      	ldr	r3, [pc, #388]	@ (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80028f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028f4:	4a66      	ldr	r2, [pc, #408]	@ (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x354>)
 80028f6:	4013      	ands	r3, r2
 80028f8:	0019      	movs	r1, r3
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	68da      	ldr	r2, [r3, #12]
 80028fe:	4b5e      	ldr	r3, [pc, #376]	@ (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002900:	430a      	orrs	r2, r1
 8002902:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681a      	ldr	r2, [r3, #0]
 8002908:	2380      	movs	r3, #128	@ 0x80
 800290a:	009b      	lsls	r3, r3, #2
 800290c:	4013      	ands	r3, r2
 800290e:	d009      	beq.n	8002924 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002910:	4b59      	ldr	r3, [pc, #356]	@ (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002912:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002914:	4a5f      	ldr	r2, [pc, #380]	@ (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002916:	4013      	ands	r3, r2
 8002918:	0019      	movs	r1, r3
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	699a      	ldr	r2, [r3, #24]
 800291e:	4b56      	ldr	r3, [pc, #344]	@ (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002920:	430a      	orrs	r2, r1
 8002922:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681a      	ldr	r2, [r3, #0]
 8002928:	2380      	movs	r3, #128	@ 0x80
 800292a:	00db      	lsls	r3, r3, #3
 800292c:	4013      	ands	r3, r2
 800292e:	d009      	beq.n	8002944 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002930:	4b51      	ldr	r3, [pc, #324]	@ (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002932:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002934:	4a58      	ldr	r2, [pc, #352]	@ (8002a98 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002936:	4013      	ands	r3, r2
 8002938:	0019      	movs	r1, r3
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	69da      	ldr	r2, [r3, #28]
 800293e:	4b4e      	ldr	r3, [pc, #312]	@ (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002940:	430a      	orrs	r2, r1
 8002942:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	2220      	movs	r2, #32
 800294a:	4013      	ands	r3, r2
 800294c:	d009      	beq.n	8002962 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800294e:	4b4a      	ldr	r3, [pc, #296]	@ (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002950:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002952:	4a52      	ldr	r2, [pc, #328]	@ (8002a9c <HAL_RCCEx_PeriphCLKConfig+0x360>)
 8002954:	4013      	ands	r3, r2
 8002956:	0019      	movs	r1, r3
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	691a      	ldr	r2, [r3, #16]
 800295c:	4b46      	ldr	r3, [pc, #280]	@ (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800295e:	430a      	orrs	r2, r1
 8002960:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681a      	ldr	r2, [r3, #0]
 8002966:	2380      	movs	r3, #128	@ 0x80
 8002968:	01db      	lsls	r3, r3, #7
 800296a:	4013      	ands	r3, r2
 800296c:	d015      	beq.n	800299a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800296e:	4b42      	ldr	r3, [pc, #264]	@ (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002970:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002972:	009b      	lsls	r3, r3, #2
 8002974:	0899      	lsrs	r1, r3, #2
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6a1a      	ldr	r2, [r3, #32]
 800297a:	4b3f      	ldr	r3, [pc, #252]	@ (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800297c:	430a      	orrs	r2, r1
 800297e:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6a1a      	ldr	r2, [r3, #32]
 8002984:	2380      	movs	r3, #128	@ 0x80
 8002986:	05db      	lsls	r3, r3, #23
 8002988:	429a      	cmp	r2, r3
 800298a:	d106      	bne.n	800299a <HAL_RCCEx_PeriphCLKConfig+0x25e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800298c:	4b3a      	ldr	r3, [pc, #232]	@ (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800298e:	68da      	ldr	r2, [r3, #12]
 8002990:	4b39      	ldr	r3, [pc, #228]	@ (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002992:	2180      	movs	r1, #128	@ 0x80
 8002994:	0249      	lsls	r1, r1, #9
 8002996:	430a      	orrs	r2, r1
 8002998:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681a      	ldr	r2, [r3, #0]
 800299e:	2380      	movs	r3, #128	@ 0x80
 80029a0:	031b      	lsls	r3, r3, #12
 80029a2:	4013      	ands	r3, r2
 80029a4:	d009      	beq.n	80029ba <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80029a6:	4b34      	ldr	r3, [pc, #208]	@ (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80029a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029aa:	2240      	movs	r2, #64	@ 0x40
 80029ac:	4393      	bics	r3, r2
 80029ae:	0019      	movs	r1, r3
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80029b4:	4b30      	ldr	r3, [pc, #192]	@ (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80029b6:	430a      	orrs	r2, r1
 80029b8:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681a      	ldr	r2, [r3, #0]
 80029be:	2380      	movs	r3, #128	@ 0x80
 80029c0:	039b      	lsls	r3, r3, #14
 80029c2:	4013      	ands	r3, r2
 80029c4:	d016      	beq.n	80029f4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80029c6:	4b2c      	ldr	r3, [pc, #176]	@ (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80029c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029ca:	4a35      	ldr	r2, [pc, #212]	@ (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80029cc:	4013      	ands	r3, r2
 80029ce:	0019      	movs	r1, r3
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80029d4:	4b28      	ldr	r3, [pc, #160]	@ (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80029d6:	430a      	orrs	r2, r1
 80029d8:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80029de:	2380      	movs	r3, #128	@ 0x80
 80029e0:	03db      	lsls	r3, r3, #15
 80029e2:	429a      	cmp	r2, r3
 80029e4:	d106      	bne.n	80029f4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80029e6:	4b24      	ldr	r3, [pc, #144]	@ (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80029e8:	68da      	ldr	r2, [r3, #12]
 80029ea:	4b23      	ldr	r3, [pc, #140]	@ (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80029ec:	2180      	movs	r1, #128	@ 0x80
 80029ee:	0449      	lsls	r1, r1, #17
 80029f0:	430a      	orrs	r2, r1
 80029f2:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681a      	ldr	r2, [r3, #0]
 80029f8:	2380      	movs	r3, #128	@ 0x80
 80029fa:	03db      	lsls	r3, r3, #15
 80029fc:	4013      	ands	r3, r2
 80029fe:	d016      	beq.n	8002a2e <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002a00:	4b1d      	ldr	r3, [pc, #116]	@ (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002a02:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a04:	4a27      	ldr	r2, [pc, #156]	@ (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x368>)
 8002a06:	4013      	ands	r3, r2
 8002a08:	0019      	movs	r1, r3
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002a0e:	4b1a      	ldr	r3, [pc, #104]	@ (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002a10:	430a      	orrs	r2, r1
 8002a12:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002a18:	2380      	movs	r3, #128	@ 0x80
 8002a1a:	045b      	lsls	r3, r3, #17
 8002a1c:	429a      	cmp	r2, r3
 8002a1e:	d106      	bne.n	8002a2e <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002a20:	4b15      	ldr	r3, [pc, #84]	@ (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002a22:	68da      	ldr	r2, [r3, #12]
 8002a24:	4b14      	ldr	r3, [pc, #80]	@ (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002a26:	2180      	movs	r1, #128	@ 0x80
 8002a28:	0449      	lsls	r1, r1, #17
 8002a2a:	430a      	orrs	r2, r1
 8002a2c:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681a      	ldr	r2, [r3, #0]
 8002a32:	2380      	movs	r3, #128	@ 0x80
 8002a34:	011b      	lsls	r3, r3, #4
 8002a36:	4013      	ands	r3, r2
 8002a38:	d016      	beq.n	8002a68 <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8002a3a:	4b0f      	ldr	r3, [pc, #60]	@ (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002a3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a3e:	4a1a      	ldr	r2, [pc, #104]	@ (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 8002a40:	4013      	ands	r3, r2
 8002a42:	0019      	movs	r1, r3
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	695a      	ldr	r2, [r3, #20]
 8002a48:	4b0b      	ldr	r3, [pc, #44]	@ (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002a4a:	430a      	orrs	r2, r1
 8002a4c:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	695a      	ldr	r2, [r3, #20]
 8002a52:	2380      	movs	r3, #128	@ 0x80
 8002a54:	01db      	lsls	r3, r3, #7
 8002a56:	429a      	cmp	r2, r3
 8002a58:	d106      	bne.n	8002a68 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002a5a:	4b07      	ldr	r3, [pc, #28]	@ (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002a5c:	68da      	ldr	r2, [r3, #12]
 8002a5e:	4b06      	ldr	r3, [pc, #24]	@ (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002a60:	2180      	movs	r1, #128	@ 0x80
 8002a62:	0249      	lsls	r1, r1, #9
 8002a64:	430a      	orrs	r2, r1
 8002a66:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8002a68:	2312      	movs	r3, #18
 8002a6a:	18fb      	adds	r3, r7, r3
 8002a6c:	781b      	ldrb	r3, [r3, #0]
}
 8002a6e:	0018      	movs	r0, r3
 8002a70:	46bd      	mov	sp, r7
 8002a72:	b006      	add	sp, #24
 8002a74:	bd80      	pop	{r7, pc}
 8002a76:	46c0      	nop			@ (mov r8, r8)
 8002a78:	40021000 	.word	0x40021000
 8002a7c:	40007000 	.word	0x40007000
 8002a80:	fffffcff 	.word	0xfffffcff
 8002a84:	fffeffff 	.word	0xfffeffff
 8002a88:	00001388 	.word	0x00001388
 8002a8c:	efffffff 	.word	0xefffffff
 8002a90:	fffff3ff 	.word	0xfffff3ff
 8002a94:	fff3ffff 	.word	0xfff3ffff
 8002a98:	ffcfffff 	.word	0xffcfffff
 8002a9c:	ffffcfff 	.word	0xffffcfff
 8002aa0:	ffbfffff 	.word	0xffbfffff
 8002aa4:	feffffff 	.word	0xfeffffff
 8002aa8:	ffff3fff 	.word	0xffff3fff

08002aac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b082      	sub	sp, #8
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d101      	bne.n	8002abe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002aba:	2301      	movs	r3, #1
 8002abc:	e04a      	b.n	8002b54 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	223d      	movs	r2, #61	@ 0x3d
 8002ac2:	5c9b      	ldrb	r3, [r3, r2]
 8002ac4:	b2db      	uxtb	r3, r3
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d107      	bne.n	8002ada <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	223c      	movs	r2, #60	@ 0x3c
 8002ace:	2100      	movs	r1, #0
 8002ad0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	0018      	movs	r0, r3
 8002ad6:	f7fe fa4d 	bl	8000f74 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	223d      	movs	r2, #61	@ 0x3d
 8002ade:	2102      	movs	r1, #2
 8002ae0:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681a      	ldr	r2, [r3, #0]
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	3304      	adds	r3, #4
 8002aea:	0019      	movs	r1, r3
 8002aec:	0010      	movs	r0, r2
 8002aee:	f000 fa8f 	bl	8003010 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	2248      	movs	r2, #72	@ 0x48
 8002af6:	2101      	movs	r1, #1
 8002af8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	223e      	movs	r2, #62	@ 0x3e
 8002afe:	2101      	movs	r1, #1
 8002b00:	5499      	strb	r1, [r3, r2]
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	223f      	movs	r2, #63	@ 0x3f
 8002b06:	2101      	movs	r1, #1
 8002b08:	5499      	strb	r1, [r3, r2]
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	2240      	movs	r2, #64	@ 0x40
 8002b0e:	2101      	movs	r1, #1
 8002b10:	5499      	strb	r1, [r3, r2]
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	2241      	movs	r2, #65	@ 0x41
 8002b16:	2101      	movs	r1, #1
 8002b18:	5499      	strb	r1, [r3, r2]
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	2242      	movs	r2, #66	@ 0x42
 8002b1e:	2101      	movs	r1, #1
 8002b20:	5499      	strb	r1, [r3, r2]
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	2243      	movs	r2, #67	@ 0x43
 8002b26:	2101      	movs	r1, #1
 8002b28:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	2244      	movs	r2, #68	@ 0x44
 8002b2e:	2101      	movs	r1, #1
 8002b30:	5499      	strb	r1, [r3, r2]
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	2245      	movs	r2, #69	@ 0x45
 8002b36:	2101      	movs	r1, #1
 8002b38:	5499      	strb	r1, [r3, r2]
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	2246      	movs	r2, #70	@ 0x46
 8002b3e:	2101      	movs	r1, #1
 8002b40:	5499      	strb	r1, [r3, r2]
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	2247      	movs	r2, #71	@ 0x47
 8002b46:	2101      	movs	r1, #1
 8002b48:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	223d      	movs	r2, #61	@ 0x3d
 8002b4e:	2101      	movs	r1, #1
 8002b50:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002b52:	2300      	movs	r3, #0
}
 8002b54:	0018      	movs	r0, r3
 8002b56:	46bd      	mov	sp, r7
 8002b58:	b002      	add	sp, #8
 8002b5a:	bd80      	pop	{r7, pc}

08002b5c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b084      	sub	sp, #16
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	223d      	movs	r2, #61	@ 0x3d
 8002b68:	5c9b      	ldrb	r3, [r3, r2]
 8002b6a:	b2db      	uxtb	r3, r3
 8002b6c:	2b01      	cmp	r3, #1
 8002b6e:	d001      	beq.n	8002b74 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002b70:	2301      	movs	r3, #1
 8002b72:	e042      	b.n	8002bfa <HAL_TIM_Base_Start_IT+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	223d      	movs	r2, #61	@ 0x3d
 8002b78:	2102      	movs	r1, #2
 8002b7a:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	68da      	ldr	r2, [r3, #12]
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	2101      	movs	r1, #1
 8002b88:	430a      	orrs	r2, r1
 8002b8a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4a1c      	ldr	r2, [pc, #112]	@ (8002c04 <HAL_TIM_Base_Start_IT+0xa8>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d00f      	beq.n	8002bb6 <HAL_TIM_Base_Start_IT+0x5a>
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681a      	ldr	r2, [r3, #0]
 8002b9a:	2380      	movs	r3, #128	@ 0x80
 8002b9c:	05db      	lsls	r3, r3, #23
 8002b9e:	429a      	cmp	r2, r3
 8002ba0:	d009      	beq.n	8002bb6 <HAL_TIM_Base_Start_IT+0x5a>
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	4a18      	ldr	r2, [pc, #96]	@ (8002c08 <HAL_TIM_Base_Start_IT+0xac>)
 8002ba8:	4293      	cmp	r3, r2
 8002baa:	d004      	beq.n	8002bb6 <HAL_TIM_Base_Start_IT+0x5a>
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	4a16      	ldr	r2, [pc, #88]	@ (8002c0c <HAL_TIM_Base_Start_IT+0xb0>)
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d116      	bne.n	8002be4 <HAL_TIM_Base_Start_IT+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	689b      	ldr	r3, [r3, #8]
 8002bbc:	4a14      	ldr	r2, [pc, #80]	@ (8002c10 <HAL_TIM_Base_Start_IT+0xb4>)
 8002bbe:	4013      	ands	r3, r2
 8002bc0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	2b06      	cmp	r3, #6
 8002bc6:	d016      	beq.n	8002bf6 <HAL_TIM_Base_Start_IT+0x9a>
 8002bc8:	68fa      	ldr	r2, [r7, #12]
 8002bca:	2380      	movs	r3, #128	@ 0x80
 8002bcc:	025b      	lsls	r3, r3, #9
 8002bce:	429a      	cmp	r2, r3
 8002bd0:	d011      	beq.n	8002bf6 <HAL_TIM_Base_Start_IT+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	681a      	ldr	r2, [r3, #0]
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	2101      	movs	r1, #1
 8002bde:	430a      	orrs	r2, r1
 8002be0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002be2:	e008      	b.n	8002bf6 <HAL_TIM_Base_Start_IT+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	681a      	ldr	r2, [r3, #0]
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	2101      	movs	r1, #1
 8002bf0:	430a      	orrs	r2, r1
 8002bf2:	601a      	str	r2, [r3, #0]
 8002bf4:	e000      	b.n	8002bf8 <HAL_TIM_Base_Start_IT+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002bf6:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8002bf8:	2300      	movs	r3, #0
}
 8002bfa:	0018      	movs	r0, r3
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	b004      	add	sp, #16
 8002c00:	bd80      	pop	{r7, pc}
 8002c02:	46c0      	nop			@ (mov r8, r8)
 8002c04:	40012c00 	.word	0x40012c00
 8002c08:	40000400 	.word	0x40000400
 8002c0c:	40014000 	.word	0x40014000
 8002c10:	00010007 	.word	0x00010007

08002c14 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b084      	sub	sp, #16
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	68db      	ldr	r3, [r3, #12]
 8002c22:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	691b      	ldr	r3, [r3, #16]
 8002c2a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002c2c:	68bb      	ldr	r3, [r7, #8]
 8002c2e:	2202      	movs	r2, #2
 8002c30:	4013      	ands	r3, r2
 8002c32:	d021      	beq.n	8002c78 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	2202      	movs	r2, #2
 8002c38:	4013      	ands	r3, r2
 8002c3a:	d01d      	beq.n	8002c78 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	2203      	movs	r2, #3
 8002c42:	4252      	negs	r2, r2
 8002c44:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	2201      	movs	r2, #1
 8002c4a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	699b      	ldr	r3, [r3, #24]
 8002c52:	2203      	movs	r2, #3
 8002c54:	4013      	ands	r3, r2
 8002c56:	d004      	beq.n	8002c62 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	0018      	movs	r0, r3
 8002c5c:	f000 f9c0 	bl	8002fe0 <HAL_TIM_IC_CaptureCallback>
 8002c60:	e007      	b.n	8002c72 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	0018      	movs	r0, r3
 8002c66:	f000 f9b3 	bl	8002fd0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	0018      	movs	r0, r3
 8002c6e:	f000 f9bf 	bl	8002ff0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2200      	movs	r2, #0
 8002c76:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002c78:	68bb      	ldr	r3, [r7, #8]
 8002c7a:	2204      	movs	r2, #4
 8002c7c:	4013      	ands	r3, r2
 8002c7e:	d022      	beq.n	8002cc6 <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	2204      	movs	r2, #4
 8002c84:	4013      	ands	r3, r2
 8002c86:	d01e      	beq.n	8002cc6 <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	2205      	movs	r2, #5
 8002c8e:	4252      	negs	r2, r2
 8002c90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	2202      	movs	r2, #2
 8002c96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	699a      	ldr	r2, [r3, #24]
 8002c9e:	23c0      	movs	r3, #192	@ 0xc0
 8002ca0:	009b      	lsls	r3, r3, #2
 8002ca2:	4013      	ands	r3, r2
 8002ca4:	d004      	beq.n	8002cb0 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	0018      	movs	r0, r3
 8002caa:	f000 f999 	bl	8002fe0 <HAL_TIM_IC_CaptureCallback>
 8002cae:	e007      	b.n	8002cc0 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	0018      	movs	r0, r3
 8002cb4:	f000 f98c 	bl	8002fd0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	0018      	movs	r0, r3
 8002cbc:	f000 f998 	bl	8002ff0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002cc6:	68bb      	ldr	r3, [r7, #8]
 8002cc8:	2208      	movs	r2, #8
 8002cca:	4013      	ands	r3, r2
 8002ccc:	d021      	beq.n	8002d12 <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	2208      	movs	r2, #8
 8002cd2:	4013      	ands	r3, r2
 8002cd4:	d01d      	beq.n	8002d12 <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	2209      	movs	r2, #9
 8002cdc:	4252      	negs	r2, r2
 8002cde:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2204      	movs	r2, #4
 8002ce4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	69db      	ldr	r3, [r3, #28]
 8002cec:	2203      	movs	r2, #3
 8002cee:	4013      	ands	r3, r2
 8002cf0:	d004      	beq.n	8002cfc <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	0018      	movs	r0, r3
 8002cf6:	f000 f973 	bl	8002fe0 <HAL_TIM_IC_CaptureCallback>
 8002cfa:	e007      	b.n	8002d0c <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	0018      	movs	r0, r3
 8002d00:	f000 f966 	bl	8002fd0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	0018      	movs	r0, r3
 8002d08:	f000 f972 	bl	8002ff0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2200      	movs	r2, #0
 8002d10:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002d12:	68bb      	ldr	r3, [r7, #8]
 8002d14:	2210      	movs	r2, #16
 8002d16:	4013      	ands	r3, r2
 8002d18:	d022      	beq.n	8002d60 <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	2210      	movs	r2, #16
 8002d1e:	4013      	ands	r3, r2
 8002d20:	d01e      	beq.n	8002d60 <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	2211      	movs	r2, #17
 8002d28:	4252      	negs	r2, r2
 8002d2a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2208      	movs	r2, #8
 8002d30:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	69da      	ldr	r2, [r3, #28]
 8002d38:	23c0      	movs	r3, #192	@ 0xc0
 8002d3a:	009b      	lsls	r3, r3, #2
 8002d3c:	4013      	ands	r3, r2
 8002d3e:	d004      	beq.n	8002d4a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	0018      	movs	r0, r3
 8002d44:	f000 f94c 	bl	8002fe0 <HAL_TIM_IC_CaptureCallback>
 8002d48:	e007      	b.n	8002d5a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	0018      	movs	r0, r3
 8002d4e:	f000 f93f 	bl	8002fd0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	0018      	movs	r0, r3
 8002d56:	f000 f94b 	bl	8002ff0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002d60:	68bb      	ldr	r3, [r7, #8]
 8002d62:	2201      	movs	r2, #1
 8002d64:	4013      	ands	r3, r2
 8002d66:	d00c      	beq.n	8002d82 <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	2201      	movs	r2, #1
 8002d6c:	4013      	ands	r3, r2
 8002d6e:	d008      	beq.n	8002d82 <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	2202      	movs	r2, #2
 8002d76:	4252      	negs	r2, r2
 8002d78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	0018      	movs	r0, r3
 8002d7e:	f7fe f8b7 	bl	8000ef0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8002d82:	68bb      	ldr	r3, [r7, #8]
 8002d84:	2280      	movs	r2, #128	@ 0x80
 8002d86:	4013      	ands	r3, r2
 8002d88:	d104      	bne.n	8002d94 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8002d8a:	68ba      	ldr	r2, [r7, #8]
 8002d8c:	2380      	movs	r3, #128	@ 0x80
 8002d8e:	019b      	lsls	r3, r3, #6
 8002d90:	4013      	ands	r3, r2
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8002d92:	d00b      	beq.n	8002dac <HAL_TIM_IRQHandler+0x198>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	2280      	movs	r2, #128	@ 0x80
 8002d98:	4013      	ands	r3, r2
 8002d9a:	d007      	beq.n	8002dac <HAL_TIM_IRQHandler+0x198>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	4a1e      	ldr	r2, [pc, #120]	@ (8002e1c <HAL_TIM_IRQHandler+0x208>)
 8002da2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	0018      	movs	r0, r3
 8002da8:	f000 fad2 	bl	8003350 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8002dac:	68ba      	ldr	r2, [r7, #8]
 8002dae:	2380      	movs	r3, #128	@ 0x80
 8002db0:	005b      	lsls	r3, r3, #1
 8002db2:	4013      	ands	r3, r2
 8002db4:	d00b      	beq.n	8002dce <HAL_TIM_IRQHandler+0x1ba>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	2280      	movs	r2, #128	@ 0x80
 8002dba:	4013      	ands	r3, r2
 8002dbc:	d007      	beq.n	8002dce <HAL_TIM_IRQHandler+0x1ba>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4a17      	ldr	r2, [pc, #92]	@ (8002e20 <HAL_TIM_IRQHandler+0x20c>)
 8002dc4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	0018      	movs	r0, r3
 8002dca:	f000 fac9 	bl	8003360 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002dce:	68bb      	ldr	r3, [r7, #8]
 8002dd0:	2240      	movs	r2, #64	@ 0x40
 8002dd2:	4013      	ands	r3, r2
 8002dd4:	d00c      	beq.n	8002df0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	2240      	movs	r2, #64	@ 0x40
 8002dda:	4013      	ands	r3, r2
 8002ddc:	d008      	beq.n	8002df0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	2241      	movs	r2, #65	@ 0x41
 8002de4:	4252      	negs	r2, r2
 8002de6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	0018      	movs	r0, r3
 8002dec:	f000 f908 	bl	8003000 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002df0:	68bb      	ldr	r3, [r7, #8]
 8002df2:	2220      	movs	r2, #32
 8002df4:	4013      	ands	r3, r2
 8002df6:	d00c      	beq.n	8002e12 <HAL_TIM_IRQHandler+0x1fe>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	2220      	movs	r2, #32
 8002dfc:	4013      	ands	r3, r2
 8002dfe:	d008      	beq.n	8002e12 <HAL_TIM_IRQHandler+0x1fe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	2221      	movs	r2, #33	@ 0x21
 8002e06:	4252      	negs	r2, r2
 8002e08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	0018      	movs	r0, r3
 8002e0e:	f000 fa97 	bl	8003340 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002e12:	46c0      	nop			@ (mov r8, r8)
 8002e14:	46bd      	mov	sp, r7
 8002e16:	b004      	add	sp, #16
 8002e18:	bd80      	pop	{r7, pc}
 8002e1a:	46c0      	nop			@ (mov r8, r8)
 8002e1c:	ffffdf7f 	.word	0xffffdf7f
 8002e20:	fffffeff 	.word	0xfffffeff

08002e24 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b084      	sub	sp, #16
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
 8002e2c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002e2e:	230f      	movs	r3, #15
 8002e30:	18fb      	adds	r3, r7, r3
 8002e32:	2200      	movs	r2, #0
 8002e34:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	223c      	movs	r2, #60	@ 0x3c
 8002e3a:	5c9b      	ldrb	r3, [r3, r2]
 8002e3c:	2b01      	cmp	r3, #1
 8002e3e:	d101      	bne.n	8002e44 <HAL_TIM_ConfigClockSource+0x20>
 8002e40:	2302      	movs	r3, #2
 8002e42:	e0bc      	b.n	8002fbe <HAL_TIM_ConfigClockSource+0x19a>
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	223c      	movs	r2, #60	@ 0x3c
 8002e48:	2101      	movs	r1, #1
 8002e4a:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	223d      	movs	r2, #61	@ 0x3d
 8002e50:	2102      	movs	r1, #2
 8002e52:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	689b      	ldr	r3, [r3, #8]
 8002e5a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002e5c:	68bb      	ldr	r3, [r7, #8]
 8002e5e:	4a5a      	ldr	r2, [pc, #360]	@ (8002fc8 <HAL_TIM_ConfigClockSource+0x1a4>)
 8002e60:	4013      	ands	r3, r2
 8002e62:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002e64:	68bb      	ldr	r3, [r7, #8]
 8002e66:	4a59      	ldr	r2, [pc, #356]	@ (8002fcc <HAL_TIM_ConfigClockSource+0x1a8>)
 8002e68:	4013      	ands	r3, r2
 8002e6a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	68ba      	ldr	r2, [r7, #8]
 8002e72:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	2280      	movs	r2, #128	@ 0x80
 8002e7a:	0192      	lsls	r2, r2, #6
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	d040      	beq.n	8002f02 <HAL_TIM_ConfigClockSource+0xde>
 8002e80:	2280      	movs	r2, #128	@ 0x80
 8002e82:	0192      	lsls	r2, r2, #6
 8002e84:	4293      	cmp	r3, r2
 8002e86:	d900      	bls.n	8002e8a <HAL_TIM_ConfigClockSource+0x66>
 8002e88:	e088      	b.n	8002f9c <HAL_TIM_ConfigClockSource+0x178>
 8002e8a:	2280      	movs	r2, #128	@ 0x80
 8002e8c:	0152      	lsls	r2, r2, #5
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	d100      	bne.n	8002e94 <HAL_TIM_ConfigClockSource+0x70>
 8002e92:	e088      	b.n	8002fa6 <HAL_TIM_ConfigClockSource+0x182>
 8002e94:	2280      	movs	r2, #128	@ 0x80
 8002e96:	0152      	lsls	r2, r2, #5
 8002e98:	4293      	cmp	r3, r2
 8002e9a:	d900      	bls.n	8002e9e <HAL_TIM_ConfigClockSource+0x7a>
 8002e9c:	e07e      	b.n	8002f9c <HAL_TIM_ConfigClockSource+0x178>
 8002e9e:	2b70      	cmp	r3, #112	@ 0x70
 8002ea0:	d018      	beq.n	8002ed4 <HAL_TIM_ConfigClockSource+0xb0>
 8002ea2:	d900      	bls.n	8002ea6 <HAL_TIM_ConfigClockSource+0x82>
 8002ea4:	e07a      	b.n	8002f9c <HAL_TIM_ConfigClockSource+0x178>
 8002ea6:	2b60      	cmp	r3, #96	@ 0x60
 8002ea8:	d04f      	beq.n	8002f4a <HAL_TIM_ConfigClockSource+0x126>
 8002eaa:	d900      	bls.n	8002eae <HAL_TIM_ConfigClockSource+0x8a>
 8002eac:	e076      	b.n	8002f9c <HAL_TIM_ConfigClockSource+0x178>
 8002eae:	2b50      	cmp	r3, #80	@ 0x50
 8002eb0:	d03b      	beq.n	8002f2a <HAL_TIM_ConfigClockSource+0x106>
 8002eb2:	d900      	bls.n	8002eb6 <HAL_TIM_ConfigClockSource+0x92>
 8002eb4:	e072      	b.n	8002f9c <HAL_TIM_ConfigClockSource+0x178>
 8002eb6:	2b40      	cmp	r3, #64	@ 0x40
 8002eb8:	d057      	beq.n	8002f6a <HAL_TIM_ConfigClockSource+0x146>
 8002eba:	d900      	bls.n	8002ebe <HAL_TIM_ConfigClockSource+0x9a>
 8002ebc:	e06e      	b.n	8002f9c <HAL_TIM_ConfigClockSource+0x178>
 8002ebe:	2b30      	cmp	r3, #48	@ 0x30
 8002ec0:	d063      	beq.n	8002f8a <HAL_TIM_ConfigClockSource+0x166>
 8002ec2:	d86b      	bhi.n	8002f9c <HAL_TIM_ConfigClockSource+0x178>
 8002ec4:	2b20      	cmp	r3, #32
 8002ec6:	d060      	beq.n	8002f8a <HAL_TIM_ConfigClockSource+0x166>
 8002ec8:	d868      	bhi.n	8002f9c <HAL_TIM_ConfigClockSource+0x178>
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d05d      	beq.n	8002f8a <HAL_TIM_ConfigClockSource+0x166>
 8002ece:	2b10      	cmp	r3, #16
 8002ed0:	d05b      	beq.n	8002f8a <HAL_TIM_ConfigClockSource+0x166>
 8002ed2:	e063      	b.n	8002f9c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002ee4:	f000 f99e 	bl	8003224 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	689b      	ldr	r3, [r3, #8]
 8002eee:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002ef0:	68bb      	ldr	r3, [r7, #8]
 8002ef2:	2277      	movs	r2, #119	@ 0x77
 8002ef4:	4313      	orrs	r3, r2
 8002ef6:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	68ba      	ldr	r2, [r7, #8]
 8002efe:	609a      	str	r2, [r3, #8]
      break;
 8002f00:	e052      	b.n	8002fa8 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002f12:	f000 f987 	bl	8003224 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	689a      	ldr	r2, [r3, #8]
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	2180      	movs	r1, #128	@ 0x80
 8002f22:	01c9      	lsls	r1, r1, #7
 8002f24:	430a      	orrs	r2, r1
 8002f26:	609a      	str	r2, [r3, #8]
      break;
 8002f28:	e03e      	b.n	8002fa8 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f36:	001a      	movs	r2, r3
 8002f38:	f000 f8f8 	bl	800312c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	2150      	movs	r1, #80	@ 0x50
 8002f42:	0018      	movs	r0, r3
 8002f44:	f000 f952 	bl	80031ec <TIM_ITRx_SetConfig>
      break;
 8002f48:	e02e      	b.n	8002fa8 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002f4e:	683b      	ldr	r3, [r7, #0]
 8002f50:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002f56:	001a      	movs	r2, r3
 8002f58:	f000 f916 	bl	8003188 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	2160      	movs	r1, #96	@ 0x60
 8002f62:	0018      	movs	r0, r3
 8002f64:	f000 f942 	bl	80031ec <TIM_ITRx_SetConfig>
      break;
 8002f68:	e01e      	b.n	8002fa8 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f76:	001a      	movs	r2, r3
 8002f78:	f000 f8d8 	bl	800312c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	2140      	movs	r1, #64	@ 0x40
 8002f82:	0018      	movs	r0, r3
 8002f84:	f000 f932 	bl	80031ec <TIM_ITRx_SetConfig>
      break;
 8002f88:	e00e      	b.n	8002fa8 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681a      	ldr	r2, [r3, #0]
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	0019      	movs	r1, r3
 8002f94:	0010      	movs	r0, r2
 8002f96:	f000 f929 	bl	80031ec <TIM_ITRx_SetConfig>
      break;
 8002f9a:	e005      	b.n	8002fa8 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8002f9c:	230f      	movs	r3, #15
 8002f9e:	18fb      	adds	r3, r7, r3
 8002fa0:	2201      	movs	r2, #1
 8002fa2:	701a      	strb	r2, [r3, #0]
      break;
 8002fa4:	e000      	b.n	8002fa8 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8002fa6:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	223d      	movs	r2, #61	@ 0x3d
 8002fac:	2101      	movs	r1, #1
 8002fae:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	223c      	movs	r2, #60	@ 0x3c
 8002fb4:	2100      	movs	r1, #0
 8002fb6:	5499      	strb	r1, [r3, r2]

  return status;
 8002fb8:	230f      	movs	r3, #15
 8002fba:	18fb      	adds	r3, r7, r3
 8002fbc:	781b      	ldrb	r3, [r3, #0]
}
 8002fbe:	0018      	movs	r0, r3
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	b004      	add	sp, #16
 8002fc4:	bd80      	pop	{r7, pc}
 8002fc6:	46c0      	nop			@ (mov r8, r8)
 8002fc8:	ffceff88 	.word	0xffceff88
 8002fcc:	ffff00ff 	.word	0xffff00ff

08002fd0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b082      	sub	sp, #8
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002fd8:	46c0      	nop			@ (mov r8, r8)
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	b002      	add	sp, #8
 8002fde:	bd80      	pop	{r7, pc}

08002fe0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b082      	sub	sp, #8
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002fe8:	46c0      	nop			@ (mov r8, r8)
 8002fea:	46bd      	mov	sp, r7
 8002fec:	b002      	add	sp, #8
 8002fee:	bd80      	pop	{r7, pc}

08002ff0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b082      	sub	sp, #8
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002ff8:	46c0      	nop			@ (mov r8, r8)
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	b002      	add	sp, #8
 8002ffe:	bd80      	pop	{r7, pc}

08003000 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	b082      	sub	sp, #8
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003008:	46c0      	nop			@ (mov r8, r8)
 800300a:	46bd      	mov	sp, r7
 800300c:	b002      	add	sp, #8
 800300e:	bd80      	pop	{r7, pc}

08003010 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	b084      	sub	sp, #16
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
 8003018:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	4a3b      	ldr	r2, [pc, #236]	@ (8003110 <TIM_Base_SetConfig+0x100>)
 8003024:	4293      	cmp	r3, r2
 8003026:	d008      	beq.n	800303a <TIM_Base_SetConfig+0x2a>
 8003028:	687a      	ldr	r2, [r7, #4]
 800302a:	2380      	movs	r3, #128	@ 0x80
 800302c:	05db      	lsls	r3, r3, #23
 800302e:	429a      	cmp	r2, r3
 8003030:	d003      	beq.n	800303a <TIM_Base_SetConfig+0x2a>
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	4a37      	ldr	r2, [pc, #220]	@ (8003114 <TIM_Base_SetConfig+0x104>)
 8003036:	4293      	cmp	r3, r2
 8003038:	d108      	bne.n	800304c <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	2270      	movs	r2, #112	@ 0x70
 800303e:	4393      	bics	r3, r2
 8003040:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	685b      	ldr	r3, [r3, #4]
 8003046:	68fa      	ldr	r2, [r7, #12]
 8003048:	4313      	orrs	r3, r2
 800304a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	4a30      	ldr	r2, [pc, #192]	@ (8003110 <TIM_Base_SetConfig+0x100>)
 8003050:	4293      	cmp	r3, r2
 8003052:	d018      	beq.n	8003086 <TIM_Base_SetConfig+0x76>
 8003054:	687a      	ldr	r2, [r7, #4]
 8003056:	2380      	movs	r3, #128	@ 0x80
 8003058:	05db      	lsls	r3, r3, #23
 800305a:	429a      	cmp	r2, r3
 800305c:	d013      	beq.n	8003086 <TIM_Base_SetConfig+0x76>
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	4a2c      	ldr	r2, [pc, #176]	@ (8003114 <TIM_Base_SetConfig+0x104>)
 8003062:	4293      	cmp	r3, r2
 8003064:	d00f      	beq.n	8003086 <TIM_Base_SetConfig+0x76>
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	4a2b      	ldr	r2, [pc, #172]	@ (8003118 <TIM_Base_SetConfig+0x108>)
 800306a:	4293      	cmp	r3, r2
 800306c:	d00b      	beq.n	8003086 <TIM_Base_SetConfig+0x76>
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	4a2a      	ldr	r2, [pc, #168]	@ (800311c <TIM_Base_SetConfig+0x10c>)
 8003072:	4293      	cmp	r3, r2
 8003074:	d007      	beq.n	8003086 <TIM_Base_SetConfig+0x76>
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	4a29      	ldr	r2, [pc, #164]	@ (8003120 <TIM_Base_SetConfig+0x110>)
 800307a:	4293      	cmp	r3, r2
 800307c:	d003      	beq.n	8003086 <TIM_Base_SetConfig+0x76>
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	4a28      	ldr	r2, [pc, #160]	@ (8003124 <TIM_Base_SetConfig+0x114>)
 8003082:	4293      	cmp	r3, r2
 8003084:	d108      	bne.n	8003098 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	4a27      	ldr	r2, [pc, #156]	@ (8003128 <TIM_Base_SetConfig+0x118>)
 800308a:	4013      	ands	r3, r2
 800308c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	68db      	ldr	r3, [r3, #12]
 8003092:	68fa      	ldr	r2, [r7, #12]
 8003094:	4313      	orrs	r3, r2
 8003096:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	2280      	movs	r2, #128	@ 0x80
 800309c:	4393      	bics	r3, r2
 800309e:	001a      	movs	r2, r3
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	695b      	ldr	r3, [r3, #20]
 80030a4:	4313      	orrs	r3, r2
 80030a6:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	68fa      	ldr	r2, [r7, #12]
 80030ac:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	689a      	ldr	r2, [r3, #8]
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	681a      	ldr	r2, [r3, #0]
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	4a13      	ldr	r2, [pc, #76]	@ (8003110 <TIM_Base_SetConfig+0x100>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d00b      	beq.n	80030de <TIM_Base_SetConfig+0xce>
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	4a14      	ldr	r2, [pc, #80]	@ (800311c <TIM_Base_SetConfig+0x10c>)
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d007      	beq.n	80030de <TIM_Base_SetConfig+0xce>
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	4a13      	ldr	r2, [pc, #76]	@ (8003120 <TIM_Base_SetConfig+0x110>)
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d003      	beq.n	80030de <TIM_Base_SetConfig+0xce>
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	4a12      	ldr	r2, [pc, #72]	@ (8003124 <TIM_Base_SetConfig+0x114>)
 80030da:	4293      	cmp	r3, r2
 80030dc:	d103      	bne.n	80030e6 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	691a      	ldr	r2, [r3, #16]
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	2201      	movs	r2, #1
 80030ea:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	691b      	ldr	r3, [r3, #16]
 80030f0:	2201      	movs	r2, #1
 80030f2:	4013      	ands	r3, r2
 80030f4:	2b01      	cmp	r3, #1
 80030f6:	d106      	bne.n	8003106 <TIM_Base_SetConfig+0xf6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	691b      	ldr	r3, [r3, #16]
 80030fc:	2201      	movs	r2, #1
 80030fe:	4393      	bics	r3, r2
 8003100:	001a      	movs	r2, r3
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	611a      	str	r2, [r3, #16]
  }
}
 8003106:	46c0      	nop			@ (mov r8, r8)
 8003108:	46bd      	mov	sp, r7
 800310a:	b004      	add	sp, #16
 800310c:	bd80      	pop	{r7, pc}
 800310e:	46c0      	nop			@ (mov r8, r8)
 8003110:	40012c00 	.word	0x40012c00
 8003114:	40000400 	.word	0x40000400
 8003118:	40002000 	.word	0x40002000
 800311c:	40014000 	.word	0x40014000
 8003120:	40014400 	.word	0x40014400
 8003124:	40014800 	.word	0x40014800
 8003128:	fffffcff 	.word	0xfffffcff

0800312c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b086      	sub	sp, #24
 8003130:	af00      	add	r7, sp, #0
 8003132:	60f8      	str	r0, [r7, #12]
 8003134:	60b9      	str	r1, [r7, #8]
 8003136:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	6a1b      	ldr	r3, [r3, #32]
 800313c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	6a1b      	ldr	r3, [r3, #32]
 8003142:	2201      	movs	r2, #1
 8003144:	4393      	bics	r3, r2
 8003146:	001a      	movs	r2, r3
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	699b      	ldr	r3, [r3, #24]
 8003150:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003152:	693b      	ldr	r3, [r7, #16]
 8003154:	22f0      	movs	r2, #240	@ 0xf0
 8003156:	4393      	bics	r3, r2
 8003158:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	011b      	lsls	r3, r3, #4
 800315e:	693a      	ldr	r2, [r7, #16]
 8003160:	4313      	orrs	r3, r2
 8003162:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003164:	697b      	ldr	r3, [r7, #20]
 8003166:	220a      	movs	r2, #10
 8003168:	4393      	bics	r3, r2
 800316a:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800316c:	697a      	ldr	r2, [r7, #20]
 800316e:	68bb      	ldr	r3, [r7, #8]
 8003170:	4313      	orrs	r3, r2
 8003172:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	693a      	ldr	r2, [r7, #16]
 8003178:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	697a      	ldr	r2, [r7, #20]
 800317e:	621a      	str	r2, [r3, #32]
}
 8003180:	46c0      	nop			@ (mov r8, r8)
 8003182:	46bd      	mov	sp, r7
 8003184:	b006      	add	sp, #24
 8003186:	bd80      	pop	{r7, pc}

08003188 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b086      	sub	sp, #24
 800318c:	af00      	add	r7, sp, #0
 800318e:	60f8      	str	r0, [r7, #12]
 8003190:	60b9      	str	r1, [r7, #8]
 8003192:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	6a1b      	ldr	r3, [r3, #32]
 8003198:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	6a1b      	ldr	r3, [r3, #32]
 800319e:	2210      	movs	r2, #16
 80031a0:	4393      	bics	r3, r2
 80031a2:	001a      	movs	r2, r3
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	699b      	ldr	r3, [r3, #24]
 80031ac:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80031ae:	693b      	ldr	r3, [r7, #16]
 80031b0:	4a0d      	ldr	r2, [pc, #52]	@ (80031e8 <TIM_TI2_ConfigInputStage+0x60>)
 80031b2:	4013      	ands	r3, r2
 80031b4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	031b      	lsls	r3, r3, #12
 80031ba:	693a      	ldr	r2, [r7, #16]
 80031bc:	4313      	orrs	r3, r2
 80031be:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80031c0:	697b      	ldr	r3, [r7, #20]
 80031c2:	22a0      	movs	r2, #160	@ 0xa0
 80031c4:	4393      	bics	r3, r2
 80031c6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80031c8:	68bb      	ldr	r3, [r7, #8]
 80031ca:	011b      	lsls	r3, r3, #4
 80031cc:	697a      	ldr	r2, [r7, #20]
 80031ce:	4313      	orrs	r3, r2
 80031d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	693a      	ldr	r2, [r7, #16]
 80031d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	697a      	ldr	r2, [r7, #20]
 80031dc:	621a      	str	r2, [r3, #32]
}
 80031de:	46c0      	nop			@ (mov r8, r8)
 80031e0:	46bd      	mov	sp, r7
 80031e2:	b006      	add	sp, #24
 80031e4:	bd80      	pop	{r7, pc}
 80031e6:	46c0      	nop			@ (mov r8, r8)
 80031e8:	ffff0fff 	.word	0xffff0fff

080031ec <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b084      	sub	sp, #16
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
 80031f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	689b      	ldr	r3, [r3, #8]
 80031fa:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	4a08      	ldr	r2, [pc, #32]	@ (8003220 <TIM_ITRx_SetConfig+0x34>)
 8003200:	4013      	ands	r3, r2
 8003202:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003204:	683a      	ldr	r2, [r7, #0]
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	4313      	orrs	r3, r2
 800320a:	2207      	movs	r2, #7
 800320c:	4313      	orrs	r3, r2
 800320e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	68fa      	ldr	r2, [r7, #12]
 8003214:	609a      	str	r2, [r3, #8]
}
 8003216:	46c0      	nop			@ (mov r8, r8)
 8003218:	46bd      	mov	sp, r7
 800321a:	b004      	add	sp, #16
 800321c:	bd80      	pop	{r7, pc}
 800321e:	46c0      	nop			@ (mov r8, r8)
 8003220:	ffcfff8f 	.word	0xffcfff8f

08003224 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b086      	sub	sp, #24
 8003228:	af00      	add	r7, sp, #0
 800322a:	60f8      	str	r0, [r7, #12]
 800322c:	60b9      	str	r1, [r7, #8]
 800322e:	607a      	str	r2, [r7, #4]
 8003230:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	689b      	ldr	r3, [r3, #8]
 8003236:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003238:	697b      	ldr	r3, [r7, #20]
 800323a:	4a09      	ldr	r2, [pc, #36]	@ (8003260 <TIM_ETR_SetConfig+0x3c>)
 800323c:	4013      	ands	r3, r2
 800323e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	021a      	lsls	r2, r3, #8
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	431a      	orrs	r2, r3
 8003248:	68bb      	ldr	r3, [r7, #8]
 800324a:	4313      	orrs	r3, r2
 800324c:	697a      	ldr	r2, [r7, #20]
 800324e:	4313      	orrs	r3, r2
 8003250:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	697a      	ldr	r2, [r7, #20]
 8003256:	609a      	str	r2, [r3, #8]
}
 8003258:	46c0      	nop			@ (mov r8, r8)
 800325a:	46bd      	mov	sp, r7
 800325c:	b006      	add	sp, #24
 800325e:	bd80      	pop	{r7, pc}
 8003260:	ffff00ff 	.word	0xffff00ff

08003264 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b084      	sub	sp, #16
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
 800326c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	223c      	movs	r2, #60	@ 0x3c
 8003272:	5c9b      	ldrb	r3, [r3, r2]
 8003274:	2b01      	cmp	r3, #1
 8003276:	d101      	bne.n	800327c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003278:	2302      	movs	r3, #2
 800327a:	e055      	b.n	8003328 <HAL_TIMEx_MasterConfigSynchronization+0xc4>
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	223c      	movs	r2, #60	@ 0x3c
 8003280:	2101      	movs	r1, #1
 8003282:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	223d      	movs	r2, #61	@ 0x3d
 8003288:	2102      	movs	r1, #2
 800328a:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	685b      	ldr	r3, [r3, #4]
 8003292:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	689b      	ldr	r3, [r3, #8]
 800329a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	4a23      	ldr	r2, [pc, #140]	@ (8003330 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80032a2:	4293      	cmp	r3, r2
 80032a4:	d108      	bne.n	80032b8 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	4a22      	ldr	r2, [pc, #136]	@ (8003334 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80032aa:	4013      	ands	r3, r2
 80032ac:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	685b      	ldr	r3, [r3, #4]
 80032b2:	68fa      	ldr	r2, [r7, #12]
 80032b4:	4313      	orrs	r3, r2
 80032b6:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	2270      	movs	r2, #112	@ 0x70
 80032bc:	4393      	bics	r3, r2
 80032be:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	68fa      	ldr	r2, [r7, #12]
 80032c6:	4313      	orrs	r3, r2
 80032c8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	68fa      	ldr	r2, [r7, #12]
 80032d0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	4a16      	ldr	r2, [pc, #88]	@ (8003330 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80032d8:	4293      	cmp	r3, r2
 80032da:	d00f      	beq.n	80032fc <HAL_TIMEx_MasterConfigSynchronization+0x98>
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681a      	ldr	r2, [r3, #0]
 80032e0:	2380      	movs	r3, #128	@ 0x80
 80032e2:	05db      	lsls	r3, r3, #23
 80032e4:	429a      	cmp	r2, r3
 80032e6:	d009      	beq.n	80032fc <HAL_TIMEx_MasterConfigSynchronization+0x98>
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	4a12      	ldr	r2, [pc, #72]	@ (8003338 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d004      	beq.n	80032fc <HAL_TIMEx_MasterConfigSynchronization+0x98>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	4a11      	ldr	r2, [pc, #68]	@ (800333c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80032f8:	4293      	cmp	r3, r2
 80032fa:	d10c      	bne.n	8003316 <HAL_TIMEx_MasterConfigSynchronization+0xb2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80032fc:	68bb      	ldr	r3, [r7, #8]
 80032fe:	2280      	movs	r2, #128	@ 0x80
 8003300:	4393      	bics	r3, r2
 8003302:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	689b      	ldr	r3, [r3, #8]
 8003308:	68ba      	ldr	r2, [r7, #8]
 800330a:	4313      	orrs	r3, r2
 800330c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	68ba      	ldr	r2, [r7, #8]
 8003314:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	223d      	movs	r2, #61	@ 0x3d
 800331a:	2101      	movs	r1, #1
 800331c:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	223c      	movs	r2, #60	@ 0x3c
 8003322:	2100      	movs	r1, #0
 8003324:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003326:	2300      	movs	r3, #0
}
 8003328:	0018      	movs	r0, r3
 800332a:	46bd      	mov	sp, r7
 800332c:	b004      	add	sp, #16
 800332e:	bd80      	pop	{r7, pc}
 8003330:	40012c00 	.word	0x40012c00
 8003334:	ff0fffff 	.word	0xff0fffff
 8003338:	40000400 	.word	0x40000400
 800333c:	40014000 	.word	0x40014000

08003340 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b082      	sub	sp, #8
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003348:	46c0      	nop			@ (mov r8, r8)
 800334a:	46bd      	mov	sp, r7
 800334c:	b002      	add	sp, #8
 800334e:	bd80      	pop	{r7, pc}

08003350 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	b082      	sub	sp, #8
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003358:	46c0      	nop			@ (mov r8, r8)
 800335a:	46bd      	mov	sp, r7
 800335c:	b002      	add	sp, #8
 800335e:	bd80      	pop	{r7, pc}

08003360 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003360:	b580      	push	{r7, lr}
 8003362:	b082      	sub	sp, #8
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003368:	46c0      	nop			@ (mov r8, r8)
 800336a:	46bd      	mov	sp, r7
 800336c:	b002      	add	sp, #8
 800336e:	bd80      	pop	{r7, pc}

08003370 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	b082      	sub	sp, #8
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2b00      	cmp	r3, #0
 800337c:	d101      	bne.n	8003382 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800337e:	2301      	movs	r3, #1
 8003380:	e046      	b.n	8003410 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	2288      	movs	r2, #136	@ 0x88
 8003386:	589b      	ldr	r3, [r3, r2]
 8003388:	2b00      	cmp	r3, #0
 800338a:	d107      	bne.n	800339c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2284      	movs	r2, #132	@ 0x84
 8003390:	2100      	movs	r1, #0
 8003392:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	0018      	movs	r0, r3
 8003398:	f7fd fe38 	bl	800100c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2288      	movs	r2, #136	@ 0x88
 80033a0:	2124      	movs	r1, #36	@ 0x24
 80033a2:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	681a      	ldr	r2, [r3, #0]
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	2101      	movs	r1, #1
 80033b0:	438a      	bics	r2, r1
 80033b2:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d003      	beq.n	80033c4 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	0018      	movs	r0, r3
 80033c0:	f000 ff2e 	bl	8004220 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	0018      	movs	r0, r3
 80033c8:	f000 fc6c 	bl	8003ca4 <UART_SetConfig>
 80033cc:	0003      	movs	r3, r0
 80033ce:	2b01      	cmp	r3, #1
 80033d0:	d101      	bne.n	80033d6 <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 80033d2:	2301      	movs	r3, #1
 80033d4:	e01c      	b.n	8003410 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	685a      	ldr	r2, [r3, #4]
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	490d      	ldr	r1, [pc, #52]	@ (8003418 <HAL_UART_Init+0xa8>)
 80033e2:	400a      	ands	r2, r1
 80033e4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	689a      	ldr	r2, [r3, #8]
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	212a      	movs	r1, #42	@ 0x2a
 80033f2:	438a      	bics	r2, r1
 80033f4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	681a      	ldr	r2, [r3, #0]
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	2101      	movs	r1, #1
 8003402:	430a      	orrs	r2, r1
 8003404:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	0018      	movs	r0, r3
 800340a:	f000 ffbd 	bl	8004388 <UART_CheckIdleState>
 800340e:	0003      	movs	r3, r0
}
 8003410:	0018      	movs	r0, r3
 8003412:	46bd      	mov	sp, r7
 8003414:	b002      	add	sp, #8
 8003416:	bd80      	pop	{r7, pc}
 8003418:	ffffb7ff 	.word	0xffffb7ff

0800341c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	b08a      	sub	sp, #40	@ 0x28
 8003420:	af02      	add	r7, sp, #8
 8003422:	60f8      	str	r0, [r7, #12]
 8003424:	60b9      	str	r1, [r7, #8]
 8003426:	603b      	str	r3, [r7, #0]
 8003428:	1dbb      	adds	r3, r7, #6
 800342a:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	2288      	movs	r2, #136	@ 0x88
 8003430:	589b      	ldr	r3, [r3, r2]
 8003432:	2b20      	cmp	r3, #32
 8003434:	d000      	beq.n	8003438 <HAL_UART_Transmit+0x1c>
 8003436:	e090      	b.n	800355a <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003438:	68bb      	ldr	r3, [r7, #8]
 800343a:	2b00      	cmp	r3, #0
 800343c:	d003      	beq.n	8003446 <HAL_UART_Transmit+0x2a>
 800343e:	1dbb      	adds	r3, r7, #6
 8003440:	881b      	ldrh	r3, [r3, #0]
 8003442:	2b00      	cmp	r3, #0
 8003444:	d101      	bne.n	800344a <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8003446:	2301      	movs	r3, #1
 8003448:	e088      	b.n	800355c <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	689a      	ldr	r2, [r3, #8]
 800344e:	2380      	movs	r3, #128	@ 0x80
 8003450:	015b      	lsls	r3, r3, #5
 8003452:	429a      	cmp	r2, r3
 8003454:	d109      	bne.n	800346a <HAL_UART_Transmit+0x4e>
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	691b      	ldr	r3, [r3, #16]
 800345a:	2b00      	cmp	r3, #0
 800345c:	d105      	bne.n	800346a <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800345e:	68bb      	ldr	r3, [r7, #8]
 8003460:	2201      	movs	r2, #1
 8003462:	4013      	ands	r3, r2
 8003464:	d001      	beq.n	800346a <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8003466:	2301      	movs	r3, #1
 8003468:	e078      	b.n	800355c <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	2290      	movs	r2, #144	@ 0x90
 800346e:	2100      	movs	r1, #0
 8003470:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	2288      	movs	r2, #136	@ 0x88
 8003476:	2121      	movs	r1, #33	@ 0x21
 8003478:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800347a:	f7fd ff79 	bl	8001370 <HAL_GetTick>
 800347e:	0003      	movs	r3, r0
 8003480:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	1dba      	adds	r2, r7, #6
 8003486:	2154      	movs	r1, #84	@ 0x54
 8003488:	8812      	ldrh	r2, [r2, #0]
 800348a:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	1dba      	adds	r2, r7, #6
 8003490:	2156      	movs	r1, #86	@ 0x56
 8003492:	8812      	ldrh	r2, [r2, #0]
 8003494:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	689a      	ldr	r2, [r3, #8]
 800349a:	2380      	movs	r3, #128	@ 0x80
 800349c:	015b      	lsls	r3, r3, #5
 800349e:	429a      	cmp	r2, r3
 80034a0:	d108      	bne.n	80034b4 <HAL_UART_Transmit+0x98>
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	691b      	ldr	r3, [r3, #16]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d104      	bne.n	80034b4 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 80034aa:	2300      	movs	r3, #0
 80034ac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80034ae:	68bb      	ldr	r3, [r7, #8]
 80034b0:	61bb      	str	r3, [r7, #24]
 80034b2:	e003      	b.n	80034bc <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 80034b4:	68bb      	ldr	r3, [r7, #8]
 80034b6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80034b8:	2300      	movs	r3, #0
 80034ba:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80034bc:	e030      	b.n	8003520 <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80034be:	697a      	ldr	r2, [r7, #20]
 80034c0:	68f8      	ldr	r0, [r7, #12]
 80034c2:	683b      	ldr	r3, [r7, #0]
 80034c4:	9300      	str	r3, [sp, #0]
 80034c6:	0013      	movs	r3, r2
 80034c8:	2200      	movs	r2, #0
 80034ca:	2180      	movs	r1, #128	@ 0x80
 80034cc:	f001 f806 	bl	80044dc <UART_WaitOnFlagUntilTimeout>
 80034d0:	1e03      	subs	r3, r0, #0
 80034d2:	d005      	beq.n	80034e0 <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	2288      	movs	r2, #136	@ 0x88
 80034d8:	2120      	movs	r1, #32
 80034da:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 80034dc:	2303      	movs	r3, #3
 80034de:	e03d      	b.n	800355c <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 80034e0:	69fb      	ldr	r3, [r7, #28]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d10b      	bne.n	80034fe <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80034e6:	69bb      	ldr	r3, [r7, #24]
 80034e8:	881b      	ldrh	r3, [r3, #0]
 80034ea:	001a      	movs	r2, r3
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	05d2      	lsls	r2, r2, #23
 80034f2:	0dd2      	lsrs	r2, r2, #23
 80034f4:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80034f6:	69bb      	ldr	r3, [r7, #24]
 80034f8:	3302      	adds	r3, #2
 80034fa:	61bb      	str	r3, [r7, #24]
 80034fc:	e007      	b.n	800350e <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80034fe:	69fb      	ldr	r3, [r7, #28]
 8003500:	781a      	ldrb	r2, [r3, #0]
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8003508:	69fb      	ldr	r3, [r7, #28]
 800350a:	3301      	adds	r3, #1
 800350c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	2256      	movs	r2, #86	@ 0x56
 8003512:	5a9b      	ldrh	r3, [r3, r2]
 8003514:	b29b      	uxth	r3, r3
 8003516:	3b01      	subs	r3, #1
 8003518:	b299      	uxth	r1, r3
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	2256      	movs	r2, #86	@ 0x56
 800351e:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	2256      	movs	r2, #86	@ 0x56
 8003524:	5a9b      	ldrh	r3, [r3, r2]
 8003526:	b29b      	uxth	r3, r3
 8003528:	2b00      	cmp	r3, #0
 800352a:	d1c8      	bne.n	80034be <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800352c:	697a      	ldr	r2, [r7, #20]
 800352e:	68f8      	ldr	r0, [r7, #12]
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	9300      	str	r3, [sp, #0]
 8003534:	0013      	movs	r3, r2
 8003536:	2200      	movs	r2, #0
 8003538:	2140      	movs	r1, #64	@ 0x40
 800353a:	f000 ffcf 	bl	80044dc <UART_WaitOnFlagUntilTimeout>
 800353e:	1e03      	subs	r3, r0, #0
 8003540:	d005      	beq.n	800354e <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	2288      	movs	r2, #136	@ 0x88
 8003546:	2120      	movs	r1, #32
 8003548:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 800354a:	2303      	movs	r3, #3
 800354c:	e006      	b.n	800355c <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	2288      	movs	r2, #136	@ 0x88
 8003552:	2120      	movs	r1, #32
 8003554:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8003556:	2300      	movs	r3, #0
 8003558:	e000      	b.n	800355c <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 800355a:	2302      	movs	r3, #2
  }
}
 800355c:	0018      	movs	r0, r3
 800355e:	46bd      	mov	sp, r7
 8003560:	b008      	add	sp, #32
 8003562:	bd80      	pop	{r7, pc}

08003564 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003564:	b580      	push	{r7, lr}
 8003566:	b088      	sub	sp, #32
 8003568:	af00      	add	r7, sp, #0
 800356a:	60f8      	str	r0, [r7, #12]
 800356c:	60b9      	str	r1, [r7, #8]
 800356e:	1dbb      	adds	r3, r7, #6
 8003570:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	228c      	movs	r2, #140	@ 0x8c
 8003576:	589b      	ldr	r3, [r3, r2]
 8003578:	2b20      	cmp	r3, #32
 800357a:	d14a      	bne.n	8003612 <HAL_UART_Receive_IT+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 800357c:	68bb      	ldr	r3, [r7, #8]
 800357e:	2b00      	cmp	r3, #0
 8003580:	d003      	beq.n	800358a <HAL_UART_Receive_IT+0x26>
 8003582:	1dbb      	adds	r3, r7, #6
 8003584:	881b      	ldrh	r3, [r3, #0]
 8003586:	2b00      	cmp	r3, #0
 8003588:	d101      	bne.n	800358e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800358a:	2301      	movs	r3, #1
 800358c:	e042      	b.n	8003614 <HAL_UART_Receive_IT+0xb0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	689a      	ldr	r2, [r3, #8]
 8003592:	2380      	movs	r3, #128	@ 0x80
 8003594:	015b      	lsls	r3, r3, #5
 8003596:	429a      	cmp	r2, r3
 8003598:	d109      	bne.n	80035ae <HAL_UART_Receive_IT+0x4a>
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	691b      	ldr	r3, [r3, #16]
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d105      	bne.n	80035ae <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80035a2:	68bb      	ldr	r3, [r7, #8]
 80035a4:	2201      	movs	r2, #1
 80035a6:	4013      	ands	r3, r2
 80035a8:	d001      	beq.n	80035ae <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 80035aa:	2301      	movs	r3, #1
 80035ac:	e032      	b.n	8003614 <HAL_UART_Receive_IT+0xb0>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	2200      	movs	r2, #0
 80035b2:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	4a18      	ldr	r2, [pc, #96]	@ (800361c <HAL_UART_Receive_IT+0xb8>)
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d020      	beq.n	8003600 <HAL_UART_Receive_IT+0x9c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	685a      	ldr	r2, [r3, #4]
 80035c4:	2380      	movs	r3, #128	@ 0x80
 80035c6:	041b      	lsls	r3, r3, #16
 80035c8:	4013      	ands	r3, r2
 80035ca:	d019      	beq.n	8003600 <HAL_UART_Receive_IT+0x9c>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80035cc:	f3ef 8310 	mrs	r3, PRIMASK
 80035d0:	613b      	str	r3, [r7, #16]
  return(result);
 80035d2:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80035d4:	61fb      	str	r3, [r7, #28]
 80035d6:	2301      	movs	r3, #1
 80035d8:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035da:	697b      	ldr	r3, [r7, #20]
 80035dc:	f383 8810 	msr	PRIMASK, r3
}
 80035e0:	46c0      	nop			@ (mov r8, r8)
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	681a      	ldr	r2, [r3, #0]
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	2180      	movs	r1, #128	@ 0x80
 80035ee:	04c9      	lsls	r1, r1, #19
 80035f0:	430a      	orrs	r2, r1
 80035f2:	601a      	str	r2, [r3, #0]
 80035f4:	69fb      	ldr	r3, [r7, #28]
 80035f6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035f8:	69bb      	ldr	r3, [r7, #24]
 80035fa:	f383 8810 	msr	PRIMASK, r3
}
 80035fe:	46c0      	nop			@ (mov r8, r8)
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003600:	1dbb      	adds	r3, r7, #6
 8003602:	881a      	ldrh	r2, [r3, #0]
 8003604:	68b9      	ldr	r1, [r7, #8]
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	0018      	movs	r0, r3
 800360a:	f000 ffd7 	bl	80045bc <UART_Start_Receive_IT>
 800360e:	0003      	movs	r3, r0
 8003610:	e000      	b.n	8003614 <HAL_UART_Receive_IT+0xb0>
  }
  else
  {
    return HAL_BUSY;
 8003612:	2302      	movs	r3, #2
  }
}
 8003614:	0018      	movs	r0, r3
 8003616:	46bd      	mov	sp, r7
 8003618:	b008      	add	sp, #32
 800361a:	bd80      	pop	{r7, pc}
 800361c:	40008000 	.word	0x40008000

08003620 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003620:	b5b0      	push	{r4, r5, r7, lr}
 8003622:	b0aa      	sub	sp, #168	@ 0xa8
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	69db      	ldr	r3, [r3, #28]
 800362e:	22a4      	movs	r2, #164	@ 0xa4
 8003630:	18b9      	adds	r1, r7, r2
 8003632:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	20a0      	movs	r0, #160	@ 0xa0
 800363c:	1839      	adds	r1, r7, r0
 800363e:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	689b      	ldr	r3, [r3, #8]
 8003646:	249c      	movs	r4, #156	@ 0x9c
 8003648:	1939      	adds	r1, r7, r4
 800364a:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800364c:	0011      	movs	r1, r2
 800364e:	18bb      	adds	r3, r7, r2
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	4aa2      	ldr	r2, [pc, #648]	@ (80038dc <HAL_UART_IRQHandler+0x2bc>)
 8003654:	4013      	ands	r3, r2
 8003656:	2298      	movs	r2, #152	@ 0x98
 8003658:	18bd      	adds	r5, r7, r2
 800365a:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 800365c:	18bb      	adds	r3, r7, r2
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	2b00      	cmp	r3, #0
 8003662:	d11a      	bne.n	800369a <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003664:	187b      	adds	r3, r7, r1
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	2220      	movs	r2, #32
 800366a:	4013      	ands	r3, r2
 800366c:	d015      	beq.n	800369a <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800366e:	183b      	adds	r3, r7, r0
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	2220      	movs	r2, #32
 8003674:	4013      	ands	r3, r2
 8003676:	d105      	bne.n	8003684 <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003678:	193b      	adds	r3, r7, r4
 800367a:	681a      	ldr	r2, [r3, #0]
 800367c:	2380      	movs	r3, #128	@ 0x80
 800367e:	055b      	lsls	r3, r3, #21
 8003680:	4013      	ands	r3, r2
 8003682:	d00a      	beq.n	800369a <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003688:	2b00      	cmp	r3, #0
 800368a:	d100      	bne.n	800368e <HAL_UART_IRQHandler+0x6e>
 800368c:	e2dc      	b.n	8003c48 <HAL_UART_IRQHandler+0x628>
      {
        huart->RxISR(huart);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003692:	687a      	ldr	r2, [r7, #4]
 8003694:	0010      	movs	r0, r2
 8003696:	4798      	blx	r3
      }
      return;
 8003698:	e2d6      	b.n	8003c48 <HAL_UART_IRQHandler+0x628>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800369a:	2398      	movs	r3, #152	@ 0x98
 800369c:	18fb      	adds	r3, r7, r3
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d100      	bne.n	80036a6 <HAL_UART_IRQHandler+0x86>
 80036a4:	e122      	b.n	80038ec <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80036a6:	239c      	movs	r3, #156	@ 0x9c
 80036a8:	18fb      	adds	r3, r7, r3
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	4a8c      	ldr	r2, [pc, #560]	@ (80038e0 <HAL_UART_IRQHandler+0x2c0>)
 80036ae:	4013      	ands	r3, r2
 80036b0:	d106      	bne.n	80036c0 <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80036b2:	23a0      	movs	r3, #160	@ 0xa0
 80036b4:	18fb      	adds	r3, r7, r3
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	4a8a      	ldr	r2, [pc, #552]	@ (80038e4 <HAL_UART_IRQHandler+0x2c4>)
 80036ba:	4013      	ands	r3, r2
 80036bc:	d100      	bne.n	80036c0 <HAL_UART_IRQHandler+0xa0>
 80036be:	e115      	b.n	80038ec <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80036c0:	23a4      	movs	r3, #164	@ 0xa4
 80036c2:	18fb      	adds	r3, r7, r3
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	2201      	movs	r2, #1
 80036c8:	4013      	ands	r3, r2
 80036ca:	d012      	beq.n	80036f2 <HAL_UART_IRQHandler+0xd2>
 80036cc:	23a0      	movs	r3, #160	@ 0xa0
 80036ce:	18fb      	adds	r3, r7, r3
 80036d0:	681a      	ldr	r2, [r3, #0]
 80036d2:	2380      	movs	r3, #128	@ 0x80
 80036d4:	005b      	lsls	r3, r3, #1
 80036d6:	4013      	ands	r3, r2
 80036d8:	d00b      	beq.n	80036f2 <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	2201      	movs	r2, #1
 80036e0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	2290      	movs	r2, #144	@ 0x90
 80036e6:	589b      	ldr	r3, [r3, r2]
 80036e8:	2201      	movs	r2, #1
 80036ea:	431a      	orrs	r2, r3
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2190      	movs	r1, #144	@ 0x90
 80036f0:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80036f2:	23a4      	movs	r3, #164	@ 0xa4
 80036f4:	18fb      	adds	r3, r7, r3
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	2202      	movs	r2, #2
 80036fa:	4013      	ands	r3, r2
 80036fc:	d011      	beq.n	8003722 <HAL_UART_IRQHandler+0x102>
 80036fe:	239c      	movs	r3, #156	@ 0x9c
 8003700:	18fb      	adds	r3, r7, r3
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	2201      	movs	r2, #1
 8003706:	4013      	ands	r3, r2
 8003708:	d00b      	beq.n	8003722 <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	2202      	movs	r2, #2
 8003710:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	2290      	movs	r2, #144	@ 0x90
 8003716:	589b      	ldr	r3, [r3, r2]
 8003718:	2204      	movs	r2, #4
 800371a:	431a      	orrs	r2, r3
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2190      	movs	r1, #144	@ 0x90
 8003720:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003722:	23a4      	movs	r3, #164	@ 0xa4
 8003724:	18fb      	adds	r3, r7, r3
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	2204      	movs	r2, #4
 800372a:	4013      	ands	r3, r2
 800372c:	d011      	beq.n	8003752 <HAL_UART_IRQHandler+0x132>
 800372e:	239c      	movs	r3, #156	@ 0x9c
 8003730:	18fb      	adds	r3, r7, r3
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	2201      	movs	r2, #1
 8003736:	4013      	ands	r3, r2
 8003738:	d00b      	beq.n	8003752 <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	2204      	movs	r2, #4
 8003740:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2290      	movs	r2, #144	@ 0x90
 8003746:	589b      	ldr	r3, [r3, r2]
 8003748:	2202      	movs	r2, #2
 800374a:	431a      	orrs	r2, r3
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2190      	movs	r1, #144	@ 0x90
 8003750:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003752:	23a4      	movs	r3, #164	@ 0xa4
 8003754:	18fb      	adds	r3, r7, r3
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	2208      	movs	r2, #8
 800375a:	4013      	ands	r3, r2
 800375c:	d017      	beq.n	800378e <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800375e:	23a0      	movs	r3, #160	@ 0xa0
 8003760:	18fb      	adds	r3, r7, r3
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	2220      	movs	r2, #32
 8003766:	4013      	ands	r3, r2
 8003768:	d105      	bne.n	8003776 <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800376a:	239c      	movs	r3, #156	@ 0x9c
 800376c:	18fb      	adds	r3, r7, r3
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	4a5b      	ldr	r2, [pc, #364]	@ (80038e0 <HAL_UART_IRQHandler+0x2c0>)
 8003772:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8003774:	d00b      	beq.n	800378e <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	2208      	movs	r2, #8
 800377c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	2290      	movs	r2, #144	@ 0x90
 8003782:	589b      	ldr	r3, [r3, r2]
 8003784:	2208      	movs	r2, #8
 8003786:	431a      	orrs	r2, r3
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2190      	movs	r1, #144	@ 0x90
 800378c:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800378e:	23a4      	movs	r3, #164	@ 0xa4
 8003790:	18fb      	adds	r3, r7, r3
 8003792:	681a      	ldr	r2, [r3, #0]
 8003794:	2380      	movs	r3, #128	@ 0x80
 8003796:	011b      	lsls	r3, r3, #4
 8003798:	4013      	ands	r3, r2
 800379a:	d013      	beq.n	80037c4 <HAL_UART_IRQHandler+0x1a4>
 800379c:	23a0      	movs	r3, #160	@ 0xa0
 800379e:	18fb      	adds	r3, r7, r3
 80037a0:	681a      	ldr	r2, [r3, #0]
 80037a2:	2380      	movs	r3, #128	@ 0x80
 80037a4:	04db      	lsls	r3, r3, #19
 80037a6:	4013      	ands	r3, r2
 80037a8:	d00c      	beq.n	80037c4 <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	2280      	movs	r2, #128	@ 0x80
 80037b0:	0112      	lsls	r2, r2, #4
 80037b2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2290      	movs	r2, #144	@ 0x90
 80037b8:	589b      	ldr	r3, [r3, r2]
 80037ba:	2220      	movs	r2, #32
 80037bc:	431a      	orrs	r2, r3
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	2190      	movs	r1, #144	@ 0x90
 80037c2:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2290      	movs	r2, #144	@ 0x90
 80037c8:	589b      	ldr	r3, [r3, r2]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d100      	bne.n	80037d0 <HAL_UART_IRQHandler+0x1b0>
 80037ce:	e23d      	b.n	8003c4c <HAL_UART_IRQHandler+0x62c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80037d0:	23a4      	movs	r3, #164	@ 0xa4
 80037d2:	18fb      	adds	r3, r7, r3
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	2220      	movs	r2, #32
 80037d8:	4013      	ands	r3, r2
 80037da:	d015      	beq.n	8003808 <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80037dc:	23a0      	movs	r3, #160	@ 0xa0
 80037de:	18fb      	adds	r3, r7, r3
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	2220      	movs	r2, #32
 80037e4:	4013      	ands	r3, r2
 80037e6:	d106      	bne.n	80037f6 <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80037e8:	239c      	movs	r3, #156	@ 0x9c
 80037ea:	18fb      	adds	r3, r7, r3
 80037ec:	681a      	ldr	r2, [r3, #0]
 80037ee:	2380      	movs	r3, #128	@ 0x80
 80037f0:	055b      	lsls	r3, r3, #21
 80037f2:	4013      	ands	r3, r2
 80037f4:	d008      	beq.n	8003808 <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d004      	beq.n	8003808 <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003802:	687a      	ldr	r2, [r7, #4]
 8003804:	0010      	movs	r0, r2
 8003806:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2290      	movs	r2, #144	@ 0x90
 800380c:	589b      	ldr	r3, [r3, r2]
 800380e:	2194      	movs	r1, #148	@ 0x94
 8003810:	187a      	adds	r2, r7, r1
 8003812:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	689b      	ldr	r3, [r3, #8]
 800381a:	2240      	movs	r2, #64	@ 0x40
 800381c:	4013      	ands	r3, r2
 800381e:	2b40      	cmp	r3, #64	@ 0x40
 8003820:	d004      	beq.n	800382c <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003822:	187b      	adds	r3, r7, r1
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	2228      	movs	r2, #40	@ 0x28
 8003828:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800382a:	d04c      	beq.n	80038c6 <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	0018      	movs	r0, r3
 8003830:	f000 ffe8 	bl	8004804 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	689b      	ldr	r3, [r3, #8]
 800383a:	2240      	movs	r2, #64	@ 0x40
 800383c:	4013      	ands	r3, r2
 800383e:	2b40      	cmp	r3, #64	@ 0x40
 8003840:	d13c      	bne.n	80038bc <HAL_UART_IRQHandler+0x29c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003842:	f3ef 8310 	mrs	r3, PRIMASK
 8003846:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 8003848:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800384a:	2090      	movs	r0, #144	@ 0x90
 800384c:	183a      	adds	r2, r7, r0
 800384e:	6013      	str	r3, [r2, #0]
 8003850:	2301      	movs	r3, #1
 8003852:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003854:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003856:	f383 8810 	msr	PRIMASK, r3
}
 800385a:	46c0      	nop			@ (mov r8, r8)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	689a      	ldr	r2, [r3, #8]
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	2140      	movs	r1, #64	@ 0x40
 8003868:	438a      	bics	r2, r1
 800386a:	609a      	str	r2, [r3, #8]
 800386c:	183b      	adds	r3, r7, r0
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003872:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003874:	f383 8810 	msr	PRIMASK, r3
}
 8003878:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	2280      	movs	r2, #128	@ 0x80
 800387e:	589b      	ldr	r3, [r3, r2]
 8003880:	2b00      	cmp	r3, #0
 8003882:	d016      	beq.n	80038b2 <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2280      	movs	r2, #128	@ 0x80
 8003888:	589b      	ldr	r3, [r3, r2]
 800388a:	4a17      	ldr	r2, [pc, #92]	@ (80038e8 <HAL_UART_IRQHandler+0x2c8>)
 800388c:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	2280      	movs	r2, #128	@ 0x80
 8003892:	589b      	ldr	r3, [r3, r2]
 8003894:	0018      	movs	r0, r3
 8003896:	f7fd ff0f 	bl	80016b8 <HAL_DMA_Abort_IT>
 800389a:	1e03      	subs	r3, r0, #0
 800389c:	d01c      	beq.n	80038d8 <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	2280      	movs	r2, #128	@ 0x80
 80038a2:	589b      	ldr	r3, [r3, r2]
 80038a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038a6:	687a      	ldr	r2, [r7, #4]
 80038a8:	2180      	movs	r1, #128	@ 0x80
 80038aa:	5852      	ldr	r2, [r2, r1]
 80038ac:	0010      	movs	r0, r2
 80038ae:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038b0:	e012      	b.n	80038d8 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	0018      	movs	r0, r3
 80038b6:	f000 f9e1 	bl	8003c7c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038ba:	e00d      	b.n	80038d8 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	0018      	movs	r0, r3
 80038c0:	f000 f9dc 	bl	8003c7c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038c4:	e008      	b.n	80038d8 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	0018      	movs	r0, r3
 80038ca:	f000 f9d7 	bl	8003c7c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	2290      	movs	r2, #144	@ 0x90
 80038d2:	2100      	movs	r1, #0
 80038d4:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 80038d6:	e1b9      	b.n	8003c4c <HAL_UART_IRQHandler+0x62c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038d8:	46c0      	nop			@ (mov r8, r8)
    return;
 80038da:	e1b7      	b.n	8003c4c <HAL_UART_IRQHandler+0x62c>
 80038dc:	0000080f 	.word	0x0000080f
 80038e0:	10000001 	.word	0x10000001
 80038e4:	04000120 	.word	0x04000120
 80038e8:	080048d1 	.word	0x080048d1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80038f0:	2b01      	cmp	r3, #1
 80038f2:	d000      	beq.n	80038f6 <HAL_UART_IRQHandler+0x2d6>
 80038f4:	e13e      	b.n	8003b74 <HAL_UART_IRQHandler+0x554>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80038f6:	23a4      	movs	r3, #164	@ 0xa4
 80038f8:	18fb      	adds	r3, r7, r3
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	2210      	movs	r2, #16
 80038fe:	4013      	ands	r3, r2
 8003900:	d100      	bne.n	8003904 <HAL_UART_IRQHandler+0x2e4>
 8003902:	e137      	b.n	8003b74 <HAL_UART_IRQHandler+0x554>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003904:	23a0      	movs	r3, #160	@ 0xa0
 8003906:	18fb      	adds	r3, r7, r3
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	2210      	movs	r2, #16
 800390c:	4013      	ands	r3, r2
 800390e:	d100      	bne.n	8003912 <HAL_UART_IRQHandler+0x2f2>
 8003910:	e130      	b.n	8003b74 <HAL_UART_IRQHandler+0x554>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	2210      	movs	r2, #16
 8003918:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	689b      	ldr	r3, [r3, #8]
 8003920:	2240      	movs	r2, #64	@ 0x40
 8003922:	4013      	ands	r3, r2
 8003924:	2b40      	cmp	r3, #64	@ 0x40
 8003926:	d000      	beq.n	800392a <HAL_UART_IRQHandler+0x30a>
 8003928:	e0a4      	b.n	8003a74 <HAL_UART_IRQHandler+0x454>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	2280      	movs	r2, #128	@ 0x80
 800392e:	589b      	ldr	r3, [r3, r2]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	685a      	ldr	r2, [r3, #4]
 8003934:	217e      	movs	r1, #126	@ 0x7e
 8003936:	187b      	adds	r3, r7, r1
 8003938:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 800393a:	187b      	adds	r3, r7, r1
 800393c:	881b      	ldrh	r3, [r3, #0]
 800393e:	2b00      	cmp	r3, #0
 8003940:	d100      	bne.n	8003944 <HAL_UART_IRQHandler+0x324>
 8003942:	e185      	b.n	8003c50 <HAL_UART_IRQHandler+0x630>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	225c      	movs	r2, #92	@ 0x5c
 8003948:	5a9b      	ldrh	r3, [r3, r2]
 800394a:	187a      	adds	r2, r7, r1
 800394c:	8812      	ldrh	r2, [r2, #0]
 800394e:	429a      	cmp	r2, r3
 8003950:	d300      	bcc.n	8003954 <HAL_UART_IRQHandler+0x334>
 8003952:	e17d      	b.n	8003c50 <HAL_UART_IRQHandler+0x630>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	187a      	adds	r2, r7, r1
 8003958:	215e      	movs	r1, #94	@ 0x5e
 800395a:	8812      	ldrh	r2, [r2, #0]
 800395c:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	2280      	movs	r2, #128	@ 0x80
 8003962:	589b      	ldr	r3, [r3, r2]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	2220      	movs	r2, #32
 800396a:	4013      	ands	r3, r2
 800396c:	d170      	bne.n	8003a50 <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800396e:	f3ef 8310 	mrs	r3, PRIMASK
 8003972:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8003974:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003976:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003978:	2301      	movs	r3, #1
 800397a:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800397c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800397e:	f383 8810 	msr	PRIMASK, r3
}
 8003982:	46c0      	nop			@ (mov r8, r8)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	681a      	ldr	r2, [r3, #0]
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	49b4      	ldr	r1, [pc, #720]	@ (8003c60 <HAL_UART_IRQHandler+0x640>)
 8003990:	400a      	ands	r2, r1
 8003992:	601a      	str	r2, [r3, #0]
 8003994:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003996:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003998:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800399a:	f383 8810 	msr	PRIMASK, r3
}
 800399e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80039a0:	f3ef 8310 	mrs	r3, PRIMASK
 80039a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 80039a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039a8:	677b      	str	r3, [r7, #116]	@ 0x74
 80039aa:	2301      	movs	r3, #1
 80039ac:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039ae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80039b0:	f383 8810 	msr	PRIMASK, r3
}
 80039b4:	46c0      	nop			@ (mov r8, r8)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	689a      	ldr	r2, [r3, #8]
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	2101      	movs	r1, #1
 80039c2:	438a      	bics	r2, r1
 80039c4:	609a      	str	r2, [r3, #8]
 80039c6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80039c8:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039ca:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80039cc:	f383 8810 	msr	PRIMASK, r3
}
 80039d0:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80039d2:	f3ef 8310 	mrs	r3, PRIMASK
 80039d6:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 80039d8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80039da:	673b      	str	r3, [r7, #112]	@ 0x70
 80039dc:	2301      	movs	r3, #1
 80039de:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039e0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80039e2:	f383 8810 	msr	PRIMASK, r3
}
 80039e6:	46c0      	nop			@ (mov r8, r8)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	689a      	ldr	r2, [r3, #8]
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	2140      	movs	r1, #64	@ 0x40
 80039f4:	438a      	bics	r2, r1
 80039f6:	609a      	str	r2, [r3, #8]
 80039f8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80039fa:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039fc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80039fe:	f383 8810 	msr	PRIMASK, r3
}
 8003a02:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	228c      	movs	r2, #140	@ 0x8c
 8003a08:	2120      	movs	r1, #32
 8003a0a:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2200      	movs	r2, #0
 8003a10:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a12:	f3ef 8310 	mrs	r3, PRIMASK
 8003a16:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 8003a18:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a1a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003a1c:	2301      	movs	r3, #1
 8003a1e:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a20:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003a22:	f383 8810 	msr	PRIMASK, r3
}
 8003a26:	46c0      	nop			@ (mov r8, r8)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	681a      	ldr	r2, [r3, #0]
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	2110      	movs	r1, #16
 8003a34:	438a      	bics	r2, r1
 8003a36:	601a      	str	r2, [r3, #0]
 8003a38:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003a3a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a3c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003a3e:	f383 8810 	msr	PRIMASK, r3
}
 8003a42:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2280      	movs	r2, #128	@ 0x80
 8003a48:	589b      	ldr	r3, [r3, r2]
 8003a4a:	0018      	movs	r0, r3
 8003a4c:	f7fd fdd2 	bl	80015f4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2202      	movs	r2, #2
 8003a54:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	225c      	movs	r2, #92	@ 0x5c
 8003a5a:	5a9a      	ldrh	r2, [r3, r2]
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	215e      	movs	r1, #94	@ 0x5e
 8003a60:	5a5b      	ldrh	r3, [r3, r1]
 8003a62:	b29b      	uxth	r3, r3
 8003a64:	1ad3      	subs	r3, r2, r3
 8003a66:	b29a      	uxth	r2, r3
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	0011      	movs	r1, r2
 8003a6c:	0018      	movs	r0, r3
 8003a6e:	f000 f90d 	bl	8003c8c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003a72:	e0ed      	b.n	8003c50 <HAL_UART_IRQHandler+0x630>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	225c      	movs	r2, #92	@ 0x5c
 8003a78:	5a99      	ldrh	r1, [r3, r2]
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	225e      	movs	r2, #94	@ 0x5e
 8003a7e:	5a9b      	ldrh	r3, [r3, r2]
 8003a80:	b29a      	uxth	r2, r3
 8003a82:	208e      	movs	r0, #142	@ 0x8e
 8003a84:	183b      	adds	r3, r7, r0
 8003a86:	1a8a      	subs	r2, r1, r2
 8003a88:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	225e      	movs	r2, #94	@ 0x5e
 8003a8e:	5a9b      	ldrh	r3, [r3, r2]
 8003a90:	b29b      	uxth	r3, r3
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d100      	bne.n	8003a98 <HAL_UART_IRQHandler+0x478>
 8003a96:	e0dd      	b.n	8003c54 <HAL_UART_IRQHandler+0x634>
          && (nb_rx_data > 0U))
 8003a98:	183b      	adds	r3, r7, r0
 8003a9a:	881b      	ldrh	r3, [r3, #0]
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d100      	bne.n	8003aa2 <HAL_UART_IRQHandler+0x482>
 8003aa0:	e0d8      	b.n	8003c54 <HAL_UART_IRQHandler+0x634>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003aa2:	f3ef 8310 	mrs	r3, PRIMASK
 8003aa6:	60fb      	str	r3, [r7, #12]
  return(result);
 8003aa8:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003aaa:	2488      	movs	r4, #136	@ 0x88
 8003aac:	193a      	adds	r2, r7, r4
 8003aae:	6013      	str	r3, [r2, #0]
 8003ab0:	2301      	movs	r3, #1
 8003ab2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ab4:	693b      	ldr	r3, [r7, #16]
 8003ab6:	f383 8810 	msr	PRIMASK, r3
}
 8003aba:	46c0      	nop			@ (mov r8, r8)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	681a      	ldr	r2, [r3, #0]
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	4967      	ldr	r1, [pc, #412]	@ (8003c64 <HAL_UART_IRQHandler+0x644>)
 8003ac8:	400a      	ands	r2, r1
 8003aca:	601a      	str	r2, [r3, #0]
 8003acc:	193b      	adds	r3, r7, r4
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ad2:	697b      	ldr	r3, [r7, #20]
 8003ad4:	f383 8810 	msr	PRIMASK, r3
}
 8003ad8:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ada:	f3ef 8310 	mrs	r3, PRIMASK
 8003ade:	61bb      	str	r3, [r7, #24]
  return(result);
 8003ae0:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003ae2:	2484      	movs	r4, #132	@ 0x84
 8003ae4:	193a      	adds	r2, r7, r4
 8003ae6:	6013      	str	r3, [r2, #0]
 8003ae8:	2301      	movs	r3, #1
 8003aea:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003aec:	69fb      	ldr	r3, [r7, #28]
 8003aee:	f383 8810 	msr	PRIMASK, r3
}
 8003af2:	46c0      	nop			@ (mov r8, r8)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	689a      	ldr	r2, [r3, #8]
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	495a      	ldr	r1, [pc, #360]	@ (8003c68 <HAL_UART_IRQHandler+0x648>)
 8003b00:	400a      	ands	r2, r1
 8003b02:	609a      	str	r2, [r3, #8]
 8003b04:	193b      	adds	r3, r7, r4
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b0a:	6a3b      	ldr	r3, [r7, #32]
 8003b0c:	f383 8810 	msr	PRIMASK, r3
}
 8003b10:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	228c      	movs	r2, #140	@ 0x8c
 8003b16:	2120      	movs	r1, #32
 8003b18:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2200      	movs	r2, #0
 8003b24:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003b26:	f3ef 8310 	mrs	r3, PRIMASK
 8003b2a:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8003b2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b2e:	2480      	movs	r4, #128	@ 0x80
 8003b30:	193a      	adds	r2, r7, r4
 8003b32:	6013      	str	r3, [r2, #0]
 8003b34:	2301      	movs	r3, #1
 8003b36:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b3a:	f383 8810 	msr	PRIMASK, r3
}
 8003b3e:	46c0      	nop			@ (mov r8, r8)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	681a      	ldr	r2, [r3, #0]
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	2110      	movs	r1, #16
 8003b4c:	438a      	bics	r2, r1
 8003b4e:	601a      	str	r2, [r3, #0]
 8003b50:	193b      	adds	r3, r7, r4
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b58:	f383 8810 	msr	PRIMASK, r3
}
 8003b5c:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	2202      	movs	r2, #2
 8003b62:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003b64:	183b      	adds	r3, r7, r0
 8003b66:	881a      	ldrh	r2, [r3, #0]
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	0011      	movs	r1, r2
 8003b6c:	0018      	movs	r0, r3
 8003b6e:	f000 f88d 	bl	8003c8c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003b72:	e06f      	b.n	8003c54 <HAL_UART_IRQHandler+0x634>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003b74:	23a4      	movs	r3, #164	@ 0xa4
 8003b76:	18fb      	adds	r3, r7, r3
 8003b78:	681a      	ldr	r2, [r3, #0]
 8003b7a:	2380      	movs	r3, #128	@ 0x80
 8003b7c:	035b      	lsls	r3, r3, #13
 8003b7e:	4013      	ands	r3, r2
 8003b80:	d010      	beq.n	8003ba4 <HAL_UART_IRQHandler+0x584>
 8003b82:	239c      	movs	r3, #156	@ 0x9c
 8003b84:	18fb      	adds	r3, r7, r3
 8003b86:	681a      	ldr	r2, [r3, #0]
 8003b88:	2380      	movs	r3, #128	@ 0x80
 8003b8a:	03db      	lsls	r3, r3, #15
 8003b8c:	4013      	ands	r3, r2
 8003b8e:	d009      	beq.n	8003ba4 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	2280      	movs	r2, #128	@ 0x80
 8003b96:	0352      	lsls	r2, r2, #13
 8003b98:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	0018      	movs	r0, r3
 8003b9e:	f001 fbeb 	bl	8005378 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003ba2:	e05a      	b.n	8003c5a <HAL_UART_IRQHandler+0x63a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8003ba4:	23a4      	movs	r3, #164	@ 0xa4
 8003ba6:	18fb      	adds	r3, r7, r3
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	2280      	movs	r2, #128	@ 0x80
 8003bac:	4013      	ands	r3, r2
 8003bae:	d016      	beq.n	8003bde <HAL_UART_IRQHandler+0x5be>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8003bb0:	23a0      	movs	r3, #160	@ 0xa0
 8003bb2:	18fb      	adds	r3, r7, r3
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	2280      	movs	r2, #128	@ 0x80
 8003bb8:	4013      	ands	r3, r2
 8003bba:	d106      	bne.n	8003bca <HAL_UART_IRQHandler+0x5aa>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8003bbc:	239c      	movs	r3, #156	@ 0x9c
 8003bbe:	18fb      	adds	r3, r7, r3
 8003bc0:	681a      	ldr	r2, [r3, #0]
 8003bc2:	2380      	movs	r3, #128	@ 0x80
 8003bc4:	041b      	lsls	r3, r3, #16
 8003bc6:	4013      	ands	r3, r2
 8003bc8:	d009      	beq.n	8003bde <HAL_UART_IRQHandler+0x5be>
  {
    if (huart->TxISR != NULL)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d042      	beq.n	8003c58 <HAL_UART_IRQHandler+0x638>
    {
      huart->TxISR(huart);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003bd6:	687a      	ldr	r2, [r7, #4]
 8003bd8:	0010      	movs	r0, r2
 8003bda:	4798      	blx	r3
    }
    return;
 8003bdc:	e03c      	b.n	8003c58 <HAL_UART_IRQHandler+0x638>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003bde:	23a4      	movs	r3, #164	@ 0xa4
 8003be0:	18fb      	adds	r3, r7, r3
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	2240      	movs	r2, #64	@ 0x40
 8003be6:	4013      	ands	r3, r2
 8003be8:	d00a      	beq.n	8003c00 <HAL_UART_IRQHandler+0x5e0>
 8003bea:	23a0      	movs	r3, #160	@ 0xa0
 8003bec:	18fb      	adds	r3, r7, r3
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	2240      	movs	r2, #64	@ 0x40
 8003bf2:	4013      	ands	r3, r2
 8003bf4:	d004      	beq.n	8003c00 <HAL_UART_IRQHandler+0x5e0>
  {
    UART_EndTransmit_IT(huart);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	0018      	movs	r0, r3
 8003bfa:	f000 fe80 	bl	80048fe <UART_EndTransmit_IT>
    return;
 8003bfe:	e02c      	b.n	8003c5a <HAL_UART_IRQHandler+0x63a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8003c00:	23a4      	movs	r3, #164	@ 0xa4
 8003c02:	18fb      	adds	r3, r7, r3
 8003c04:	681a      	ldr	r2, [r3, #0]
 8003c06:	2380      	movs	r3, #128	@ 0x80
 8003c08:	041b      	lsls	r3, r3, #16
 8003c0a:	4013      	ands	r3, r2
 8003c0c:	d00b      	beq.n	8003c26 <HAL_UART_IRQHandler+0x606>
 8003c0e:	23a0      	movs	r3, #160	@ 0xa0
 8003c10:	18fb      	adds	r3, r7, r3
 8003c12:	681a      	ldr	r2, [r3, #0]
 8003c14:	2380      	movs	r3, #128	@ 0x80
 8003c16:	05db      	lsls	r3, r3, #23
 8003c18:	4013      	ands	r3, r2
 8003c1a:	d004      	beq.n	8003c26 <HAL_UART_IRQHandler+0x606>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	0018      	movs	r0, r3
 8003c20:	f001 fbba 	bl	8005398 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003c24:	e019      	b.n	8003c5a <HAL_UART_IRQHandler+0x63a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8003c26:	23a4      	movs	r3, #164	@ 0xa4
 8003c28:	18fb      	adds	r3, r7, r3
 8003c2a:	681a      	ldr	r2, [r3, #0]
 8003c2c:	2380      	movs	r3, #128	@ 0x80
 8003c2e:	045b      	lsls	r3, r3, #17
 8003c30:	4013      	ands	r3, r2
 8003c32:	d012      	beq.n	8003c5a <HAL_UART_IRQHandler+0x63a>
 8003c34:	23a0      	movs	r3, #160	@ 0xa0
 8003c36:	18fb      	adds	r3, r7, r3
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	da0d      	bge.n	8003c5a <HAL_UART_IRQHandler+0x63a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	0018      	movs	r0, r3
 8003c42:	f001 fba1 	bl	8005388 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003c46:	e008      	b.n	8003c5a <HAL_UART_IRQHandler+0x63a>
      return;
 8003c48:	46c0      	nop			@ (mov r8, r8)
 8003c4a:	e006      	b.n	8003c5a <HAL_UART_IRQHandler+0x63a>
    return;
 8003c4c:	46c0      	nop			@ (mov r8, r8)
 8003c4e:	e004      	b.n	8003c5a <HAL_UART_IRQHandler+0x63a>
      return;
 8003c50:	46c0      	nop			@ (mov r8, r8)
 8003c52:	e002      	b.n	8003c5a <HAL_UART_IRQHandler+0x63a>
      return;
 8003c54:	46c0      	nop			@ (mov r8, r8)
 8003c56:	e000      	b.n	8003c5a <HAL_UART_IRQHandler+0x63a>
    return;
 8003c58:	46c0      	nop			@ (mov r8, r8)
  }
}
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	b02a      	add	sp, #168	@ 0xa8
 8003c5e:	bdb0      	pop	{r4, r5, r7, pc}
 8003c60:	fffffeff 	.word	0xfffffeff
 8003c64:	fffffedf 	.word	0xfffffedf
 8003c68:	effffffe 	.word	0xeffffffe

08003c6c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	b082      	sub	sp, #8
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003c74:	46c0      	nop			@ (mov r8, r8)
 8003c76:	46bd      	mov	sp, r7
 8003c78:	b002      	add	sp, #8
 8003c7a:	bd80      	pop	{r7, pc}

08003c7c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b082      	sub	sp, #8
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003c84:	46c0      	nop			@ (mov r8, r8)
 8003c86:	46bd      	mov	sp, r7
 8003c88:	b002      	add	sp, #8
 8003c8a:	bd80      	pop	{r7, pc}

08003c8c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	b082      	sub	sp, #8
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
 8003c94:	000a      	movs	r2, r1
 8003c96:	1cbb      	adds	r3, r7, #2
 8003c98:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003c9a:	46c0      	nop			@ (mov r8, r8)
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	b002      	add	sp, #8
 8003ca0:	bd80      	pop	{r7, pc}
	...

08003ca4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003ca4:	b5b0      	push	{r4, r5, r7, lr}
 8003ca6:	b090      	sub	sp, #64	@ 0x40
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003cac:	231a      	movs	r3, #26
 8003cae:	2220      	movs	r2, #32
 8003cb0:	189b      	adds	r3, r3, r2
 8003cb2:	19db      	adds	r3, r3, r7
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003cb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cba:	689a      	ldr	r2, [r3, #8]
 8003cbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cbe:	691b      	ldr	r3, [r3, #16]
 8003cc0:	431a      	orrs	r2, r3
 8003cc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cc4:	695b      	ldr	r3, [r3, #20]
 8003cc6:	431a      	orrs	r2, r3
 8003cc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cca:	69db      	ldr	r3, [r3, #28]
 8003ccc:	4313      	orrs	r3, r2
 8003cce:	63fb      	str	r3, [r7, #60]	@ 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003cd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	4aaf      	ldr	r2, [pc, #700]	@ (8003f94 <UART_SetConfig+0x2f0>)
 8003cd8:	4013      	ands	r3, r2
 8003cda:	0019      	movs	r1, r3
 8003cdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cde:	681a      	ldr	r2, [r3, #0]
 8003ce0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003ce2:	430b      	orrs	r3, r1
 8003ce4:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003ce6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	685b      	ldr	r3, [r3, #4]
 8003cec:	4aaa      	ldr	r2, [pc, #680]	@ (8003f98 <UART_SetConfig+0x2f4>)
 8003cee:	4013      	ands	r3, r2
 8003cf0:	0018      	movs	r0, r3
 8003cf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cf4:	68d9      	ldr	r1, [r3, #12]
 8003cf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cf8:	681a      	ldr	r2, [r3, #0]
 8003cfa:	0003      	movs	r3, r0
 8003cfc:	430b      	orrs	r3, r1
 8003cfe:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003d00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d02:	699b      	ldr	r3, [r3, #24]
 8003d04:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003d06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	4aa4      	ldr	r2, [pc, #656]	@ (8003f9c <UART_SetConfig+0x2f8>)
 8003d0c:	4293      	cmp	r3, r2
 8003d0e:	d004      	beq.n	8003d1a <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003d10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d12:	6a1b      	ldr	r3, [r3, #32]
 8003d14:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003d16:	4313      	orrs	r3, r2
 8003d18:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003d1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	689b      	ldr	r3, [r3, #8]
 8003d20:	4a9f      	ldr	r2, [pc, #636]	@ (8003fa0 <UART_SetConfig+0x2fc>)
 8003d22:	4013      	ands	r3, r2
 8003d24:	0019      	movs	r1, r3
 8003d26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d28:	681a      	ldr	r2, [r3, #0]
 8003d2a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003d2c:	430b      	orrs	r3, r1
 8003d2e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003d30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d36:	220f      	movs	r2, #15
 8003d38:	4393      	bics	r3, r2
 8003d3a:	0018      	movs	r0, r3
 8003d3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d3e:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8003d40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d42:	681a      	ldr	r2, [r3, #0]
 8003d44:	0003      	movs	r3, r0
 8003d46:	430b      	orrs	r3, r1
 8003d48:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003d4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	4a95      	ldr	r2, [pc, #596]	@ (8003fa4 <UART_SetConfig+0x300>)
 8003d50:	4293      	cmp	r3, r2
 8003d52:	d131      	bne.n	8003db8 <UART_SetConfig+0x114>
 8003d54:	4b94      	ldr	r3, [pc, #592]	@ (8003fa8 <UART_SetConfig+0x304>)
 8003d56:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d58:	2203      	movs	r2, #3
 8003d5a:	4013      	ands	r3, r2
 8003d5c:	2b03      	cmp	r3, #3
 8003d5e:	d01d      	beq.n	8003d9c <UART_SetConfig+0xf8>
 8003d60:	d823      	bhi.n	8003daa <UART_SetConfig+0x106>
 8003d62:	2b02      	cmp	r3, #2
 8003d64:	d00c      	beq.n	8003d80 <UART_SetConfig+0xdc>
 8003d66:	d820      	bhi.n	8003daa <UART_SetConfig+0x106>
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d002      	beq.n	8003d72 <UART_SetConfig+0xce>
 8003d6c:	2b01      	cmp	r3, #1
 8003d6e:	d00e      	beq.n	8003d8e <UART_SetConfig+0xea>
 8003d70:	e01b      	b.n	8003daa <UART_SetConfig+0x106>
 8003d72:	231b      	movs	r3, #27
 8003d74:	2220      	movs	r2, #32
 8003d76:	189b      	adds	r3, r3, r2
 8003d78:	19db      	adds	r3, r3, r7
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	701a      	strb	r2, [r3, #0]
 8003d7e:	e0b4      	b.n	8003eea <UART_SetConfig+0x246>
 8003d80:	231b      	movs	r3, #27
 8003d82:	2220      	movs	r2, #32
 8003d84:	189b      	adds	r3, r3, r2
 8003d86:	19db      	adds	r3, r3, r7
 8003d88:	2202      	movs	r2, #2
 8003d8a:	701a      	strb	r2, [r3, #0]
 8003d8c:	e0ad      	b.n	8003eea <UART_SetConfig+0x246>
 8003d8e:	231b      	movs	r3, #27
 8003d90:	2220      	movs	r2, #32
 8003d92:	189b      	adds	r3, r3, r2
 8003d94:	19db      	adds	r3, r3, r7
 8003d96:	2204      	movs	r2, #4
 8003d98:	701a      	strb	r2, [r3, #0]
 8003d9a:	e0a6      	b.n	8003eea <UART_SetConfig+0x246>
 8003d9c:	231b      	movs	r3, #27
 8003d9e:	2220      	movs	r2, #32
 8003da0:	189b      	adds	r3, r3, r2
 8003da2:	19db      	adds	r3, r3, r7
 8003da4:	2208      	movs	r2, #8
 8003da6:	701a      	strb	r2, [r3, #0]
 8003da8:	e09f      	b.n	8003eea <UART_SetConfig+0x246>
 8003daa:	231b      	movs	r3, #27
 8003dac:	2220      	movs	r2, #32
 8003dae:	189b      	adds	r3, r3, r2
 8003db0:	19db      	adds	r3, r3, r7
 8003db2:	2210      	movs	r2, #16
 8003db4:	701a      	strb	r2, [r3, #0]
 8003db6:	e098      	b.n	8003eea <UART_SetConfig+0x246>
 8003db8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	4a7b      	ldr	r2, [pc, #492]	@ (8003fac <UART_SetConfig+0x308>)
 8003dbe:	4293      	cmp	r3, r2
 8003dc0:	d131      	bne.n	8003e26 <UART_SetConfig+0x182>
 8003dc2:	4b79      	ldr	r3, [pc, #484]	@ (8003fa8 <UART_SetConfig+0x304>)
 8003dc4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003dc6:	220c      	movs	r2, #12
 8003dc8:	4013      	ands	r3, r2
 8003dca:	2b0c      	cmp	r3, #12
 8003dcc:	d01d      	beq.n	8003e0a <UART_SetConfig+0x166>
 8003dce:	d823      	bhi.n	8003e18 <UART_SetConfig+0x174>
 8003dd0:	2b08      	cmp	r3, #8
 8003dd2:	d00c      	beq.n	8003dee <UART_SetConfig+0x14a>
 8003dd4:	d820      	bhi.n	8003e18 <UART_SetConfig+0x174>
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d002      	beq.n	8003de0 <UART_SetConfig+0x13c>
 8003dda:	2b04      	cmp	r3, #4
 8003ddc:	d00e      	beq.n	8003dfc <UART_SetConfig+0x158>
 8003dde:	e01b      	b.n	8003e18 <UART_SetConfig+0x174>
 8003de0:	231b      	movs	r3, #27
 8003de2:	2220      	movs	r2, #32
 8003de4:	189b      	adds	r3, r3, r2
 8003de6:	19db      	adds	r3, r3, r7
 8003de8:	2200      	movs	r2, #0
 8003dea:	701a      	strb	r2, [r3, #0]
 8003dec:	e07d      	b.n	8003eea <UART_SetConfig+0x246>
 8003dee:	231b      	movs	r3, #27
 8003df0:	2220      	movs	r2, #32
 8003df2:	189b      	adds	r3, r3, r2
 8003df4:	19db      	adds	r3, r3, r7
 8003df6:	2202      	movs	r2, #2
 8003df8:	701a      	strb	r2, [r3, #0]
 8003dfa:	e076      	b.n	8003eea <UART_SetConfig+0x246>
 8003dfc:	231b      	movs	r3, #27
 8003dfe:	2220      	movs	r2, #32
 8003e00:	189b      	adds	r3, r3, r2
 8003e02:	19db      	adds	r3, r3, r7
 8003e04:	2204      	movs	r2, #4
 8003e06:	701a      	strb	r2, [r3, #0]
 8003e08:	e06f      	b.n	8003eea <UART_SetConfig+0x246>
 8003e0a:	231b      	movs	r3, #27
 8003e0c:	2220      	movs	r2, #32
 8003e0e:	189b      	adds	r3, r3, r2
 8003e10:	19db      	adds	r3, r3, r7
 8003e12:	2208      	movs	r2, #8
 8003e14:	701a      	strb	r2, [r3, #0]
 8003e16:	e068      	b.n	8003eea <UART_SetConfig+0x246>
 8003e18:	231b      	movs	r3, #27
 8003e1a:	2220      	movs	r2, #32
 8003e1c:	189b      	adds	r3, r3, r2
 8003e1e:	19db      	adds	r3, r3, r7
 8003e20:	2210      	movs	r2, #16
 8003e22:	701a      	strb	r2, [r3, #0]
 8003e24:	e061      	b.n	8003eea <UART_SetConfig+0x246>
 8003e26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	4a61      	ldr	r2, [pc, #388]	@ (8003fb0 <UART_SetConfig+0x30c>)
 8003e2c:	4293      	cmp	r3, r2
 8003e2e:	d106      	bne.n	8003e3e <UART_SetConfig+0x19a>
 8003e30:	231b      	movs	r3, #27
 8003e32:	2220      	movs	r2, #32
 8003e34:	189b      	adds	r3, r3, r2
 8003e36:	19db      	adds	r3, r3, r7
 8003e38:	2200      	movs	r2, #0
 8003e3a:	701a      	strb	r2, [r3, #0]
 8003e3c:	e055      	b.n	8003eea <UART_SetConfig+0x246>
 8003e3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	4a5c      	ldr	r2, [pc, #368]	@ (8003fb4 <UART_SetConfig+0x310>)
 8003e44:	4293      	cmp	r3, r2
 8003e46:	d106      	bne.n	8003e56 <UART_SetConfig+0x1b2>
 8003e48:	231b      	movs	r3, #27
 8003e4a:	2220      	movs	r2, #32
 8003e4c:	189b      	adds	r3, r3, r2
 8003e4e:	19db      	adds	r3, r3, r7
 8003e50:	2200      	movs	r2, #0
 8003e52:	701a      	strb	r2, [r3, #0]
 8003e54:	e049      	b.n	8003eea <UART_SetConfig+0x246>
 8003e56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	4a50      	ldr	r2, [pc, #320]	@ (8003f9c <UART_SetConfig+0x2f8>)
 8003e5c:	4293      	cmp	r3, r2
 8003e5e:	d13e      	bne.n	8003ede <UART_SetConfig+0x23a>
 8003e60:	4b51      	ldr	r3, [pc, #324]	@ (8003fa8 <UART_SetConfig+0x304>)
 8003e62:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003e64:	23c0      	movs	r3, #192	@ 0xc0
 8003e66:	011b      	lsls	r3, r3, #4
 8003e68:	4013      	ands	r3, r2
 8003e6a:	22c0      	movs	r2, #192	@ 0xc0
 8003e6c:	0112      	lsls	r2, r2, #4
 8003e6e:	4293      	cmp	r3, r2
 8003e70:	d027      	beq.n	8003ec2 <UART_SetConfig+0x21e>
 8003e72:	22c0      	movs	r2, #192	@ 0xc0
 8003e74:	0112      	lsls	r2, r2, #4
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d82a      	bhi.n	8003ed0 <UART_SetConfig+0x22c>
 8003e7a:	2280      	movs	r2, #128	@ 0x80
 8003e7c:	0112      	lsls	r2, r2, #4
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	d011      	beq.n	8003ea6 <UART_SetConfig+0x202>
 8003e82:	2280      	movs	r2, #128	@ 0x80
 8003e84:	0112      	lsls	r2, r2, #4
 8003e86:	4293      	cmp	r3, r2
 8003e88:	d822      	bhi.n	8003ed0 <UART_SetConfig+0x22c>
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d004      	beq.n	8003e98 <UART_SetConfig+0x1f4>
 8003e8e:	2280      	movs	r2, #128	@ 0x80
 8003e90:	00d2      	lsls	r2, r2, #3
 8003e92:	4293      	cmp	r3, r2
 8003e94:	d00e      	beq.n	8003eb4 <UART_SetConfig+0x210>
 8003e96:	e01b      	b.n	8003ed0 <UART_SetConfig+0x22c>
 8003e98:	231b      	movs	r3, #27
 8003e9a:	2220      	movs	r2, #32
 8003e9c:	189b      	adds	r3, r3, r2
 8003e9e:	19db      	adds	r3, r3, r7
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	701a      	strb	r2, [r3, #0]
 8003ea4:	e021      	b.n	8003eea <UART_SetConfig+0x246>
 8003ea6:	231b      	movs	r3, #27
 8003ea8:	2220      	movs	r2, #32
 8003eaa:	189b      	adds	r3, r3, r2
 8003eac:	19db      	adds	r3, r3, r7
 8003eae:	2202      	movs	r2, #2
 8003eb0:	701a      	strb	r2, [r3, #0]
 8003eb2:	e01a      	b.n	8003eea <UART_SetConfig+0x246>
 8003eb4:	231b      	movs	r3, #27
 8003eb6:	2220      	movs	r2, #32
 8003eb8:	189b      	adds	r3, r3, r2
 8003eba:	19db      	adds	r3, r3, r7
 8003ebc:	2204      	movs	r2, #4
 8003ebe:	701a      	strb	r2, [r3, #0]
 8003ec0:	e013      	b.n	8003eea <UART_SetConfig+0x246>
 8003ec2:	231b      	movs	r3, #27
 8003ec4:	2220      	movs	r2, #32
 8003ec6:	189b      	adds	r3, r3, r2
 8003ec8:	19db      	adds	r3, r3, r7
 8003eca:	2208      	movs	r2, #8
 8003ecc:	701a      	strb	r2, [r3, #0]
 8003ece:	e00c      	b.n	8003eea <UART_SetConfig+0x246>
 8003ed0:	231b      	movs	r3, #27
 8003ed2:	2220      	movs	r2, #32
 8003ed4:	189b      	adds	r3, r3, r2
 8003ed6:	19db      	adds	r3, r3, r7
 8003ed8:	2210      	movs	r2, #16
 8003eda:	701a      	strb	r2, [r3, #0]
 8003edc:	e005      	b.n	8003eea <UART_SetConfig+0x246>
 8003ede:	231b      	movs	r3, #27
 8003ee0:	2220      	movs	r2, #32
 8003ee2:	189b      	adds	r3, r3, r2
 8003ee4:	19db      	adds	r3, r3, r7
 8003ee6:	2210      	movs	r2, #16
 8003ee8:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003eea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	4a2b      	ldr	r2, [pc, #172]	@ (8003f9c <UART_SetConfig+0x2f8>)
 8003ef0:	4293      	cmp	r3, r2
 8003ef2:	d000      	beq.n	8003ef6 <UART_SetConfig+0x252>
 8003ef4:	e0a9      	b.n	800404a <UART_SetConfig+0x3a6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003ef6:	231b      	movs	r3, #27
 8003ef8:	2220      	movs	r2, #32
 8003efa:	189b      	adds	r3, r3, r2
 8003efc:	19db      	adds	r3, r3, r7
 8003efe:	781b      	ldrb	r3, [r3, #0]
 8003f00:	2b08      	cmp	r3, #8
 8003f02:	d015      	beq.n	8003f30 <UART_SetConfig+0x28c>
 8003f04:	dc18      	bgt.n	8003f38 <UART_SetConfig+0x294>
 8003f06:	2b04      	cmp	r3, #4
 8003f08:	d00d      	beq.n	8003f26 <UART_SetConfig+0x282>
 8003f0a:	dc15      	bgt.n	8003f38 <UART_SetConfig+0x294>
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d002      	beq.n	8003f16 <UART_SetConfig+0x272>
 8003f10:	2b02      	cmp	r3, #2
 8003f12:	d005      	beq.n	8003f20 <UART_SetConfig+0x27c>
 8003f14:	e010      	b.n	8003f38 <UART_SetConfig+0x294>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003f16:	f7fe fbd1 	bl	80026bc <HAL_RCC_GetPCLK1Freq>
 8003f1a:	0003      	movs	r3, r0
 8003f1c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003f1e:	e014      	b.n	8003f4a <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003f20:	4b25      	ldr	r3, [pc, #148]	@ (8003fb8 <UART_SetConfig+0x314>)
 8003f22:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003f24:	e011      	b.n	8003f4a <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003f26:	f7fe fb3d 	bl	80025a4 <HAL_RCC_GetSysClockFreq>
 8003f2a:	0003      	movs	r3, r0
 8003f2c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003f2e:	e00c      	b.n	8003f4a <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003f30:	2380      	movs	r3, #128	@ 0x80
 8003f32:	021b      	lsls	r3, r3, #8
 8003f34:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003f36:	e008      	b.n	8003f4a <UART_SetConfig+0x2a6>
      default:
        pclk = 0U;
 8003f38:	2300      	movs	r3, #0
 8003f3a:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 8003f3c:	231a      	movs	r3, #26
 8003f3e:	2220      	movs	r2, #32
 8003f40:	189b      	adds	r3, r3, r2
 8003f42:	19db      	adds	r3, r3, r7
 8003f44:	2201      	movs	r2, #1
 8003f46:	701a      	strb	r2, [r3, #0]
        break;
 8003f48:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003f4a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d100      	bne.n	8003f52 <UART_SetConfig+0x2ae>
 8003f50:	e14b      	b.n	80041ea <UART_SetConfig+0x546>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003f52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f54:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003f56:	4b19      	ldr	r3, [pc, #100]	@ (8003fbc <UART_SetConfig+0x318>)
 8003f58:	0052      	lsls	r2, r2, #1
 8003f5a:	5ad3      	ldrh	r3, [r2, r3]
 8003f5c:	0019      	movs	r1, r3
 8003f5e:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8003f60:	f7fc f8e4 	bl	800012c <__udivsi3>
 8003f64:	0003      	movs	r3, r0
 8003f66:	62bb      	str	r3, [r7, #40]	@ 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003f68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f6a:	685a      	ldr	r2, [r3, #4]
 8003f6c:	0013      	movs	r3, r2
 8003f6e:	005b      	lsls	r3, r3, #1
 8003f70:	189b      	adds	r3, r3, r2
 8003f72:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003f74:	429a      	cmp	r2, r3
 8003f76:	d305      	bcc.n	8003f84 <UART_SetConfig+0x2e0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003f78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f7a:	685b      	ldr	r3, [r3, #4]
 8003f7c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003f7e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003f80:	429a      	cmp	r2, r3
 8003f82:	d91d      	bls.n	8003fc0 <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 8003f84:	231a      	movs	r3, #26
 8003f86:	2220      	movs	r2, #32
 8003f88:	189b      	adds	r3, r3, r2
 8003f8a:	19db      	adds	r3, r3, r7
 8003f8c:	2201      	movs	r2, #1
 8003f8e:	701a      	strb	r2, [r3, #0]
 8003f90:	e12b      	b.n	80041ea <UART_SetConfig+0x546>
 8003f92:	46c0      	nop			@ (mov r8, r8)
 8003f94:	cfff69f3 	.word	0xcfff69f3
 8003f98:	ffffcfff 	.word	0xffffcfff
 8003f9c:	40008000 	.word	0x40008000
 8003fa0:	11fff4ff 	.word	0x11fff4ff
 8003fa4:	40013800 	.word	0x40013800
 8003fa8:	40021000 	.word	0x40021000
 8003fac:	40004400 	.word	0x40004400
 8003fb0:	40004800 	.word	0x40004800
 8003fb4:	40004c00 	.word	0x40004c00
 8003fb8:	00f42400 	.word	0x00f42400
 8003fbc:	0800717c 	.word	0x0800717c
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003fc0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003fc2:	61bb      	str	r3, [r7, #24]
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	61fb      	str	r3, [r7, #28]
 8003fc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fca:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003fcc:	4b92      	ldr	r3, [pc, #584]	@ (8004218 <UART_SetConfig+0x574>)
 8003fce:	0052      	lsls	r2, r2, #1
 8003fd0:	5ad3      	ldrh	r3, [r2, r3]
 8003fd2:	613b      	str	r3, [r7, #16]
 8003fd4:	2300      	movs	r3, #0
 8003fd6:	617b      	str	r3, [r7, #20]
 8003fd8:	693a      	ldr	r2, [r7, #16]
 8003fda:	697b      	ldr	r3, [r7, #20]
 8003fdc:	69b8      	ldr	r0, [r7, #24]
 8003fde:	69f9      	ldr	r1, [r7, #28]
 8003fe0:	f7fc fa1a 	bl	8000418 <__aeabi_uldivmod>
 8003fe4:	0002      	movs	r2, r0
 8003fe6:	000b      	movs	r3, r1
 8003fe8:	0e11      	lsrs	r1, r2, #24
 8003fea:	021d      	lsls	r5, r3, #8
 8003fec:	430d      	orrs	r5, r1
 8003fee:	0214      	lsls	r4, r2, #8
 8003ff0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ff2:	685b      	ldr	r3, [r3, #4]
 8003ff4:	085b      	lsrs	r3, r3, #1
 8003ff6:	60bb      	str	r3, [r7, #8]
 8003ff8:	2300      	movs	r3, #0
 8003ffa:	60fb      	str	r3, [r7, #12]
 8003ffc:	68b8      	ldr	r0, [r7, #8]
 8003ffe:	68f9      	ldr	r1, [r7, #12]
 8004000:	1900      	adds	r0, r0, r4
 8004002:	4169      	adcs	r1, r5
 8004004:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004006:	685b      	ldr	r3, [r3, #4]
 8004008:	603b      	str	r3, [r7, #0]
 800400a:	2300      	movs	r3, #0
 800400c:	607b      	str	r3, [r7, #4]
 800400e:	683a      	ldr	r2, [r7, #0]
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	f7fc fa01 	bl	8000418 <__aeabi_uldivmod>
 8004016:	0002      	movs	r2, r0
 8004018:	000b      	movs	r3, r1
 800401a:	0013      	movs	r3, r2
 800401c:	633b      	str	r3, [r7, #48]	@ 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800401e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004020:	23c0      	movs	r3, #192	@ 0xc0
 8004022:	009b      	lsls	r3, r3, #2
 8004024:	429a      	cmp	r2, r3
 8004026:	d309      	bcc.n	800403c <UART_SetConfig+0x398>
 8004028:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800402a:	2380      	movs	r3, #128	@ 0x80
 800402c:	035b      	lsls	r3, r3, #13
 800402e:	429a      	cmp	r2, r3
 8004030:	d204      	bcs.n	800403c <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 8004032:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004038:	60da      	str	r2, [r3, #12]
 800403a:	e0d6      	b.n	80041ea <UART_SetConfig+0x546>
        }
        else
        {
          ret = HAL_ERROR;
 800403c:	231a      	movs	r3, #26
 800403e:	2220      	movs	r2, #32
 8004040:	189b      	adds	r3, r3, r2
 8004042:	19db      	adds	r3, r3, r7
 8004044:	2201      	movs	r2, #1
 8004046:	701a      	strb	r2, [r3, #0]
 8004048:	e0cf      	b.n	80041ea <UART_SetConfig+0x546>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800404a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800404c:	69da      	ldr	r2, [r3, #28]
 800404e:	2380      	movs	r3, #128	@ 0x80
 8004050:	021b      	lsls	r3, r3, #8
 8004052:	429a      	cmp	r2, r3
 8004054:	d000      	beq.n	8004058 <UART_SetConfig+0x3b4>
 8004056:	e070      	b.n	800413a <UART_SetConfig+0x496>
  {
    switch (clocksource)
 8004058:	231b      	movs	r3, #27
 800405a:	2220      	movs	r2, #32
 800405c:	189b      	adds	r3, r3, r2
 800405e:	19db      	adds	r3, r3, r7
 8004060:	781b      	ldrb	r3, [r3, #0]
 8004062:	2b08      	cmp	r3, #8
 8004064:	d015      	beq.n	8004092 <UART_SetConfig+0x3ee>
 8004066:	dc18      	bgt.n	800409a <UART_SetConfig+0x3f6>
 8004068:	2b04      	cmp	r3, #4
 800406a:	d00d      	beq.n	8004088 <UART_SetConfig+0x3e4>
 800406c:	dc15      	bgt.n	800409a <UART_SetConfig+0x3f6>
 800406e:	2b00      	cmp	r3, #0
 8004070:	d002      	beq.n	8004078 <UART_SetConfig+0x3d4>
 8004072:	2b02      	cmp	r3, #2
 8004074:	d005      	beq.n	8004082 <UART_SetConfig+0x3de>
 8004076:	e010      	b.n	800409a <UART_SetConfig+0x3f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004078:	f7fe fb20 	bl	80026bc <HAL_RCC_GetPCLK1Freq>
 800407c:	0003      	movs	r3, r0
 800407e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004080:	e014      	b.n	80040ac <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004082:	4b66      	ldr	r3, [pc, #408]	@ (800421c <UART_SetConfig+0x578>)
 8004084:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004086:	e011      	b.n	80040ac <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004088:	f7fe fa8c 	bl	80025a4 <HAL_RCC_GetSysClockFreq>
 800408c:	0003      	movs	r3, r0
 800408e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004090:	e00c      	b.n	80040ac <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004092:	2380      	movs	r3, #128	@ 0x80
 8004094:	021b      	lsls	r3, r3, #8
 8004096:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004098:	e008      	b.n	80040ac <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 800409a:	2300      	movs	r3, #0
 800409c:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 800409e:	231a      	movs	r3, #26
 80040a0:	2220      	movs	r2, #32
 80040a2:	189b      	adds	r3, r3, r2
 80040a4:	19db      	adds	r3, r3, r7
 80040a6:	2201      	movs	r2, #1
 80040a8:	701a      	strb	r2, [r3, #0]
        break;
 80040aa:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80040ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d100      	bne.n	80040b4 <UART_SetConfig+0x410>
 80040b2:	e09a      	b.n	80041ea <UART_SetConfig+0x546>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80040b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040b6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80040b8:	4b57      	ldr	r3, [pc, #348]	@ (8004218 <UART_SetConfig+0x574>)
 80040ba:	0052      	lsls	r2, r2, #1
 80040bc:	5ad3      	ldrh	r3, [r2, r3]
 80040be:	0019      	movs	r1, r3
 80040c0:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80040c2:	f7fc f833 	bl	800012c <__udivsi3>
 80040c6:	0003      	movs	r3, r0
 80040c8:	005a      	lsls	r2, r3, #1
 80040ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040cc:	685b      	ldr	r3, [r3, #4]
 80040ce:	085b      	lsrs	r3, r3, #1
 80040d0:	18d2      	adds	r2, r2, r3
 80040d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040d4:	685b      	ldr	r3, [r3, #4]
 80040d6:	0019      	movs	r1, r3
 80040d8:	0010      	movs	r0, r2
 80040da:	f7fc f827 	bl	800012c <__udivsi3>
 80040de:	0003      	movs	r3, r0
 80040e0:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80040e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040e4:	2b0f      	cmp	r3, #15
 80040e6:	d921      	bls.n	800412c <UART_SetConfig+0x488>
 80040e8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80040ea:	2380      	movs	r3, #128	@ 0x80
 80040ec:	025b      	lsls	r3, r3, #9
 80040ee:	429a      	cmp	r2, r3
 80040f0:	d21c      	bcs.n	800412c <UART_SetConfig+0x488>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80040f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040f4:	b29a      	uxth	r2, r3
 80040f6:	200e      	movs	r0, #14
 80040f8:	2420      	movs	r4, #32
 80040fa:	1903      	adds	r3, r0, r4
 80040fc:	19db      	adds	r3, r3, r7
 80040fe:	210f      	movs	r1, #15
 8004100:	438a      	bics	r2, r1
 8004102:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004104:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004106:	085b      	lsrs	r3, r3, #1
 8004108:	b29b      	uxth	r3, r3
 800410a:	2207      	movs	r2, #7
 800410c:	4013      	ands	r3, r2
 800410e:	b299      	uxth	r1, r3
 8004110:	1903      	adds	r3, r0, r4
 8004112:	19db      	adds	r3, r3, r7
 8004114:	1902      	adds	r2, r0, r4
 8004116:	19d2      	adds	r2, r2, r7
 8004118:	8812      	ldrh	r2, [r2, #0]
 800411a:	430a      	orrs	r2, r1
 800411c:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800411e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	1902      	adds	r2, r0, r4
 8004124:	19d2      	adds	r2, r2, r7
 8004126:	8812      	ldrh	r2, [r2, #0]
 8004128:	60da      	str	r2, [r3, #12]
 800412a:	e05e      	b.n	80041ea <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 800412c:	231a      	movs	r3, #26
 800412e:	2220      	movs	r2, #32
 8004130:	189b      	adds	r3, r3, r2
 8004132:	19db      	adds	r3, r3, r7
 8004134:	2201      	movs	r2, #1
 8004136:	701a      	strb	r2, [r3, #0]
 8004138:	e057      	b.n	80041ea <UART_SetConfig+0x546>
      }
    }
  }
  else
  {
    switch (clocksource)
 800413a:	231b      	movs	r3, #27
 800413c:	2220      	movs	r2, #32
 800413e:	189b      	adds	r3, r3, r2
 8004140:	19db      	adds	r3, r3, r7
 8004142:	781b      	ldrb	r3, [r3, #0]
 8004144:	2b08      	cmp	r3, #8
 8004146:	d015      	beq.n	8004174 <UART_SetConfig+0x4d0>
 8004148:	dc18      	bgt.n	800417c <UART_SetConfig+0x4d8>
 800414a:	2b04      	cmp	r3, #4
 800414c:	d00d      	beq.n	800416a <UART_SetConfig+0x4c6>
 800414e:	dc15      	bgt.n	800417c <UART_SetConfig+0x4d8>
 8004150:	2b00      	cmp	r3, #0
 8004152:	d002      	beq.n	800415a <UART_SetConfig+0x4b6>
 8004154:	2b02      	cmp	r3, #2
 8004156:	d005      	beq.n	8004164 <UART_SetConfig+0x4c0>
 8004158:	e010      	b.n	800417c <UART_SetConfig+0x4d8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800415a:	f7fe faaf 	bl	80026bc <HAL_RCC_GetPCLK1Freq>
 800415e:	0003      	movs	r3, r0
 8004160:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004162:	e014      	b.n	800418e <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004164:	4b2d      	ldr	r3, [pc, #180]	@ (800421c <UART_SetConfig+0x578>)
 8004166:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004168:	e011      	b.n	800418e <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800416a:	f7fe fa1b 	bl	80025a4 <HAL_RCC_GetSysClockFreq>
 800416e:	0003      	movs	r3, r0
 8004170:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004172:	e00c      	b.n	800418e <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004174:	2380      	movs	r3, #128	@ 0x80
 8004176:	021b      	lsls	r3, r3, #8
 8004178:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800417a:	e008      	b.n	800418e <UART_SetConfig+0x4ea>
      default:
        pclk = 0U;
 800417c:	2300      	movs	r3, #0
 800417e:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 8004180:	231a      	movs	r3, #26
 8004182:	2220      	movs	r2, #32
 8004184:	189b      	adds	r3, r3, r2
 8004186:	19db      	adds	r3, r3, r7
 8004188:	2201      	movs	r2, #1
 800418a:	701a      	strb	r2, [r3, #0]
        break;
 800418c:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 800418e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004190:	2b00      	cmp	r3, #0
 8004192:	d02a      	beq.n	80041ea <UART_SetConfig+0x546>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004194:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004196:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004198:	4b1f      	ldr	r3, [pc, #124]	@ (8004218 <UART_SetConfig+0x574>)
 800419a:	0052      	lsls	r2, r2, #1
 800419c:	5ad3      	ldrh	r3, [r2, r3]
 800419e:	0019      	movs	r1, r3
 80041a0:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80041a2:	f7fb ffc3 	bl	800012c <__udivsi3>
 80041a6:	0003      	movs	r3, r0
 80041a8:	001a      	movs	r2, r3
 80041aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041ac:	685b      	ldr	r3, [r3, #4]
 80041ae:	085b      	lsrs	r3, r3, #1
 80041b0:	18d2      	adds	r2, r2, r3
 80041b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041b4:	685b      	ldr	r3, [r3, #4]
 80041b6:	0019      	movs	r1, r3
 80041b8:	0010      	movs	r0, r2
 80041ba:	f7fb ffb7 	bl	800012c <__udivsi3>
 80041be:	0003      	movs	r3, r0
 80041c0:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80041c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041c4:	2b0f      	cmp	r3, #15
 80041c6:	d90a      	bls.n	80041de <UART_SetConfig+0x53a>
 80041c8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80041ca:	2380      	movs	r3, #128	@ 0x80
 80041cc:	025b      	lsls	r3, r3, #9
 80041ce:	429a      	cmp	r2, r3
 80041d0:	d205      	bcs.n	80041de <UART_SetConfig+0x53a>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80041d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041d4:	b29a      	uxth	r2, r3
 80041d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	60da      	str	r2, [r3, #12]
 80041dc:	e005      	b.n	80041ea <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 80041de:	231a      	movs	r3, #26
 80041e0:	2220      	movs	r2, #32
 80041e2:	189b      	adds	r3, r3, r2
 80041e4:	19db      	adds	r3, r3, r7
 80041e6:	2201      	movs	r2, #1
 80041e8:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80041ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041ec:	226a      	movs	r2, #106	@ 0x6a
 80041ee:	2101      	movs	r1, #1
 80041f0:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 80041f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041f4:	2268      	movs	r2, #104	@ 0x68
 80041f6:	2101      	movs	r1, #1
 80041f8:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80041fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041fc:	2200      	movs	r2, #0
 80041fe:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8004200:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004202:	2200      	movs	r2, #0
 8004204:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8004206:	231a      	movs	r3, #26
 8004208:	2220      	movs	r2, #32
 800420a:	189b      	adds	r3, r3, r2
 800420c:	19db      	adds	r3, r3, r7
 800420e:	781b      	ldrb	r3, [r3, #0]
}
 8004210:	0018      	movs	r0, r3
 8004212:	46bd      	mov	sp, r7
 8004214:	b010      	add	sp, #64	@ 0x40
 8004216:	bdb0      	pop	{r4, r5, r7, pc}
 8004218:	0800717c 	.word	0x0800717c
 800421c:	00f42400 	.word	0x00f42400

08004220 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004220:	b580      	push	{r7, lr}
 8004222:	b082      	sub	sp, #8
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800422c:	2208      	movs	r2, #8
 800422e:	4013      	ands	r3, r2
 8004230:	d00b      	beq.n	800424a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	685b      	ldr	r3, [r3, #4]
 8004238:	4a4a      	ldr	r2, [pc, #296]	@ (8004364 <UART_AdvFeatureConfig+0x144>)
 800423a:	4013      	ands	r3, r2
 800423c:	0019      	movs	r1, r3
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	430a      	orrs	r2, r1
 8004248:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800424e:	2201      	movs	r2, #1
 8004250:	4013      	ands	r3, r2
 8004252:	d00b      	beq.n	800426c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	685b      	ldr	r3, [r3, #4]
 800425a:	4a43      	ldr	r2, [pc, #268]	@ (8004368 <UART_AdvFeatureConfig+0x148>)
 800425c:	4013      	ands	r3, r2
 800425e:	0019      	movs	r1, r3
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	430a      	orrs	r2, r1
 800426a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004270:	2202      	movs	r2, #2
 8004272:	4013      	ands	r3, r2
 8004274:	d00b      	beq.n	800428e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	685b      	ldr	r3, [r3, #4]
 800427c:	4a3b      	ldr	r2, [pc, #236]	@ (800436c <UART_AdvFeatureConfig+0x14c>)
 800427e:	4013      	ands	r3, r2
 8004280:	0019      	movs	r1, r3
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	430a      	orrs	r2, r1
 800428c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004292:	2204      	movs	r2, #4
 8004294:	4013      	ands	r3, r2
 8004296:	d00b      	beq.n	80042b0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	685b      	ldr	r3, [r3, #4]
 800429e:	4a34      	ldr	r2, [pc, #208]	@ (8004370 <UART_AdvFeatureConfig+0x150>)
 80042a0:	4013      	ands	r3, r2
 80042a2:	0019      	movs	r1, r3
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	430a      	orrs	r2, r1
 80042ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042b4:	2210      	movs	r2, #16
 80042b6:	4013      	ands	r3, r2
 80042b8:	d00b      	beq.n	80042d2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	689b      	ldr	r3, [r3, #8]
 80042c0:	4a2c      	ldr	r2, [pc, #176]	@ (8004374 <UART_AdvFeatureConfig+0x154>)
 80042c2:	4013      	ands	r3, r2
 80042c4:	0019      	movs	r1, r3
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	430a      	orrs	r2, r1
 80042d0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042d6:	2220      	movs	r2, #32
 80042d8:	4013      	ands	r3, r2
 80042da:	d00b      	beq.n	80042f4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	689b      	ldr	r3, [r3, #8]
 80042e2:	4a25      	ldr	r2, [pc, #148]	@ (8004378 <UART_AdvFeatureConfig+0x158>)
 80042e4:	4013      	ands	r3, r2
 80042e6:	0019      	movs	r1, r3
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	430a      	orrs	r2, r1
 80042f2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042f8:	2240      	movs	r2, #64	@ 0x40
 80042fa:	4013      	ands	r3, r2
 80042fc:	d01d      	beq.n	800433a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	685b      	ldr	r3, [r3, #4]
 8004304:	4a1d      	ldr	r2, [pc, #116]	@ (800437c <UART_AdvFeatureConfig+0x15c>)
 8004306:	4013      	ands	r3, r2
 8004308:	0019      	movs	r1, r3
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	430a      	orrs	r2, r1
 8004314:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800431a:	2380      	movs	r3, #128	@ 0x80
 800431c:	035b      	lsls	r3, r3, #13
 800431e:	429a      	cmp	r2, r3
 8004320:	d10b      	bne.n	800433a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	685b      	ldr	r3, [r3, #4]
 8004328:	4a15      	ldr	r2, [pc, #84]	@ (8004380 <UART_AdvFeatureConfig+0x160>)
 800432a:	4013      	ands	r3, r2
 800432c:	0019      	movs	r1, r3
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	430a      	orrs	r2, r1
 8004338:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800433e:	2280      	movs	r2, #128	@ 0x80
 8004340:	4013      	ands	r3, r2
 8004342:	d00b      	beq.n	800435c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	685b      	ldr	r3, [r3, #4]
 800434a:	4a0e      	ldr	r2, [pc, #56]	@ (8004384 <UART_AdvFeatureConfig+0x164>)
 800434c:	4013      	ands	r3, r2
 800434e:	0019      	movs	r1, r3
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	430a      	orrs	r2, r1
 800435a:	605a      	str	r2, [r3, #4]
  }
}
 800435c:	46c0      	nop			@ (mov r8, r8)
 800435e:	46bd      	mov	sp, r7
 8004360:	b002      	add	sp, #8
 8004362:	bd80      	pop	{r7, pc}
 8004364:	ffff7fff 	.word	0xffff7fff
 8004368:	fffdffff 	.word	0xfffdffff
 800436c:	fffeffff 	.word	0xfffeffff
 8004370:	fffbffff 	.word	0xfffbffff
 8004374:	ffffefff 	.word	0xffffefff
 8004378:	ffffdfff 	.word	0xffffdfff
 800437c:	ffefffff 	.word	0xffefffff
 8004380:	ff9fffff 	.word	0xff9fffff
 8004384:	fff7ffff 	.word	0xfff7ffff

08004388 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004388:	b580      	push	{r7, lr}
 800438a:	b092      	sub	sp, #72	@ 0x48
 800438c:	af02      	add	r7, sp, #8
 800438e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2290      	movs	r2, #144	@ 0x90
 8004394:	2100      	movs	r1, #0
 8004396:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004398:	f7fc ffea 	bl	8001370 <HAL_GetTick>
 800439c:	0003      	movs	r3, r0
 800439e:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	2208      	movs	r2, #8
 80043a8:	4013      	ands	r3, r2
 80043aa:	2b08      	cmp	r3, #8
 80043ac:	d12d      	bne.n	800440a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80043ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80043b0:	2280      	movs	r2, #128	@ 0x80
 80043b2:	0391      	lsls	r1, r2, #14
 80043b4:	6878      	ldr	r0, [r7, #4]
 80043b6:	4a47      	ldr	r2, [pc, #284]	@ (80044d4 <UART_CheckIdleState+0x14c>)
 80043b8:	9200      	str	r2, [sp, #0]
 80043ba:	2200      	movs	r2, #0
 80043bc:	f000 f88e 	bl	80044dc <UART_WaitOnFlagUntilTimeout>
 80043c0:	1e03      	subs	r3, r0, #0
 80043c2:	d022      	beq.n	800440a <UART_CheckIdleState+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80043c4:	f3ef 8310 	mrs	r3, PRIMASK
 80043c8:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80043ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80043cc:	63bb      	str	r3, [r7, #56]	@ 0x38
 80043ce:	2301      	movs	r3, #1
 80043d0:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043d4:	f383 8810 	msr	PRIMASK, r3
}
 80043d8:	46c0      	nop			@ (mov r8, r8)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	681a      	ldr	r2, [r3, #0]
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	2180      	movs	r1, #128	@ 0x80
 80043e6:	438a      	bics	r2, r1
 80043e8:	601a      	str	r2, [r3, #0]
 80043ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80043f0:	f383 8810 	msr	PRIMASK, r3
}
 80043f4:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	2288      	movs	r2, #136	@ 0x88
 80043fa:	2120      	movs	r1, #32
 80043fc:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	2284      	movs	r2, #132	@ 0x84
 8004402:	2100      	movs	r1, #0
 8004404:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004406:	2303      	movs	r3, #3
 8004408:	e060      	b.n	80044cc <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	2204      	movs	r2, #4
 8004412:	4013      	ands	r3, r2
 8004414:	2b04      	cmp	r3, #4
 8004416:	d146      	bne.n	80044a6 <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004418:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800441a:	2280      	movs	r2, #128	@ 0x80
 800441c:	03d1      	lsls	r1, r2, #15
 800441e:	6878      	ldr	r0, [r7, #4]
 8004420:	4a2c      	ldr	r2, [pc, #176]	@ (80044d4 <UART_CheckIdleState+0x14c>)
 8004422:	9200      	str	r2, [sp, #0]
 8004424:	2200      	movs	r2, #0
 8004426:	f000 f859 	bl	80044dc <UART_WaitOnFlagUntilTimeout>
 800442a:	1e03      	subs	r3, r0, #0
 800442c:	d03b      	beq.n	80044a6 <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800442e:	f3ef 8310 	mrs	r3, PRIMASK
 8004432:	60fb      	str	r3, [r7, #12]
  return(result);
 8004434:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004436:	637b      	str	r3, [r7, #52]	@ 0x34
 8004438:	2301      	movs	r3, #1
 800443a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800443c:	693b      	ldr	r3, [r7, #16]
 800443e:	f383 8810 	msr	PRIMASK, r3
}
 8004442:	46c0      	nop			@ (mov r8, r8)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	681a      	ldr	r2, [r3, #0]
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	4922      	ldr	r1, [pc, #136]	@ (80044d8 <UART_CheckIdleState+0x150>)
 8004450:	400a      	ands	r2, r1
 8004452:	601a      	str	r2, [r3, #0]
 8004454:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004456:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004458:	697b      	ldr	r3, [r7, #20]
 800445a:	f383 8810 	msr	PRIMASK, r3
}
 800445e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004460:	f3ef 8310 	mrs	r3, PRIMASK
 8004464:	61bb      	str	r3, [r7, #24]
  return(result);
 8004466:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004468:	633b      	str	r3, [r7, #48]	@ 0x30
 800446a:	2301      	movs	r3, #1
 800446c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800446e:	69fb      	ldr	r3, [r7, #28]
 8004470:	f383 8810 	msr	PRIMASK, r3
}
 8004474:	46c0      	nop			@ (mov r8, r8)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	689a      	ldr	r2, [r3, #8]
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	2101      	movs	r1, #1
 8004482:	438a      	bics	r2, r1
 8004484:	609a      	str	r2, [r3, #8]
 8004486:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004488:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800448a:	6a3b      	ldr	r3, [r7, #32]
 800448c:	f383 8810 	msr	PRIMASK, r3
}
 8004490:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	228c      	movs	r2, #140	@ 0x8c
 8004496:	2120      	movs	r1, #32
 8004498:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	2284      	movs	r2, #132	@ 0x84
 800449e:	2100      	movs	r1, #0
 80044a0:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80044a2:	2303      	movs	r3, #3
 80044a4:	e012      	b.n	80044cc <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	2288      	movs	r2, #136	@ 0x88
 80044aa:	2120      	movs	r1, #32
 80044ac:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	228c      	movs	r2, #140	@ 0x8c
 80044b2:	2120      	movs	r1, #32
 80044b4:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	2200      	movs	r2, #0
 80044ba:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2200      	movs	r2, #0
 80044c0:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	2284      	movs	r2, #132	@ 0x84
 80044c6:	2100      	movs	r1, #0
 80044c8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80044ca:	2300      	movs	r3, #0
}
 80044cc:	0018      	movs	r0, r3
 80044ce:	46bd      	mov	sp, r7
 80044d0:	b010      	add	sp, #64	@ 0x40
 80044d2:	bd80      	pop	{r7, pc}
 80044d4:	01ffffff 	.word	0x01ffffff
 80044d8:	fffffedf 	.word	0xfffffedf

080044dc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80044dc:	b580      	push	{r7, lr}
 80044de:	b084      	sub	sp, #16
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	60f8      	str	r0, [r7, #12]
 80044e4:	60b9      	str	r1, [r7, #8]
 80044e6:	603b      	str	r3, [r7, #0]
 80044e8:	1dfb      	adds	r3, r7, #7
 80044ea:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80044ec:	e051      	b.n	8004592 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80044ee:	69bb      	ldr	r3, [r7, #24]
 80044f0:	3301      	adds	r3, #1
 80044f2:	d04e      	beq.n	8004592 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044f4:	f7fc ff3c 	bl	8001370 <HAL_GetTick>
 80044f8:	0002      	movs	r2, r0
 80044fa:	683b      	ldr	r3, [r7, #0]
 80044fc:	1ad3      	subs	r3, r2, r3
 80044fe:	69ba      	ldr	r2, [r7, #24]
 8004500:	429a      	cmp	r2, r3
 8004502:	d302      	bcc.n	800450a <UART_WaitOnFlagUntilTimeout+0x2e>
 8004504:	69bb      	ldr	r3, [r7, #24]
 8004506:	2b00      	cmp	r3, #0
 8004508:	d101      	bne.n	800450e <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800450a:	2303      	movs	r3, #3
 800450c:	e051      	b.n	80045b2 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	2204      	movs	r2, #4
 8004516:	4013      	ands	r3, r2
 8004518:	d03b      	beq.n	8004592 <UART_WaitOnFlagUntilTimeout+0xb6>
 800451a:	68bb      	ldr	r3, [r7, #8]
 800451c:	2b80      	cmp	r3, #128	@ 0x80
 800451e:	d038      	beq.n	8004592 <UART_WaitOnFlagUntilTimeout+0xb6>
 8004520:	68bb      	ldr	r3, [r7, #8]
 8004522:	2b40      	cmp	r3, #64	@ 0x40
 8004524:	d035      	beq.n	8004592 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	69db      	ldr	r3, [r3, #28]
 800452c:	2208      	movs	r2, #8
 800452e:	4013      	ands	r3, r2
 8004530:	2b08      	cmp	r3, #8
 8004532:	d111      	bne.n	8004558 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	2208      	movs	r2, #8
 800453a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	0018      	movs	r0, r3
 8004540:	f000 f960 	bl	8004804 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	2290      	movs	r2, #144	@ 0x90
 8004548:	2108      	movs	r1, #8
 800454a:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	2284      	movs	r2, #132	@ 0x84
 8004550:	2100      	movs	r1, #0
 8004552:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8004554:	2301      	movs	r3, #1
 8004556:	e02c      	b.n	80045b2 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	69da      	ldr	r2, [r3, #28]
 800455e:	2380      	movs	r3, #128	@ 0x80
 8004560:	011b      	lsls	r3, r3, #4
 8004562:	401a      	ands	r2, r3
 8004564:	2380      	movs	r3, #128	@ 0x80
 8004566:	011b      	lsls	r3, r3, #4
 8004568:	429a      	cmp	r2, r3
 800456a:	d112      	bne.n	8004592 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	2280      	movs	r2, #128	@ 0x80
 8004572:	0112      	lsls	r2, r2, #4
 8004574:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	0018      	movs	r0, r3
 800457a:	f000 f943 	bl	8004804 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	2290      	movs	r2, #144	@ 0x90
 8004582:	2120      	movs	r1, #32
 8004584:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	2284      	movs	r2, #132	@ 0x84
 800458a:	2100      	movs	r1, #0
 800458c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800458e:	2303      	movs	r3, #3
 8004590:	e00f      	b.n	80045b2 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	69db      	ldr	r3, [r3, #28]
 8004598:	68ba      	ldr	r2, [r7, #8]
 800459a:	4013      	ands	r3, r2
 800459c:	68ba      	ldr	r2, [r7, #8]
 800459e:	1ad3      	subs	r3, r2, r3
 80045a0:	425a      	negs	r2, r3
 80045a2:	4153      	adcs	r3, r2
 80045a4:	b2db      	uxtb	r3, r3
 80045a6:	001a      	movs	r2, r3
 80045a8:	1dfb      	adds	r3, r7, #7
 80045aa:	781b      	ldrb	r3, [r3, #0]
 80045ac:	429a      	cmp	r2, r3
 80045ae:	d09e      	beq.n	80044ee <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80045b0:	2300      	movs	r3, #0
}
 80045b2:	0018      	movs	r0, r3
 80045b4:	46bd      	mov	sp, r7
 80045b6:	b004      	add	sp, #16
 80045b8:	bd80      	pop	{r7, pc}
	...

080045bc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80045bc:	b580      	push	{r7, lr}
 80045be:	b098      	sub	sp, #96	@ 0x60
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	60f8      	str	r0, [r7, #12]
 80045c4:	60b9      	str	r1, [r7, #8]
 80045c6:	1dbb      	adds	r3, r7, #6
 80045c8:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	68ba      	ldr	r2, [r7, #8]
 80045ce:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	1dba      	adds	r2, r7, #6
 80045d4:	215c      	movs	r1, #92	@ 0x5c
 80045d6:	8812      	ldrh	r2, [r2, #0]
 80045d8:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	1dba      	adds	r2, r7, #6
 80045de:	215e      	movs	r1, #94	@ 0x5e
 80045e0:	8812      	ldrh	r2, [r2, #0]
 80045e2:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	2200      	movs	r2, #0
 80045e8:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	689a      	ldr	r2, [r3, #8]
 80045ee:	2380      	movs	r3, #128	@ 0x80
 80045f0:	015b      	lsls	r3, r3, #5
 80045f2:	429a      	cmp	r2, r3
 80045f4:	d10d      	bne.n	8004612 <UART_Start_Receive_IT+0x56>
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	691b      	ldr	r3, [r3, #16]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d104      	bne.n	8004608 <UART_Start_Receive_IT+0x4c>
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	2260      	movs	r2, #96	@ 0x60
 8004602:	497b      	ldr	r1, [pc, #492]	@ (80047f0 <UART_Start_Receive_IT+0x234>)
 8004604:	5299      	strh	r1, [r3, r2]
 8004606:	e02e      	b.n	8004666 <UART_Start_Receive_IT+0xaa>
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	2260      	movs	r2, #96	@ 0x60
 800460c:	21ff      	movs	r1, #255	@ 0xff
 800460e:	5299      	strh	r1, [r3, r2]
 8004610:	e029      	b.n	8004666 <UART_Start_Receive_IT+0xaa>
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	689b      	ldr	r3, [r3, #8]
 8004616:	2b00      	cmp	r3, #0
 8004618:	d10d      	bne.n	8004636 <UART_Start_Receive_IT+0x7a>
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	691b      	ldr	r3, [r3, #16]
 800461e:	2b00      	cmp	r3, #0
 8004620:	d104      	bne.n	800462c <UART_Start_Receive_IT+0x70>
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	2260      	movs	r2, #96	@ 0x60
 8004626:	21ff      	movs	r1, #255	@ 0xff
 8004628:	5299      	strh	r1, [r3, r2]
 800462a:	e01c      	b.n	8004666 <UART_Start_Receive_IT+0xaa>
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	2260      	movs	r2, #96	@ 0x60
 8004630:	217f      	movs	r1, #127	@ 0x7f
 8004632:	5299      	strh	r1, [r3, r2]
 8004634:	e017      	b.n	8004666 <UART_Start_Receive_IT+0xaa>
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	689a      	ldr	r2, [r3, #8]
 800463a:	2380      	movs	r3, #128	@ 0x80
 800463c:	055b      	lsls	r3, r3, #21
 800463e:	429a      	cmp	r2, r3
 8004640:	d10d      	bne.n	800465e <UART_Start_Receive_IT+0xa2>
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	691b      	ldr	r3, [r3, #16]
 8004646:	2b00      	cmp	r3, #0
 8004648:	d104      	bne.n	8004654 <UART_Start_Receive_IT+0x98>
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	2260      	movs	r2, #96	@ 0x60
 800464e:	217f      	movs	r1, #127	@ 0x7f
 8004650:	5299      	strh	r1, [r3, r2]
 8004652:	e008      	b.n	8004666 <UART_Start_Receive_IT+0xaa>
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	2260      	movs	r2, #96	@ 0x60
 8004658:	213f      	movs	r1, #63	@ 0x3f
 800465a:	5299      	strh	r1, [r3, r2]
 800465c:	e003      	b.n	8004666 <UART_Start_Receive_IT+0xaa>
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	2260      	movs	r2, #96	@ 0x60
 8004662:	2100      	movs	r1, #0
 8004664:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	2290      	movs	r2, #144	@ 0x90
 800466a:	2100      	movs	r1, #0
 800466c:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	228c      	movs	r2, #140	@ 0x8c
 8004672:	2122      	movs	r1, #34	@ 0x22
 8004674:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004676:	f3ef 8310 	mrs	r3, PRIMASK
 800467a:	643b      	str	r3, [r7, #64]	@ 0x40
  return(result);
 800467c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800467e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004680:	2301      	movs	r3, #1
 8004682:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004684:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004686:	f383 8810 	msr	PRIMASK, r3
}
 800468a:	46c0      	nop			@ (mov r8, r8)
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	689a      	ldr	r2, [r3, #8]
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	2101      	movs	r1, #1
 8004698:	430a      	orrs	r2, r1
 800469a:	609a      	str	r2, [r3, #8]
 800469c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800469e:	64bb      	str	r3, [r7, #72]	@ 0x48
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046a0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80046a2:	f383 8810 	msr	PRIMASK, r3
}
 80046a6:	46c0      	nop			@ (mov r8, r8)

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80046ac:	2380      	movs	r3, #128	@ 0x80
 80046ae:	059b      	lsls	r3, r3, #22
 80046b0:	429a      	cmp	r2, r3
 80046b2:	d150      	bne.n	8004756 <UART_Start_Receive_IT+0x19a>
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	2268      	movs	r2, #104	@ 0x68
 80046b8:	5a9b      	ldrh	r3, [r3, r2]
 80046ba:	1dba      	adds	r2, r7, #6
 80046bc:	8812      	ldrh	r2, [r2, #0]
 80046be:	429a      	cmp	r2, r3
 80046c0:	d349      	bcc.n	8004756 <UART_Start_Receive_IT+0x19a>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	689a      	ldr	r2, [r3, #8]
 80046c6:	2380      	movs	r3, #128	@ 0x80
 80046c8:	015b      	lsls	r3, r3, #5
 80046ca:	429a      	cmp	r2, r3
 80046cc:	d107      	bne.n	80046de <UART_Start_Receive_IT+0x122>
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	691b      	ldr	r3, [r3, #16]
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d103      	bne.n	80046de <UART_Start_Receive_IT+0x122>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	4a46      	ldr	r2, [pc, #280]	@ (80047f4 <UART_Start_Receive_IT+0x238>)
 80046da:	675a      	str	r2, [r3, #116]	@ 0x74
 80046dc:	e002      	b.n	80046e4 <UART_Start_Receive_IT+0x128>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	4a45      	ldr	r2, [pc, #276]	@ (80047f8 <UART_Start_Receive_IT+0x23c>)
 80046e2:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	691b      	ldr	r3, [r3, #16]
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d019      	beq.n	8004720 <UART_Start_Receive_IT+0x164>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80046ec:	f3ef 8310 	mrs	r3, PRIMASK
 80046f0:	637b      	str	r3, [r7, #52]	@ 0x34
  return(result);
 80046f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80046f4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80046f6:	2301      	movs	r3, #1
 80046f8:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046fc:	f383 8810 	msr	PRIMASK, r3
}
 8004700:	46c0      	nop			@ (mov r8, r8)
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	681a      	ldr	r2, [r3, #0]
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	2180      	movs	r1, #128	@ 0x80
 800470e:	0049      	lsls	r1, r1, #1
 8004710:	430a      	orrs	r2, r1
 8004712:	601a      	str	r2, [r3, #0]
 8004714:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004716:	63fb      	str	r3, [r7, #60]	@ 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004718:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800471a:	f383 8810 	msr	PRIMASK, r3
}
 800471e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004720:	f3ef 8310 	mrs	r3, PRIMASK
 8004724:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 8004726:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8004728:	657b      	str	r3, [r7, #84]	@ 0x54
 800472a:	2301      	movs	r3, #1
 800472c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800472e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004730:	f383 8810 	msr	PRIMASK, r3
}
 8004734:	46c0      	nop			@ (mov r8, r8)
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	689a      	ldr	r2, [r3, #8]
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	2180      	movs	r1, #128	@ 0x80
 8004742:	0549      	lsls	r1, r1, #21
 8004744:	430a      	orrs	r2, r1
 8004746:	609a      	str	r2, [r3, #8]
 8004748:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800474a:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800474c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800474e:	f383 8810 	msr	PRIMASK, r3
}
 8004752:	46c0      	nop			@ (mov r8, r8)
 8004754:	e047      	b.n	80047e6 <UART_Start_Receive_IT+0x22a>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	689a      	ldr	r2, [r3, #8]
 800475a:	2380      	movs	r3, #128	@ 0x80
 800475c:	015b      	lsls	r3, r3, #5
 800475e:	429a      	cmp	r2, r3
 8004760:	d107      	bne.n	8004772 <UART_Start_Receive_IT+0x1b6>
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	691b      	ldr	r3, [r3, #16]
 8004766:	2b00      	cmp	r3, #0
 8004768:	d103      	bne.n	8004772 <UART_Start_Receive_IT+0x1b6>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	4a23      	ldr	r2, [pc, #140]	@ (80047fc <UART_Start_Receive_IT+0x240>)
 800476e:	675a      	str	r2, [r3, #116]	@ 0x74
 8004770:	e002      	b.n	8004778 <UART_Start_Receive_IT+0x1bc>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	4a22      	ldr	r2, [pc, #136]	@ (8004800 <UART_Start_Receive_IT+0x244>)
 8004776:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	691b      	ldr	r3, [r3, #16]
 800477c:	2b00      	cmp	r3, #0
 800477e:	d019      	beq.n	80047b4 <UART_Start_Receive_IT+0x1f8>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004780:	f3ef 8310 	mrs	r3, PRIMASK
 8004784:	61fb      	str	r3, [r7, #28]
  return(result);
 8004786:	69fb      	ldr	r3, [r7, #28]
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8004788:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800478a:	2301      	movs	r3, #1
 800478c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800478e:	6a3b      	ldr	r3, [r7, #32]
 8004790:	f383 8810 	msr	PRIMASK, r3
}
 8004794:	46c0      	nop			@ (mov r8, r8)
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	681a      	ldr	r2, [r3, #0]
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	2190      	movs	r1, #144	@ 0x90
 80047a2:	0049      	lsls	r1, r1, #1
 80047a4:	430a      	orrs	r2, r1
 80047a6:	601a      	str	r2, [r3, #0]
 80047a8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80047aa:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80047ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047ae:	f383 8810 	msr	PRIMASK, r3
}
 80047b2:	e018      	b.n	80047e6 <UART_Start_Receive_IT+0x22a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80047b4:	f3ef 8310 	mrs	r3, PRIMASK
 80047b8:	613b      	str	r3, [r7, #16]
  return(result);
 80047ba:	693b      	ldr	r3, [r7, #16]
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80047bc:	653b      	str	r3, [r7, #80]	@ 0x50
 80047be:	2301      	movs	r3, #1
 80047c0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80047c2:	697b      	ldr	r3, [r7, #20]
 80047c4:	f383 8810 	msr	PRIMASK, r3
}
 80047c8:	46c0      	nop			@ (mov r8, r8)
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	681a      	ldr	r2, [r3, #0]
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	2120      	movs	r1, #32
 80047d6:	430a      	orrs	r2, r1
 80047d8:	601a      	str	r2, [r3, #0]
 80047da:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80047dc:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80047de:	69bb      	ldr	r3, [r7, #24]
 80047e0:	f383 8810 	msr	PRIMASK, r3
}
 80047e4:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return HAL_OK;
 80047e6:	2300      	movs	r3, #0
}
 80047e8:	0018      	movs	r0, r3
 80047ea:	46bd      	mov	sp, r7
 80047ec:	b018      	add	sp, #96	@ 0x60
 80047ee:	bd80      	pop	{r7, pc}
 80047f0:	000001ff 	.word	0x000001ff
 80047f4:	08005021 	.word	0x08005021
 80047f8:	08004ce1 	.word	0x08004ce1
 80047fc:	08004b1d 	.word	0x08004b1d
 8004800:	08004959 	.word	0x08004959

08004804 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004804:	b580      	push	{r7, lr}
 8004806:	b08e      	sub	sp, #56	@ 0x38
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800480c:	f3ef 8310 	mrs	r3, PRIMASK
 8004810:	617b      	str	r3, [r7, #20]
  return(result);
 8004812:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004814:	637b      	str	r3, [r7, #52]	@ 0x34
 8004816:	2301      	movs	r3, #1
 8004818:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800481a:	69bb      	ldr	r3, [r7, #24]
 800481c:	f383 8810 	msr	PRIMASK, r3
}
 8004820:	46c0      	nop			@ (mov r8, r8)
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	681a      	ldr	r2, [r3, #0]
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	4926      	ldr	r1, [pc, #152]	@ (80048c8 <UART_EndRxTransfer+0xc4>)
 800482e:	400a      	ands	r2, r1
 8004830:	601a      	str	r2, [r3, #0]
 8004832:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004834:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004836:	69fb      	ldr	r3, [r7, #28]
 8004838:	f383 8810 	msr	PRIMASK, r3
}
 800483c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800483e:	f3ef 8310 	mrs	r3, PRIMASK
 8004842:	623b      	str	r3, [r7, #32]
  return(result);
 8004844:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004846:	633b      	str	r3, [r7, #48]	@ 0x30
 8004848:	2301      	movs	r3, #1
 800484a:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800484c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800484e:	f383 8810 	msr	PRIMASK, r3
}
 8004852:	46c0      	nop			@ (mov r8, r8)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	689a      	ldr	r2, [r3, #8]
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	491b      	ldr	r1, [pc, #108]	@ (80048cc <UART_EndRxTransfer+0xc8>)
 8004860:	400a      	ands	r2, r1
 8004862:	609a      	str	r2, [r3, #8]
 8004864:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004866:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004868:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800486a:	f383 8810 	msr	PRIMASK, r3
}
 800486e:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004874:	2b01      	cmp	r3, #1
 8004876:	d118      	bne.n	80048aa <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004878:	f3ef 8310 	mrs	r3, PRIMASK
 800487c:	60bb      	str	r3, [r7, #8]
  return(result);
 800487e:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004880:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004882:	2301      	movs	r3, #1
 8004884:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	f383 8810 	msr	PRIMASK, r3
}
 800488c:	46c0      	nop			@ (mov r8, r8)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	681a      	ldr	r2, [r3, #0]
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	2110      	movs	r1, #16
 800489a:	438a      	bics	r2, r1
 800489c:	601a      	str	r2, [r3, #0]
 800489e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80048a0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048a2:	693b      	ldr	r3, [r7, #16]
 80048a4:	f383 8810 	msr	PRIMASK, r3
}
 80048a8:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	228c      	movs	r2, #140	@ 0x8c
 80048ae:	2120      	movs	r1, #32
 80048b0:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	2200      	movs	r2, #0
 80048b6:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2200      	movs	r2, #0
 80048bc:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80048be:	46c0      	nop			@ (mov r8, r8)
 80048c0:	46bd      	mov	sp, r7
 80048c2:	b00e      	add	sp, #56	@ 0x38
 80048c4:	bd80      	pop	{r7, pc}
 80048c6:	46c0      	nop			@ (mov r8, r8)
 80048c8:	fffffedf 	.word	0xfffffedf
 80048cc:	effffffe 	.word	0xeffffffe

080048d0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80048d0:	b580      	push	{r7, lr}
 80048d2:	b084      	sub	sp, #16
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048dc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	225e      	movs	r2, #94	@ 0x5e
 80048e2:	2100      	movs	r1, #0
 80048e4:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	2256      	movs	r2, #86	@ 0x56
 80048ea:	2100      	movs	r1, #0
 80048ec:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	0018      	movs	r0, r3
 80048f2:	f7ff f9c3 	bl	8003c7c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80048f6:	46c0      	nop			@ (mov r8, r8)
 80048f8:	46bd      	mov	sp, r7
 80048fa:	b004      	add	sp, #16
 80048fc:	bd80      	pop	{r7, pc}

080048fe <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80048fe:	b580      	push	{r7, lr}
 8004900:	b086      	sub	sp, #24
 8004902:	af00      	add	r7, sp, #0
 8004904:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004906:	f3ef 8310 	mrs	r3, PRIMASK
 800490a:	60bb      	str	r3, [r7, #8]
  return(result);
 800490c:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800490e:	617b      	str	r3, [r7, #20]
 8004910:	2301      	movs	r3, #1
 8004912:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	f383 8810 	msr	PRIMASK, r3
}
 800491a:	46c0      	nop			@ (mov r8, r8)
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	681a      	ldr	r2, [r3, #0]
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	2140      	movs	r1, #64	@ 0x40
 8004928:	438a      	bics	r2, r1
 800492a:	601a      	str	r2, [r3, #0]
 800492c:	697b      	ldr	r3, [r7, #20]
 800492e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004930:	693b      	ldr	r3, [r7, #16]
 8004932:	f383 8810 	msr	PRIMASK, r3
}
 8004936:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2288      	movs	r2, #136	@ 0x88
 800493c:	2120      	movs	r1, #32
 800493e:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2200      	movs	r2, #0
 8004944:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	0018      	movs	r0, r3
 800494a:	f7ff f98f 	bl	8003c6c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800494e:	46c0      	nop			@ (mov r8, r8)
 8004950:	46bd      	mov	sp, r7
 8004952:	b006      	add	sp, #24
 8004954:	bd80      	pop	{r7, pc}
	...

08004958 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004958:	b580      	push	{r7, lr}
 800495a:	b094      	sub	sp, #80	@ 0x50
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8004960:	204e      	movs	r0, #78	@ 0x4e
 8004962:	183b      	adds	r3, r7, r0
 8004964:	687a      	ldr	r2, [r7, #4]
 8004966:	2160      	movs	r1, #96	@ 0x60
 8004968:	5a52      	ldrh	r2, [r2, r1]
 800496a:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	228c      	movs	r2, #140	@ 0x8c
 8004970:	589b      	ldr	r3, [r3, r2]
 8004972:	2b22      	cmp	r3, #34	@ 0x22
 8004974:	d000      	beq.n	8004978 <UART_RxISR_8BIT+0x20>
 8004976:	e0bf      	b.n	8004af8 <UART_RxISR_8BIT+0x1a0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800497e:	214c      	movs	r1, #76	@ 0x4c
 8004980:	187b      	adds	r3, r7, r1
 8004982:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004984:	187b      	adds	r3, r7, r1
 8004986:	881b      	ldrh	r3, [r3, #0]
 8004988:	b2da      	uxtb	r2, r3
 800498a:	183b      	adds	r3, r7, r0
 800498c:	881b      	ldrh	r3, [r3, #0]
 800498e:	b2d9      	uxtb	r1, r3
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004994:	400a      	ands	r2, r1
 8004996:	b2d2      	uxtb	r2, r2
 8004998:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800499e:	1c5a      	adds	r2, r3, #1
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	225e      	movs	r2, #94	@ 0x5e
 80049a8:	5a9b      	ldrh	r3, [r3, r2]
 80049aa:	b29b      	uxth	r3, r3
 80049ac:	3b01      	subs	r3, #1
 80049ae:	b299      	uxth	r1, r3
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	225e      	movs	r2, #94	@ 0x5e
 80049b4:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	225e      	movs	r2, #94	@ 0x5e
 80049ba:	5a9b      	ldrh	r3, [r3, r2]
 80049bc:	b29b      	uxth	r3, r3
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d000      	beq.n	80049c4 <UART_RxISR_8BIT+0x6c>
 80049c2:	e0a1      	b.n	8004b08 <UART_RxISR_8BIT+0x1b0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80049c4:	f3ef 8310 	mrs	r3, PRIMASK
 80049c8:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80049ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80049cc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80049ce:	2301      	movs	r3, #1
 80049d0:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80049d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049d4:	f383 8810 	msr	PRIMASK, r3
}
 80049d8:	46c0      	nop			@ (mov r8, r8)
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	681a      	ldr	r2, [r3, #0]
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	494a      	ldr	r1, [pc, #296]	@ (8004b10 <UART_RxISR_8BIT+0x1b8>)
 80049e6:	400a      	ands	r2, r1
 80049e8:	601a      	str	r2, [r3, #0]
 80049ea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80049ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80049ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80049f0:	f383 8810 	msr	PRIMASK, r3
}
 80049f4:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80049f6:	f3ef 8310 	mrs	r3, PRIMASK
 80049fa:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 80049fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049fe:	647b      	str	r3, [r7, #68]	@ 0x44
 8004a00:	2301      	movs	r3, #1
 8004a02:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a06:	f383 8810 	msr	PRIMASK, r3
}
 8004a0a:	46c0      	nop			@ (mov r8, r8)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	689a      	ldr	r2, [r3, #8]
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	2101      	movs	r1, #1
 8004a18:	438a      	bics	r2, r1
 8004a1a:	609a      	str	r2, [r3, #8]
 8004a1c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004a1e:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a22:	f383 8810 	msr	PRIMASK, r3
}
 8004a26:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	228c      	movs	r2, #140	@ 0x8c
 8004a2c:	2120      	movs	r1, #32
 8004a2e:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2200      	movs	r2, #0
 8004a34:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	2200      	movs	r2, #0
 8004a3a:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	4a34      	ldr	r2, [pc, #208]	@ (8004b14 <UART_RxISR_8BIT+0x1bc>)
 8004a42:	4293      	cmp	r3, r2
 8004a44:	d01f      	beq.n	8004a86 <UART_RxISR_8BIT+0x12e>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	685a      	ldr	r2, [r3, #4]
 8004a4c:	2380      	movs	r3, #128	@ 0x80
 8004a4e:	041b      	lsls	r3, r3, #16
 8004a50:	4013      	ands	r3, r2
 8004a52:	d018      	beq.n	8004a86 <UART_RxISR_8BIT+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004a54:	f3ef 8310 	mrs	r3, PRIMASK
 8004a58:	61bb      	str	r3, [r7, #24]
  return(result);
 8004a5a:	69bb      	ldr	r3, [r7, #24]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004a5c:	643b      	str	r3, [r7, #64]	@ 0x40
 8004a5e:	2301      	movs	r3, #1
 8004a60:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a62:	69fb      	ldr	r3, [r7, #28]
 8004a64:	f383 8810 	msr	PRIMASK, r3
}
 8004a68:	46c0      	nop			@ (mov r8, r8)
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	681a      	ldr	r2, [r3, #0]
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	4928      	ldr	r1, [pc, #160]	@ (8004b18 <UART_RxISR_8BIT+0x1c0>)
 8004a76:	400a      	ands	r2, r1
 8004a78:	601a      	str	r2, [r3, #0]
 8004a7a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004a7c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a7e:	6a3b      	ldr	r3, [r7, #32]
 8004a80:	f383 8810 	msr	PRIMASK, r3
}
 8004a84:	46c0      	nop			@ (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004a8a:	2b01      	cmp	r3, #1
 8004a8c:	d12f      	bne.n	8004aee <UART_RxISR_8BIT+0x196>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	2200      	movs	r2, #0
 8004a92:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004a94:	f3ef 8310 	mrs	r3, PRIMASK
 8004a98:	60fb      	str	r3, [r7, #12]
  return(result);
 8004a9a:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004a9e:	2301      	movs	r3, #1
 8004aa0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004aa2:	693b      	ldr	r3, [r7, #16]
 8004aa4:	f383 8810 	msr	PRIMASK, r3
}
 8004aa8:	46c0      	nop			@ (mov r8, r8)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	681a      	ldr	r2, [r3, #0]
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	2110      	movs	r1, #16
 8004ab6:	438a      	bics	r2, r1
 8004ab8:	601a      	str	r2, [r3, #0]
 8004aba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004abc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004abe:	697b      	ldr	r3, [r7, #20]
 8004ac0:	f383 8810 	msr	PRIMASK, r3
}
 8004ac4:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	69db      	ldr	r3, [r3, #28]
 8004acc:	2210      	movs	r2, #16
 8004ace:	4013      	ands	r3, r2
 8004ad0:	2b10      	cmp	r3, #16
 8004ad2:	d103      	bne.n	8004adc <UART_RxISR_8BIT+0x184>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	2210      	movs	r2, #16
 8004ada:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	225c      	movs	r2, #92	@ 0x5c
 8004ae0:	5a9a      	ldrh	r2, [r3, r2]
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	0011      	movs	r1, r2
 8004ae6:	0018      	movs	r0, r3
 8004ae8:	f7ff f8d0 	bl	8003c8c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004aec:	e00c      	b.n	8004b08 <UART_RxISR_8BIT+0x1b0>
        HAL_UART_RxCpltCallback(huart);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	0018      	movs	r0, r3
 8004af2:	f7fb ff39 	bl	8000968 <HAL_UART_RxCpltCallback>
}
 8004af6:	e007      	b.n	8004b08 <UART_RxISR_8BIT+0x1b0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	699a      	ldr	r2, [r3, #24]
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	2108      	movs	r1, #8
 8004b04:	430a      	orrs	r2, r1
 8004b06:	619a      	str	r2, [r3, #24]
}
 8004b08:	46c0      	nop			@ (mov r8, r8)
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	b014      	add	sp, #80	@ 0x50
 8004b0e:	bd80      	pop	{r7, pc}
 8004b10:	fffffedf 	.word	0xfffffedf
 8004b14:	40008000 	.word	0x40008000
 8004b18:	fbffffff 	.word	0xfbffffff

08004b1c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004b1c:	b580      	push	{r7, lr}
 8004b1e:	b094      	sub	sp, #80	@ 0x50
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8004b24:	204e      	movs	r0, #78	@ 0x4e
 8004b26:	183b      	adds	r3, r7, r0
 8004b28:	687a      	ldr	r2, [r7, #4]
 8004b2a:	2160      	movs	r1, #96	@ 0x60
 8004b2c:	5a52      	ldrh	r2, [r2, r1]
 8004b2e:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	228c      	movs	r2, #140	@ 0x8c
 8004b34:	589b      	ldr	r3, [r3, r2]
 8004b36:	2b22      	cmp	r3, #34	@ 0x22
 8004b38:	d000      	beq.n	8004b3c <UART_RxISR_16BIT+0x20>
 8004b3a:	e0bf      	b.n	8004cbc <UART_RxISR_16BIT+0x1a0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004b42:	214c      	movs	r1, #76	@ 0x4c
 8004b44:	187b      	adds	r3, r7, r1
 8004b46:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b4c:	64bb      	str	r3, [r7, #72]	@ 0x48
    *tmp = (uint16_t)(uhdata & uhMask);
 8004b4e:	187b      	adds	r3, r7, r1
 8004b50:	183a      	adds	r2, r7, r0
 8004b52:	881b      	ldrh	r3, [r3, #0]
 8004b54:	8812      	ldrh	r2, [r2, #0]
 8004b56:	4013      	ands	r3, r2
 8004b58:	b29a      	uxth	r2, r3
 8004b5a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004b5c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b62:	1c9a      	adds	r2, r3, #2
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	225e      	movs	r2, #94	@ 0x5e
 8004b6c:	5a9b      	ldrh	r3, [r3, r2]
 8004b6e:	b29b      	uxth	r3, r3
 8004b70:	3b01      	subs	r3, #1
 8004b72:	b299      	uxth	r1, r3
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	225e      	movs	r2, #94	@ 0x5e
 8004b78:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	225e      	movs	r2, #94	@ 0x5e
 8004b7e:	5a9b      	ldrh	r3, [r3, r2]
 8004b80:	b29b      	uxth	r3, r3
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d000      	beq.n	8004b88 <UART_RxISR_16BIT+0x6c>
 8004b86:	e0a1      	b.n	8004ccc <UART_RxISR_16BIT+0x1b0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004b88:	f3ef 8310 	mrs	r3, PRIMASK
 8004b8c:	623b      	str	r3, [r7, #32]
  return(result);
 8004b8e:	6a3b      	ldr	r3, [r7, #32]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004b90:	647b      	str	r3, [r7, #68]	@ 0x44
 8004b92:	2301      	movs	r3, #1
 8004b94:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b98:	f383 8810 	msr	PRIMASK, r3
}
 8004b9c:	46c0      	nop			@ (mov r8, r8)
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	681a      	ldr	r2, [r3, #0]
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	494a      	ldr	r1, [pc, #296]	@ (8004cd4 <UART_RxISR_16BIT+0x1b8>)
 8004baa:	400a      	ands	r2, r1
 8004bac:	601a      	str	r2, [r3, #0]
 8004bae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004bb0:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004bb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bb4:	f383 8810 	msr	PRIMASK, r3
}
 8004bb8:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004bba:	f3ef 8310 	mrs	r3, PRIMASK
 8004bbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 8004bc0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004bc2:	643b      	str	r3, [r7, #64]	@ 0x40
 8004bc4:	2301      	movs	r3, #1
 8004bc6:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004bc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bca:	f383 8810 	msr	PRIMASK, r3
}
 8004bce:	46c0      	nop			@ (mov r8, r8)
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	689a      	ldr	r2, [r3, #8]
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	2101      	movs	r1, #1
 8004bdc:	438a      	bics	r2, r1
 8004bde:	609a      	str	r2, [r3, #8]
 8004be0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004be2:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004be4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004be6:	f383 8810 	msr	PRIMASK, r3
}
 8004bea:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	228c      	movs	r2, #140	@ 0x8c
 8004bf0:	2120      	movs	r1, #32
 8004bf2:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	4a34      	ldr	r2, [pc, #208]	@ (8004cd8 <UART_RxISR_16BIT+0x1bc>)
 8004c06:	4293      	cmp	r3, r2
 8004c08:	d01f      	beq.n	8004c4a <UART_RxISR_16BIT+0x12e>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	685a      	ldr	r2, [r3, #4]
 8004c10:	2380      	movs	r3, #128	@ 0x80
 8004c12:	041b      	lsls	r3, r3, #16
 8004c14:	4013      	ands	r3, r2
 8004c16:	d018      	beq.n	8004c4a <UART_RxISR_16BIT+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004c18:	f3ef 8310 	mrs	r3, PRIMASK
 8004c1c:	617b      	str	r3, [r7, #20]
  return(result);
 8004c1e:	697b      	ldr	r3, [r7, #20]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004c20:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004c22:	2301      	movs	r3, #1
 8004c24:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c26:	69bb      	ldr	r3, [r7, #24]
 8004c28:	f383 8810 	msr	PRIMASK, r3
}
 8004c2c:	46c0      	nop			@ (mov r8, r8)
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	681a      	ldr	r2, [r3, #0]
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	4928      	ldr	r1, [pc, #160]	@ (8004cdc <UART_RxISR_16BIT+0x1c0>)
 8004c3a:	400a      	ands	r2, r1
 8004c3c:	601a      	str	r2, [r3, #0]
 8004c3e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004c40:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c42:	69fb      	ldr	r3, [r7, #28]
 8004c44:	f383 8810 	msr	PRIMASK, r3
}
 8004c48:	46c0      	nop			@ (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004c4e:	2b01      	cmp	r3, #1
 8004c50:	d12f      	bne.n	8004cb2 <UART_RxISR_16BIT+0x196>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	2200      	movs	r2, #0
 8004c56:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004c58:	f3ef 8310 	mrs	r3, PRIMASK
 8004c5c:	60bb      	str	r3, [r7, #8]
  return(result);
 8004c5e:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c60:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004c62:	2301      	movs	r3, #1
 8004c64:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	f383 8810 	msr	PRIMASK, r3
}
 8004c6c:	46c0      	nop			@ (mov r8, r8)
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	681a      	ldr	r2, [r3, #0]
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	2110      	movs	r1, #16
 8004c7a:	438a      	bics	r2, r1
 8004c7c:	601a      	str	r2, [r3, #0]
 8004c7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c80:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c82:	693b      	ldr	r3, [r7, #16]
 8004c84:	f383 8810 	msr	PRIMASK, r3
}
 8004c88:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	69db      	ldr	r3, [r3, #28]
 8004c90:	2210      	movs	r2, #16
 8004c92:	4013      	ands	r3, r2
 8004c94:	2b10      	cmp	r3, #16
 8004c96:	d103      	bne.n	8004ca0 <UART_RxISR_16BIT+0x184>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	2210      	movs	r2, #16
 8004c9e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	225c      	movs	r2, #92	@ 0x5c
 8004ca4:	5a9a      	ldrh	r2, [r3, r2]
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	0011      	movs	r1, r2
 8004caa:	0018      	movs	r0, r3
 8004cac:	f7fe ffee 	bl	8003c8c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004cb0:	e00c      	b.n	8004ccc <UART_RxISR_16BIT+0x1b0>
        HAL_UART_RxCpltCallback(huart);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	0018      	movs	r0, r3
 8004cb6:	f7fb fe57 	bl	8000968 <HAL_UART_RxCpltCallback>
}
 8004cba:	e007      	b.n	8004ccc <UART_RxISR_16BIT+0x1b0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	699a      	ldr	r2, [r3, #24]
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	2108      	movs	r1, #8
 8004cc8:	430a      	orrs	r2, r1
 8004cca:	619a      	str	r2, [r3, #24]
}
 8004ccc:	46c0      	nop			@ (mov r8, r8)
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	b014      	add	sp, #80	@ 0x50
 8004cd2:	bd80      	pop	{r7, pc}
 8004cd4:	fffffedf 	.word	0xfffffedf
 8004cd8:	40008000 	.word	0x40008000
 8004cdc:	fbffffff 	.word	0xfbffffff

08004ce0 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8004ce0:	b580      	push	{r7, lr}
 8004ce2:	b0a0      	sub	sp, #128	@ 0x80
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8004ce8:	237a      	movs	r3, #122	@ 0x7a
 8004cea:	18fb      	adds	r3, r7, r3
 8004cec:	687a      	ldr	r2, [r7, #4]
 8004cee:	2160      	movs	r1, #96	@ 0x60
 8004cf0:	5a52      	ldrh	r2, [r2, r1]
 8004cf2:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	69db      	ldr	r3, [r3, #28]
 8004cfa:	67fb      	str	r3, [r7, #124]	@ 0x7c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	677b      	str	r3, [r7, #116]	@ 0x74
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	689b      	ldr	r3, [r3, #8]
 8004d0a:	673b      	str	r3, [r7, #112]	@ 0x70

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	228c      	movs	r2, #140	@ 0x8c
 8004d10:	589b      	ldr	r3, [r3, r2]
 8004d12:	2b22      	cmp	r3, #34	@ 0x22
 8004d14:	d000      	beq.n	8004d18 <UART_RxISR_8BIT_FIFOEN+0x38>
 8004d16:	e16a      	b.n	8004fee <UART_RxISR_8BIT_FIFOEN+0x30e>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8004d18:	236e      	movs	r3, #110	@ 0x6e
 8004d1a:	18fb      	adds	r3, r7, r3
 8004d1c:	687a      	ldr	r2, [r7, #4]
 8004d1e:	2168      	movs	r1, #104	@ 0x68
 8004d20:	5a52      	ldrh	r2, [r2, r1]
 8004d22:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8004d24:	e111      	b.n	8004f4a <UART_RxISR_8BIT_FIFOEN+0x26a>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004d2c:	216c      	movs	r1, #108	@ 0x6c
 8004d2e:	187b      	adds	r3, r7, r1
 8004d30:	801a      	strh	r2, [r3, #0]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004d32:	187b      	adds	r3, r7, r1
 8004d34:	881b      	ldrh	r3, [r3, #0]
 8004d36:	b2da      	uxtb	r2, r3
 8004d38:	237a      	movs	r3, #122	@ 0x7a
 8004d3a:	18fb      	adds	r3, r7, r3
 8004d3c:	881b      	ldrh	r3, [r3, #0]
 8004d3e:	b2d9      	uxtb	r1, r3
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d44:	400a      	ands	r2, r1
 8004d46:	b2d2      	uxtb	r2, r2
 8004d48:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d4e:	1c5a      	adds	r2, r3, #1
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	225e      	movs	r2, #94	@ 0x5e
 8004d58:	5a9b      	ldrh	r3, [r3, r2]
 8004d5a:	b29b      	uxth	r3, r3
 8004d5c:	3b01      	subs	r3, #1
 8004d5e:	b299      	uxth	r1, r3
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	225e      	movs	r2, #94	@ 0x5e
 8004d64:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	69db      	ldr	r3, [r3, #28]
 8004d6c:	67fb      	str	r3, [r7, #124]	@ 0x7c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8004d6e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004d70:	2207      	movs	r2, #7
 8004d72:	4013      	ands	r3, r2
 8004d74:	d049      	beq.n	8004e0a <UART_RxISR_8BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004d76:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004d78:	2201      	movs	r2, #1
 8004d7a:	4013      	ands	r3, r2
 8004d7c:	d010      	beq.n	8004da0 <UART_RxISR_8BIT_FIFOEN+0xc0>
 8004d7e:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8004d80:	2380      	movs	r3, #128	@ 0x80
 8004d82:	005b      	lsls	r3, r3, #1
 8004d84:	4013      	ands	r3, r2
 8004d86:	d00b      	beq.n	8004da0 <UART_RxISR_8BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	2201      	movs	r2, #1
 8004d8e:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2290      	movs	r2, #144	@ 0x90
 8004d94:	589b      	ldr	r3, [r3, r2]
 8004d96:	2201      	movs	r2, #1
 8004d98:	431a      	orrs	r2, r3
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	2190      	movs	r1, #144	@ 0x90
 8004d9e:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004da0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004da2:	2202      	movs	r2, #2
 8004da4:	4013      	ands	r3, r2
 8004da6:	d00f      	beq.n	8004dc8 <UART_RxISR_8BIT_FIFOEN+0xe8>
 8004da8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004daa:	2201      	movs	r2, #1
 8004dac:	4013      	ands	r3, r2
 8004dae:	d00b      	beq.n	8004dc8 <UART_RxISR_8BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	2202      	movs	r2, #2
 8004db6:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2290      	movs	r2, #144	@ 0x90
 8004dbc:	589b      	ldr	r3, [r3, r2]
 8004dbe:	2204      	movs	r2, #4
 8004dc0:	431a      	orrs	r2, r3
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	2190      	movs	r1, #144	@ 0x90
 8004dc6:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004dc8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004dca:	2204      	movs	r2, #4
 8004dcc:	4013      	ands	r3, r2
 8004dce:	d00f      	beq.n	8004df0 <UART_RxISR_8BIT_FIFOEN+0x110>
 8004dd0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004dd2:	2201      	movs	r2, #1
 8004dd4:	4013      	ands	r3, r2
 8004dd6:	d00b      	beq.n	8004df0 <UART_RxISR_8BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	2204      	movs	r2, #4
 8004dde:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2290      	movs	r2, #144	@ 0x90
 8004de4:	589b      	ldr	r3, [r3, r2]
 8004de6:	2202      	movs	r2, #2
 8004de8:	431a      	orrs	r2, r3
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	2190      	movs	r1, #144	@ 0x90
 8004dee:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2290      	movs	r2, #144	@ 0x90
 8004df4:	589b      	ldr	r3, [r3, r2]
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d007      	beq.n	8004e0a <UART_RxISR_8BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	0018      	movs	r0, r3
 8004dfe:	f7fe ff3d 	bl	8003c7c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	2290      	movs	r2, #144	@ 0x90
 8004e06:	2100      	movs	r1, #0
 8004e08:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	225e      	movs	r2, #94	@ 0x5e
 8004e0e:	5a9b      	ldrh	r3, [r3, r2]
 8004e10:	b29b      	uxth	r3, r3
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d000      	beq.n	8004e18 <UART_RxISR_8BIT_FIFOEN+0x138>
 8004e16:	e098      	b.n	8004f4a <UART_RxISR_8BIT_FIFOEN+0x26a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004e18:	f3ef 8310 	mrs	r3, PRIMASK
 8004e1c:	63bb      	str	r3, [r7, #56]	@ 0x38
  return(result);
 8004e1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004e20:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004e22:	2301      	movs	r3, #1
 8004e24:	63fb      	str	r3, [r7, #60]	@ 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e26:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004e28:	f383 8810 	msr	PRIMASK, r3
}
 8004e2c:	46c0      	nop			@ (mov r8, r8)
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	681a      	ldr	r2, [r3, #0]
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	4973      	ldr	r1, [pc, #460]	@ (8005008 <UART_RxISR_8BIT_FIFOEN+0x328>)
 8004e3a:	400a      	ands	r2, r1
 8004e3c:	601a      	str	r2, [r3, #0]
 8004e3e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004e40:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e42:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004e44:	f383 8810 	msr	PRIMASK, r3
}
 8004e48:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004e4a:	f3ef 8310 	mrs	r3, PRIMASK
 8004e4e:	647b      	str	r3, [r7, #68]	@ 0x44
  return(result);
 8004e50:	6c7b      	ldr	r3, [r7, #68]	@ 0x44

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004e52:	667b      	str	r3, [r7, #100]	@ 0x64
 8004e54:	2301      	movs	r3, #1
 8004e56:	64bb      	str	r3, [r7, #72]	@ 0x48
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e58:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004e5a:	f383 8810 	msr	PRIMASK, r3
}
 8004e5e:	46c0      	nop			@ (mov r8, r8)
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	689a      	ldr	r2, [r3, #8]
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	4968      	ldr	r1, [pc, #416]	@ (800500c <UART_RxISR_8BIT_FIFOEN+0x32c>)
 8004e6c:	400a      	ands	r2, r1
 8004e6e:	609a      	str	r2, [r3, #8]
 8004e70:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004e72:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e74:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004e76:	f383 8810 	msr	PRIMASK, r3
}
 8004e7a:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	228c      	movs	r2, #140	@ 0x8c
 8004e80:	2120      	movs	r1, #32
 8004e82:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2200      	movs	r2, #0
 8004e88:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	2200      	movs	r2, #0
 8004e8e:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	4a5e      	ldr	r2, [pc, #376]	@ (8005010 <UART_RxISR_8BIT_FIFOEN+0x330>)
 8004e96:	4293      	cmp	r3, r2
 8004e98:	d01f      	beq.n	8004eda <UART_RxISR_8BIT_FIFOEN+0x1fa>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	685a      	ldr	r2, [r3, #4]
 8004ea0:	2380      	movs	r3, #128	@ 0x80
 8004ea2:	041b      	lsls	r3, r3, #16
 8004ea4:	4013      	ands	r3, r2
 8004ea6:	d018      	beq.n	8004eda <UART_RxISR_8BIT_FIFOEN+0x1fa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ea8:	f3ef 8310 	mrs	r3, PRIMASK
 8004eac:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 8004eae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004eb0:	663b      	str	r3, [r7, #96]	@ 0x60
 8004eb2:	2301      	movs	r3, #1
 8004eb4:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004eb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004eb8:	f383 8810 	msr	PRIMASK, r3
}
 8004ebc:	46c0      	nop			@ (mov r8, r8)
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	681a      	ldr	r2, [r3, #0]
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	4952      	ldr	r1, [pc, #328]	@ (8005014 <UART_RxISR_8BIT_FIFOEN+0x334>)
 8004eca:	400a      	ands	r2, r1
 8004ecc:	601a      	str	r2, [r3, #0]
 8004ece:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004ed0:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ed2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ed4:	f383 8810 	msr	PRIMASK, r3
}
 8004ed8:	46c0      	nop			@ (mov r8, r8)
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004ede:	2b01      	cmp	r3, #1
 8004ee0:	d12f      	bne.n	8004f42 <UART_RxISR_8BIT_FIFOEN+0x262>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	2200      	movs	r2, #0
 8004ee6:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ee8:	f3ef 8310 	mrs	r3, PRIMASK
 8004eec:	623b      	str	r3, [r7, #32]
  return(result);
 8004eee:	6a3b      	ldr	r3, [r7, #32]

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ef0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004ef2:	2301      	movs	r3, #1
 8004ef4:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ef6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ef8:	f383 8810 	msr	PRIMASK, r3
}
 8004efc:	46c0      	nop			@ (mov r8, r8)
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	681a      	ldr	r2, [r3, #0]
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	2110      	movs	r1, #16
 8004f0a:	438a      	bics	r2, r1
 8004f0c:	601a      	str	r2, [r3, #0]
 8004f0e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004f10:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f14:	f383 8810 	msr	PRIMASK, r3
}
 8004f18:	46c0      	nop			@ (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	69db      	ldr	r3, [r3, #28]
 8004f20:	2210      	movs	r2, #16
 8004f22:	4013      	ands	r3, r2
 8004f24:	2b10      	cmp	r3, #16
 8004f26:	d103      	bne.n	8004f30 <UART_RxISR_8BIT_FIFOEN+0x250>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	2210      	movs	r2, #16
 8004f2e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	225c      	movs	r2, #92	@ 0x5c
 8004f34:	5a9a      	ldrh	r2, [r3, r2]
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	0011      	movs	r1, r2
 8004f3a:	0018      	movs	r0, r3
 8004f3c:	f7fe fea6 	bl	8003c8c <HAL_UARTEx_RxEventCallback>
 8004f40:	e003      	b.n	8004f4a <UART_RxISR_8BIT_FIFOEN+0x26a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	0018      	movs	r0, r3
 8004f46:	f7fb fd0f 	bl	8000968 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8004f4a:	236e      	movs	r3, #110	@ 0x6e
 8004f4c:	18fb      	adds	r3, r7, r3
 8004f4e:	881b      	ldrh	r3, [r3, #0]
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d004      	beq.n	8004f5e <UART_RxISR_8BIT_FIFOEN+0x27e>
 8004f54:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004f56:	2220      	movs	r2, #32
 8004f58:	4013      	ands	r3, r2
 8004f5a:	d000      	beq.n	8004f5e <UART_RxISR_8BIT_FIFOEN+0x27e>
 8004f5c:	e6e3      	b.n	8004d26 <UART_RxISR_8BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8004f5e:	205a      	movs	r0, #90	@ 0x5a
 8004f60:	183b      	adds	r3, r7, r0
 8004f62:	687a      	ldr	r2, [r7, #4]
 8004f64:	215e      	movs	r1, #94	@ 0x5e
 8004f66:	5a52      	ldrh	r2, [r2, r1]
 8004f68:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8004f6a:	0001      	movs	r1, r0
 8004f6c:	187b      	adds	r3, r7, r1
 8004f6e:	881b      	ldrh	r3, [r3, #0]
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d044      	beq.n	8004ffe <UART_RxISR_8BIT_FIFOEN+0x31e>
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2268      	movs	r2, #104	@ 0x68
 8004f78:	5a9b      	ldrh	r3, [r3, r2]
 8004f7a:	187a      	adds	r2, r7, r1
 8004f7c:	8812      	ldrh	r2, [r2, #0]
 8004f7e:	429a      	cmp	r2, r3
 8004f80:	d23d      	bcs.n	8004ffe <UART_RxISR_8BIT_FIFOEN+0x31e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004f82:	f3ef 8310 	mrs	r3, PRIMASK
 8004f86:	60bb      	str	r3, [r7, #8]
  return(result);
 8004f88:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8004f8a:	657b      	str	r3, [r7, #84]	@ 0x54
 8004f8c:	2301      	movs	r3, #1
 8004f8e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	f383 8810 	msr	PRIMASK, r3
}
 8004f96:	46c0      	nop			@ (mov r8, r8)
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	689a      	ldr	r2, [r3, #8]
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	491d      	ldr	r1, [pc, #116]	@ (8005018 <UART_RxISR_8BIT_FIFOEN+0x338>)
 8004fa4:	400a      	ands	r2, r1
 8004fa6:	609a      	str	r2, [r3, #8]
 8004fa8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004faa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004fac:	693b      	ldr	r3, [r7, #16]
 8004fae:	f383 8810 	msr	PRIMASK, r3
}
 8004fb2:	46c0      	nop			@ (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	4a19      	ldr	r2, [pc, #100]	@ (800501c <UART_RxISR_8BIT_FIFOEN+0x33c>)
 8004fb8:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004fba:	f3ef 8310 	mrs	r3, PRIMASK
 8004fbe:	617b      	str	r3, [r7, #20]
  return(result);
 8004fc0:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8004fc2:	653b      	str	r3, [r7, #80]	@ 0x50
 8004fc4:	2301      	movs	r3, #1
 8004fc6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004fc8:	69bb      	ldr	r3, [r7, #24]
 8004fca:	f383 8810 	msr	PRIMASK, r3
}
 8004fce:	46c0      	nop			@ (mov r8, r8)
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	681a      	ldr	r2, [r3, #0]
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	2120      	movs	r1, #32
 8004fdc:	430a      	orrs	r2, r1
 8004fde:	601a      	str	r2, [r3, #0]
 8004fe0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004fe2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004fe4:	69fb      	ldr	r3, [r7, #28]
 8004fe6:	f383 8810 	msr	PRIMASK, r3
}
 8004fea:	46c0      	nop			@ (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004fec:	e007      	b.n	8004ffe <UART_RxISR_8BIT_FIFOEN+0x31e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	699a      	ldr	r2, [r3, #24]
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	2108      	movs	r1, #8
 8004ffa:	430a      	orrs	r2, r1
 8004ffc:	619a      	str	r2, [r3, #24]
}
 8004ffe:	46c0      	nop			@ (mov r8, r8)
 8005000:	46bd      	mov	sp, r7
 8005002:	b020      	add	sp, #128	@ 0x80
 8005004:	bd80      	pop	{r7, pc}
 8005006:	46c0      	nop			@ (mov r8, r8)
 8005008:	fffffeff 	.word	0xfffffeff
 800500c:	effffffe 	.word	0xeffffffe
 8005010:	40008000 	.word	0x40008000
 8005014:	fbffffff 	.word	0xfbffffff
 8005018:	efffffff 	.word	0xefffffff
 800501c:	08004959 	.word	0x08004959

08005020 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8005020:	b580      	push	{r7, lr}
 8005022:	b0a2      	sub	sp, #136	@ 0x88
 8005024:	af00      	add	r7, sp, #0
 8005026:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8005028:	2382      	movs	r3, #130	@ 0x82
 800502a:	18fb      	adds	r3, r7, r3
 800502c:	687a      	ldr	r2, [r7, #4]
 800502e:	2160      	movs	r1, #96	@ 0x60
 8005030:	5a52      	ldrh	r2, [r2, r1]
 8005032:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	69db      	ldr	r3, [r3, #28]
 800503a:	2284      	movs	r2, #132	@ 0x84
 800503c:	18ba      	adds	r2, r7, r2
 800503e:	6013      	str	r3, [r2, #0]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	67fb      	str	r3, [r7, #124]	@ 0x7c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	689b      	ldr	r3, [r3, #8]
 800504e:	67bb      	str	r3, [r7, #120]	@ 0x78

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	228c      	movs	r2, #140	@ 0x8c
 8005054:	589b      	ldr	r3, [r3, r2]
 8005056:	2b22      	cmp	r3, #34	@ 0x22
 8005058:	d000      	beq.n	800505c <UART_RxISR_16BIT_FIFOEN+0x3c>
 800505a:	e174      	b.n	8005346 <UART_RxISR_16BIT_FIFOEN+0x326>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800505c:	2376      	movs	r3, #118	@ 0x76
 800505e:	18fb      	adds	r3, r7, r3
 8005060:	687a      	ldr	r2, [r7, #4]
 8005062:	2168      	movs	r1, #104	@ 0x68
 8005064:	5a52      	ldrh	r2, [r2, r1]
 8005066:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005068:	e119      	b.n	800529e <UART_RxISR_16BIT_FIFOEN+0x27e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005070:	2174      	movs	r1, #116	@ 0x74
 8005072:	187b      	adds	r3, r7, r1
 8005074:	801a      	strh	r2, [r3, #0]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800507a:	673b      	str	r3, [r7, #112]	@ 0x70
      *tmp = (uint16_t)(uhdata & uhMask);
 800507c:	187b      	adds	r3, r7, r1
 800507e:	2282      	movs	r2, #130	@ 0x82
 8005080:	18ba      	adds	r2, r7, r2
 8005082:	881b      	ldrh	r3, [r3, #0]
 8005084:	8812      	ldrh	r2, [r2, #0]
 8005086:	4013      	ands	r3, r2
 8005088:	b29a      	uxth	r2, r3
 800508a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800508c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005092:	1c9a      	adds	r2, r3, #2
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	225e      	movs	r2, #94	@ 0x5e
 800509c:	5a9b      	ldrh	r3, [r3, r2]
 800509e:	b29b      	uxth	r3, r3
 80050a0:	3b01      	subs	r3, #1
 80050a2:	b299      	uxth	r1, r3
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	225e      	movs	r2, #94	@ 0x5e
 80050a8:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	69db      	ldr	r3, [r3, #28]
 80050b0:	2184      	movs	r1, #132	@ 0x84
 80050b2:	187a      	adds	r2, r7, r1
 80050b4:	6013      	str	r3, [r2, #0]

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80050b6:	187b      	adds	r3, r7, r1
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	2207      	movs	r2, #7
 80050bc:	4013      	ands	r3, r2
 80050be:	d04e      	beq.n	800515e <UART_RxISR_16BIT_FIFOEN+0x13e>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80050c0:	187b      	adds	r3, r7, r1
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	2201      	movs	r2, #1
 80050c6:	4013      	ands	r3, r2
 80050c8:	d010      	beq.n	80050ec <UART_RxISR_16BIT_FIFOEN+0xcc>
 80050ca:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80050cc:	2380      	movs	r3, #128	@ 0x80
 80050ce:	005b      	lsls	r3, r3, #1
 80050d0:	4013      	ands	r3, r2
 80050d2:	d00b      	beq.n	80050ec <UART_RxISR_16BIT_FIFOEN+0xcc>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	2201      	movs	r2, #1
 80050da:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	2290      	movs	r2, #144	@ 0x90
 80050e0:	589b      	ldr	r3, [r3, r2]
 80050e2:	2201      	movs	r2, #1
 80050e4:	431a      	orrs	r2, r3
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	2190      	movs	r1, #144	@ 0x90
 80050ea:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80050ec:	2384      	movs	r3, #132	@ 0x84
 80050ee:	18fb      	adds	r3, r7, r3
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	2202      	movs	r2, #2
 80050f4:	4013      	ands	r3, r2
 80050f6:	d00f      	beq.n	8005118 <UART_RxISR_16BIT_FIFOEN+0xf8>
 80050f8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80050fa:	2201      	movs	r2, #1
 80050fc:	4013      	ands	r3, r2
 80050fe:	d00b      	beq.n	8005118 <UART_RxISR_16BIT_FIFOEN+0xf8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	2202      	movs	r2, #2
 8005106:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2290      	movs	r2, #144	@ 0x90
 800510c:	589b      	ldr	r3, [r3, r2]
 800510e:	2204      	movs	r2, #4
 8005110:	431a      	orrs	r2, r3
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	2190      	movs	r1, #144	@ 0x90
 8005116:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005118:	2384      	movs	r3, #132	@ 0x84
 800511a:	18fb      	adds	r3, r7, r3
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	2204      	movs	r2, #4
 8005120:	4013      	ands	r3, r2
 8005122:	d00f      	beq.n	8005144 <UART_RxISR_16BIT_FIFOEN+0x124>
 8005124:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005126:	2201      	movs	r2, #1
 8005128:	4013      	ands	r3, r2
 800512a:	d00b      	beq.n	8005144 <UART_RxISR_16BIT_FIFOEN+0x124>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	2204      	movs	r2, #4
 8005132:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	2290      	movs	r2, #144	@ 0x90
 8005138:	589b      	ldr	r3, [r3, r2]
 800513a:	2202      	movs	r2, #2
 800513c:	431a      	orrs	r2, r3
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	2190      	movs	r1, #144	@ 0x90
 8005142:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2290      	movs	r2, #144	@ 0x90
 8005148:	589b      	ldr	r3, [r3, r2]
 800514a:	2b00      	cmp	r3, #0
 800514c:	d007      	beq.n	800515e <UART_RxISR_16BIT_FIFOEN+0x13e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	0018      	movs	r0, r3
 8005152:	f7fe fd93 	bl	8003c7c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	2290      	movs	r2, #144	@ 0x90
 800515a:	2100      	movs	r1, #0
 800515c:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	225e      	movs	r2, #94	@ 0x5e
 8005162:	5a9b      	ldrh	r3, [r3, r2]
 8005164:	b29b      	uxth	r3, r3
 8005166:	2b00      	cmp	r3, #0
 8005168:	d000      	beq.n	800516c <UART_RxISR_16BIT_FIFOEN+0x14c>
 800516a:	e098      	b.n	800529e <UART_RxISR_16BIT_FIFOEN+0x27e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800516c:	f3ef 8310 	mrs	r3, PRIMASK
 8005170:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 8005172:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005174:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005176:	2301      	movs	r3, #1
 8005178:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800517a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800517c:	f383 8810 	msr	PRIMASK, r3
}
 8005180:	46c0      	nop			@ (mov r8, r8)
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	681a      	ldr	r2, [r3, #0]
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	4974      	ldr	r1, [pc, #464]	@ (8005360 <UART_RxISR_16BIT_FIFOEN+0x340>)
 800518e:	400a      	ands	r2, r1
 8005190:	601a      	str	r2, [r3, #0]
 8005192:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005194:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005196:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005198:	f383 8810 	msr	PRIMASK, r3
}
 800519c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800519e:	f3ef 8310 	mrs	r3, PRIMASK
 80051a2:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 80051a4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80051a6:	66bb      	str	r3, [r7, #104]	@ 0x68
 80051a8:	2301      	movs	r3, #1
 80051aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80051ac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80051ae:	f383 8810 	msr	PRIMASK, r3
}
 80051b2:	46c0      	nop			@ (mov r8, r8)
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	689a      	ldr	r2, [r3, #8]
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	4969      	ldr	r1, [pc, #420]	@ (8005364 <UART_RxISR_16BIT_FIFOEN+0x344>)
 80051c0:	400a      	ands	r2, r1
 80051c2:	609a      	str	r2, [r3, #8]
 80051c4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80051c6:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80051c8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80051ca:	f383 8810 	msr	PRIMASK, r3
}
 80051ce:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	228c      	movs	r2, #140	@ 0x8c
 80051d4:	2120      	movs	r1, #32
 80051d6:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2200      	movs	r2, #0
 80051dc:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	2200      	movs	r2, #0
 80051e2:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	4a5f      	ldr	r2, [pc, #380]	@ (8005368 <UART_RxISR_16BIT_FIFOEN+0x348>)
 80051ea:	4293      	cmp	r3, r2
 80051ec:	d01f      	beq.n	800522e <UART_RxISR_16BIT_FIFOEN+0x20e>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	685a      	ldr	r2, [r3, #4]
 80051f4:	2380      	movs	r3, #128	@ 0x80
 80051f6:	041b      	lsls	r3, r3, #16
 80051f8:	4013      	ands	r3, r2
 80051fa:	d018      	beq.n	800522e <UART_RxISR_16BIT_FIFOEN+0x20e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80051fc:	f3ef 8310 	mrs	r3, PRIMASK
 8005200:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8005202:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005204:	667b      	str	r3, [r7, #100]	@ 0x64
 8005206:	2301      	movs	r3, #1
 8005208:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800520a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800520c:	f383 8810 	msr	PRIMASK, r3
}
 8005210:	46c0      	nop			@ (mov r8, r8)
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	681a      	ldr	r2, [r3, #0]
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	4953      	ldr	r1, [pc, #332]	@ (800536c <UART_RxISR_16BIT_FIFOEN+0x34c>)
 800521e:	400a      	ands	r2, r1
 8005220:	601a      	str	r2, [r3, #0]
 8005222:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005224:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005226:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005228:	f383 8810 	msr	PRIMASK, r3
}
 800522c:	46c0      	nop			@ (mov r8, r8)
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005232:	2b01      	cmp	r3, #1
 8005234:	d12f      	bne.n	8005296 <UART_RxISR_16BIT_FIFOEN+0x276>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	2200      	movs	r2, #0
 800523a:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800523c:	f3ef 8310 	mrs	r3, PRIMASK
 8005240:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8005242:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005244:	663b      	str	r3, [r7, #96]	@ 0x60
 8005246:	2301      	movs	r3, #1
 8005248:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800524a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800524c:	f383 8810 	msr	PRIMASK, r3
}
 8005250:	46c0      	nop			@ (mov r8, r8)
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	681a      	ldr	r2, [r3, #0]
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	2110      	movs	r1, #16
 800525e:	438a      	bics	r2, r1
 8005260:	601a      	str	r2, [r3, #0]
 8005262:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005264:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005266:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005268:	f383 8810 	msr	PRIMASK, r3
}
 800526c:	46c0      	nop			@ (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	69db      	ldr	r3, [r3, #28]
 8005274:	2210      	movs	r2, #16
 8005276:	4013      	ands	r3, r2
 8005278:	2b10      	cmp	r3, #16
 800527a:	d103      	bne.n	8005284 <UART_RxISR_16BIT_FIFOEN+0x264>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	2210      	movs	r2, #16
 8005282:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	225c      	movs	r2, #92	@ 0x5c
 8005288:	5a9a      	ldrh	r2, [r3, r2]
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	0011      	movs	r1, r2
 800528e:	0018      	movs	r0, r3
 8005290:	f7fe fcfc 	bl	8003c8c <HAL_UARTEx_RxEventCallback>
 8005294:	e003      	b.n	800529e <UART_RxISR_16BIT_FIFOEN+0x27e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	0018      	movs	r0, r3
 800529a:	f7fb fb65 	bl	8000968 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800529e:	2376      	movs	r3, #118	@ 0x76
 80052a0:	18fb      	adds	r3, r7, r3
 80052a2:	881b      	ldrh	r3, [r3, #0]
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d006      	beq.n	80052b6 <UART_RxISR_16BIT_FIFOEN+0x296>
 80052a8:	2384      	movs	r3, #132	@ 0x84
 80052aa:	18fb      	adds	r3, r7, r3
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	2220      	movs	r2, #32
 80052b0:	4013      	ands	r3, r2
 80052b2:	d000      	beq.n	80052b6 <UART_RxISR_16BIT_FIFOEN+0x296>
 80052b4:	e6d9      	b.n	800506a <UART_RxISR_16BIT_FIFOEN+0x4a>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80052b6:	205e      	movs	r0, #94	@ 0x5e
 80052b8:	183b      	adds	r3, r7, r0
 80052ba:	687a      	ldr	r2, [r7, #4]
 80052bc:	215e      	movs	r1, #94	@ 0x5e
 80052be:	5a52      	ldrh	r2, [r2, r1]
 80052c0:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80052c2:	0001      	movs	r1, r0
 80052c4:	187b      	adds	r3, r7, r1
 80052c6:	881b      	ldrh	r3, [r3, #0]
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d044      	beq.n	8005356 <UART_RxISR_16BIT_FIFOEN+0x336>
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	2268      	movs	r2, #104	@ 0x68
 80052d0:	5a9b      	ldrh	r3, [r3, r2]
 80052d2:	187a      	adds	r2, r7, r1
 80052d4:	8812      	ldrh	r2, [r2, #0]
 80052d6:	429a      	cmp	r2, r3
 80052d8:	d23d      	bcs.n	8005356 <UART_RxISR_16BIT_FIFOEN+0x336>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80052da:	f3ef 8310 	mrs	r3, PRIMASK
 80052de:	60fb      	str	r3, [r7, #12]
  return(result);
 80052e0:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80052e2:	65bb      	str	r3, [r7, #88]	@ 0x58
 80052e4:	2301      	movs	r3, #1
 80052e6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80052e8:	693b      	ldr	r3, [r7, #16]
 80052ea:	f383 8810 	msr	PRIMASK, r3
}
 80052ee:	46c0      	nop			@ (mov r8, r8)
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	689a      	ldr	r2, [r3, #8]
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	491d      	ldr	r1, [pc, #116]	@ (8005370 <UART_RxISR_16BIT_FIFOEN+0x350>)
 80052fc:	400a      	ands	r2, r1
 80052fe:	609a      	str	r2, [r3, #8]
 8005300:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005302:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005304:	697b      	ldr	r3, [r7, #20]
 8005306:	f383 8810 	msr	PRIMASK, r3
}
 800530a:	46c0      	nop			@ (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	4a19      	ldr	r2, [pc, #100]	@ (8005374 <UART_RxISR_16BIT_FIFOEN+0x354>)
 8005310:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005312:	f3ef 8310 	mrs	r3, PRIMASK
 8005316:	61bb      	str	r3, [r7, #24]
  return(result);
 8005318:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800531a:	657b      	str	r3, [r7, #84]	@ 0x54
 800531c:	2301      	movs	r3, #1
 800531e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005320:	69fb      	ldr	r3, [r7, #28]
 8005322:	f383 8810 	msr	PRIMASK, r3
}
 8005326:	46c0      	nop			@ (mov r8, r8)
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	681a      	ldr	r2, [r3, #0]
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	2120      	movs	r1, #32
 8005334:	430a      	orrs	r2, r1
 8005336:	601a      	str	r2, [r3, #0]
 8005338:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800533a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800533c:	6a3b      	ldr	r3, [r7, #32]
 800533e:	f383 8810 	msr	PRIMASK, r3
}
 8005342:	46c0      	nop			@ (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005344:	e007      	b.n	8005356 <UART_RxISR_16BIT_FIFOEN+0x336>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	699a      	ldr	r2, [r3, #24]
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	2108      	movs	r1, #8
 8005352:	430a      	orrs	r2, r1
 8005354:	619a      	str	r2, [r3, #24]
}
 8005356:	46c0      	nop			@ (mov r8, r8)
 8005358:	46bd      	mov	sp, r7
 800535a:	b022      	add	sp, #136	@ 0x88
 800535c:	bd80      	pop	{r7, pc}
 800535e:	46c0      	nop			@ (mov r8, r8)
 8005360:	fffffeff 	.word	0xfffffeff
 8005364:	effffffe 	.word	0xeffffffe
 8005368:	40008000 	.word	0x40008000
 800536c:	fbffffff 	.word	0xfbffffff
 8005370:	efffffff 	.word	0xefffffff
 8005374:	08004b1d 	.word	0x08004b1d

08005378 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005378:	b580      	push	{r7, lr}
 800537a:	b082      	sub	sp, #8
 800537c:	af00      	add	r7, sp, #0
 800537e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005380:	46c0      	nop			@ (mov r8, r8)
 8005382:	46bd      	mov	sp, r7
 8005384:	b002      	add	sp, #8
 8005386:	bd80      	pop	{r7, pc}

08005388 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8005388:	b580      	push	{r7, lr}
 800538a:	b082      	sub	sp, #8
 800538c:	af00      	add	r7, sp, #0
 800538e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8005390:	46c0      	nop			@ (mov r8, r8)
 8005392:	46bd      	mov	sp, r7
 8005394:	b002      	add	sp, #8
 8005396:	bd80      	pop	{r7, pc}

08005398 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8005398:	b580      	push	{r7, lr}
 800539a:	b082      	sub	sp, #8
 800539c:	af00      	add	r7, sp, #0
 800539e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80053a0:	46c0      	nop			@ (mov r8, r8)
 80053a2:	46bd      	mov	sp, r7
 80053a4:	b002      	add	sp, #8
 80053a6:	bd80      	pop	{r7, pc}

080053a8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80053a8:	b580      	push	{r7, lr}
 80053aa:	b084      	sub	sp, #16
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2284      	movs	r2, #132	@ 0x84
 80053b4:	5c9b      	ldrb	r3, [r3, r2]
 80053b6:	2b01      	cmp	r3, #1
 80053b8:	d101      	bne.n	80053be <HAL_UARTEx_DisableFifoMode+0x16>
 80053ba:	2302      	movs	r3, #2
 80053bc:	e027      	b.n	800540e <HAL_UARTEx_DisableFifoMode+0x66>
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	2284      	movs	r2, #132	@ 0x84
 80053c2:	2101      	movs	r1, #1
 80053c4:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	2288      	movs	r2, #136	@ 0x88
 80053ca:	2124      	movs	r1, #36	@ 0x24
 80053cc:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	681a      	ldr	r2, [r3, #0]
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	2101      	movs	r1, #1
 80053e2:	438a      	bics	r2, r1
 80053e4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	4a0b      	ldr	r2, [pc, #44]	@ (8005418 <HAL_UARTEx_DisableFifoMode+0x70>)
 80053ea:	4013      	ands	r3, r2
 80053ec:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	2200      	movs	r2, #0
 80053f2:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	68fa      	ldr	r2, [r7, #12]
 80053fa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	2288      	movs	r2, #136	@ 0x88
 8005400:	2120      	movs	r1, #32
 8005402:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2284      	movs	r2, #132	@ 0x84
 8005408:	2100      	movs	r1, #0
 800540a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800540c:	2300      	movs	r3, #0
}
 800540e:	0018      	movs	r0, r3
 8005410:	46bd      	mov	sp, r7
 8005412:	b004      	add	sp, #16
 8005414:	bd80      	pop	{r7, pc}
 8005416:	46c0      	nop			@ (mov r8, r8)
 8005418:	dfffffff 	.word	0xdfffffff

0800541c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800541c:	b580      	push	{r7, lr}
 800541e:	b084      	sub	sp, #16
 8005420:	af00      	add	r7, sp, #0
 8005422:	6078      	str	r0, [r7, #4]
 8005424:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	2284      	movs	r2, #132	@ 0x84
 800542a:	5c9b      	ldrb	r3, [r3, r2]
 800542c:	2b01      	cmp	r3, #1
 800542e:	d101      	bne.n	8005434 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005430:	2302      	movs	r3, #2
 8005432:	e02e      	b.n	8005492 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	2284      	movs	r2, #132	@ 0x84
 8005438:	2101      	movs	r1, #1
 800543a:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2288      	movs	r2, #136	@ 0x88
 8005440:	2124      	movs	r1, #36	@ 0x24
 8005442:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	681a      	ldr	r2, [r3, #0]
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	2101      	movs	r1, #1
 8005458:	438a      	bics	r2, r1
 800545a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	689b      	ldr	r3, [r3, #8]
 8005462:	00db      	lsls	r3, r3, #3
 8005464:	08d9      	lsrs	r1, r3, #3
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	683a      	ldr	r2, [r7, #0]
 800546c:	430a      	orrs	r2, r1
 800546e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	0018      	movs	r0, r3
 8005474:	f000 f854 	bl	8005520 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	68fa      	ldr	r2, [r7, #12]
 800547e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	2288      	movs	r2, #136	@ 0x88
 8005484:	2120      	movs	r1, #32
 8005486:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2284      	movs	r2, #132	@ 0x84
 800548c:	2100      	movs	r1, #0
 800548e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005490:	2300      	movs	r3, #0
}
 8005492:	0018      	movs	r0, r3
 8005494:	46bd      	mov	sp, r7
 8005496:	b004      	add	sp, #16
 8005498:	bd80      	pop	{r7, pc}
	...

0800549c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800549c:	b580      	push	{r7, lr}
 800549e:	b084      	sub	sp, #16
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	6078      	str	r0, [r7, #4]
 80054a4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	2284      	movs	r2, #132	@ 0x84
 80054aa:	5c9b      	ldrb	r3, [r3, r2]
 80054ac:	2b01      	cmp	r3, #1
 80054ae:	d101      	bne.n	80054b4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80054b0:	2302      	movs	r3, #2
 80054b2:	e02f      	b.n	8005514 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	2284      	movs	r2, #132	@ 0x84
 80054b8:	2101      	movs	r1, #1
 80054ba:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2288      	movs	r2, #136	@ 0x88
 80054c0:	2124      	movs	r1, #36	@ 0x24
 80054c2:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	681a      	ldr	r2, [r3, #0]
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	2101      	movs	r1, #1
 80054d8:	438a      	bics	r2, r1
 80054da:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	689b      	ldr	r3, [r3, #8]
 80054e2:	4a0e      	ldr	r2, [pc, #56]	@ (800551c <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 80054e4:	4013      	ands	r3, r2
 80054e6:	0019      	movs	r1, r3
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	683a      	ldr	r2, [r7, #0]
 80054ee:	430a      	orrs	r2, r1
 80054f0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	0018      	movs	r0, r3
 80054f6:	f000 f813 	bl	8005520 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	68fa      	ldr	r2, [r7, #12]
 8005500:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	2288      	movs	r2, #136	@ 0x88
 8005506:	2120      	movs	r1, #32
 8005508:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	2284      	movs	r2, #132	@ 0x84
 800550e:	2100      	movs	r1, #0
 8005510:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005512:	2300      	movs	r3, #0
}
 8005514:	0018      	movs	r0, r3
 8005516:	46bd      	mov	sp, r7
 8005518:	b004      	add	sp, #16
 800551a:	bd80      	pop	{r7, pc}
 800551c:	f1ffffff 	.word	0xf1ffffff

08005520 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005520:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005522:	b085      	sub	sp, #20
 8005524:	af00      	add	r7, sp, #0
 8005526:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800552c:	2b00      	cmp	r3, #0
 800552e:	d108      	bne.n	8005542 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	226a      	movs	r2, #106	@ 0x6a
 8005534:	2101      	movs	r1, #1
 8005536:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2268      	movs	r2, #104	@ 0x68
 800553c:	2101      	movs	r1, #1
 800553e:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005540:	e043      	b.n	80055ca <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005542:	260f      	movs	r6, #15
 8005544:	19bb      	adds	r3, r7, r6
 8005546:	2208      	movs	r2, #8
 8005548:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800554a:	200e      	movs	r0, #14
 800554c:	183b      	adds	r3, r7, r0
 800554e:	2208      	movs	r2, #8
 8005550:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	689b      	ldr	r3, [r3, #8]
 8005558:	0e5b      	lsrs	r3, r3, #25
 800555a:	b2da      	uxtb	r2, r3
 800555c:	240d      	movs	r4, #13
 800555e:	193b      	adds	r3, r7, r4
 8005560:	2107      	movs	r1, #7
 8005562:	400a      	ands	r2, r1
 8005564:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	689b      	ldr	r3, [r3, #8]
 800556c:	0f5b      	lsrs	r3, r3, #29
 800556e:	b2da      	uxtb	r2, r3
 8005570:	250c      	movs	r5, #12
 8005572:	197b      	adds	r3, r7, r5
 8005574:	2107      	movs	r1, #7
 8005576:	400a      	ands	r2, r1
 8005578:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800557a:	183b      	adds	r3, r7, r0
 800557c:	781b      	ldrb	r3, [r3, #0]
 800557e:	197a      	adds	r2, r7, r5
 8005580:	7812      	ldrb	r2, [r2, #0]
 8005582:	4914      	ldr	r1, [pc, #80]	@ (80055d4 <UARTEx_SetNbDataToProcess+0xb4>)
 8005584:	5c8a      	ldrb	r2, [r1, r2]
 8005586:	435a      	muls	r2, r3
 8005588:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 800558a:	197b      	adds	r3, r7, r5
 800558c:	781b      	ldrb	r3, [r3, #0]
 800558e:	4a12      	ldr	r2, [pc, #72]	@ (80055d8 <UARTEx_SetNbDataToProcess+0xb8>)
 8005590:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005592:	0019      	movs	r1, r3
 8005594:	f7fa fe54 	bl	8000240 <__divsi3>
 8005598:	0003      	movs	r3, r0
 800559a:	b299      	uxth	r1, r3
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	226a      	movs	r2, #106	@ 0x6a
 80055a0:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80055a2:	19bb      	adds	r3, r7, r6
 80055a4:	781b      	ldrb	r3, [r3, #0]
 80055a6:	193a      	adds	r2, r7, r4
 80055a8:	7812      	ldrb	r2, [r2, #0]
 80055aa:	490a      	ldr	r1, [pc, #40]	@ (80055d4 <UARTEx_SetNbDataToProcess+0xb4>)
 80055ac:	5c8a      	ldrb	r2, [r1, r2]
 80055ae:	435a      	muls	r2, r3
 80055b0:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 80055b2:	193b      	adds	r3, r7, r4
 80055b4:	781b      	ldrb	r3, [r3, #0]
 80055b6:	4a08      	ldr	r2, [pc, #32]	@ (80055d8 <UARTEx_SetNbDataToProcess+0xb8>)
 80055b8:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80055ba:	0019      	movs	r1, r3
 80055bc:	f7fa fe40 	bl	8000240 <__divsi3>
 80055c0:	0003      	movs	r3, r0
 80055c2:	b299      	uxth	r1, r3
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2268      	movs	r2, #104	@ 0x68
 80055c8:	5299      	strh	r1, [r3, r2]
}
 80055ca:	46c0      	nop			@ (mov r8, r8)
 80055cc:	46bd      	mov	sp, r7
 80055ce:	b005      	add	sp, #20
 80055d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80055d2:	46c0      	nop			@ (mov r8, r8)
 80055d4:	08007194 	.word	0x08007194
 80055d8:	0800719c 	.word	0x0800719c

080055dc <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80055dc:	b580      	push	{r7, lr}
 80055de:	b084      	sub	sp, #16
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	0002      	movs	r2, r0
 80055e4:	1dbb      	adds	r3, r7, #6
 80055e6:	801a      	strh	r2, [r3, #0]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80055e8:	2300      	movs	r3, #0
 80055ea:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80055ec:	1dbb      	adds	r3, r7, #6
 80055ee:	2200      	movs	r2, #0
 80055f0:	5e9b      	ldrsh	r3, [r3, r2]
 80055f2:	2b84      	cmp	r3, #132	@ 0x84
 80055f4:	d006      	beq.n	8005604 <makeFreeRtosPriority+0x28>
    fpriority += (priority - osPriorityIdle);
 80055f6:	1dbb      	adds	r3, r7, #6
 80055f8:	2200      	movs	r2, #0
 80055fa:	5e9a      	ldrsh	r2, [r3, r2]
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	18d3      	adds	r3, r2, r3
 8005600:	3303      	adds	r3, #3
 8005602:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8005604:	68fb      	ldr	r3, [r7, #12]
}
 8005606:	0018      	movs	r0, r3
 8005608:	46bd      	mov	sp, r7
 800560a:	b004      	add	sp, #16
 800560c:	bd80      	pop	{r7, pc}

0800560e <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800560e:	b580      	push	{r7, lr}
 8005610:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8005612:	f000 fa55 	bl	8005ac0 <vTaskStartScheduler>
  
  return osOK;
 8005616:	2300      	movs	r3, #0
}
 8005618:	0018      	movs	r0, r3
 800561a:	46bd      	mov	sp, r7
 800561c:	bd80      	pop	{r7, pc}

0800561e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800561e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005620:	b087      	sub	sp, #28
 8005622:	af02      	add	r7, sp, #8
 8005624:	6078      	str	r0, [r7, #4]
 8005626:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	685c      	ldr	r4, [r3, #4]
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005634:	b29e      	uxth	r6, r3
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	2208      	movs	r2, #8
 800563a:	5e9b      	ldrsh	r3, [r3, r2]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800563c:	0018      	movs	r0, r3
 800563e:	f7ff ffcd 	bl	80055dc <makeFreeRtosPriority>
 8005642:	0001      	movs	r1, r0
 8005644:	683a      	ldr	r2, [r7, #0]
 8005646:	230c      	movs	r3, #12
 8005648:	18fb      	adds	r3, r7, r3
 800564a:	9301      	str	r3, [sp, #4]
 800564c:	9100      	str	r1, [sp, #0]
 800564e:	0013      	movs	r3, r2
 8005650:	0032      	movs	r2, r6
 8005652:	0029      	movs	r1, r5
 8005654:	0020      	movs	r0, r4
 8005656:	f000 f8c7 	bl	80057e8 <xTaskCreate>
 800565a:	0003      	movs	r3, r0
 800565c:	2b01      	cmp	r3, #1
 800565e:	d001      	beq.n	8005664 <osThreadCreate+0x46>
                   &handle) != pdPASS)  {
    return NULL;
 8005660:	2300      	movs	r3, #0
 8005662:	e000      	b.n	8005666 <osThreadCreate+0x48>
  }     
#endif
  
  return handle;
 8005664:	68fb      	ldr	r3, [r7, #12]
}
 8005666:	0018      	movs	r0, r3
 8005668:	46bd      	mov	sp, r7
 800566a:	b005      	add	sp, #20
 800566c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800566e <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800566e:	b580      	push	{r7, lr}
 8005670:	b084      	sub	sp, #16
 8005672:	af00      	add	r7, sp, #0
 8005674:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	2b00      	cmp	r3, #0
 800567e:	d001      	beq.n	8005684 <osDelay+0x16>
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	e000      	b.n	8005686 <osDelay+0x18>
 8005684:	2301      	movs	r3, #1
 8005686:	0018      	movs	r0, r3
 8005688:	f000 f9f4 	bl	8005a74 <vTaskDelay>
  
  return osOK;
 800568c:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800568e:	0018      	movs	r0, r3
 8005690:	46bd      	mov	sp, r7
 8005692:	b004      	add	sp, #16
 8005694:	bd80      	pop	{r7, pc}

08005696 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005696:	b580      	push	{r7, lr}
 8005698:	b082      	sub	sp, #8
 800569a:	af00      	add	r7, sp, #0
 800569c:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	3308      	adds	r3, #8
 80056a2:	001a      	movs	r2, r3
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2201      	movs	r2, #1
 80056ac:	4252      	negs	r2, r2
 80056ae:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	3308      	adds	r3, #8
 80056b4:	001a      	movs	r2, r3
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	3308      	adds	r3, #8
 80056be:	001a      	movs	r2, r3
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2200      	movs	r2, #0
 80056c8:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80056ca:	46c0      	nop			@ (mov r8, r8)
 80056cc:	46bd      	mov	sp, r7
 80056ce:	b002      	add	sp, #8
 80056d0:	bd80      	pop	{r7, pc}

080056d2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80056d2:	b580      	push	{r7, lr}
 80056d4:	b082      	sub	sp, #8
 80056d6:	af00      	add	r7, sp, #0
 80056d8:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	2200      	movs	r2, #0
 80056de:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80056e0:	46c0      	nop			@ (mov r8, r8)
 80056e2:	46bd      	mov	sp, r7
 80056e4:	b002      	add	sp, #8
 80056e6:	bd80      	pop	{r7, pc}

080056e8 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80056e8:	b580      	push	{r7, lr}
 80056ea:	b084      	sub	sp, #16
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	6078      	str	r0, [r7, #4]
 80056f0:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	685b      	ldr	r3, [r3, #4]
 80056f6:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80056f8:	683b      	ldr	r3, [r7, #0]
 80056fa:	68fa      	ldr	r2, [r7, #12]
 80056fc:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	689a      	ldr	r2, [r3, #8]
 8005702:	683b      	ldr	r3, [r7, #0]
 8005704:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	689b      	ldr	r3, [r3, #8]
 800570a:	683a      	ldr	r2, [r7, #0]
 800570c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	683a      	ldr	r2, [r7, #0]
 8005712:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005714:	683b      	ldr	r3, [r7, #0]
 8005716:	687a      	ldr	r2, [r7, #4]
 8005718:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	1c5a      	adds	r2, r3, #1
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	601a      	str	r2, [r3, #0]
}
 8005724:	46c0      	nop			@ (mov r8, r8)
 8005726:	46bd      	mov	sp, r7
 8005728:	b004      	add	sp, #16
 800572a:	bd80      	pop	{r7, pc}

0800572c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800572c:	b580      	push	{r7, lr}
 800572e:	b084      	sub	sp, #16
 8005730:	af00      	add	r7, sp, #0
 8005732:	6078      	str	r0, [r7, #4]
 8005734:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005736:	683b      	ldr	r3, [r7, #0]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800573c:	68bb      	ldr	r3, [r7, #8]
 800573e:	3301      	adds	r3, #1
 8005740:	d103      	bne.n	800574a <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	691b      	ldr	r3, [r3, #16]
 8005746:	60fb      	str	r3, [r7, #12]
 8005748:	e00c      	b.n	8005764 <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	3308      	adds	r3, #8
 800574e:	60fb      	str	r3, [r7, #12]
 8005750:	e002      	b.n	8005758 <vListInsert+0x2c>
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	685b      	ldr	r3, [r3, #4]
 8005756:	60fb      	str	r3, [r7, #12]
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	685b      	ldr	r3, [r3, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	68ba      	ldr	r2, [r7, #8]
 8005760:	429a      	cmp	r2, r3
 8005762:	d2f6      	bcs.n	8005752 <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	685a      	ldr	r2, [r3, #4]
 8005768:	683b      	ldr	r3, [r7, #0]
 800576a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800576c:	683b      	ldr	r3, [r7, #0]
 800576e:	685b      	ldr	r3, [r3, #4]
 8005770:	683a      	ldr	r2, [r7, #0]
 8005772:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005774:	683b      	ldr	r3, [r7, #0]
 8005776:	68fa      	ldr	r2, [r7, #12]
 8005778:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	683a      	ldr	r2, [r7, #0]
 800577e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005780:	683b      	ldr	r3, [r7, #0]
 8005782:	687a      	ldr	r2, [r7, #4]
 8005784:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	1c5a      	adds	r2, r3, #1
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	601a      	str	r2, [r3, #0]
}
 8005790:	46c0      	nop			@ (mov r8, r8)
 8005792:	46bd      	mov	sp, r7
 8005794:	b004      	add	sp, #16
 8005796:	bd80      	pop	{r7, pc}

08005798 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005798:	b580      	push	{r7, lr}
 800579a:	b084      	sub	sp, #16
 800579c:	af00      	add	r7, sp, #0
 800579e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	691b      	ldr	r3, [r3, #16]
 80057a4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	685b      	ldr	r3, [r3, #4]
 80057aa:	687a      	ldr	r2, [r7, #4]
 80057ac:	6892      	ldr	r2, [r2, #8]
 80057ae:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	689b      	ldr	r3, [r3, #8]
 80057b4:	687a      	ldr	r2, [r7, #4]
 80057b6:	6852      	ldr	r2, [r2, #4]
 80057b8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	685b      	ldr	r3, [r3, #4]
 80057be:	687a      	ldr	r2, [r7, #4]
 80057c0:	429a      	cmp	r2, r3
 80057c2:	d103      	bne.n	80057cc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	689a      	ldr	r2, [r3, #8]
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2200      	movs	r2, #0
 80057d0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	1e5a      	subs	r2, r3, #1
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	681b      	ldr	r3, [r3, #0]
}
 80057e0:	0018      	movs	r0, r3
 80057e2:	46bd      	mov	sp, r7
 80057e4:	b004      	add	sp, #16
 80057e6:	bd80      	pop	{r7, pc}

080057e8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80057e8:	b590      	push	{r4, r7, lr}
 80057ea:	b08d      	sub	sp, #52	@ 0x34
 80057ec:	af04      	add	r7, sp, #16
 80057ee:	60f8      	str	r0, [r7, #12]
 80057f0:	60b9      	str	r1, [r7, #8]
 80057f2:	603b      	str	r3, [r7, #0]
 80057f4:	1dbb      	adds	r3, r7, #6
 80057f6:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80057f8:	1dbb      	adds	r3, r7, #6
 80057fa:	881b      	ldrh	r3, [r3, #0]
 80057fc:	009b      	lsls	r3, r3, #2
 80057fe:	0018      	movs	r0, r3
 8005800:	f000 fd7e 	bl	8006300 <pvPortMalloc>
 8005804:	0003      	movs	r3, r0
 8005806:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
 8005808:	697b      	ldr	r3, [r7, #20]
 800580a:	2b00      	cmp	r3, #0
 800580c:	d010      	beq.n	8005830 <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800580e:	20a0      	movs	r0, #160	@ 0xa0
 8005810:	f000 fd76 	bl	8006300 <pvPortMalloc>
 8005814:	0003      	movs	r3, r0
 8005816:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
 8005818:	69fb      	ldr	r3, [r7, #28]
 800581a:	2b00      	cmp	r3, #0
 800581c:	d003      	beq.n	8005826 <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800581e:	69fb      	ldr	r3, [r7, #28]
 8005820:	697a      	ldr	r2, [r7, #20]
 8005822:	631a      	str	r2, [r3, #48]	@ 0x30
 8005824:	e006      	b.n	8005834 <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005826:	697b      	ldr	r3, [r7, #20]
 8005828:	0018      	movs	r0, r3
 800582a:	f000 fe19 	bl	8006460 <vPortFree>
 800582e:	e001      	b.n	8005834 <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005830:	2300      	movs	r3, #0
 8005832:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005834:	69fb      	ldr	r3, [r7, #28]
 8005836:	2b00      	cmp	r3, #0
 8005838:	d016      	beq.n	8005868 <xTaskCreate+0x80>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800583a:	1dbb      	adds	r3, r7, #6
 800583c:	881a      	ldrh	r2, [r3, #0]
 800583e:	683c      	ldr	r4, [r7, #0]
 8005840:	68b9      	ldr	r1, [r7, #8]
 8005842:	68f8      	ldr	r0, [r7, #12]
 8005844:	2300      	movs	r3, #0
 8005846:	9303      	str	r3, [sp, #12]
 8005848:	69fb      	ldr	r3, [r7, #28]
 800584a:	9302      	str	r3, [sp, #8]
 800584c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800584e:	9301      	str	r3, [sp, #4]
 8005850:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005852:	9300      	str	r3, [sp, #0]
 8005854:	0023      	movs	r3, r4
 8005856:	f000 f80f 	bl	8005878 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800585a:	69fb      	ldr	r3, [r7, #28]
 800585c:	0018      	movs	r0, r3
 800585e:	f000 f8a5 	bl	80059ac <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005862:	2301      	movs	r3, #1
 8005864:	61bb      	str	r3, [r7, #24]
 8005866:	e002      	b.n	800586e <xTaskCreate+0x86>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005868:	2301      	movs	r3, #1
 800586a:	425b      	negs	r3, r3
 800586c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800586e:	69bb      	ldr	r3, [r7, #24]
	}
 8005870:	0018      	movs	r0, r3
 8005872:	46bd      	mov	sp, r7
 8005874:	b009      	add	sp, #36	@ 0x24
 8005876:	bd90      	pop	{r4, r7, pc}

08005878 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005878:	b580      	push	{r7, lr}
 800587a:	b086      	sub	sp, #24
 800587c:	af00      	add	r7, sp, #0
 800587e:	60f8      	str	r0, [r7, #12]
 8005880:	60b9      	str	r1, [r7, #8]
 8005882:	607a      	str	r2, [r7, #4]
 8005884:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005886:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005888:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	4943      	ldr	r1, [pc, #268]	@ (800599c <prvInitialiseNewTask+0x124>)
 800588e:	468c      	mov	ip, r1
 8005890:	4463      	add	r3, ip
 8005892:	009b      	lsls	r3, r3, #2
 8005894:	18d3      	adds	r3, r2, r3
 8005896:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005898:	693b      	ldr	r3, [r7, #16]
 800589a:	2207      	movs	r2, #7
 800589c:	4393      	bics	r3, r2
 800589e:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80058a0:	693b      	ldr	r3, [r7, #16]
 80058a2:	2207      	movs	r2, #7
 80058a4:	4013      	ands	r3, r2
 80058a6:	d002      	beq.n	80058ae <prvInitialiseNewTask+0x36>
 80058a8:	b672      	cpsid	i
 80058aa:	46c0      	nop			@ (mov r8, r8)
 80058ac:	e7fd      	b.n	80058aa <prvInitialiseNewTask+0x32>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80058ae:	68bb      	ldr	r3, [r7, #8]
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d020      	beq.n	80058f6 <prvInitialiseNewTask+0x7e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80058b4:	2300      	movs	r3, #0
 80058b6:	617b      	str	r3, [r7, #20]
 80058b8:	e013      	b.n	80058e2 <prvInitialiseNewTask+0x6a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80058ba:	68ba      	ldr	r2, [r7, #8]
 80058bc:	697b      	ldr	r3, [r7, #20]
 80058be:	18d3      	adds	r3, r2, r3
 80058c0:	7818      	ldrb	r0, [r3, #0]
 80058c2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80058c4:	2134      	movs	r1, #52	@ 0x34
 80058c6:	697b      	ldr	r3, [r7, #20]
 80058c8:	18d3      	adds	r3, r2, r3
 80058ca:	185b      	adds	r3, r3, r1
 80058cc:	1c02      	adds	r2, r0, #0
 80058ce:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80058d0:	68ba      	ldr	r2, [r7, #8]
 80058d2:	697b      	ldr	r3, [r7, #20]
 80058d4:	18d3      	adds	r3, r2, r3
 80058d6:	781b      	ldrb	r3, [r3, #0]
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d006      	beq.n	80058ea <prvInitialiseNewTask+0x72>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80058dc:	697b      	ldr	r3, [r7, #20]
 80058de:	3301      	adds	r3, #1
 80058e0:	617b      	str	r3, [r7, #20]
 80058e2:	697b      	ldr	r3, [r7, #20]
 80058e4:	2b0f      	cmp	r3, #15
 80058e6:	d9e8      	bls.n	80058ba <prvInitialiseNewTask+0x42>
 80058e8:	e000      	b.n	80058ec <prvInitialiseNewTask+0x74>
			{
				break;
 80058ea:	46c0      	nop			@ (mov r8, r8)
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80058ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058ee:	2243      	movs	r2, #67	@ 0x43
 80058f0:	2100      	movs	r1, #0
 80058f2:	5499      	strb	r1, [r3, r2]
 80058f4:	e003      	b.n	80058fe <prvInitialiseNewTask+0x86>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80058f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058f8:	2234      	movs	r2, #52	@ 0x34
 80058fa:	2100      	movs	r1, #0
 80058fc:	5499      	strb	r1, [r3, r2]
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80058fe:	6a3b      	ldr	r3, [r7, #32]
 8005900:	2b06      	cmp	r3, #6
 8005902:	d901      	bls.n	8005908 <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005904:	2306      	movs	r3, #6
 8005906:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005908:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800590a:	6a3a      	ldr	r2, [r7, #32]
 800590c:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800590e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005910:	6a3a      	ldr	r2, [r7, #32]
 8005912:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8005914:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005916:	2200      	movs	r2, #0
 8005918:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800591a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800591c:	3304      	adds	r3, #4
 800591e:	0018      	movs	r0, r3
 8005920:	f7ff fed7 	bl	80056d2 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005924:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005926:	3318      	adds	r3, #24
 8005928:	0018      	movs	r0, r3
 800592a:	f7ff fed2 	bl	80056d2 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800592e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005930:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005932:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005934:	6a3b      	ldr	r3, [r7, #32]
 8005936:	2207      	movs	r2, #7
 8005938:	1ad2      	subs	r2, r2, r3
 800593a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800593c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800593e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005940:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005942:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005944:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005946:	2298      	movs	r2, #152	@ 0x98
 8005948:	2100      	movs	r1, #0
 800594a:	5099      	str	r1, [r3, r2]
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800594c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800594e:	229c      	movs	r2, #156	@ 0x9c
 8005950:	2100      	movs	r1, #0
 8005952:	5499      	strb	r1, [r3, r2]
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005954:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005956:	334c      	adds	r3, #76	@ 0x4c
 8005958:	224c      	movs	r2, #76	@ 0x4c
 800595a:	2100      	movs	r1, #0
 800595c:	0018      	movs	r0, r3
 800595e:	f000 fea7 	bl	80066b0 <memset>
 8005962:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005964:	4a0e      	ldr	r2, [pc, #56]	@ (80059a0 <prvInitialiseNewTask+0x128>)
 8005966:	651a      	str	r2, [r3, #80]	@ 0x50
 8005968:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800596a:	4a0e      	ldr	r2, [pc, #56]	@ (80059a4 <prvInitialiseNewTask+0x12c>)
 800596c:	655a      	str	r2, [r3, #84]	@ 0x54
 800596e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005970:	4a0d      	ldr	r2, [pc, #52]	@ (80059a8 <prvInitialiseNewTask+0x130>)
 8005972:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005974:	683a      	ldr	r2, [r7, #0]
 8005976:	68f9      	ldr	r1, [r7, #12]
 8005978:	693b      	ldr	r3, [r7, #16]
 800597a:	0018      	movs	r0, r3
 800597c:	f000 fb8c 	bl	8006098 <pxPortInitialiseStack>
 8005980:	0002      	movs	r2, r0
 8005982:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005984:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005986:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005988:	2b00      	cmp	r3, #0
 800598a:	d002      	beq.n	8005992 <prvInitialiseNewTask+0x11a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800598c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800598e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005990:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005992:	46c0      	nop			@ (mov r8, r8)
 8005994:	46bd      	mov	sp, r7
 8005996:	b006      	add	sp, #24
 8005998:	bd80      	pop	{r7, pc}
 800599a:	46c0      	nop			@ (mov r8, r8)
 800599c:	3fffffff 	.word	0x3fffffff
 80059a0:	20001140 	.word	0x20001140
 80059a4:	200011a8 	.word	0x200011a8
 80059a8:	20001210 	.word	0x20001210

080059ac <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80059ac:	b580      	push	{r7, lr}
 80059ae:	b082      	sub	sp, #8
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80059b4:	f000 fc0c 	bl	80061d0 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80059b8:	4b28      	ldr	r3, [pc, #160]	@ (8005a5c <prvAddNewTaskToReadyList+0xb0>)
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	1c5a      	adds	r2, r3, #1
 80059be:	4b27      	ldr	r3, [pc, #156]	@ (8005a5c <prvAddNewTaskToReadyList+0xb0>)
 80059c0:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 80059c2:	4b27      	ldr	r3, [pc, #156]	@ (8005a60 <prvAddNewTaskToReadyList+0xb4>)
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d109      	bne.n	80059de <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80059ca:	4b25      	ldr	r3, [pc, #148]	@ (8005a60 <prvAddNewTaskToReadyList+0xb4>)
 80059cc:	687a      	ldr	r2, [r7, #4]
 80059ce:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80059d0:	4b22      	ldr	r3, [pc, #136]	@ (8005a5c <prvAddNewTaskToReadyList+0xb0>)
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	2b01      	cmp	r3, #1
 80059d6:	d110      	bne.n	80059fa <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80059d8:	f000 fa64 	bl	8005ea4 <prvInitialiseTaskLists>
 80059dc:	e00d      	b.n	80059fa <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80059de:	4b21      	ldr	r3, [pc, #132]	@ (8005a64 <prvAddNewTaskToReadyList+0xb8>)
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d109      	bne.n	80059fa <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80059e6:	4b1e      	ldr	r3, [pc, #120]	@ (8005a60 <prvAddNewTaskToReadyList+0xb4>)
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059f0:	429a      	cmp	r2, r3
 80059f2:	d802      	bhi.n	80059fa <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80059f4:	4b1a      	ldr	r3, [pc, #104]	@ (8005a60 <prvAddNewTaskToReadyList+0xb4>)
 80059f6:	687a      	ldr	r2, [r7, #4]
 80059f8:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80059fa:	4b1b      	ldr	r3, [pc, #108]	@ (8005a68 <prvAddNewTaskToReadyList+0xbc>)
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	1c5a      	adds	r2, r3, #1
 8005a00:	4b19      	ldr	r3, [pc, #100]	@ (8005a68 <prvAddNewTaskToReadyList+0xbc>)
 8005a02:	601a      	str	r2, [r3, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a08:	4b18      	ldr	r3, [pc, #96]	@ (8005a6c <prvAddNewTaskToReadyList+0xc0>)
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	429a      	cmp	r2, r3
 8005a0e:	d903      	bls.n	8005a18 <prvAddNewTaskToReadyList+0x6c>
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a14:	4b15      	ldr	r3, [pc, #84]	@ (8005a6c <prvAddNewTaskToReadyList+0xc0>)
 8005a16:	601a      	str	r2, [r3, #0]
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a1c:	0013      	movs	r3, r2
 8005a1e:	009b      	lsls	r3, r3, #2
 8005a20:	189b      	adds	r3, r3, r2
 8005a22:	009b      	lsls	r3, r3, #2
 8005a24:	4a12      	ldr	r2, [pc, #72]	@ (8005a70 <prvAddNewTaskToReadyList+0xc4>)
 8005a26:	189a      	adds	r2, r3, r2
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	3304      	adds	r3, #4
 8005a2c:	0019      	movs	r1, r3
 8005a2e:	0010      	movs	r0, r2
 8005a30:	f7ff fe5a 	bl	80056e8 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005a34:	f000 fbde 	bl	80061f4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005a38:	4b0a      	ldr	r3, [pc, #40]	@ (8005a64 <prvAddNewTaskToReadyList+0xb8>)
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d008      	beq.n	8005a52 <prvAddNewTaskToReadyList+0xa6>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005a40:	4b07      	ldr	r3, [pc, #28]	@ (8005a60 <prvAddNewTaskToReadyList+0xb4>)
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a4a:	429a      	cmp	r2, r3
 8005a4c:	d201      	bcs.n	8005a52 <prvAddNewTaskToReadyList+0xa6>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005a4e:	f000 fbaf 	bl	80061b0 <vPortYield>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005a52:	46c0      	nop			@ (mov r8, r8)
 8005a54:	46bd      	mov	sp, r7
 8005a56:	b002      	add	sp, #8
 8005a58:	bd80      	pop	{r7, pc}
 8005a5a:	46c0      	nop			@ (mov r8, r8)
 8005a5c:	200004f4 	.word	0x200004f4
 8005a60:	200003f4 	.word	0x200003f4
 8005a64:	20000500 	.word	0x20000500
 8005a68:	20000510 	.word	0x20000510
 8005a6c:	200004fc 	.word	0x200004fc
 8005a70:	200003f8 	.word	0x200003f8

08005a74 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005a74:	b580      	push	{r7, lr}
 8005a76:	b084      	sub	sp, #16
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005a7c:	2300      	movs	r3, #0
 8005a7e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d011      	beq.n	8005aaa <vTaskDelay+0x36>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005a86:	4b0d      	ldr	r3, [pc, #52]	@ (8005abc <vTaskDelay+0x48>)
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d002      	beq.n	8005a94 <vTaskDelay+0x20>
 8005a8e:	b672      	cpsid	i
 8005a90:	46c0      	nop			@ (mov r8, r8)
 8005a92:	e7fd      	b.n	8005a90 <vTaskDelay+0x1c>
			vTaskSuspendAll();
 8005a94:	f000 f854 	bl	8005b40 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	2100      	movs	r1, #0
 8005a9c:	0018      	movs	r0, r3
 8005a9e:	f000 faa7 	bl	8005ff0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005aa2:	f000 f859 	bl	8005b58 <xTaskResumeAll>
 8005aa6:	0003      	movs	r3, r0
 8005aa8:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d101      	bne.n	8005ab4 <vTaskDelay+0x40>
		{
			portYIELD_WITHIN_API();
 8005ab0:	f000 fb7e 	bl	80061b0 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005ab4:	46c0      	nop			@ (mov r8, r8)
 8005ab6:	46bd      	mov	sp, r7
 8005ab8:	b004      	add	sp, #16
 8005aba:	bd80      	pop	{r7, pc}
 8005abc:	2000051c 	.word	0x2000051c

08005ac0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005ac0:	b580      	push	{r7, lr}
 8005ac2:	b084      	sub	sp, #16
 8005ac4:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8005ac6:	4916      	ldr	r1, [pc, #88]	@ (8005b20 <vTaskStartScheduler+0x60>)
 8005ac8:	4816      	ldr	r0, [pc, #88]	@ (8005b24 <vTaskStartScheduler+0x64>)
 8005aca:	4b17      	ldr	r3, [pc, #92]	@ (8005b28 <vTaskStartScheduler+0x68>)
 8005acc:	9301      	str	r3, [sp, #4]
 8005ace:	2300      	movs	r3, #0
 8005ad0:	9300      	str	r3, [sp, #0]
 8005ad2:	2300      	movs	r3, #0
 8005ad4:	2280      	movs	r2, #128	@ 0x80
 8005ad6:	f7ff fe87 	bl	80057e8 <xTaskCreate>
 8005ada:	0003      	movs	r3, r0
 8005adc:	607b      	str	r3, [r7, #4]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	2b01      	cmp	r3, #1
 8005ae2:	d113      	bne.n	8005b0c <vTaskStartScheduler+0x4c>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 8005ae4:	b672      	cpsid	i
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005ae6:	4b11      	ldr	r3, [pc, #68]	@ (8005b2c <vTaskStartScheduler+0x6c>)
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	334c      	adds	r3, #76	@ 0x4c
 8005aec:	001a      	movs	r2, r3
 8005aee:	4b10      	ldr	r3, [pc, #64]	@ (8005b30 <vTaskStartScheduler+0x70>)
 8005af0:	601a      	str	r2, [r3, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005af2:	4b10      	ldr	r3, [pc, #64]	@ (8005b34 <vTaskStartScheduler+0x74>)
 8005af4:	2201      	movs	r2, #1
 8005af6:	4252      	negs	r2, r2
 8005af8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005afa:	4b0f      	ldr	r3, [pc, #60]	@ (8005b38 <vTaskStartScheduler+0x78>)
 8005afc:	2201      	movs	r2, #1
 8005afe:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005b00:	4b0e      	ldr	r3, [pc, #56]	@ (8005b3c <vTaskStartScheduler+0x7c>)
 8005b02:	2200      	movs	r2, #0
 8005b04:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005b06:	f000 fb2f 	bl	8006168 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005b0a:	e005      	b.n	8005b18 <vTaskStartScheduler+0x58>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	3301      	adds	r3, #1
 8005b10:	d102      	bne.n	8005b18 <vTaskStartScheduler+0x58>
 8005b12:	b672      	cpsid	i
 8005b14:	46c0      	nop			@ (mov r8, r8)
 8005b16:	e7fd      	b.n	8005b14 <vTaskStartScheduler+0x54>
}
 8005b18:	46c0      	nop			@ (mov r8, r8)
 8005b1a:	46bd      	mov	sp, r7
 8005b1c:	b002      	add	sp, #8
 8005b1e:	bd80      	pop	{r7, pc}
 8005b20:	08007100 	.word	0x08007100
 8005b24:	08005e85 	.word	0x08005e85
 8005b28:	20000518 	.word	0x20000518
 8005b2c:	200003f4 	.word	0x200003f4
 8005b30:	200001b8 	.word	0x200001b8
 8005b34:	20000514 	.word	0x20000514
 8005b38:	20000500 	.word	0x20000500
 8005b3c:	200004f8 	.word	0x200004f8

08005b40 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005b40:	b580      	push	{r7, lr}
 8005b42:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005b44:	4b03      	ldr	r3, [pc, #12]	@ (8005b54 <vTaskSuspendAll+0x14>)
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	1c5a      	adds	r2, r3, #1
 8005b4a:	4b02      	ldr	r3, [pc, #8]	@ (8005b54 <vTaskSuspendAll+0x14>)
 8005b4c:	601a      	str	r2, [r3, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005b4e:	46c0      	nop			@ (mov r8, r8)
 8005b50:	46bd      	mov	sp, r7
 8005b52:	bd80      	pop	{r7, pc}
 8005b54:	2000051c 	.word	0x2000051c

08005b58 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005b58:	b580      	push	{r7, lr}
 8005b5a:	b084      	sub	sp, #16
 8005b5c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005b5e:	2300      	movs	r3, #0
 8005b60:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005b62:	2300      	movs	r3, #0
 8005b64:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005b66:	4b3a      	ldr	r3, [pc, #232]	@ (8005c50 <xTaskResumeAll+0xf8>)
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d102      	bne.n	8005b74 <xTaskResumeAll+0x1c>
 8005b6e:	b672      	cpsid	i
 8005b70:	46c0      	nop			@ (mov r8, r8)
 8005b72:	e7fd      	b.n	8005b70 <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005b74:	f000 fb2c 	bl	80061d0 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005b78:	4b35      	ldr	r3, [pc, #212]	@ (8005c50 <xTaskResumeAll+0xf8>)
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	1e5a      	subs	r2, r3, #1
 8005b7e:	4b34      	ldr	r3, [pc, #208]	@ (8005c50 <xTaskResumeAll+0xf8>)
 8005b80:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005b82:	4b33      	ldr	r3, [pc, #204]	@ (8005c50 <xTaskResumeAll+0xf8>)
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d15b      	bne.n	8005c42 <xTaskResumeAll+0xea>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005b8a:	4b32      	ldr	r3, [pc, #200]	@ (8005c54 <xTaskResumeAll+0xfc>)
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d057      	beq.n	8005c42 <xTaskResumeAll+0xea>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005b92:	e02f      	b.n	8005bf4 <xTaskResumeAll+0x9c>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005b94:	4b30      	ldr	r3, [pc, #192]	@ (8005c58 <xTaskResumeAll+0x100>)
 8005b96:	68db      	ldr	r3, [r3, #12]
 8005b98:	68db      	ldr	r3, [r3, #12]
 8005b9a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	3318      	adds	r3, #24
 8005ba0:	0018      	movs	r0, r3
 8005ba2:	f7ff fdf9 	bl	8005798 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	3304      	adds	r3, #4
 8005baa:	0018      	movs	r0, r3
 8005bac:	f7ff fdf4 	bl	8005798 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005bb4:	4b29      	ldr	r3, [pc, #164]	@ (8005c5c <xTaskResumeAll+0x104>)
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	429a      	cmp	r2, r3
 8005bba:	d903      	bls.n	8005bc4 <xTaskResumeAll+0x6c>
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005bc0:	4b26      	ldr	r3, [pc, #152]	@ (8005c5c <xTaskResumeAll+0x104>)
 8005bc2:	601a      	str	r2, [r3, #0]
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005bc8:	0013      	movs	r3, r2
 8005bca:	009b      	lsls	r3, r3, #2
 8005bcc:	189b      	adds	r3, r3, r2
 8005bce:	009b      	lsls	r3, r3, #2
 8005bd0:	4a23      	ldr	r2, [pc, #140]	@ (8005c60 <xTaskResumeAll+0x108>)
 8005bd2:	189a      	adds	r2, r3, r2
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	3304      	adds	r3, #4
 8005bd8:	0019      	movs	r1, r3
 8005bda:	0010      	movs	r0, r2
 8005bdc:	f7ff fd84 	bl	80056e8 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005be4:	4b1f      	ldr	r3, [pc, #124]	@ (8005c64 <xTaskResumeAll+0x10c>)
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bea:	429a      	cmp	r2, r3
 8005bec:	d302      	bcc.n	8005bf4 <xTaskResumeAll+0x9c>
					{
						xYieldPending = pdTRUE;
 8005bee:	4b1e      	ldr	r3, [pc, #120]	@ (8005c68 <xTaskResumeAll+0x110>)
 8005bf0:	2201      	movs	r2, #1
 8005bf2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005bf4:	4b18      	ldr	r3, [pc, #96]	@ (8005c58 <xTaskResumeAll+0x100>)
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d1cb      	bne.n	8005b94 <xTaskResumeAll+0x3c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d001      	beq.n	8005c06 <xTaskResumeAll+0xae>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005c02:	f000 f9d7 	bl	8005fb4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005c06:	4b19      	ldr	r3, [pc, #100]	@ (8005c6c <xTaskResumeAll+0x114>)
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d00f      	beq.n	8005c32 <xTaskResumeAll+0xda>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005c12:	f000 f82d 	bl	8005c70 <xTaskIncrementTick>
 8005c16:	1e03      	subs	r3, r0, #0
 8005c18:	d002      	beq.n	8005c20 <xTaskResumeAll+0xc8>
							{
								xYieldPending = pdTRUE;
 8005c1a:	4b13      	ldr	r3, [pc, #76]	@ (8005c68 <xTaskResumeAll+0x110>)
 8005c1c:	2201      	movs	r2, #1
 8005c1e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	3b01      	subs	r3, #1
 8005c24:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d1f2      	bne.n	8005c12 <xTaskResumeAll+0xba>

						xPendedTicks = 0;
 8005c2c:	4b0f      	ldr	r3, [pc, #60]	@ (8005c6c <xTaskResumeAll+0x114>)
 8005c2e:	2200      	movs	r2, #0
 8005c30:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005c32:	4b0d      	ldr	r3, [pc, #52]	@ (8005c68 <xTaskResumeAll+0x110>)
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d003      	beq.n	8005c42 <xTaskResumeAll+0xea>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005c3a:	2301      	movs	r3, #1
 8005c3c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005c3e:	f000 fab7 	bl	80061b0 <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005c42:	f000 fad7 	bl	80061f4 <vPortExitCritical>

	return xAlreadyYielded;
 8005c46:	68bb      	ldr	r3, [r7, #8]
}
 8005c48:	0018      	movs	r0, r3
 8005c4a:	46bd      	mov	sp, r7
 8005c4c:	b004      	add	sp, #16
 8005c4e:	bd80      	pop	{r7, pc}
 8005c50:	2000051c 	.word	0x2000051c
 8005c54:	200004f4 	.word	0x200004f4
 8005c58:	200004b4 	.word	0x200004b4
 8005c5c:	200004fc 	.word	0x200004fc
 8005c60:	200003f8 	.word	0x200003f8
 8005c64:	200003f4 	.word	0x200003f4
 8005c68:	20000508 	.word	0x20000508
 8005c6c:	20000504 	.word	0x20000504

08005c70 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005c70:	b580      	push	{r7, lr}
 8005c72:	b086      	sub	sp, #24
 8005c74:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005c76:	2300      	movs	r3, #0
 8005c78:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005c7a:	4b4a      	ldr	r3, [pc, #296]	@ (8005da4 <xTaskIncrementTick+0x134>)
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d000      	beq.n	8005c84 <xTaskIncrementTick+0x14>
 8005c82:	e085      	b.n	8005d90 <xTaskIncrementTick+0x120>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005c84:	4b48      	ldr	r3, [pc, #288]	@ (8005da8 <xTaskIncrementTick+0x138>)
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	3301      	adds	r3, #1
 8005c8a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005c8c:	4b46      	ldr	r3, [pc, #280]	@ (8005da8 <xTaskIncrementTick+0x138>)
 8005c8e:	693a      	ldr	r2, [r7, #16]
 8005c90:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005c92:	693b      	ldr	r3, [r7, #16]
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d118      	bne.n	8005cca <xTaskIncrementTick+0x5a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005c98:	4b44      	ldr	r3, [pc, #272]	@ (8005dac <xTaskIncrementTick+0x13c>)
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d002      	beq.n	8005ca8 <xTaskIncrementTick+0x38>
 8005ca2:	b672      	cpsid	i
 8005ca4:	46c0      	nop			@ (mov r8, r8)
 8005ca6:	e7fd      	b.n	8005ca4 <xTaskIncrementTick+0x34>
 8005ca8:	4b40      	ldr	r3, [pc, #256]	@ (8005dac <xTaskIncrementTick+0x13c>)
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	60fb      	str	r3, [r7, #12]
 8005cae:	4b40      	ldr	r3, [pc, #256]	@ (8005db0 <xTaskIncrementTick+0x140>)
 8005cb0:	681a      	ldr	r2, [r3, #0]
 8005cb2:	4b3e      	ldr	r3, [pc, #248]	@ (8005dac <xTaskIncrementTick+0x13c>)
 8005cb4:	601a      	str	r2, [r3, #0]
 8005cb6:	4b3e      	ldr	r3, [pc, #248]	@ (8005db0 <xTaskIncrementTick+0x140>)
 8005cb8:	68fa      	ldr	r2, [r7, #12]
 8005cba:	601a      	str	r2, [r3, #0]
 8005cbc:	4b3d      	ldr	r3, [pc, #244]	@ (8005db4 <xTaskIncrementTick+0x144>)
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	1c5a      	adds	r2, r3, #1
 8005cc2:	4b3c      	ldr	r3, [pc, #240]	@ (8005db4 <xTaskIncrementTick+0x144>)
 8005cc4:	601a      	str	r2, [r3, #0]
 8005cc6:	f000 f975 	bl	8005fb4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005cca:	4b3b      	ldr	r3, [pc, #236]	@ (8005db8 <xTaskIncrementTick+0x148>)
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	693a      	ldr	r2, [r7, #16]
 8005cd0:	429a      	cmp	r2, r3
 8005cd2:	d349      	bcc.n	8005d68 <xTaskIncrementTick+0xf8>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005cd4:	4b35      	ldr	r3, [pc, #212]	@ (8005dac <xTaskIncrementTick+0x13c>)
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d104      	bne.n	8005ce8 <xTaskIncrementTick+0x78>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005cde:	4b36      	ldr	r3, [pc, #216]	@ (8005db8 <xTaskIncrementTick+0x148>)
 8005ce0:	2201      	movs	r2, #1
 8005ce2:	4252      	negs	r2, r2
 8005ce4:	601a      	str	r2, [r3, #0]
					break;
 8005ce6:	e03f      	b.n	8005d68 <xTaskIncrementTick+0xf8>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005ce8:	4b30      	ldr	r3, [pc, #192]	@ (8005dac <xTaskIncrementTick+0x13c>)
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	68db      	ldr	r3, [r3, #12]
 8005cee:	68db      	ldr	r3, [r3, #12]
 8005cf0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005cf2:	68bb      	ldr	r3, [r7, #8]
 8005cf4:	685b      	ldr	r3, [r3, #4]
 8005cf6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005cf8:	693a      	ldr	r2, [r7, #16]
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	429a      	cmp	r2, r3
 8005cfe:	d203      	bcs.n	8005d08 <xTaskIncrementTick+0x98>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005d00:	4b2d      	ldr	r3, [pc, #180]	@ (8005db8 <xTaskIncrementTick+0x148>)
 8005d02:	687a      	ldr	r2, [r7, #4]
 8005d04:	601a      	str	r2, [r3, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005d06:	e02f      	b.n	8005d68 <xTaskIncrementTick+0xf8>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005d08:	68bb      	ldr	r3, [r7, #8]
 8005d0a:	3304      	adds	r3, #4
 8005d0c:	0018      	movs	r0, r3
 8005d0e:	f7ff fd43 	bl	8005798 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005d12:	68bb      	ldr	r3, [r7, #8]
 8005d14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d004      	beq.n	8005d24 <xTaskIncrementTick+0xb4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005d1a:	68bb      	ldr	r3, [r7, #8]
 8005d1c:	3318      	adds	r3, #24
 8005d1e:	0018      	movs	r0, r3
 8005d20:	f7ff fd3a 	bl	8005798 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005d24:	68bb      	ldr	r3, [r7, #8]
 8005d26:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d28:	4b24      	ldr	r3, [pc, #144]	@ (8005dbc <xTaskIncrementTick+0x14c>)
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	429a      	cmp	r2, r3
 8005d2e:	d903      	bls.n	8005d38 <xTaskIncrementTick+0xc8>
 8005d30:	68bb      	ldr	r3, [r7, #8]
 8005d32:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d34:	4b21      	ldr	r3, [pc, #132]	@ (8005dbc <xTaskIncrementTick+0x14c>)
 8005d36:	601a      	str	r2, [r3, #0]
 8005d38:	68bb      	ldr	r3, [r7, #8]
 8005d3a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d3c:	0013      	movs	r3, r2
 8005d3e:	009b      	lsls	r3, r3, #2
 8005d40:	189b      	adds	r3, r3, r2
 8005d42:	009b      	lsls	r3, r3, #2
 8005d44:	4a1e      	ldr	r2, [pc, #120]	@ (8005dc0 <xTaskIncrementTick+0x150>)
 8005d46:	189a      	adds	r2, r3, r2
 8005d48:	68bb      	ldr	r3, [r7, #8]
 8005d4a:	3304      	adds	r3, #4
 8005d4c:	0019      	movs	r1, r3
 8005d4e:	0010      	movs	r0, r2
 8005d50:	f7ff fcca 	bl	80056e8 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005d54:	68bb      	ldr	r3, [r7, #8]
 8005d56:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d58:	4b1a      	ldr	r3, [pc, #104]	@ (8005dc4 <xTaskIncrementTick+0x154>)
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d5e:	429a      	cmp	r2, r3
 8005d60:	d3b8      	bcc.n	8005cd4 <xTaskIncrementTick+0x64>
						{
							xSwitchRequired = pdTRUE;
 8005d62:	2301      	movs	r3, #1
 8005d64:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005d66:	e7b5      	b.n	8005cd4 <xTaskIncrementTick+0x64>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005d68:	4b16      	ldr	r3, [pc, #88]	@ (8005dc4 <xTaskIncrementTick+0x154>)
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d6e:	4914      	ldr	r1, [pc, #80]	@ (8005dc0 <xTaskIncrementTick+0x150>)
 8005d70:	0013      	movs	r3, r2
 8005d72:	009b      	lsls	r3, r3, #2
 8005d74:	189b      	adds	r3, r3, r2
 8005d76:	009b      	lsls	r3, r3, #2
 8005d78:	585b      	ldr	r3, [r3, r1]
 8005d7a:	2b01      	cmp	r3, #1
 8005d7c:	d901      	bls.n	8005d82 <xTaskIncrementTick+0x112>
			{
				xSwitchRequired = pdTRUE;
 8005d7e:	2301      	movs	r3, #1
 8005d80:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005d82:	4b11      	ldr	r3, [pc, #68]	@ (8005dc8 <xTaskIncrementTick+0x158>)
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d007      	beq.n	8005d9a <xTaskIncrementTick+0x12a>
			{
				xSwitchRequired = pdTRUE;
 8005d8a:	2301      	movs	r3, #1
 8005d8c:	617b      	str	r3, [r7, #20]
 8005d8e:	e004      	b.n	8005d9a <xTaskIncrementTick+0x12a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005d90:	4b0e      	ldr	r3, [pc, #56]	@ (8005dcc <xTaskIncrementTick+0x15c>)
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	1c5a      	adds	r2, r3, #1
 8005d96:	4b0d      	ldr	r3, [pc, #52]	@ (8005dcc <xTaskIncrementTick+0x15c>)
 8005d98:	601a      	str	r2, [r3, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005d9a:	697b      	ldr	r3, [r7, #20]
}
 8005d9c:	0018      	movs	r0, r3
 8005d9e:	46bd      	mov	sp, r7
 8005da0:	b006      	add	sp, #24
 8005da2:	bd80      	pop	{r7, pc}
 8005da4:	2000051c 	.word	0x2000051c
 8005da8:	200004f8 	.word	0x200004f8
 8005dac:	200004ac 	.word	0x200004ac
 8005db0:	200004b0 	.word	0x200004b0
 8005db4:	2000050c 	.word	0x2000050c
 8005db8:	20000514 	.word	0x20000514
 8005dbc:	200004fc 	.word	0x200004fc
 8005dc0:	200003f8 	.word	0x200003f8
 8005dc4:	200003f4 	.word	0x200003f4
 8005dc8:	20000508 	.word	0x20000508
 8005dcc:	20000504 	.word	0x20000504

08005dd0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005dd0:	b580      	push	{r7, lr}
 8005dd2:	b082      	sub	sp, #8
 8005dd4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005dd6:	4b25      	ldr	r3, [pc, #148]	@ (8005e6c <vTaskSwitchContext+0x9c>)
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d003      	beq.n	8005de6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005dde:	4b24      	ldr	r3, [pc, #144]	@ (8005e70 <vTaskSwitchContext+0xa0>)
 8005de0:	2201      	movs	r2, #1
 8005de2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005de4:	e03e      	b.n	8005e64 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 8005de6:	4b22      	ldr	r3, [pc, #136]	@ (8005e70 <vTaskSwitchContext+0xa0>)
 8005de8:	2200      	movs	r2, #0
 8005dea:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005dec:	4b21      	ldr	r3, [pc, #132]	@ (8005e74 <vTaskSwitchContext+0xa4>)
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	607b      	str	r3, [r7, #4]
 8005df2:	e008      	b.n	8005e06 <vTaskSwitchContext+0x36>
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d102      	bne.n	8005e00 <vTaskSwitchContext+0x30>
 8005dfa:	b672      	cpsid	i
 8005dfc:	46c0      	nop			@ (mov r8, r8)
 8005dfe:	e7fd      	b.n	8005dfc <vTaskSwitchContext+0x2c>
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	3b01      	subs	r3, #1
 8005e04:	607b      	str	r3, [r7, #4]
 8005e06:	491c      	ldr	r1, [pc, #112]	@ (8005e78 <vTaskSwitchContext+0xa8>)
 8005e08:	687a      	ldr	r2, [r7, #4]
 8005e0a:	0013      	movs	r3, r2
 8005e0c:	009b      	lsls	r3, r3, #2
 8005e0e:	189b      	adds	r3, r3, r2
 8005e10:	009b      	lsls	r3, r3, #2
 8005e12:	585b      	ldr	r3, [r3, r1]
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d0ed      	beq.n	8005df4 <vTaskSwitchContext+0x24>
 8005e18:	687a      	ldr	r2, [r7, #4]
 8005e1a:	0013      	movs	r3, r2
 8005e1c:	009b      	lsls	r3, r3, #2
 8005e1e:	189b      	adds	r3, r3, r2
 8005e20:	009b      	lsls	r3, r3, #2
 8005e22:	4a15      	ldr	r2, [pc, #84]	@ (8005e78 <vTaskSwitchContext+0xa8>)
 8005e24:	189b      	adds	r3, r3, r2
 8005e26:	603b      	str	r3, [r7, #0]
 8005e28:	683b      	ldr	r3, [r7, #0]
 8005e2a:	685b      	ldr	r3, [r3, #4]
 8005e2c:	685a      	ldr	r2, [r3, #4]
 8005e2e:	683b      	ldr	r3, [r7, #0]
 8005e30:	605a      	str	r2, [r3, #4]
 8005e32:	683b      	ldr	r3, [r7, #0]
 8005e34:	685a      	ldr	r2, [r3, #4]
 8005e36:	683b      	ldr	r3, [r7, #0]
 8005e38:	3308      	adds	r3, #8
 8005e3a:	429a      	cmp	r2, r3
 8005e3c:	d104      	bne.n	8005e48 <vTaskSwitchContext+0x78>
 8005e3e:	683b      	ldr	r3, [r7, #0]
 8005e40:	685b      	ldr	r3, [r3, #4]
 8005e42:	685a      	ldr	r2, [r3, #4]
 8005e44:	683b      	ldr	r3, [r7, #0]
 8005e46:	605a      	str	r2, [r3, #4]
 8005e48:	683b      	ldr	r3, [r7, #0]
 8005e4a:	685b      	ldr	r3, [r3, #4]
 8005e4c:	68da      	ldr	r2, [r3, #12]
 8005e4e:	4b0b      	ldr	r3, [pc, #44]	@ (8005e7c <vTaskSwitchContext+0xac>)
 8005e50:	601a      	str	r2, [r3, #0]
 8005e52:	4b08      	ldr	r3, [pc, #32]	@ (8005e74 <vTaskSwitchContext+0xa4>)
 8005e54:	687a      	ldr	r2, [r7, #4]
 8005e56:	601a      	str	r2, [r3, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005e58:	4b08      	ldr	r3, [pc, #32]	@ (8005e7c <vTaskSwitchContext+0xac>)
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	334c      	adds	r3, #76	@ 0x4c
 8005e5e:	001a      	movs	r2, r3
 8005e60:	4b07      	ldr	r3, [pc, #28]	@ (8005e80 <vTaskSwitchContext+0xb0>)
 8005e62:	601a      	str	r2, [r3, #0]
}
 8005e64:	46c0      	nop			@ (mov r8, r8)
 8005e66:	46bd      	mov	sp, r7
 8005e68:	b002      	add	sp, #8
 8005e6a:	bd80      	pop	{r7, pc}
 8005e6c:	2000051c 	.word	0x2000051c
 8005e70:	20000508 	.word	0x20000508
 8005e74:	200004fc 	.word	0x200004fc
 8005e78:	200003f8 	.word	0x200003f8
 8005e7c:	200003f4 	.word	0x200003f4
 8005e80:	200001b8 	.word	0x200001b8

08005e84 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005e84:	b580      	push	{r7, lr}
 8005e86:	b082      	sub	sp, #8
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005e8c:	f000 f84e 	bl	8005f2c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005e90:	4b03      	ldr	r3, [pc, #12]	@ (8005ea0 <prvIdleTask+0x1c>)
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	2b01      	cmp	r3, #1
 8005e96:	d9f9      	bls.n	8005e8c <prvIdleTask+0x8>
			{
				taskYIELD();
 8005e98:	f000 f98a 	bl	80061b0 <vPortYield>
		prvCheckTasksWaitingTermination();
 8005e9c:	e7f6      	b.n	8005e8c <prvIdleTask+0x8>
 8005e9e:	46c0      	nop			@ (mov r8, r8)
 8005ea0:	200003f8 	.word	0x200003f8

08005ea4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005ea4:	b580      	push	{r7, lr}
 8005ea6:	b082      	sub	sp, #8
 8005ea8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005eaa:	2300      	movs	r3, #0
 8005eac:	607b      	str	r3, [r7, #4]
 8005eae:	e00c      	b.n	8005eca <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005eb0:	687a      	ldr	r2, [r7, #4]
 8005eb2:	0013      	movs	r3, r2
 8005eb4:	009b      	lsls	r3, r3, #2
 8005eb6:	189b      	adds	r3, r3, r2
 8005eb8:	009b      	lsls	r3, r3, #2
 8005eba:	4a14      	ldr	r2, [pc, #80]	@ (8005f0c <prvInitialiseTaskLists+0x68>)
 8005ebc:	189b      	adds	r3, r3, r2
 8005ebe:	0018      	movs	r0, r3
 8005ec0:	f7ff fbe9 	bl	8005696 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	3301      	adds	r3, #1
 8005ec8:	607b      	str	r3, [r7, #4]
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	2b06      	cmp	r3, #6
 8005ece:	d9ef      	bls.n	8005eb0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005ed0:	4b0f      	ldr	r3, [pc, #60]	@ (8005f10 <prvInitialiseTaskLists+0x6c>)
 8005ed2:	0018      	movs	r0, r3
 8005ed4:	f7ff fbdf 	bl	8005696 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005ed8:	4b0e      	ldr	r3, [pc, #56]	@ (8005f14 <prvInitialiseTaskLists+0x70>)
 8005eda:	0018      	movs	r0, r3
 8005edc:	f7ff fbdb 	bl	8005696 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005ee0:	4b0d      	ldr	r3, [pc, #52]	@ (8005f18 <prvInitialiseTaskLists+0x74>)
 8005ee2:	0018      	movs	r0, r3
 8005ee4:	f7ff fbd7 	bl	8005696 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005ee8:	4b0c      	ldr	r3, [pc, #48]	@ (8005f1c <prvInitialiseTaskLists+0x78>)
 8005eea:	0018      	movs	r0, r3
 8005eec:	f7ff fbd3 	bl	8005696 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005ef0:	4b0b      	ldr	r3, [pc, #44]	@ (8005f20 <prvInitialiseTaskLists+0x7c>)
 8005ef2:	0018      	movs	r0, r3
 8005ef4:	f7ff fbcf 	bl	8005696 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005ef8:	4b0a      	ldr	r3, [pc, #40]	@ (8005f24 <prvInitialiseTaskLists+0x80>)
 8005efa:	4a05      	ldr	r2, [pc, #20]	@ (8005f10 <prvInitialiseTaskLists+0x6c>)
 8005efc:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005efe:	4b0a      	ldr	r3, [pc, #40]	@ (8005f28 <prvInitialiseTaskLists+0x84>)
 8005f00:	4a04      	ldr	r2, [pc, #16]	@ (8005f14 <prvInitialiseTaskLists+0x70>)
 8005f02:	601a      	str	r2, [r3, #0]
}
 8005f04:	46c0      	nop			@ (mov r8, r8)
 8005f06:	46bd      	mov	sp, r7
 8005f08:	b002      	add	sp, #8
 8005f0a:	bd80      	pop	{r7, pc}
 8005f0c:	200003f8 	.word	0x200003f8
 8005f10:	20000484 	.word	0x20000484
 8005f14:	20000498 	.word	0x20000498
 8005f18:	200004b4 	.word	0x200004b4
 8005f1c:	200004c8 	.word	0x200004c8
 8005f20:	200004e0 	.word	0x200004e0
 8005f24:	200004ac 	.word	0x200004ac
 8005f28:	200004b0 	.word	0x200004b0

08005f2c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005f2c:	b580      	push	{r7, lr}
 8005f2e:	b082      	sub	sp, #8
 8005f30:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005f32:	e01a      	b.n	8005f6a <prvCheckTasksWaitingTermination+0x3e>
		{
			taskENTER_CRITICAL();
 8005f34:	f000 f94c 	bl	80061d0 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005f38:	4b10      	ldr	r3, [pc, #64]	@ (8005f7c <prvCheckTasksWaitingTermination+0x50>)
 8005f3a:	68db      	ldr	r3, [r3, #12]
 8005f3c:	68db      	ldr	r3, [r3, #12]
 8005f3e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	3304      	adds	r3, #4
 8005f44:	0018      	movs	r0, r3
 8005f46:	f7ff fc27 	bl	8005798 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005f4a:	4b0d      	ldr	r3, [pc, #52]	@ (8005f80 <prvCheckTasksWaitingTermination+0x54>)
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	1e5a      	subs	r2, r3, #1
 8005f50:	4b0b      	ldr	r3, [pc, #44]	@ (8005f80 <prvCheckTasksWaitingTermination+0x54>)
 8005f52:	601a      	str	r2, [r3, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005f54:	4b0b      	ldr	r3, [pc, #44]	@ (8005f84 <prvCheckTasksWaitingTermination+0x58>)
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	1e5a      	subs	r2, r3, #1
 8005f5a:	4b0a      	ldr	r3, [pc, #40]	@ (8005f84 <prvCheckTasksWaitingTermination+0x58>)
 8005f5c:	601a      	str	r2, [r3, #0]
			}
			taskEXIT_CRITICAL();
 8005f5e:	f000 f949 	bl	80061f4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	0018      	movs	r0, r3
 8005f66:	f000 f80f 	bl	8005f88 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005f6a:	4b06      	ldr	r3, [pc, #24]	@ (8005f84 <prvCheckTasksWaitingTermination+0x58>)
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d1e0      	bne.n	8005f34 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005f72:	46c0      	nop			@ (mov r8, r8)
 8005f74:	46c0      	nop			@ (mov r8, r8)
 8005f76:	46bd      	mov	sp, r7
 8005f78:	b002      	add	sp, #8
 8005f7a:	bd80      	pop	{r7, pc}
 8005f7c:	200004c8 	.word	0x200004c8
 8005f80:	200004f4 	.word	0x200004f4
 8005f84:	200004dc 	.word	0x200004dc

08005f88 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005f88:	b580      	push	{r7, lr}
 8005f8a:	b082      	sub	sp, #8
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	334c      	adds	r3, #76	@ 0x4c
 8005f94:	0018      	movs	r0, r3
 8005f96:	f000 fb93 	bl	80066c0 <_reclaim_reent>

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f9e:	0018      	movs	r0, r3
 8005fa0:	f000 fa5e 	bl	8006460 <vPortFree>
			vPortFree( pxTCB );
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	0018      	movs	r0, r3
 8005fa8:	f000 fa5a 	bl	8006460 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005fac:	46c0      	nop			@ (mov r8, r8)
 8005fae:	46bd      	mov	sp, r7
 8005fb0:	b002      	add	sp, #8
 8005fb2:	bd80      	pop	{r7, pc}

08005fb4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005fb4:	b580      	push	{r7, lr}
 8005fb6:	b082      	sub	sp, #8
 8005fb8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005fba:	4b0b      	ldr	r3, [pc, #44]	@ (8005fe8 <prvResetNextTaskUnblockTime+0x34>)
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d104      	bne.n	8005fce <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005fc4:	4b09      	ldr	r3, [pc, #36]	@ (8005fec <prvResetNextTaskUnblockTime+0x38>)
 8005fc6:	2201      	movs	r2, #1
 8005fc8:	4252      	negs	r2, r2
 8005fca:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005fcc:	e008      	b.n	8005fe0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005fce:	4b06      	ldr	r3, [pc, #24]	@ (8005fe8 <prvResetNextTaskUnblockTime+0x34>)
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	68db      	ldr	r3, [r3, #12]
 8005fd4:	68db      	ldr	r3, [r3, #12]
 8005fd6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	685a      	ldr	r2, [r3, #4]
 8005fdc:	4b03      	ldr	r3, [pc, #12]	@ (8005fec <prvResetNextTaskUnblockTime+0x38>)
 8005fde:	601a      	str	r2, [r3, #0]
}
 8005fe0:	46c0      	nop			@ (mov r8, r8)
 8005fe2:	46bd      	mov	sp, r7
 8005fe4:	b002      	add	sp, #8
 8005fe6:	bd80      	pop	{r7, pc}
 8005fe8:	200004ac 	.word	0x200004ac
 8005fec:	20000514 	.word	0x20000514

08005ff0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005ff0:	b580      	push	{r7, lr}
 8005ff2:	b084      	sub	sp, #16
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	6078      	str	r0, [r7, #4]
 8005ff8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005ffa:	4b21      	ldr	r3, [pc, #132]	@ (8006080 <prvAddCurrentTaskToDelayedList+0x90>)
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006000:	4b20      	ldr	r3, [pc, #128]	@ (8006084 <prvAddCurrentTaskToDelayedList+0x94>)
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	3304      	adds	r3, #4
 8006006:	0018      	movs	r0, r3
 8006008:	f7ff fbc6 	bl	8005798 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	3301      	adds	r3, #1
 8006010:	d10b      	bne.n	800602a <prvAddCurrentTaskToDelayedList+0x3a>
 8006012:	683b      	ldr	r3, [r7, #0]
 8006014:	2b00      	cmp	r3, #0
 8006016:	d008      	beq.n	800602a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006018:	4b1a      	ldr	r3, [pc, #104]	@ (8006084 <prvAddCurrentTaskToDelayedList+0x94>)
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	1d1a      	adds	r2, r3, #4
 800601e:	4b1a      	ldr	r3, [pc, #104]	@ (8006088 <prvAddCurrentTaskToDelayedList+0x98>)
 8006020:	0011      	movs	r1, r2
 8006022:	0018      	movs	r0, r3
 8006024:	f7ff fb60 	bl	80056e8 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006028:	e026      	b.n	8006078 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800602a:	68fa      	ldr	r2, [r7, #12]
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	18d3      	adds	r3, r2, r3
 8006030:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006032:	4b14      	ldr	r3, [pc, #80]	@ (8006084 <prvAddCurrentTaskToDelayedList+0x94>)
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	68ba      	ldr	r2, [r7, #8]
 8006038:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800603a:	68ba      	ldr	r2, [r7, #8]
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	429a      	cmp	r2, r3
 8006040:	d209      	bcs.n	8006056 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006042:	4b12      	ldr	r3, [pc, #72]	@ (800608c <prvAddCurrentTaskToDelayedList+0x9c>)
 8006044:	681a      	ldr	r2, [r3, #0]
 8006046:	4b0f      	ldr	r3, [pc, #60]	@ (8006084 <prvAddCurrentTaskToDelayedList+0x94>)
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	3304      	adds	r3, #4
 800604c:	0019      	movs	r1, r3
 800604e:	0010      	movs	r0, r2
 8006050:	f7ff fb6c 	bl	800572c <vListInsert>
}
 8006054:	e010      	b.n	8006078 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006056:	4b0e      	ldr	r3, [pc, #56]	@ (8006090 <prvAddCurrentTaskToDelayedList+0xa0>)
 8006058:	681a      	ldr	r2, [r3, #0]
 800605a:	4b0a      	ldr	r3, [pc, #40]	@ (8006084 <prvAddCurrentTaskToDelayedList+0x94>)
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	3304      	adds	r3, #4
 8006060:	0019      	movs	r1, r3
 8006062:	0010      	movs	r0, r2
 8006064:	f7ff fb62 	bl	800572c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006068:	4b0a      	ldr	r3, [pc, #40]	@ (8006094 <prvAddCurrentTaskToDelayedList+0xa4>)
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	68ba      	ldr	r2, [r7, #8]
 800606e:	429a      	cmp	r2, r3
 8006070:	d202      	bcs.n	8006078 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006072:	4b08      	ldr	r3, [pc, #32]	@ (8006094 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006074:	68ba      	ldr	r2, [r7, #8]
 8006076:	601a      	str	r2, [r3, #0]
}
 8006078:	46c0      	nop			@ (mov r8, r8)
 800607a:	46bd      	mov	sp, r7
 800607c:	b004      	add	sp, #16
 800607e:	bd80      	pop	{r7, pc}
 8006080:	200004f8 	.word	0x200004f8
 8006084:	200003f4 	.word	0x200003f4
 8006088:	200004e0 	.word	0x200004e0
 800608c:	200004b0 	.word	0x200004b0
 8006090:	200004ac 	.word	0x200004ac
 8006094:	20000514 	.word	0x20000514

08006098 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006098:	b580      	push	{r7, lr}
 800609a:	b084      	sub	sp, #16
 800609c:	af00      	add	r7, sp, #0
 800609e:	60f8      	str	r0, [r7, #12]
 80060a0:	60b9      	str	r1, [r7, #8]
 80060a2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	3b04      	subs	r3, #4
 80060a8:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	2280      	movs	r2, #128	@ 0x80
 80060ae:	0452      	lsls	r2, r2, #17
 80060b0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	3b04      	subs	r3, #4
 80060b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 80060b8:	68ba      	ldr	r2, [r7, #8]
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	3b04      	subs	r3, #4
 80060c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80060c4:	4a08      	ldr	r2, [pc, #32]	@ (80060e8 <pxPortInitialiseStack+0x50>)
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	3b14      	subs	r3, #20
 80060ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80060d0:	687a      	ldr	r2, [r7, #4]
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	3b20      	subs	r3, #32
 80060da:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80060dc:	68fb      	ldr	r3, [r7, #12]
}
 80060de:	0018      	movs	r0, r3
 80060e0:	46bd      	mov	sp, r7
 80060e2:	b004      	add	sp, #16
 80060e4:	bd80      	pop	{r7, pc}
 80060e6:	46c0      	nop			@ (mov r8, r8)
 80060e8:	080060ed 	.word	0x080060ed

080060ec <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80060ec:	b580      	push	{r7, lr}
 80060ee:	b082      	sub	sp, #8
 80060f0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80060f2:	2300      	movs	r3, #0
 80060f4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80060f6:	4b08      	ldr	r3, [pc, #32]	@ (8006118 <prvTaskExitError+0x2c>)
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	3301      	adds	r3, #1
 80060fc:	d002      	beq.n	8006104 <prvTaskExitError+0x18>
 80060fe:	b672      	cpsid	i
 8006100:	46c0      	nop			@ (mov r8, r8)
 8006102:	e7fd      	b.n	8006100 <prvTaskExitError+0x14>
	portDISABLE_INTERRUPTS();
 8006104:	b672      	cpsid	i
	while( ulDummy == 0 )
 8006106:	46c0      	nop			@ (mov r8, r8)
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	2b00      	cmp	r3, #0
 800610c:	d0fc      	beq.n	8006108 <prvTaskExitError+0x1c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800610e:	46c0      	nop			@ (mov r8, r8)
 8006110:	46c0      	nop			@ (mov r8, r8)
 8006112:	46bd      	mov	sp, r7
 8006114:	b002      	add	sp, #8
 8006116:	bd80      	pop	{r7, pc}
 8006118:	200001b4 	.word	0x200001b4

0800611c <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
 800611c:	b580      	push	{r7, lr}
 800611e:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
 8006120:	46c0      	nop			@ (mov r8, r8)
 8006122:	46bd      	mov	sp, r7
 8006124:	bd80      	pop	{r7, pc}
	...

08006130 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 8006130:	4a0b      	ldr	r2, [pc, #44]	@ (8006160 <pxCurrentTCBConst2>)
 8006132:	6813      	ldr	r3, [r2, #0]
 8006134:	6818      	ldr	r0, [r3, #0]
 8006136:	3020      	adds	r0, #32
 8006138:	f380 8809 	msr	PSP, r0
 800613c:	2002      	movs	r0, #2
 800613e:	f380 8814 	msr	CONTROL, r0
 8006142:	f3bf 8f6f 	isb	sy
 8006146:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 8006148:	46ae      	mov	lr, r5
 800614a:	bc08      	pop	{r3}
 800614c:	bc04      	pop	{r2}
 800614e:	b662      	cpsie	i
 8006150:	4718      	bx	r3
 8006152:	46c0      	nop			@ (mov r8, r8)
 8006154:	46c0      	nop			@ (mov r8, r8)
 8006156:	46c0      	nop			@ (mov r8, r8)
 8006158:	46c0      	nop			@ (mov r8, r8)
 800615a:	46c0      	nop			@ (mov r8, r8)
 800615c:	46c0      	nop			@ (mov r8, r8)
 800615e:	46c0      	nop			@ (mov r8, r8)

08006160 <pxCurrentTCBConst2>:
 8006160:	200003f4 	.word	0x200003f4
	"	bx   r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
 8006164:	46c0      	nop			@ (mov r8, r8)
 8006166:	46c0      	nop			@ (mov r8, r8)

08006168 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006168:	b580      	push	{r7, lr}
 800616a:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priority as the kernel. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800616c:	4b0e      	ldr	r3, [pc, #56]	@ (80061a8 <xPortStartScheduler+0x40>)
 800616e:	681a      	ldr	r2, [r3, #0]
 8006170:	4b0d      	ldr	r3, [pc, #52]	@ (80061a8 <xPortStartScheduler+0x40>)
 8006172:	21ff      	movs	r1, #255	@ 0xff
 8006174:	0409      	lsls	r1, r1, #16
 8006176:	430a      	orrs	r2, r1
 8006178:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800617a:	4b0b      	ldr	r3, [pc, #44]	@ (80061a8 <xPortStartScheduler+0x40>)
 800617c:	681a      	ldr	r2, [r3, #0]
 800617e:	4b0a      	ldr	r3, [pc, #40]	@ (80061a8 <xPortStartScheduler+0x40>)
 8006180:	21ff      	movs	r1, #255	@ 0xff
 8006182:	0609      	lsls	r1, r1, #24
 8006184:	430a      	orrs	r2, r1
 8006186:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006188:	f000 f898 	bl	80062bc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800618c:	4b07      	ldr	r3, [pc, #28]	@ (80061ac <xPortStartScheduler+0x44>)
 800618e:	2200      	movs	r2, #0
 8006190:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
 8006192:	f7ff ffcd 	bl	8006130 <vPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006196:	f7ff fe1b 	bl	8005dd0 <vTaskSwitchContext>
	prvTaskExitError();
 800619a:	f7ff ffa7 	bl	80060ec <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800619e:	2300      	movs	r3, #0
}
 80061a0:	0018      	movs	r0, r3
 80061a2:	46bd      	mov	sp, r7
 80061a4:	bd80      	pop	{r7, pc}
 80061a6:	46c0      	nop			@ (mov r8, r8)
 80061a8:	e000ed20 	.word	0xe000ed20
 80061ac:	200001b4 	.word	0x200001b4

080061b0 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 80061b0:	b580      	push	{r7, lr}
 80061b2:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80061b4:	4b05      	ldr	r3, [pc, #20]	@ (80061cc <vPortYield+0x1c>)
 80061b6:	2280      	movs	r2, #128	@ 0x80
 80061b8:	0552      	lsls	r2, r2, #21
 80061ba:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 80061bc:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 80061c0:	f3bf 8f6f 	isb	sy
}
 80061c4:	46c0      	nop			@ (mov r8, r8)
 80061c6:	46bd      	mov	sp, r7
 80061c8:	bd80      	pop	{r7, pc}
 80061ca:	46c0      	nop			@ (mov r8, r8)
 80061cc:	e000ed04 	.word	0xe000ed04

080061d0 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80061d0:	b580      	push	{r7, lr}
 80061d2:	af00      	add	r7, sp, #0
	portDISABLE_INTERRUPTS();
 80061d4:	b672      	cpsid	i
	uxCriticalNesting++;
 80061d6:	4b06      	ldr	r3, [pc, #24]	@ (80061f0 <vPortEnterCritical+0x20>)
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	1c5a      	adds	r2, r3, #1
 80061dc:	4b04      	ldr	r3, [pc, #16]	@ (80061f0 <vPortEnterCritical+0x20>)
 80061de:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
 80061e0:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 80061e4:	f3bf 8f6f 	isb	sy
}
 80061e8:	46c0      	nop			@ (mov r8, r8)
 80061ea:	46bd      	mov	sp, r7
 80061ec:	bd80      	pop	{r7, pc}
 80061ee:	46c0      	nop			@ (mov r8, r8)
 80061f0:	200001b4 	.word	0x200001b4

080061f4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80061f4:	b580      	push	{r7, lr}
 80061f6:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80061f8:	4b09      	ldr	r3, [pc, #36]	@ (8006220 <vPortExitCritical+0x2c>)
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d102      	bne.n	8006206 <vPortExitCritical+0x12>
 8006200:	b672      	cpsid	i
 8006202:	46c0      	nop			@ (mov r8, r8)
 8006204:	e7fd      	b.n	8006202 <vPortExitCritical+0xe>
	uxCriticalNesting--;
 8006206:	4b06      	ldr	r3, [pc, #24]	@ (8006220 <vPortExitCritical+0x2c>)
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	1e5a      	subs	r2, r3, #1
 800620c:	4b04      	ldr	r3, [pc, #16]	@ (8006220 <vPortExitCritical+0x2c>)
 800620e:	601a      	str	r2, [r3, #0]
	if( uxCriticalNesting == 0 )
 8006210:	4b03      	ldr	r3, [pc, #12]	@ (8006220 <vPortExitCritical+0x2c>)
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	2b00      	cmp	r3, #0
 8006216:	d100      	bne.n	800621a <vPortExitCritical+0x26>
	{
		portENABLE_INTERRUPTS();
 8006218:	b662      	cpsie	i
	}
}
 800621a:	46c0      	nop			@ (mov r8, r8)
 800621c:	46bd      	mov	sp, r7
 800621e:	bd80      	pop	{r7, pc}
 8006220:	200001b4 	.word	0x200001b4

08006224 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
 8006224:	f3ef 8010 	mrs	r0, PRIMASK
 8006228:	b672      	cpsid	i
 800622a:	4770      	bx	lr
					" mrs r0, PRIMASK	\n"
					" cpsid i			\n"
					" bx lr				  "
					::: "memory"
				  );
}
 800622c:	46c0      	nop			@ (mov r8, r8)
 800622e:	0018      	movs	r0, r3

08006230 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
 8006230:	f380 8810 	msr	PRIMASK, r0
 8006234:	4770      	bx	lr
					" msr PRIMASK, r0	\n"
					" bx lr				  "
					::: "memory"
				  );
}
 8006236:	46c0      	nop			@ (mov r8, r8)
	...

08006240 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006240:	f3ef 8009 	mrs	r0, PSP
 8006244:	4b0e      	ldr	r3, [pc, #56]	@ (8006280 <pxCurrentTCBConst>)
 8006246:	681a      	ldr	r2, [r3, #0]
 8006248:	3820      	subs	r0, #32
 800624a:	6010      	str	r0, [r2, #0]
 800624c:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 800624e:	4644      	mov	r4, r8
 8006250:	464d      	mov	r5, r9
 8006252:	4656      	mov	r6, sl
 8006254:	465f      	mov	r7, fp
 8006256:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8006258:	b508      	push	{r3, lr}
 800625a:	b672      	cpsid	i
 800625c:	f7ff fdb8 	bl	8005dd0 <vTaskSwitchContext>
 8006260:	b662      	cpsie	i
 8006262:	bc0c      	pop	{r2, r3}
 8006264:	6811      	ldr	r1, [r2, #0]
 8006266:	6808      	ldr	r0, [r1, #0]
 8006268:	3010      	adds	r0, #16
 800626a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800626c:	46a0      	mov	r8, r4
 800626e:	46a9      	mov	r9, r5
 8006270:	46b2      	mov	sl, r6
 8006272:	46bb      	mov	fp, r7
 8006274:	f380 8809 	msr	PSP, r0
 8006278:	3820      	subs	r0, #32
 800627a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800627c:	4718      	bx	r3
 800627e:	46c0      	nop			@ (mov r8, r8)

08006280 <pxCurrentTCBConst>:
 8006280:	200003f4 	.word	0x200003f4
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
 8006284:	46c0      	nop			@ (mov r8, r8)
 8006286:	46c0      	nop			@ (mov r8, r8)

08006288 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006288:	b580      	push	{r7, lr}
 800628a:	b082      	sub	sp, #8
 800628c:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 800628e:	f7ff ffc9 	bl	8006224 <ulSetInterruptMaskFromISR>
 8006292:	0003      	movs	r3, r0
 8006294:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006296:	f7ff fceb 	bl	8005c70 <xTaskIncrementTick>
 800629a:	1e03      	subs	r3, r0, #0
 800629c:	d003      	beq.n	80062a6 <SysTick_Handler+0x1e>
		{
			/* Pend a context switch. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800629e:	4b06      	ldr	r3, [pc, #24]	@ (80062b8 <SysTick_Handler+0x30>)
 80062a0:	2280      	movs	r2, #128	@ 0x80
 80062a2:	0552      	lsls	r2, r2, #21
 80062a4:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	0018      	movs	r0, r3
 80062aa:	f7ff ffc1 	bl	8006230 <vClearInterruptMaskFromISR>
}
 80062ae:	46c0      	nop			@ (mov r8, r8)
 80062b0:	46bd      	mov	sp, r7
 80062b2:	b002      	add	sp, #8
 80062b4:	bd80      	pop	{r7, pc}
 80062b6:	46c0      	nop			@ (mov r8, r8)
 80062b8:	e000ed04 	.word	0xe000ed04

080062bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80062bc:	b580      	push	{r7, lr}
 80062be:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR;
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and reset the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80062c0:	4b0b      	ldr	r3, [pc, #44]	@ (80062f0 <vPortSetupTimerInterrupt+0x34>)
 80062c2:	2200      	movs	r2, #0
 80062c4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80062c6:	4b0b      	ldr	r3, [pc, #44]	@ (80062f4 <vPortSetupTimerInterrupt+0x38>)
 80062c8:	2200      	movs	r2, #0
 80062ca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80062cc:	4b0a      	ldr	r3, [pc, #40]	@ (80062f8 <vPortSetupTimerInterrupt+0x3c>)
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	22fa      	movs	r2, #250	@ 0xfa
 80062d2:	0091      	lsls	r1, r2, #2
 80062d4:	0018      	movs	r0, r3
 80062d6:	f7f9 ff29 	bl	800012c <__udivsi3>
 80062da:	0003      	movs	r3, r0
 80062dc:	001a      	movs	r2, r3
 80062de:	4b07      	ldr	r3, [pc, #28]	@ (80062fc <vPortSetupTimerInterrupt+0x40>)
 80062e0:	3a01      	subs	r2, #1
 80062e2:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT;
 80062e4:	4b02      	ldr	r3, [pc, #8]	@ (80062f0 <vPortSetupTimerInterrupt+0x34>)
 80062e6:	2207      	movs	r2, #7
 80062e8:	601a      	str	r2, [r3, #0]
}
 80062ea:	46c0      	nop			@ (mov r8, r8)
 80062ec:	46bd      	mov	sp, r7
 80062ee:	bd80      	pop	{r7, pc}
 80062f0:	e000e010 	.word	0xe000e010
 80062f4:	e000e018 	.word	0xe000e018
 80062f8:	200001a8 	.word	0x200001a8
 80062fc:	e000e014 	.word	0xe000e014

08006300 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006300:	b580      	push	{r7, lr}
 8006302:	b086      	sub	sp, #24
 8006304:	af00      	add	r7, sp, #0
 8006306:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006308:	2300      	movs	r3, #0
 800630a:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 800630c:	f7ff fc18 	bl	8005b40 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006310:	4b4d      	ldr	r3, [pc, #308]	@ (8006448 <pvPortMalloc+0x148>)
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	2b00      	cmp	r3, #0
 8006316:	d101      	bne.n	800631c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006318:	f000 f8f2 	bl	8006500 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800631c:	4b4b      	ldr	r3, [pc, #300]	@ (800644c <pvPortMalloc+0x14c>)
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	687a      	ldr	r2, [r7, #4]
 8006322:	4013      	ands	r3, r2
 8006324:	d000      	beq.n	8006328 <pvPortMalloc+0x28>
 8006326:	e080      	b.n	800642a <pvPortMalloc+0x12a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	2b00      	cmp	r3, #0
 800632c:	d013      	beq.n	8006356 <pvPortMalloc+0x56>
			{
				xWantedSize += xHeapStructSize;
 800632e:	2208      	movs	r2, #8
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	189b      	adds	r3, r3, r2
 8006334:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	2207      	movs	r2, #7
 800633a:	4013      	ands	r3, r2
 800633c:	d00b      	beq.n	8006356 <pvPortMalloc+0x56>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	2207      	movs	r2, #7
 8006342:	4393      	bics	r3, r2
 8006344:	3308      	adds	r3, #8
 8006346:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	2207      	movs	r2, #7
 800634c:	4013      	ands	r3, r2
 800634e:	d002      	beq.n	8006356 <pvPortMalloc+0x56>
 8006350:	b672      	cpsid	i
 8006352:	46c0      	nop			@ (mov r8, r8)
 8006354:	e7fd      	b.n	8006352 <pvPortMalloc+0x52>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	2b00      	cmp	r3, #0
 800635a:	d066      	beq.n	800642a <pvPortMalloc+0x12a>
 800635c:	4b3c      	ldr	r3, [pc, #240]	@ (8006450 <pvPortMalloc+0x150>)
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	687a      	ldr	r2, [r7, #4]
 8006362:	429a      	cmp	r2, r3
 8006364:	d861      	bhi.n	800642a <pvPortMalloc+0x12a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006366:	4b3b      	ldr	r3, [pc, #236]	@ (8006454 <pvPortMalloc+0x154>)
 8006368:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 800636a:	4b3a      	ldr	r3, [pc, #232]	@ (8006454 <pvPortMalloc+0x154>)
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006370:	e004      	b.n	800637c <pvPortMalloc+0x7c>
				{
					pxPreviousBlock = pxBlock;
 8006372:	697b      	ldr	r3, [r7, #20]
 8006374:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006376:	697b      	ldr	r3, [r7, #20]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800637c:	697b      	ldr	r3, [r7, #20]
 800637e:	685b      	ldr	r3, [r3, #4]
 8006380:	687a      	ldr	r2, [r7, #4]
 8006382:	429a      	cmp	r2, r3
 8006384:	d903      	bls.n	800638e <pvPortMalloc+0x8e>
 8006386:	697b      	ldr	r3, [r7, #20]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	2b00      	cmp	r3, #0
 800638c:	d1f1      	bne.n	8006372 <pvPortMalloc+0x72>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800638e:	4b2e      	ldr	r3, [pc, #184]	@ (8006448 <pvPortMalloc+0x148>)
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	697a      	ldr	r2, [r7, #20]
 8006394:	429a      	cmp	r2, r3
 8006396:	d048      	beq.n	800642a <pvPortMalloc+0x12a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006398:	693b      	ldr	r3, [r7, #16]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	2208      	movs	r2, #8
 800639e:	189b      	adds	r3, r3, r2
 80063a0:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80063a2:	697b      	ldr	r3, [r7, #20]
 80063a4:	681a      	ldr	r2, [r3, #0]
 80063a6:	693b      	ldr	r3, [r7, #16]
 80063a8:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80063aa:	697b      	ldr	r3, [r7, #20]
 80063ac:	685a      	ldr	r2, [r3, #4]
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	1ad2      	subs	r2, r2, r3
 80063b2:	2308      	movs	r3, #8
 80063b4:	005b      	lsls	r3, r3, #1
 80063b6:	429a      	cmp	r2, r3
 80063b8:	d917      	bls.n	80063ea <pvPortMalloc+0xea>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80063ba:	697a      	ldr	r2, [r7, #20]
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	18d3      	adds	r3, r2, r3
 80063c0:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80063c2:	68bb      	ldr	r3, [r7, #8]
 80063c4:	2207      	movs	r2, #7
 80063c6:	4013      	ands	r3, r2
 80063c8:	d002      	beq.n	80063d0 <pvPortMalloc+0xd0>
 80063ca:	b672      	cpsid	i
 80063cc:	46c0      	nop			@ (mov r8, r8)
 80063ce:	e7fd      	b.n	80063cc <pvPortMalloc+0xcc>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80063d0:	697b      	ldr	r3, [r7, #20]
 80063d2:	685a      	ldr	r2, [r3, #4]
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	1ad2      	subs	r2, r2, r3
 80063d8:	68bb      	ldr	r3, [r7, #8]
 80063da:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80063dc:	697b      	ldr	r3, [r7, #20]
 80063de:	687a      	ldr	r2, [r7, #4]
 80063e0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80063e2:	68bb      	ldr	r3, [r7, #8]
 80063e4:	0018      	movs	r0, r3
 80063e6:	f000 f8eb 	bl	80065c0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80063ea:	4b19      	ldr	r3, [pc, #100]	@ (8006450 <pvPortMalloc+0x150>)
 80063ec:	681a      	ldr	r2, [r3, #0]
 80063ee:	697b      	ldr	r3, [r7, #20]
 80063f0:	685b      	ldr	r3, [r3, #4]
 80063f2:	1ad2      	subs	r2, r2, r3
 80063f4:	4b16      	ldr	r3, [pc, #88]	@ (8006450 <pvPortMalloc+0x150>)
 80063f6:	601a      	str	r2, [r3, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80063f8:	4b15      	ldr	r3, [pc, #84]	@ (8006450 <pvPortMalloc+0x150>)
 80063fa:	681a      	ldr	r2, [r3, #0]
 80063fc:	4b16      	ldr	r3, [pc, #88]	@ (8006458 <pvPortMalloc+0x158>)
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	429a      	cmp	r2, r3
 8006402:	d203      	bcs.n	800640c <pvPortMalloc+0x10c>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006404:	4b12      	ldr	r3, [pc, #72]	@ (8006450 <pvPortMalloc+0x150>)
 8006406:	681a      	ldr	r2, [r3, #0]
 8006408:	4b13      	ldr	r3, [pc, #76]	@ (8006458 <pvPortMalloc+0x158>)
 800640a:	601a      	str	r2, [r3, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800640c:	697b      	ldr	r3, [r7, #20]
 800640e:	685a      	ldr	r2, [r3, #4]
 8006410:	4b0e      	ldr	r3, [pc, #56]	@ (800644c <pvPortMalloc+0x14c>)
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	431a      	orrs	r2, r3
 8006416:	697b      	ldr	r3, [r7, #20]
 8006418:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800641a:	697b      	ldr	r3, [r7, #20]
 800641c:	2200      	movs	r2, #0
 800641e:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006420:	4b0e      	ldr	r3, [pc, #56]	@ (800645c <pvPortMalloc+0x15c>)
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	1c5a      	adds	r2, r3, #1
 8006426:	4b0d      	ldr	r3, [pc, #52]	@ (800645c <pvPortMalloc+0x15c>)
 8006428:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800642a:	f7ff fb95 	bl	8005b58 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	2207      	movs	r2, #7
 8006432:	4013      	ands	r3, r2
 8006434:	d002      	beq.n	800643c <pvPortMalloc+0x13c>
 8006436:	b672      	cpsid	i
 8006438:	46c0      	nop			@ (mov r8, r8)
 800643a:	e7fd      	b.n	8006438 <pvPortMalloc+0x138>
	return pvReturn;
 800643c:	68fb      	ldr	r3, [r7, #12]
}
 800643e:	0018      	movs	r0, r3
 8006440:	46bd      	mov	sp, r7
 8006442:	b006      	add	sp, #24
 8006444:	bd80      	pop	{r7, pc}
 8006446:	46c0      	nop			@ (mov r8, r8)
 8006448:	20001128 	.word	0x20001128
 800644c:	2000113c 	.word	0x2000113c
 8006450:	2000112c 	.word	0x2000112c
 8006454:	20001120 	.word	0x20001120
 8006458:	20001130 	.word	0x20001130
 800645c:	20001134 	.word	0x20001134

08006460 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006460:	b580      	push	{r7, lr}
 8006462:	b084      	sub	sp, #16
 8006464:	af00      	add	r7, sp, #0
 8006466:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	2b00      	cmp	r3, #0
 8006470:	d03c      	beq.n	80064ec <vPortFree+0x8c>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006472:	2308      	movs	r3, #8
 8006474:	425b      	negs	r3, r3
 8006476:	68fa      	ldr	r2, [r7, #12]
 8006478:	18d3      	adds	r3, r2, r3
 800647a:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006480:	68bb      	ldr	r3, [r7, #8]
 8006482:	685a      	ldr	r2, [r3, #4]
 8006484:	4b1b      	ldr	r3, [pc, #108]	@ (80064f4 <vPortFree+0x94>)
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	4013      	ands	r3, r2
 800648a:	d102      	bne.n	8006492 <vPortFree+0x32>
 800648c:	b672      	cpsid	i
 800648e:	46c0      	nop			@ (mov r8, r8)
 8006490:	e7fd      	b.n	800648e <vPortFree+0x2e>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006492:	68bb      	ldr	r3, [r7, #8]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	2b00      	cmp	r3, #0
 8006498:	d002      	beq.n	80064a0 <vPortFree+0x40>
 800649a:	b672      	cpsid	i
 800649c:	46c0      	nop			@ (mov r8, r8)
 800649e:	e7fd      	b.n	800649c <vPortFree+0x3c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80064a0:	68bb      	ldr	r3, [r7, #8]
 80064a2:	685a      	ldr	r2, [r3, #4]
 80064a4:	4b13      	ldr	r3, [pc, #76]	@ (80064f4 <vPortFree+0x94>)
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	4013      	ands	r3, r2
 80064aa:	d01f      	beq.n	80064ec <vPortFree+0x8c>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80064ac:	68bb      	ldr	r3, [r7, #8]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d11b      	bne.n	80064ec <vPortFree+0x8c>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80064b4:	68bb      	ldr	r3, [r7, #8]
 80064b6:	685a      	ldr	r2, [r3, #4]
 80064b8:	4b0e      	ldr	r3, [pc, #56]	@ (80064f4 <vPortFree+0x94>)
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	43db      	mvns	r3, r3
 80064be:	401a      	ands	r2, r3
 80064c0:	68bb      	ldr	r3, [r7, #8]
 80064c2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80064c4:	f7ff fb3c 	bl	8005b40 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80064c8:	68bb      	ldr	r3, [r7, #8]
 80064ca:	685a      	ldr	r2, [r3, #4]
 80064cc:	4b0a      	ldr	r3, [pc, #40]	@ (80064f8 <vPortFree+0x98>)
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	18d2      	adds	r2, r2, r3
 80064d2:	4b09      	ldr	r3, [pc, #36]	@ (80064f8 <vPortFree+0x98>)
 80064d4:	601a      	str	r2, [r3, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80064d6:	68bb      	ldr	r3, [r7, #8]
 80064d8:	0018      	movs	r0, r3
 80064da:	f000 f871 	bl	80065c0 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80064de:	4b07      	ldr	r3, [pc, #28]	@ (80064fc <vPortFree+0x9c>)
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	1c5a      	adds	r2, r3, #1
 80064e4:	4b05      	ldr	r3, [pc, #20]	@ (80064fc <vPortFree+0x9c>)
 80064e6:	601a      	str	r2, [r3, #0]
				}
				( void ) xTaskResumeAll();
 80064e8:	f7ff fb36 	bl	8005b58 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80064ec:	46c0      	nop			@ (mov r8, r8)
 80064ee:	46bd      	mov	sp, r7
 80064f0:	b004      	add	sp, #16
 80064f2:	bd80      	pop	{r7, pc}
 80064f4:	2000113c 	.word	0x2000113c
 80064f8:	2000112c 	.word	0x2000112c
 80064fc:	20001138 	.word	0x20001138

08006500 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006500:	b580      	push	{r7, lr}
 8006502:	b084      	sub	sp, #16
 8006504:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006506:	23c0      	movs	r3, #192	@ 0xc0
 8006508:	011b      	lsls	r3, r3, #4
 800650a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800650c:	4b26      	ldr	r3, [pc, #152]	@ (80065a8 <prvHeapInit+0xa8>)
 800650e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	2207      	movs	r2, #7
 8006514:	4013      	ands	r3, r2
 8006516:	d00c      	beq.n	8006532 <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	3307      	adds	r3, #7
 800651c:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	2207      	movs	r2, #7
 8006522:	4393      	bics	r3, r2
 8006524:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006526:	68ba      	ldr	r2, [r7, #8]
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	1ad2      	subs	r2, r2, r3
 800652c:	4b1e      	ldr	r3, [pc, #120]	@ (80065a8 <prvHeapInit+0xa8>)
 800652e:	18d3      	adds	r3, r2, r3
 8006530:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006536:	4b1d      	ldr	r3, [pc, #116]	@ (80065ac <prvHeapInit+0xac>)
 8006538:	687a      	ldr	r2, [r7, #4]
 800653a:	601a      	str	r2, [r3, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800653c:	4b1b      	ldr	r3, [pc, #108]	@ (80065ac <prvHeapInit+0xac>)
 800653e:	2200      	movs	r2, #0
 8006540:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	68ba      	ldr	r2, [r7, #8]
 8006546:	18d3      	adds	r3, r2, r3
 8006548:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800654a:	2208      	movs	r2, #8
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	1a9b      	subs	r3, r3, r2
 8006550:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	2207      	movs	r2, #7
 8006556:	4393      	bics	r3, r2
 8006558:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800655a:	68fa      	ldr	r2, [r7, #12]
 800655c:	4b14      	ldr	r3, [pc, #80]	@ (80065b0 <prvHeapInit+0xb0>)
 800655e:	601a      	str	r2, [r3, #0]
	pxEnd->xBlockSize = 0;
 8006560:	4b13      	ldr	r3, [pc, #76]	@ (80065b0 <prvHeapInit+0xb0>)
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	2200      	movs	r2, #0
 8006566:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006568:	4b11      	ldr	r3, [pc, #68]	@ (80065b0 <prvHeapInit+0xb0>)
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	2200      	movs	r2, #0
 800656e:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006574:	683b      	ldr	r3, [r7, #0]
 8006576:	68fa      	ldr	r2, [r7, #12]
 8006578:	1ad2      	subs	r2, r2, r3
 800657a:	683b      	ldr	r3, [r7, #0]
 800657c:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800657e:	4b0c      	ldr	r3, [pc, #48]	@ (80065b0 <prvHeapInit+0xb0>)
 8006580:	681a      	ldr	r2, [r3, #0]
 8006582:	683b      	ldr	r3, [r7, #0]
 8006584:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006586:	683b      	ldr	r3, [r7, #0]
 8006588:	685a      	ldr	r2, [r3, #4]
 800658a:	4b0a      	ldr	r3, [pc, #40]	@ (80065b4 <prvHeapInit+0xb4>)
 800658c:	601a      	str	r2, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800658e:	683b      	ldr	r3, [r7, #0]
 8006590:	685a      	ldr	r2, [r3, #4]
 8006592:	4b09      	ldr	r3, [pc, #36]	@ (80065b8 <prvHeapInit+0xb8>)
 8006594:	601a      	str	r2, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006596:	4b09      	ldr	r3, [pc, #36]	@ (80065bc <prvHeapInit+0xbc>)
 8006598:	2280      	movs	r2, #128	@ 0x80
 800659a:	0612      	lsls	r2, r2, #24
 800659c:	601a      	str	r2, [r3, #0]
}
 800659e:	46c0      	nop			@ (mov r8, r8)
 80065a0:	46bd      	mov	sp, r7
 80065a2:	b004      	add	sp, #16
 80065a4:	bd80      	pop	{r7, pc}
 80065a6:	46c0      	nop			@ (mov r8, r8)
 80065a8:	20000520 	.word	0x20000520
 80065ac:	20001120 	.word	0x20001120
 80065b0:	20001128 	.word	0x20001128
 80065b4:	20001130 	.word	0x20001130
 80065b8:	2000112c 	.word	0x2000112c
 80065bc:	2000113c 	.word	0x2000113c

080065c0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80065c0:	b580      	push	{r7, lr}
 80065c2:	b084      	sub	sp, #16
 80065c4:	af00      	add	r7, sp, #0
 80065c6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80065c8:	4b27      	ldr	r3, [pc, #156]	@ (8006668 <prvInsertBlockIntoFreeList+0xa8>)
 80065ca:	60fb      	str	r3, [r7, #12]
 80065cc:	e002      	b.n	80065d4 <prvInsertBlockIntoFreeList+0x14>
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	60fb      	str	r3, [r7, #12]
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	687a      	ldr	r2, [r7, #4]
 80065da:	429a      	cmp	r2, r3
 80065dc:	d8f7      	bhi.n	80065ce <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	685b      	ldr	r3, [r3, #4]
 80065e6:	68ba      	ldr	r2, [r7, #8]
 80065e8:	18d3      	adds	r3, r2, r3
 80065ea:	687a      	ldr	r2, [r7, #4]
 80065ec:	429a      	cmp	r2, r3
 80065ee:	d108      	bne.n	8006602 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	685a      	ldr	r2, [r3, #4]
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	685b      	ldr	r3, [r3, #4]
 80065f8:	18d2      	adds	r2, r2, r3
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	685b      	ldr	r3, [r3, #4]
 800660a:	68ba      	ldr	r2, [r7, #8]
 800660c:	18d2      	adds	r2, r2, r3
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	429a      	cmp	r2, r3
 8006614:	d118      	bne.n	8006648 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	681a      	ldr	r2, [r3, #0]
 800661a:	4b14      	ldr	r3, [pc, #80]	@ (800666c <prvInsertBlockIntoFreeList+0xac>)
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	429a      	cmp	r2, r3
 8006620:	d00d      	beq.n	800663e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	685a      	ldr	r2, [r3, #4]
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	685b      	ldr	r3, [r3, #4]
 800662c:	18d2      	adds	r2, r2, r3
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	681a      	ldr	r2, [r3, #0]
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	601a      	str	r2, [r3, #0]
 800663c:	e008      	b.n	8006650 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800663e:	4b0b      	ldr	r3, [pc, #44]	@ (800666c <prvInsertBlockIntoFreeList+0xac>)
 8006640:	681a      	ldr	r2, [r3, #0]
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	601a      	str	r2, [r3, #0]
 8006646:	e003      	b.n	8006650 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	681a      	ldr	r2, [r3, #0]
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006650:	68fa      	ldr	r2, [r7, #12]
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	429a      	cmp	r2, r3
 8006656:	d002      	beq.n	800665e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	687a      	ldr	r2, [r7, #4]
 800665c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800665e:	46c0      	nop			@ (mov r8, r8)
 8006660:	46bd      	mov	sp, r7
 8006662:	b004      	add	sp, #16
 8006664:	bd80      	pop	{r7, pc}
 8006666:	46c0      	nop			@ (mov r8, r8)
 8006668:	20001120 	.word	0x20001120
 800666c:	20001128 	.word	0x20001128

08006670 <siprintf>:
 8006670:	b40e      	push	{r1, r2, r3}
 8006672:	b500      	push	{lr}
 8006674:	490b      	ldr	r1, [pc, #44]	@ (80066a4 <siprintf+0x34>)
 8006676:	b09c      	sub	sp, #112	@ 0x70
 8006678:	ab1d      	add	r3, sp, #116	@ 0x74
 800667a:	9002      	str	r0, [sp, #8]
 800667c:	9006      	str	r0, [sp, #24]
 800667e:	9107      	str	r1, [sp, #28]
 8006680:	9104      	str	r1, [sp, #16]
 8006682:	4809      	ldr	r0, [pc, #36]	@ (80066a8 <siprintf+0x38>)
 8006684:	4909      	ldr	r1, [pc, #36]	@ (80066ac <siprintf+0x3c>)
 8006686:	cb04      	ldmia	r3!, {r2}
 8006688:	9105      	str	r1, [sp, #20]
 800668a:	6800      	ldr	r0, [r0, #0]
 800668c:	a902      	add	r1, sp, #8
 800668e:	9301      	str	r3, [sp, #4]
 8006690:	f000 fa08 	bl	8006aa4 <_svfiprintf_r>
 8006694:	2200      	movs	r2, #0
 8006696:	9b02      	ldr	r3, [sp, #8]
 8006698:	701a      	strb	r2, [r3, #0]
 800669a:	b01c      	add	sp, #112	@ 0x70
 800669c:	bc08      	pop	{r3}
 800669e:	b003      	add	sp, #12
 80066a0:	4718      	bx	r3
 80066a2:	46c0      	nop			@ (mov r8, r8)
 80066a4:	7fffffff 	.word	0x7fffffff
 80066a8:	200001b8 	.word	0x200001b8
 80066ac:	ffff0208 	.word	0xffff0208

080066b0 <memset>:
 80066b0:	0003      	movs	r3, r0
 80066b2:	1882      	adds	r2, r0, r2
 80066b4:	4293      	cmp	r3, r2
 80066b6:	d100      	bne.n	80066ba <memset+0xa>
 80066b8:	4770      	bx	lr
 80066ba:	7019      	strb	r1, [r3, #0]
 80066bc:	3301      	adds	r3, #1
 80066be:	e7f9      	b.n	80066b4 <memset+0x4>

080066c0 <_reclaim_reent>:
 80066c0:	4b2e      	ldr	r3, [pc, #184]	@ (800677c <_reclaim_reent+0xbc>)
 80066c2:	b570      	push	{r4, r5, r6, lr}
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	0004      	movs	r4, r0
 80066c8:	4283      	cmp	r3, r0
 80066ca:	d04f      	beq.n	800676c <_reclaim_reent+0xac>
 80066cc:	69c3      	ldr	r3, [r0, #28]
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d017      	beq.n	8006702 <_reclaim_reent+0x42>
 80066d2:	68db      	ldr	r3, [r3, #12]
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d00d      	beq.n	80066f4 <_reclaim_reent+0x34>
 80066d8:	2500      	movs	r5, #0
 80066da:	69e3      	ldr	r3, [r4, #28]
 80066dc:	68db      	ldr	r3, [r3, #12]
 80066de:	5959      	ldr	r1, [r3, r5]
 80066e0:	2900      	cmp	r1, #0
 80066e2:	d144      	bne.n	800676e <_reclaim_reent+0xae>
 80066e4:	3504      	adds	r5, #4
 80066e6:	2d80      	cmp	r5, #128	@ 0x80
 80066e8:	d1f7      	bne.n	80066da <_reclaim_reent+0x1a>
 80066ea:	69e3      	ldr	r3, [r4, #28]
 80066ec:	0020      	movs	r0, r4
 80066ee:	68d9      	ldr	r1, [r3, #12]
 80066f0:	f000 f87c 	bl	80067ec <_free_r>
 80066f4:	69e3      	ldr	r3, [r4, #28]
 80066f6:	6819      	ldr	r1, [r3, #0]
 80066f8:	2900      	cmp	r1, #0
 80066fa:	d002      	beq.n	8006702 <_reclaim_reent+0x42>
 80066fc:	0020      	movs	r0, r4
 80066fe:	f000 f875 	bl	80067ec <_free_r>
 8006702:	6961      	ldr	r1, [r4, #20]
 8006704:	2900      	cmp	r1, #0
 8006706:	d002      	beq.n	800670e <_reclaim_reent+0x4e>
 8006708:	0020      	movs	r0, r4
 800670a:	f000 f86f 	bl	80067ec <_free_r>
 800670e:	69e1      	ldr	r1, [r4, #28]
 8006710:	2900      	cmp	r1, #0
 8006712:	d002      	beq.n	800671a <_reclaim_reent+0x5a>
 8006714:	0020      	movs	r0, r4
 8006716:	f000 f869 	bl	80067ec <_free_r>
 800671a:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800671c:	2900      	cmp	r1, #0
 800671e:	d002      	beq.n	8006726 <_reclaim_reent+0x66>
 8006720:	0020      	movs	r0, r4
 8006722:	f000 f863 	bl	80067ec <_free_r>
 8006726:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006728:	2900      	cmp	r1, #0
 800672a:	d002      	beq.n	8006732 <_reclaim_reent+0x72>
 800672c:	0020      	movs	r0, r4
 800672e:	f000 f85d 	bl	80067ec <_free_r>
 8006732:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8006734:	2900      	cmp	r1, #0
 8006736:	d002      	beq.n	800673e <_reclaim_reent+0x7e>
 8006738:	0020      	movs	r0, r4
 800673a:	f000 f857 	bl	80067ec <_free_r>
 800673e:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8006740:	2900      	cmp	r1, #0
 8006742:	d002      	beq.n	800674a <_reclaim_reent+0x8a>
 8006744:	0020      	movs	r0, r4
 8006746:	f000 f851 	bl	80067ec <_free_r>
 800674a:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800674c:	2900      	cmp	r1, #0
 800674e:	d002      	beq.n	8006756 <_reclaim_reent+0x96>
 8006750:	0020      	movs	r0, r4
 8006752:	f000 f84b 	bl	80067ec <_free_r>
 8006756:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8006758:	2900      	cmp	r1, #0
 800675a:	d002      	beq.n	8006762 <_reclaim_reent+0xa2>
 800675c:	0020      	movs	r0, r4
 800675e:	f000 f845 	bl	80067ec <_free_r>
 8006762:	6a23      	ldr	r3, [r4, #32]
 8006764:	2b00      	cmp	r3, #0
 8006766:	d001      	beq.n	800676c <_reclaim_reent+0xac>
 8006768:	0020      	movs	r0, r4
 800676a:	4798      	blx	r3
 800676c:	bd70      	pop	{r4, r5, r6, pc}
 800676e:	680e      	ldr	r6, [r1, #0]
 8006770:	0020      	movs	r0, r4
 8006772:	f000 f83b 	bl	80067ec <_free_r>
 8006776:	0031      	movs	r1, r6
 8006778:	e7b2      	b.n	80066e0 <_reclaim_reent+0x20>
 800677a:	46c0      	nop			@ (mov r8, r8)
 800677c:	200001b8 	.word	0x200001b8

08006780 <__errno>:
 8006780:	4b01      	ldr	r3, [pc, #4]	@ (8006788 <__errno+0x8>)
 8006782:	6818      	ldr	r0, [r3, #0]
 8006784:	4770      	bx	lr
 8006786:	46c0      	nop			@ (mov r8, r8)
 8006788:	200001b8 	.word	0x200001b8

0800678c <__libc_init_array>:
 800678c:	b570      	push	{r4, r5, r6, lr}
 800678e:	2600      	movs	r6, #0
 8006790:	4c0c      	ldr	r4, [pc, #48]	@ (80067c4 <__libc_init_array+0x38>)
 8006792:	4d0d      	ldr	r5, [pc, #52]	@ (80067c8 <__libc_init_array+0x3c>)
 8006794:	1b64      	subs	r4, r4, r5
 8006796:	10a4      	asrs	r4, r4, #2
 8006798:	42a6      	cmp	r6, r4
 800679a:	d109      	bne.n	80067b0 <__libc_init_array+0x24>
 800679c:	2600      	movs	r6, #0
 800679e:	f000 fc65 	bl	800706c <_init>
 80067a2:	4c0a      	ldr	r4, [pc, #40]	@ (80067cc <__libc_init_array+0x40>)
 80067a4:	4d0a      	ldr	r5, [pc, #40]	@ (80067d0 <__libc_init_array+0x44>)
 80067a6:	1b64      	subs	r4, r4, r5
 80067a8:	10a4      	asrs	r4, r4, #2
 80067aa:	42a6      	cmp	r6, r4
 80067ac:	d105      	bne.n	80067ba <__libc_init_array+0x2e>
 80067ae:	bd70      	pop	{r4, r5, r6, pc}
 80067b0:	00b3      	lsls	r3, r6, #2
 80067b2:	58eb      	ldr	r3, [r5, r3]
 80067b4:	4798      	blx	r3
 80067b6:	3601      	adds	r6, #1
 80067b8:	e7ee      	b.n	8006798 <__libc_init_array+0xc>
 80067ba:	00b3      	lsls	r3, r6, #2
 80067bc:	58eb      	ldr	r3, [r5, r3]
 80067be:	4798      	blx	r3
 80067c0:	3601      	adds	r6, #1
 80067c2:	e7f2      	b.n	80067aa <__libc_init_array+0x1e>
 80067c4:	080071e0 	.word	0x080071e0
 80067c8:	080071e0 	.word	0x080071e0
 80067cc:	080071e4 	.word	0x080071e4
 80067d0:	080071e0 	.word	0x080071e0

080067d4 <__retarget_lock_acquire_recursive>:
 80067d4:	4770      	bx	lr

080067d6 <__retarget_lock_release_recursive>:
 80067d6:	4770      	bx	lr

080067d8 <memcpy>:
 80067d8:	2300      	movs	r3, #0
 80067da:	b510      	push	{r4, lr}
 80067dc:	429a      	cmp	r2, r3
 80067de:	d100      	bne.n	80067e2 <memcpy+0xa>
 80067e0:	bd10      	pop	{r4, pc}
 80067e2:	5ccc      	ldrb	r4, [r1, r3]
 80067e4:	54c4      	strb	r4, [r0, r3]
 80067e6:	3301      	adds	r3, #1
 80067e8:	e7f8      	b.n	80067dc <memcpy+0x4>
	...

080067ec <_free_r>:
 80067ec:	b570      	push	{r4, r5, r6, lr}
 80067ee:	0005      	movs	r5, r0
 80067f0:	1e0c      	subs	r4, r1, #0
 80067f2:	d010      	beq.n	8006816 <_free_r+0x2a>
 80067f4:	3c04      	subs	r4, #4
 80067f6:	6823      	ldr	r3, [r4, #0]
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	da00      	bge.n	80067fe <_free_r+0x12>
 80067fc:	18e4      	adds	r4, r4, r3
 80067fe:	0028      	movs	r0, r5
 8006800:	f000 f8e0 	bl	80069c4 <__malloc_lock>
 8006804:	4a1d      	ldr	r2, [pc, #116]	@ (800687c <_free_r+0x90>)
 8006806:	6813      	ldr	r3, [r2, #0]
 8006808:	2b00      	cmp	r3, #0
 800680a:	d105      	bne.n	8006818 <_free_r+0x2c>
 800680c:	6063      	str	r3, [r4, #4]
 800680e:	6014      	str	r4, [r2, #0]
 8006810:	0028      	movs	r0, r5
 8006812:	f000 f8df 	bl	80069d4 <__malloc_unlock>
 8006816:	bd70      	pop	{r4, r5, r6, pc}
 8006818:	42a3      	cmp	r3, r4
 800681a:	d908      	bls.n	800682e <_free_r+0x42>
 800681c:	6820      	ldr	r0, [r4, #0]
 800681e:	1821      	adds	r1, r4, r0
 8006820:	428b      	cmp	r3, r1
 8006822:	d1f3      	bne.n	800680c <_free_r+0x20>
 8006824:	6819      	ldr	r1, [r3, #0]
 8006826:	685b      	ldr	r3, [r3, #4]
 8006828:	1809      	adds	r1, r1, r0
 800682a:	6021      	str	r1, [r4, #0]
 800682c:	e7ee      	b.n	800680c <_free_r+0x20>
 800682e:	001a      	movs	r2, r3
 8006830:	685b      	ldr	r3, [r3, #4]
 8006832:	2b00      	cmp	r3, #0
 8006834:	d001      	beq.n	800683a <_free_r+0x4e>
 8006836:	42a3      	cmp	r3, r4
 8006838:	d9f9      	bls.n	800682e <_free_r+0x42>
 800683a:	6811      	ldr	r1, [r2, #0]
 800683c:	1850      	adds	r0, r2, r1
 800683e:	42a0      	cmp	r0, r4
 8006840:	d10b      	bne.n	800685a <_free_r+0x6e>
 8006842:	6820      	ldr	r0, [r4, #0]
 8006844:	1809      	adds	r1, r1, r0
 8006846:	1850      	adds	r0, r2, r1
 8006848:	6011      	str	r1, [r2, #0]
 800684a:	4283      	cmp	r3, r0
 800684c:	d1e0      	bne.n	8006810 <_free_r+0x24>
 800684e:	6818      	ldr	r0, [r3, #0]
 8006850:	685b      	ldr	r3, [r3, #4]
 8006852:	1841      	adds	r1, r0, r1
 8006854:	6011      	str	r1, [r2, #0]
 8006856:	6053      	str	r3, [r2, #4]
 8006858:	e7da      	b.n	8006810 <_free_r+0x24>
 800685a:	42a0      	cmp	r0, r4
 800685c:	d902      	bls.n	8006864 <_free_r+0x78>
 800685e:	230c      	movs	r3, #12
 8006860:	602b      	str	r3, [r5, #0]
 8006862:	e7d5      	b.n	8006810 <_free_r+0x24>
 8006864:	6820      	ldr	r0, [r4, #0]
 8006866:	1821      	adds	r1, r4, r0
 8006868:	428b      	cmp	r3, r1
 800686a:	d103      	bne.n	8006874 <_free_r+0x88>
 800686c:	6819      	ldr	r1, [r3, #0]
 800686e:	685b      	ldr	r3, [r3, #4]
 8006870:	1809      	adds	r1, r1, r0
 8006872:	6021      	str	r1, [r4, #0]
 8006874:	6063      	str	r3, [r4, #4]
 8006876:	6054      	str	r4, [r2, #4]
 8006878:	e7ca      	b.n	8006810 <_free_r+0x24>
 800687a:	46c0      	nop			@ (mov r8, r8)
 800687c:	20001284 	.word	0x20001284

08006880 <sbrk_aligned>:
 8006880:	b570      	push	{r4, r5, r6, lr}
 8006882:	4e0f      	ldr	r6, [pc, #60]	@ (80068c0 <sbrk_aligned+0x40>)
 8006884:	000d      	movs	r5, r1
 8006886:	6831      	ldr	r1, [r6, #0]
 8006888:	0004      	movs	r4, r0
 800688a:	2900      	cmp	r1, #0
 800688c:	d102      	bne.n	8006894 <sbrk_aligned+0x14>
 800688e:	f000 fb99 	bl	8006fc4 <_sbrk_r>
 8006892:	6030      	str	r0, [r6, #0]
 8006894:	0029      	movs	r1, r5
 8006896:	0020      	movs	r0, r4
 8006898:	f000 fb94 	bl	8006fc4 <_sbrk_r>
 800689c:	1c43      	adds	r3, r0, #1
 800689e:	d103      	bne.n	80068a8 <sbrk_aligned+0x28>
 80068a0:	2501      	movs	r5, #1
 80068a2:	426d      	negs	r5, r5
 80068a4:	0028      	movs	r0, r5
 80068a6:	bd70      	pop	{r4, r5, r6, pc}
 80068a8:	2303      	movs	r3, #3
 80068aa:	1cc5      	adds	r5, r0, #3
 80068ac:	439d      	bics	r5, r3
 80068ae:	42a8      	cmp	r0, r5
 80068b0:	d0f8      	beq.n	80068a4 <sbrk_aligned+0x24>
 80068b2:	1a29      	subs	r1, r5, r0
 80068b4:	0020      	movs	r0, r4
 80068b6:	f000 fb85 	bl	8006fc4 <_sbrk_r>
 80068ba:	3001      	adds	r0, #1
 80068bc:	d1f2      	bne.n	80068a4 <sbrk_aligned+0x24>
 80068be:	e7ef      	b.n	80068a0 <sbrk_aligned+0x20>
 80068c0:	20001280 	.word	0x20001280

080068c4 <_malloc_r>:
 80068c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80068c6:	2203      	movs	r2, #3
 80068c8:	1ccb      	adds	r3, r1, #3
 80068ca:	4393      	bics	r3, r2
 80068cc:	3308      	adds	r3, #8
 80068ce:	0005      	movs	r5, r0
 80068d0:	001f      	movs	r7, r3
 80068d2:	2b0c      	cmp	r3, #12
 80068d4:	d234      	bcs.n	8006940 <_malloc_r+0x7c>
 80068d6:	270c      	movs	r7, #12
 80068d8:	42b9      	cmp	r1, r7
 80068da:	d833      	bhi.n	8006944 <_malloc_r+0x80>
 80068dc:	0028      	movs	r0, r5
 80068de:	f000 f871 	bl	80069c4 <__malloc_lock>
 80068e2:	4e37      	ldr	r6, [pc, #220]	@ (80069c0 <_malloc_r+0xfc>)
 80068e4:	6833      	ldr	r3, [r6, #0]
 80068e6:	001c      	movs	r4, r3
 80068e8:	2c00      	cmp	r4, #0
 80068ea:	d12f      	bne.n	800694c <_malloc_r+0x88>
 80068ec:	0039      	movs	r1, r7
 80068ee:	0028      	movs	r0, r5
 80068f0:	f7ff ffc6 	bl	8006880 <sbrk_aligned>
 80068f4:	0004      	movs	r4, r0
 80068f6:	1c43      	adds	r3, r0, #1
 80068f8:	d15f      	bne.n	80069ba <_malloc_r+0xf6>
 80068fa:	6834      	ldr	r4, [r6, #0]
 80068fc:	9400      	str	r4, [sp, #0]
 80068fe:	9b00      	ldr	r3, [sp, #0]
 8006900:	2b00      	cmp	r3, #0
 8006902:	d14a      	bne.n	800699a <_malloc_r+0xd6>
 8006904:	2c00      	cmp	r4, #0
 8006906:	d052      	beq.n	80069ae <_malloc_r+0xea>
 8006908:	6823      	ldr	r3, [r4, #0]
 800690a:	0028      	movs	r0, r5
 800690c:	18e3      	adds	r3, r4, r3
 800690e:	9900      	ldr	r1, [sp, #0]
 8006910:	9301      	str	r3, [sp, #4]
 8006912:	f000 fb57 	bl	8006fc4 <_sbrk_r>
 8006916:	9b01      	ldr	r3, [sp, #4]
 8006918:	4283      	cmp	r3, r0
 800691a:	d148      	bne.n	80069ae <_malloc_r+0xea>
 800691c:	6823      	ldr	r3, [r4, #0]
 800691e:	0028      	movs	r0, r5
 8006920:	1aff      	subs	r7, r7, r3
 8006922:	0039      	movs	r1, r7
 8006924:	f7ff ffac 	bl	8006880 <sbrk_aligned>
 8006928:	3001      	adds	r0, #1
 800692a:	d040      	beq.n	80069ae <_malloc_r+0xea>
 800692c:	6823      	ldr	r3, [r4, #0]
 800692e:	19db      	adds	r3, r3, r7
 8006930:	6023      	str	r3, [r4, #0]
 8006932:	6833      	ldr	r3, [r6, #0]
 8006934:	685a      	ldr	r2, [r3, #4]
 8006936:	2a00      	cmp	r2, #0
 8006938:	d133      	bne.n	80069a2 <_malloc_r+0xde>
 800693a:	9b00      	ldr	r3, [sp, #0]
 800693c:	6033      	str	r3, [r6, #0]
 800693e:	e019      	b.n	8006974 <_malloc_r+0xb0>
 8006940:	2b00      	cmp	r3, #0
 8006942:	dac9      	bge.n	80068d8 <_malloc_r+0x14>
 8006944:	230c      	movs	r3, #12
 8006946:	602b      	str	r3, [r5, #0]
 8006948:	2000      	movs	r0, #0
 800694a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800694c:	6821      	ldr	r1, [r4, #0]
 800694e:	1bc9      	subs	r1, r1, r7
 8006950:	d420      	bmi.n	8006994 <_malloc_r+0xd0>
 8006952:	290b      	cmp	r1, #11
 8006954:	d90a      	bls.n	800696c <_malloc_r+0xa8>
 8006956:	19e2      	adds	r2, r4, r7
 8006958:	6027      	str	r7, [r4, #0]
 800695a:	42a3      	cmp	r3, r4
 800695c:	d104      	bne.n	8006968 <_malloc_r+0xa4>
 800695e:	6032      	str	r2, [r6, #0]
 8006960:	6863      	ldr	r3, [r4, #4]
 8006962:	6011      	str	r1, [r2, #0]
 8006964:	6053      	str	r3, [r2, #4]
 8006966:	e005      	b.n	8006974 <_malloc_r+0xb0>
 8006968:	605a      	str	r2, [r3, #4]
 800696a:	e7f9      	b.n	8006960 <_malloc_r+0x9c>
 800696c:	6862      	ldr	r2, [r4, #4]
 800696e:	42a3      	cmp	r3, r4
 8006970:	d10e      	bne.n	8006990 <_malloc_r+0xcc>
 8006972:	6032      	str	r2, [r6, #0]
 8006974:	0028      	movs	r0, r5
 8006976:	f000 f82d 	bl	80069d4 <__malloc_unlock>
 800697a:	0020      	movs	r0, r4
 800697c:	2207      	movs	r2, #7
 800697e:	300b      	adds	r0, #11
 8006980:	1d23      	adds	r3, r4, #4
 8006982:	4390      	bics	r0, r2
 8006984:	1ac2      	subs	r2, r0, r3
 8006986:	4298      	cmp	r0, r3
 8006988:	d0df      	beq.n	800694a <_malloc_r+0x86>
 800698a:	1a1b      	subs	r3, r3, r0
 800698c:	50a3      	str	r3, [r4, r2]
 800698e:	e7dc      	b.n	800694a <_malloc_r+0x86>
 8006990:	605a      	str	r2, [r3, #4]
 8006992:	e7ef      	b.n	8006974 <_malloc_r+0xb0>
 8006994:	0023      	movs	r3, r4
 8006996:	6864      	ldr	r4, [r4, #4]
 8006998:	e7a6      	b.n	80068e8 <_malloc_r+0x24>
 800699a:	9c00      	ldr	r4, [sp, #0]
 800699c:	6863      	ldr	r3, [r4, #4]
 800699e:	9300      	str	r3, [sp, #0]
 80069a0:	e7ad      	b.n	80068fe <_malloc_r+0x3a>
 80069a2:	001a      	movs	r2, r3
 80069a4:	685b      	ldr	r3, [r3, #4]
 80069a6:	42a3      	cmp	r3, r4
 80069a8:	d1fb      	bne.n	80069a2 <_malloc_r+0xde>
 80069aa:	2300      	movs	r3, #0
 80069ac:	e7da      	b.n	8006964 <_malloc_r+0xa0>
 80069ae:	230c      	movs	r3, #12
 80069b0:	0028      	movs	r0, r5
 80069b2:	602b      	str	r3, [r5, #0]
 80069b4:	f000 f80e 	bl	80069d4 <__malloc_unlock>
 80069b8:	e7c6      	b.n	8006948 <_malloc_r+0x84>
 80069ba:	6007      	str	r7, [r0, #0]
 80069bc:	e7da      	b.n	8006974 <_malloc_r+0xb0>
 80069be:	46c0      	nop			@ (mov r8, r8)
 80069c0:	20001284 	.word	0x20001284

080069c4 <__malloc_lock>:
 80069c4:	b510      	push	{r4, lr}
 80069c6:	4802      	ldr	r0, [pc, #8]	@ (80069d0 <__malloc_lock+0xc>)
 80069c8:	f7ff ff04 	bl	80067d4 <__retarget_lock_acquire_recursive>
 80069cc:	bd10      	pop	{r4, pc}
 80069ce:	46c0      	nop			@ (mov r8, r8)
 80069d0:	2000127c 	.word	0x2000127c

080069d4 <__malloc_unlock>:
 80069d4:	b510      	push	{r4, lr}
 80069d6:	4802      	ldr	r0, [pc, #8]	@ (80069e0 <__malloc_unlock+0xc>)
 80069d8:	f7ff fefd 	bl	80067d6 <__retarget_lock_release_recursive>
 80069dc:	bd10      	pop	{r4, pc}
 80069de:	46c0      	nop			@ (mov r8, r8)
 80069e0:	2000127c 	.word	0x2000127c

080069e4 <__ssputs_r>:
 80069e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80069e6:	688e      	ldr	r6, [r1, #8]
 80069e8:	b085      	sub	sp, #20
 80069ea:	001f      	movs	r7, r3
 80069ec:	000c      	movs	r4, r1
 80069ee:	680b      	ldr	r3, [r1, #0]
 80069f0:	9002      	str	r0, [sp, #8]
 80069f2:	9203      	str	r2, [sp, #12]
 80069f4:	42be      	cmp	r6, r7
 80069f6:	d830      	bhi.n	8006a5a <__ssputs_r+0x76>
 80069f8:	210c      	movs	r1, #12
 80069fa:	5e62      	ldrsh	r2, [r4, r1]
 80069fc:	2190      	movs	r1, #144	@ 0x90
 80069fe:	00c9      	lsls	r1, r1, #3
 8006a00:	420a      	tst	r2, r1
 8006a02:	d028      	beq.n	8006a56 <__ssputs_r+0x72>
 8006a04:	2003      	movs	r0, #3
 8006a06:	6921      	ldr	r1, [r4, #16]
 8006a08:	1a5b      	subs	r3, r3, r1
 8006a0a:	9301      	str	r3, [sp, #4]
 8006a0c:	6963      	ldr	r3, [r4, #20]
 8006a0e:	4343      	muls	r3, r0
 8006a10:	9801      	ldr	r0, [sp, #4]
 8006a12:	0fdd      	lsrs	r5, r3, #31
 8006a14:	18ed      	adds	r5, r5, r3
 8006a16:	1c7b      	adds	r3, r7, #1
 8006a18:	181b      	adds	r3, r3, r0
 8006a1a:	106d      	asrs	r5, r5, #1
 8006a1c:	42ab      	cmp	r3, r5
 8006a1e:	d900      	bls.n	8006a22 <__ssputs_r+0x3e>
 8006a20:	001d      	movs	r5, r3
 8006a22:	0552      	lsls	r2, r2, #21
 8006a24:	d528      	bpl.n	8006a78 <__ssputs_r+0x94>
 8006a26:	0029      	movs	r1, r5
 8006a28:	9802      	ldr	r0, [sp, #8]
 8006a2a:	f7ff ff4b 	bl	80068c4 <_malloc_r>
 8006a2e:	1e06      	subs	r6, r0, #0
 8006a30:	d02c      	beq.n	8006a8c <__ssputs_r+0xa8>
 8006a32:	9a01      	ldr	r2, [sp, #4]
 8006a34:	6921      	ldr	r1, [r4, #16]
 8006a36:	f7ff fecf 	bl	80067d8 <memcpy>
 8006a3a:	89a2      	ldrh	r2, [r4, #12]
 8006a3c:	4b18      	ldr	r3, [pc, #96]	@ (8006aa0 <__ssputs_r+0xbc>)
 8006a3e:	401a      	ands	r2, r3
 8006a40:	2380      	movs	r3, #128	@ 0x80
 8006a42:	4313      	orrs	r3, r2
 8006a44:	81a3      	strh	r3, [r4, #12]
 8006a46:	9b01      	ldr	r3, [sp, #4]
 8006a48:	6126      	str	r6, [r4, #16]
 8006a4a:	18f6      	adds	r6, r6, r3
 8006a4c:	6026      	str	r6, [r4, #0]
 8006a4e:	003e      	movs	r6, r7
 8006a50:	6165      	str	r5, [r4, #20]
 8006a52:	1aed      	subs	r5, r5, r3
 8006a54:	60a5      	str	r5, [r4, #8]
 8006a56:	42be      	cmp	r6, r7
 8006a58:	d900      	bls.n	8006a5c <__ssputs_r+0x78>
 8006a5a:	003e      	movs	r6, r7
 8006a5c:	0032      	movs	r2, r6
 8006a5e:	9903      	ldr	r1, [sp, #12]
 8006a60:	6820      	ldr	r0, [r4, #0]
 8006a62:	f000 fa9b 	bl	8006f9c <memmove>
 8006a66:	2000      	movs	r0, #0
 8006a68:	68a3      	ldr	r3, [r4, #8]
 8006a6a:	1b9b      	subs	r3, r3, r6
 8006a6c:	60a3      	str	r3, [r4, #8]
 8006a6e:	6823      	ldr	r3, [r4, #0]
 8006a70:	199b      	adds	r3, r3, r6
 8006a72:	6023      	str	r3, [r4, #0]
 8006a74:	b005      	add	sp, #20
 8006a76:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006a78:	002a      	movs	r2, r5
 8006a7a:	9802      	ldr	r0, [sp, #8]
 8006a7c:	f000 fabf 	bl	8006ffe <_realloc_r>
 8006a80:	1e06      	subs	r6, r0, #0
 8006a82:	d1e0      	bne.n	8006a46 <__ssputs_r+0x62>
 8006a84:	6921      	ldr	r1, [r4, #16]
 8006a86:	9802      	ldr	r0, [sp, #8]
 8006a88:	f7ff feb0 	bl	80067ec <_free_r>
 8006a8c:	230c      	movs	r3, #12
 8006a8e:	2001      	movs	r0, #1
 8006a90:	9a02      	ldr	r2, [sp, #8]
 8006a92:	4240      	negs	r0, r0
 8006a94:	6013      	str	r3, [r2, #0]
 8006a96:	89a2      	ldrh	r2, [r4, #12]
 8006a98:	3334      	adds	r3, #52	@ 0x34
 8006a9a:	4313      	orrs	r3, r2
 8006a9c:	81a3      	strh	r3, [r4, #12]
 8006a9e:	e7e9      	b.n	8006a74 <__ssputs_r+0x90>
 8006aa0:	fffffb7f 	.word	0xfffffb7f

08006aa4 <_svfiprintf_r>:
 8006aa4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006aa6:	b0a1      	sub	sp, #132	@ 0x84
 8006aa8:	9003      	str	r0, [sp, #12]
 8006aaa:	001d      	movs	r5, r3
 8006aac:	898b      	ldrh	r3, [r1, #12]
 8006aae:	000f      	movs	r7, r1
 8006ab0:	0016      	movs	r6, r2
 8006ab2:	061b      	lsls	r3, r3, #24
 8006ab4:	d511      	bpl.n	8006ada <_svfiprintf_r+0x36>
 8006ab6:	690b      	ldr	r3, [r1, #16]
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d10e      	bne.n	8006ada <_svfiprintf_r+0x36>
 8006abc:	2140      	movs	r1, #64	@ 0x40
 8006abe:	f7ff ff01 	bl	80068c4 <_malloc_r>
 8006ac2:	6038      	str	r0, [r7, #0]
 8006ac4:	6138      	str	r0, [r7, #16]
 8006ac6:	2800      	cmp	r0, #0
 8006ac8:	d105      	bne.n	8006ad6 <_svfiprintf_r+0x32>
 8006aca:	230c      	movs	r3, #12
 8006acc:	9a03      	ldr	r2, [sp, #12]
 8006ace:	6013      	str	r3, [r2, #0]
 8006ad0:	2001      	movs	r0, #1
 8006ad2:	4240      	negs	r0, r0
 8006ad4:	e0cf      	b.n	8006c76 <_svfiprintf_r+0x1d2>
 8006ad6:	2340      	movs	r3, #64	@ 0x40
 8006ad8:	617b      	str	r3, [r7, #20]
 8006ada:	2300      	movs	r3, #0
 8006adc:	ac08      	add	r4, sp, #32
 8006ade:	6163      	str	r3, [r4, #20]
 8006ae0:	3320      	adds	r3, #32
 8006ae2:	7663      	strb	r3, [r4, #25]
 8006ae4:	3310      	adds	r3, #16
 8006ae6:	76a3      	strb	r3, [r4, #26]
 8006ae8:	9507      	str	r5, [sp, #28]
 8006aea:	0035      	movs	r5, r6
 8006aec:	782b      	ldrb	r3, [r5, #0]
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d001      	beq.n	8006af6 <_svfiprintf_r+0x52>
 8006af2:	2b25      	cmp	r3, #37	@ 0x25
 8006af4:	d148      	bne.n	8006b88 <_svfiprintf_r+0xe4>
 8006af6:	1bab      	subs	r3, r5, r6
 8006af8:	9305      	str	r3, [sp, #20]
 8006afa:	42b5      	cmp	r5, r6
 8006afc:	d00b      	beq.n	8006b16 <_svfiprintf_r+0x72>
 8006afe:	0032      	movs	r2, r6
 8006b00:	0039      	movs	r1, r7
 8006b02:	9803      	ldr	r0, [sp, #12]
 8006b04:	f7ff ff6e 	bl	80069e4 <__ssputs_r>
 8006b08:	3001      	adds	r0, #1
 8006b0a:	d100      	bne.n	8006b0e <_svfiprintf_r+0x6a>
 8006b0c:	e0ae      	b.n	8006c6c <_svfiprintf_r+0x1c8>
 8006b0e:	6963      	ldr	r3, [r4, #20]
 8006b10:	9a05      	ldr	r2, [sp, #20]
 8006b12:	189b      	adds	r3, r3, r2
 8006b14:	6163      	str	r3, [r4, #20]
 8006b16:	782b      	ldrb	r3, [r5, #0]
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d100      	bne.n	8006b1e <_svfiprintf_r+0x7a>
 8006b1c:	e0a6      	b.n	8006c6c <_svfiprintf_r+0x1c8>
 8006b1e:	2201      	movs	r2, #1
 8006b20:	2300      	movs	r3, #0
 8006b22:	4252      	negs	r2, r2
 8006b24:	6062      	str	r2, [r4, #4]
 8006b26:	a904      	add	r1, sp, #16
 8006b28:	3254      	adds	r2, #84	@ 0x54
 8006b2a:	1852      	adds	r2, r2, r1
 8006b2c:	1c6e      	adds	r6, r5, #1
 8006b2e:	6023      	str	r3, [r4, #0]
 8006b30:	60e3      	str	r3, [r4, #12]
 8006b32:	60a3      	str	r3, [r4, #8]
 8006b34:	7013      	strb	r3, [r2, #0]
 8006b36:	65a3      	str	r3, [r4, #88]	@ 0x58
 8006b38:	4b54      	ldr	r3, [pc, #336]	@ (8006c8c <_svfiprintf_r+0x1e8>)
 8006b3a:	2205      	movs	r2, #5
 8006b3c:	0018      	movs	r0, r3
 8006b3e:	7831      	ldrb	r1, [r6, #0]
 8006b40:	9305      	str	r3, [sp, #20]
 8006b42:	f000 fa51 	bl	8006fe8 <memchr>
 8006b46:	1c75      	adds	r5, r6, #1
 8006b48:	2800      	cmp	r0, #0
 8006b4a:	d11f      	bne.n	8006b8c <_svfiprintf_r+0xe8>
 8006b4c:	6822      	ldr	r2, [r4, #0]
 8006b4e:	06d3      	lsls	r3, r2, #27
 8006b50:	d504      	bpl.n	8006b5c <_svfiprintf_r+0xb8>
 8006b52:	2353      	movs	r3, #83	@ 0x53
 8006b54:	a904      	add	r1, sp, #16
 8006b56:	185b      	adds	r3, r3, r1
 8006b58:	2120      	movs	r1, #32
 8006b5a:	7019      	strb	r1, [r3, #0]
 8006b5c:	0713      	lsls	r3, r2, #28
 8006b5e:	d504      	bpl.n	8006b6a <_svfiprintf_r+0xc6>
 8006b60:	2353      	movs	r3, #83	@ 0x53
 8006b62:	a904      	add	r1, sp, #16
 8006b64:	185b      	adds	r3, r3, r1
 8006b66:	212b      	movs	r1, #43	@ 0x2b
 8006b68:	7019      	strb	r1, [r3, #0]
 8006b6a:	7833      	ldrb	r3, [r6, #0]
 8006b6c:	2b2a      	cmp	r3, #42	@ 0x2a
 8006b6e:	d016      	beq.n	8006b9e <_svfiprintf_r+0xfa>
 8006b70:	0035      	movs	r5, r6
 8006b72:	2100      	movs	r1, #0
 8006b74:	200a      	movs	r0, #10
 8006b76:	68e3      	ldr	r3, [r4, #12]
 8006b78:	782a      	ldrb	r2, [r5, #0]
 8006b7a:	1c6e      	adds	r6, r5, #1
 8006b7c:	3a30      	subs	r2, #48	@ 0x30
 8006b7e:	2a09      	cmp	r2, #9
 8006b80:	d950      	bls.n	8006c24 <_svfiprintf_r+0x180>
 8006b82:	2900      	cmp	r1, #0
 8006b84:	d111      	bne.n	8006baa <_svfiprintf_r+0x106>
 8006b86:	e017      	b.n	8006bb8 <_svfiprintf_r+0x114>
 8006b88:	3501      	adds	r5, #1
 8006b8a:	e7af      	b.n	8006aec <_svfiprintf_r+0x48>
 8006b8c:	9b05      	ldr	r3, [sp, #20]
 8006b8e:	6822      	ldr	r2, [r4, #0]
 8006b90:	1ac0      	subs	r0, r0, r3
 8006b92:	2301      	movs	r3, #1
 8006b94:	4083      	lsls	r3, r0
 8006b96:	4313      	orrs	r3, r2
 8006b98:	002e      	movs	r6, r5
 8006b9a:	6023      	str	r3, [r4, #0]
 8006b9c:	e7cc      	b.n	8006b38 <_svfiprintf_r+0x94>
 8006b9e:	9b07      	ldr	r3, [sp, #28]
 8006ba0:	1d19      	adds	r1, r3, #4
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	9107      	str	r1, [sp, #28]
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	db01      	blt.n	8006bae <_svfiprintf_r+0x10a>
 8006baa:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006bac:	e004      	b.n	8006bb8 <_svfiprintf_r+0x114>
 8006bae:	425b      	negs	r3, r3
 8006bb0:	60e3      	str	r3, [r4, #12]
 8006bb2:	2302      	movs	r3, #2
 8006bb4:	4313      	orrs	r3, r2
 8006bb6:	6023      	str	r3, [r4, #0]
 8006bb8:	782b      	ldrb	r3, [r5, #0]
 8006bba:	2b2e      	cmp	r3, #46	@ 0x2e
 8006bbc:	d10c      	bne.n	8006bd8 <_svfiprintf_r+0x134>
 8006bbe:	786b      	ldrb	r3, [r5, #1]
 8006bc0:	2b2a      	cmp	r3, #42	@ 0x2a
 8006bc2:	d134      	bne.n	8006c2e <_svfiprintf_r+0x18a>
 8006bc4:	9b07      	ldr	r3, [sp, #28]
 8006bc6:	3502      	adds	r5, #2
 8006bc8:	1d1a      	adds	r2, r3, #4
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	9207      	str	r2, [sp, #28]
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	da01      	bge.n	8006bd6 <_svfiprintf_r+0x132>
 8006bd2:	2301      	movs	r3, #1
 8006bd4:	425b      	negs	r3, r3
 8006bd6:	9309      	str	r3, [sp, #36]	@ 0x24
 8006bd8:	4e2d      	ldr	r6, [pc, #180]	@ (8006c90 <_svfiprintf_r+0x1ec>)
 8006bda:	2203      	movs	r2, #3
 8006bdc:	0030      	movs	r0, r6
 8006bde:	7829      	ldrb	r1, [r5, #0]
 8006be0:	f000 fa02 	bl	8006fe8 <memchr>
 8006be4:	2800      	cmp	r0, #0
 8006be6:	d006      	beq.n	8006bf6 <_svfiprintf_r+0x152>
 8006be8:	2340      	movs	r3, #64	@ 0x40
 8006bea:	1b80      	subs	r0, r0, r6
 8006bec:	4083      	lsls	r3, r0
 8006bee:	6822      	ldr	r2, [r4, #0]
 8006bf0:	3501      	adds	r5, #1
 8006bf2:	4313      	orrs	r3, r2
 8006bf4:	6023      	str	r3, [r4, #0]
 8006bf6:	7829      	ldrb	r1, [r5, #0]
 8006bf8:	2206      	movs	r2, #6
 8006bfa:	4826      	ldr	r0, [pc, #152]	@ (8006c94 <_svfiprintf_r+0x1f0>)
 8006bfc:	1c6e      	adds	r6, r5, #1
 8006bfe:	7621      	strb	r1, [r4, #24]
 8006c00:	f000 f9f2 	bl	8006fe8 <memchr>
 8006c04:	2800      	cmp	r0, #0
 8006c06:	d038      	beq.n	8006c7a <_svfiprintf_r+0x1d6>
 8006c08:	4b23      	ldr	r3, [pc, #140]	@ (8006c98 <_svfiprintf_r+0x1f4>)
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d122      	bne.n	8006c54 <_svfiprintf_r+0x1b0>
 8006c0e:	2207      	movs	r2, #7
 8006c10:	9b07      	ldr	r3, [sp, #28]
 8006c12:	3307      	adds	r3, #7
 8006c14:	4393      	bics	r3, r2
 8006c16:	3308      	adds	r3, #8
 8006c18:	9307      	str	r3, [sp, #28]
 8006c1a:	6963      	ldr	r3, [r4, #20]
 8006c1c:	9a04      	ldr	r2, [sp, #16]
 8006c1e:	189b      	adds	r3, r3, r2
 8006c20:	6163      	str	r3, [r4, #20]
 8006c22:	e762      	b.n	8006aea <_svfiprintf_r+0x46>
 8006c24:	4343      	muls	r3, r0
 8006c26:	0035      	movs	r5, r6
 8006c28:	2101      	movs	r1, #1
 8006c2a:	189b      	adds	r3, r3, r2
 8006c2c:	e7a4      	b.n	8006b78 <_svfiprintf_r+0xd4>
 8006c2e:	2300      	movs	r3, #0
 8006c30:	200a      	movs	r0, #10
 8006c32:	0019      	movs	r1, r3
 8006c34:	3501      	adds	r5, #1
 8006c36:	6063      	str	r3, [r4, #4]
 8006c38:	782a      	ldrb	r2, [r5, #0]
 8006c3a:	1c6e      	adds	r6, r5, #1
 8006c3c:	3a30      	subs	r2, #48	@ 0x30
 8006c3e:	2a09      	cmp	r2, #9
 8006c40:	d903      	bls.n	8006c4a <_svfiprintf_r+0x1a6>
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d0c8      	beq.n	8006bd8 <_svfiprintf_r+0x134>
 8006c46:	9109      	str	r1, [sp, #36]	@ 0x24
 8006c48:	e7c6      	b.n	8006bd8 <_svfiprintf_r+0x134>
 8006c4a:	4341      	muls	r1, r0
 8006c4c:	0035      	movs	r5, r6
 8006c4e:	2301      	movs	r3, #1
 8006c50:	1889      	adds	r1, r1, r2
 8006c52:	e7f1      	b.n	8006c38 <_svfiprintf_r+0x194>
 8006c54:	aa07      	add	r2, sp, #28
 8006c56:	9200      	str	r2, [sp, #0]
 8006c58:	0021      	movs	r1, r4
 8006c5a:	003a      	movs	r2, r7
 8006c5c:	4b0f      	ldr	r3, [pc, #60]	@ (8006c9c <_svfiprintf_r+0x1f8>)
 8006c5e:	9803      	ldr	r0, [sp, #12]
 8006c60:	e000      	b.n	8006c64 <_svfiprintf_r+0x1c0>
 8006c62:	bf00      	nop
 8006c64:	9004      	str	r0, [sp, #16]
 8006c66:	9b04      	ldr	r3, [sp, #16]
 8006c68:	3301      	adds	r3, #1
 8006c6a:	d1d6      	bne.n	8006c1a <_svfiprintf_r+0x176>
 8006c6c:	89bb      	ldrh	r3, [r7, #12]
 8006c6e:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8006c70:	065b      	lsls	r3, r3, #25
 8006c72:	d500      	bpl.n	8006c76 <_svfiprintf_r+0x1d2>
 8006c74:	e72c      	b.n	8006ad0 <_svfiprintf_r+0x2c>
 8006c76:	b021      	add	sp, #132	@ 0x84
 8006c78:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006c7a:	aa07      	add	r2, sp, #28
 8006c7c:	9200      	str	r2, [sp, #0]
 8006c7e:	0021      	movs	r1, r4
 8006c80:	003a      	movs	r2, r7
 8006c82:	4b06      	ldr	r3, [pc, #24]	@ (8006c9c <_svfiprintf_r+0x1f8>)
 8006c84:	9803      	ldr	r0, [sp, #12]
 8006c86:	f000 f87b 	bl	8006d80 <_printf_i>
 8006c8a:	e7eb      	b.n	8006c64 <_svfiprintf_r+0x1c0>
 8006c8c:	080071a4 	.word	0x080071a4
 8006c90:	080071aa 	.word	0x080071aa
 8006c94:	080071ae 	.word	0x080071ae
 8006c98:	00000000 	.word	0x00000000
 8006c9c:	080069e5 	.word	0x080069e5

08006ca0 <_printf_common>:
 8006ca0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006ca2:	0016      	movs	r6, r2
 8006ca4:	9301      	str	r3, [sp, #4]
 8006ca6:	688a      	ldr	r2, [r1, #8]
 8006ca8:	690b      	ldr	r3, [r1, #16]
 8006caa:	000c      	movs	r4, r1
 8006cac:	9000      	str	r0, [sp, #0]
 8006cae:	4293      	cmp	r3, r2
 8006cb0:	da00      	bge.n	8006cb4 <_printf_common+0x14>
 8006cb2:	0013      	movs	r3, r2
 8006cb4:	0022      	movs	r2, r4
 8006cb6:	6033      	str	r3, [r6, #0]
 8006cb8:	3243      	adds	r2, #67	@ 0x43
 8006cba:	7812      	ldrb	r2, [r2, #0]
 8006cbc:	2a00      	cmp	r2, #0
 8006cbe:	d001      	beq.n	8006cc4 <_printf_common+0x24>
 8006cc0:	3301      	adds	r3, #1
 8006cc2:	6033      	str	r3, [r6, #0]
 8006cc4:	6823      	ldr	r3, [r4, #0]
 8006cc6:	069b      	lsls	r3, r3, #26
 8006cc8:	d502      	bpl.n	8006cd0 <_printf_common+0x30>
 8006cca:	6833      	ldr	r3, [r6, #0]
 8006ccc:	3302      	adds	r3, #2
 8006cce:	6033      	str	r3, [r6, #0]
 8006cd0:	6822      	ldr	r2, [r4, #0]
 8006cd2:	2306      	movs	r3, #6
 8006cd4:	0015      	movs	r5, r2
 8006cd6:	401d      	ands	r5, r3
 8006cd8:	421a      	tst	r2, r3
 8006cda:	d027      	beq.n	8006d2c <_printf_common+0x8c>
 8006cdc:	0023      	movs	r3, r4
 8006cde:	3343      	adds	r3, #67	@ 0x43
 8006ce0:	781b      	ldrb	r3, [r3, #0]
 8006ce2:	1e5a      	subs	r2, r3, #1
 8006ce4:	4193      	sbcs	r3, r2
 8006ce6:	6822      	ldr	r2, [r4, #0]
 8006ce8:	0692      	lsls	r2, r2, #26
 8006cea:	d430      	bmi.n	8006d4e <_printf_common+0xae>
 8006cec:	0022      	movs	r2, r4
 8006cee:	9901      	ldr	r1, [sp, #4]
 8006cf0:	9800      	ldr	r0, [sp, #0]
 8006cf2:	9d08      	ldr	r5, [sp, #32]
 8006cf4:	3243      	adds	r2, #67	@ 0x43
 8006cf6:	47a8      	blx	r5
 8006cf8:	3001      	adds	r0, #1
 8006cfa:	d025      	beq.n	8006d48 <_printf_common+0xa8>
 8006cfc:	2206      	movs	r2, #6
 8006cfe:	6823      	ldr	r3, [r4, #0]
 8006d00:	2500      	movs	r5, #0
 8006d02:	4013      	ands	r3, r2
 8006d04:	2b04      	cmp	r3, #4
 8006d06:	d105      	bne.n	8006d14 <_printf_common+0x74>
 8006d08:	6833      	ldr	r3, [r6, #0]
 8006d0a:	68e5      	ldr	r5, [r4, #12]
 8006d0c:	1aed      	subs	r5, r5, r3
 8006d0e:	43eb      	mvns	r3, r5
 8006d10:	17db      	asrs	r3, r3, #31
 8006d12:	401d      	ands	r5, r3
 8006d14:	68a3      	ldr	r3, [r4, #8]
 8006d16:	6922      	ldr	r2, [r4, #16]
 8006d18:	4293      	cmp	r3, r2
 8006d1a:	dd01      	ble.n	8006d20 <_printf_common+0x80>
 8006d1c:	1a9b      	subs	r3, r3, r2
 8006d1e:	18ed      	adds	r5, r5, r3
 8006d20:	2600      	movs	r6, #0
 8006d22:	42b5      	cmp	r5, r6
 8006d24:	d120      	bne.n	8006d68 <_printf_common+0xc8>
 8006d26:	2000      	movs	r0, #0
 8006d28:	e010      	b.n	8006d4c <_printf_common+0xac>
 8006d2a:	3501      	adds	r5, #1
 8006d2c:	68e3      	ldr	r3, [r4, #12]
 8006d2e:	6832      	ldr	r2, [r6, #0]
 8006d30:	1a9b      	subs	r3, r3, r2
 8006d32:	42ab      	cmp	r3, r5
 8006d34:	ddd2      	ble.n	8006cdc <_printf_common+0x3c>
 8006d36:	0022      	movs	r2, r4
 8006d38:	2301      	movs	r3, #1
 8006d3a:	9901      	ldr	r1, [sp, #4]
 8006d3c:	9800      	ldr	r0, [sp, #0]
 8006d3e:	9f08      	ldr	r7, [sp, #32]
 8006d40:	3219      	adds	r2, #25
 8006d42:	47b8      	blx	r7
 8006d44:	3001      	adds	r0, #1
 8006d46:	d1f0      	bne.n	8006d2a <_printf_common+0x8a>
 8006d48:	2001      	movs	r0, #1
 8006d4a:	4240      	negs	r0, r0
 8006d4c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006d4e:	2030      	movs	r0, #48	@ 0x30
 8006d50:	18e1      	adds	r1, r4, r3
 8006d52:	3143      	adds	r1, #67	@ 0x43
 8006d54:	7008      	strb	r0, [r1, #0]
 8006d56:	0021      	movs	r1, r4
 8006d58:	1c5a      	adds	r2, r3, #1
 8006d5a:	3145      	adds	r1, #69	@ 0x45
 8006d5c:	7809      	ldrb	r1, [r1, #0]
 8006d5e:	18a2      	adds	r2, r4, r2
 8006d60:	3243      	adds	r2, #67	@ 0x43
 8006d62:	3302      	adds	r3, #2
 8006d64:	7011      	strb	r1, [r2, #0]
 8006d66:	e7c1      	b.n	8006cec <_printf_common+0x4c>
 8006d68:	0022      	movs	r2, r4
 8006d6a:	2301      	movs	r3, #1
 8006d6c:	9901      	ldr	r1, [sp, #4]
 8006d6e:	9800      	ldr	r0, [sp, #0]
 8006d70:	9f08      	ldr	r7, [sp, #32]
 8006d72:	321a      	adds	r2, #26
 8006d74:	47b8      	blx	r7
 8006d76:	3001      	adds	r0, #1
 8006d78:	d0e6      	beq.n	8006d48 <_printf_common+0xa8>
 8006d7a:	3601      	adds	r6, #1
 8006d7c:	e7d1      	b.n	8006d22 <_printf_common+0x82>
	...

08006d80 <_printf_i>:
 8006d80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006d82:	b08b      	sub	sp, #44	@ 0x2c
 8006d84:	9206      	str	r2, [sp, #24]
 8006d86:	000a      	movs	r2, r1
 8006d88:	3243      	adds	r2, #67	@ 0x43
 8006d8a:	9307      	str	r3, [sp, #28]
 8006d8c:	9005      	str	r0, [sp, #20]
 8006d8e:	9203      	str	r2, [sp, #12]
 8006d90:	7e0a      	ldrb	r2, [r1, #24]
 8006d92:	000c      	movs	r4, r1
 8006d94:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8006d96:	2a78      	cmp	r2, #120	@ 0x78
 8006d98:	d809      	bhi.n	8006dae <_printf_i+0x2e>
 8006d9a:	2a62      	cmp	r2, #98	@ 0x62
 8006d9c:	d80b      	bhi.n	8006db6 <_printf_i+0x36>
 8006d9e:	2a00      	cmp	r2, #0
 8006da0:	d100      	bne.n	8006da4 <_printf_i+0x24>
 8006da2:	e0bc      	b.n	8006f1e <_printf_i+0x19e>
 8006da4:	497b      	ldr	r1, [pc, #492]	@ (8006f94 <_printf_i+0x214>)
 8006da6:	9104      	str	r1, [sp, #16]
 8006da8:	2a58      	cmp	r2, #88	@ 0x58
 8006daa:	d100      	bne.n	8006dae <_printf_i+0x2e>
 8006dac:	e090      	b.n	8006ed0 <_printf_i+0x150>
 8006dae:	0025      	movs	r5, r4
 8006db0:	3542      	adds	r5, #66	@ 0x42
 8006db2:	702a      	strb	r2, [r5, #0]
 8006db4:	e022      	b.n	8006dfc <_printf_i+0x7c>
 8006db6:	0010      	movs	r0, r2
 8006db8:	3863      	subs	r0, #99	@ 0x63
 8006dba:	2815      	cmp	r0, #21
 8006dbc:	d8f7      	bhi.n	8006dae <_printf_i+0x2e>
 8006dbe:	f7f9 f9ab 	bl	8000118 <__gnu_thumb1_case_shi>
 8006dc2:	0016      	.short	0x0016
 8006dc4:	fff6001f 	.word	0xfff6001f
 8006dc8:	fff6fff6 	.word	0xfff6fff6
 8006dcc:	001ffff6 	.word	0x001ffff6
 8006dd0:	fff6fff6 	.word	0xfff6fff6
 8006dd4:	fff6fff6 	.word	0xfff6fff6
 8006dd8:	003600a1 	.word	0x003600a1
 8006ddc:	fff60080 	.word	0xfff60080
 8006de0:	00b2fff6 	.word	0x00b2fff6
 8006de4:	0036fff6 	.word	0x0036fff6
 8006de8:	fff6fff6 	.word	0xfff6fff6
 8006dec:	0084      	.short	0x0084
 8006dee:	0025      	movs	r5, r4
 8006df0:	681a      	ldr	r2, [r3, #0]
 8006df2:	3542      	adds	r5, #66	@ 0x42
 8006df4:	1d11      	adds	r1, r2, #4
 8006df6:	6019      	str	r1, [r3, #0]
 8006df8:	6813      	ldr	r3, [r2, #0]
 8006dfa:	702b      	strb	r3, [r5, #0]
 8006dfc:	2301      	movs	r3, #1
 8006dfe:	e0a0      	b.n	8006f42 <_printf_i+0x1c2>
 8006e00:	6818      	ldr	r0, [r3, #0]
 8006e02:	6809      	ldr	r1, [r1, #0]
 8006e04:	1d02      	adds	r2, r0, #4
 8006e06:	060d      	lsls	r5, r1, #24
 8006e08:	d50b      	bpl.n	8006e22 <_printf_i+0xa2>
 8006e0a:	6806      	ldr	r6, [r0, #0]
 8006e0c:	601a      	str	r2, [r3, #0]
 8006e0e:	2e00      	cmp	r6, #0
 8006e10:	da03      	bge.n	8006e1a <_printf_i+0x9a>
 8006e12:	232d      	movs	r3, #45	@ 0x2d
 8006e14:	9a03      	ldr	r2, [sp, #12]
 8006e16:	4276      	negs	r6, r6
 8006e18:	7013      	strb	r3, [r2, #0]
 8006e1a:	4b5e      	ldr	r3, [pc, #376]	@ (8006f94 <_printf_i+0x214>)
 8006e1c:	270a      	movs	r7, #10
 8006e1e:	9304      	str	r3, [sp, #16]
 8006e20:	e018      	b.n	8006e54 <_printf_i+0xd4>
 8006e22:	6806      	ldr	r6, [r0, #0]
 8006e24:	601a      	str	r2, [r3, #0]
 8006e26:	0649      	lsls	r1, r1, #25
 8006e28:	d5f1      	bpl.n	8006e0e <_printf_i+0x8e>
 8006e2a:	b236      	sxth	r6, r6
 8006e2c:	e7ef      	b.n	8006e0e <_printf_i+0x8e>
 8006e2e:	6808      	ldr	r0, [r1, #0]
 8006e30:	6819      	ldr	r1, [r3, #0]
 8006e32:	c940      	ldmia	r1!, {r6}
 8006e34:	0605      	lsls	r5, r0, #24
 8006e36:	d402      	bmi.n	8006e3e <_printf_i+0xbe>
 8006e38:	0640      	lsls	r0, r0, #25
 8006e3a:	d500      	bpl.n	8006e3e <_printf_i+0xbe>
 8006e3c:	b2b6      	uxth	r6, r6
 8006e3e:	6019      	str	r1, [r3, #0]
 8006e40:	4b54      	ldr	r3, [pc, #336]	@ (8006f94 <_printf_i+0x214>)
 8006e42:	270a      	movs	r7, #10
 8006e44:	9304      	str	r3, [sp, #16]
 8006e46:	2a6f      	cmp	r2, #111	@ 0x6f
 8006e48:	d100      	bne.n	8006e4c <_printf_i+0xcc>
 8006e4a:	3f02      	subs	r7, #2
 8006e4c:	0023      	movs	r3, r4
 8006e4e:	2200      	movs	r2, #0
 8006e50:	3343      	adds	r3, #67	@ 0x43
 8006e52:	701a      	strb	r2, [r3, #0]
 8006e54:	6863      	ldr	r3, [r4, #4]
 8006e56:	60a3      	str	r3, [r4, #8]
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	db03      	blt.n	8006e64 <_printf_i+0xe4>
 8006e5c:	2104      	movs	r1, #4
 8006e5e:	6822      	ldr	r2, [r4, #0]
 8006e60:	438a      	bics	r2, r1
 8006e62:	6022      	str	r2, [r4, #0]
 8006e64:	2e00      	cmp	r6, #0
 8006e66:	d102      	bne.n	8006e6e <_printf_i+0xee>
 8006e68:	9d03      	ldr	r5, [sp, #12]
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d00c      	beq.n	8006e88 <_printf_i+0x108>
 8006e6e:	9d03      	ldr	r5, [sp, #12]
 8006e70:	0030      	movs	r0, r6
 8006e72:	0039      	movs	r1, r7
 8006e74:	f7f9 f9e0 	bl	8000238 <__aeabi_uidivmod>
 8006e78:	9b04      	ldr	r3, [sp, #16]
 8006e7a:	3d01      	subs	r5, #1
 8006e7c:	5c5b      	ldrb	r3, [r3, r1]
 8006e7e:	702b      	strb	r3, [r5, #0]
 8006e80:	0033      	movs	r3, r6
 8006e82:	0006      	movs	r6, r0
 8006e84:	429f      	cmp	r7, r3
 8006e86:	d9f3      	bls.n	8006e70 <_printf_i+0xf0>
 8006e88:	2f08      	cmp	r7, #8
 8006e8a:	d109      	bne.n	8006ea0 <_printf_i+0x120>
 8006e8c:	6823      	ldr	r3, [r4, #0]
 8006e8e:	07db      	lsls	r3, r3, #31
 8006e90:	d506      	bpl.n	8006ea0 <_printf_i+0x120>
 8006e92:	6862      	ldr	r2, [r4, #4]
 8006e94:	6923      	ldr	r3, [r4, #16]
 8006e96:	429a      	cmp	r2, r3
 8006e98:	dc02      	bgt.n	8006ea0 <_printf_i+0x120>
 8006e9a:	2330      	movs	r3, #48	@ 0x30
 8006e9c:	3d01      	subs	r5, #1
 8006e9e:	702b      	strb	r3, [r5, #0]
 8006ea0:	9b03      	ldr	r3, [sp, #12]
 8006ea2:	1b5b      	subs	r3, r3, r5
 8006ea4:	6123      	str	r3, [r4, #16]
 8006ea6:	9b07      	ldr	r3, [sp, #28]
 8006ea8:	0021      	movs	r1, r4
 8006eaa:	9300      	str	r3, [sp, #0]
 8006eac:	9805      	ldr	r0, [sp, #20]
 8006eae:	9b06      	ldr	r3, [sp, #24]
 8006eb0:	aa09      	add	r2, sp, #36	@ 0x24
 8006eb2:	f7ff fef5 	bl	8006ca0 <_printf_common>
 8006eb6:	3001      	adds	r0, #1
 8006eb8:	d148      	bne.n	8006f4c <_printf_i+0x1cc>
 8006eba:	2001      	movs	r0, #1
 8006ebc:	4240      	negs	r0, r0
 8006ebe:	b00b      	add	sp, #44	@ 0x2c
 8006ec0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006ec2:	2220      	movs	r2, #32
 8006ec4:	6809      	ldr	r1, [r1, #0]
 8006ec6:	430a      	orrs	r2, r1
 8006ec8:	6022      	str	r2, [r4, #0]
 8006eca:	2278      	movs	r2, #120	@ 0x78
 8006ecc:	4932      	ldr	r1, [pc, #200]	@ (8006f98 <_printf_i+0x218>)
 8006ece:	9104      	str	r1, [sp, #16]
 8006ed0:	0021      	movs	r1, r4
 8006ed2:	3145      	adds	r1, #69	@ 0x45
 8006ed4:	700a      	strb	r2, [r1, #0]
 8006ed6:	6819      	ldr	r1, [r3, #0]
 8006ed8:	6822      	ldr	r2, [r4, #0]
 8006eda:	c940      	ldmia	r1!, {r6}
 8006edc:	0610      	lsls	r0, r2, #24
 8006ede:	d402      	bmi.n	8006ee6 <_printf_i+0x166>
 8006ee0:	0650      	lsls	r0, r2, #25
 8006ee2:	d500      	bpl.n	8006ee6 <_printf_i+0x166>
 8006ee4:	b2b6      	uxth	r6, r6
 8006ee6:	6019      	str	r1, [r3, #0]
 8006ee8:	07d3      	lsls	r3, r2, #31
 8006eea:	d502      	bpl.n	8006ef2 <_printf_i+0x172>
 8006eec:	2320      	movs	r3, #32
 8006eee:	4313      	orrs	r3, r2
 8006ef0:	6023      	str	r3, [r4, #0]
 8006ef2:	2e00      	cmp	r6, #0
 8006ef4:	d001      	beq.n	8006efa <_printf_i+0x17a>
 8006ef6:	2710      	movs	r7, #16
 8006ef8:	e7a8      	b.n	8006e4c <_printf_i+0xcc>
 8006efa:	2220      	movs	r2, #32
 8006efc:	6823      	ldr	r3, [r4, #0]
 8006efe:	4393      	bics	r3, r2
 8006f00:	6023      	str	r3, [r4, #0]
 8006f02:	e7f8      	b.n	8006ef6 <_printf_i+0x176>
 8006f04:	681a      	ldr	r2, [r3, #0]
 8006f06:	680d      	ldr	r5, [r1, #0]
 8006f08:	1d10      	adds	r0, r2, #4
 8006f0a:	6949      	ldr	r1, [r1, #20]
 8006f0c:	6018      	str	r0, [r3, #0]
 8006f0e:	6813      	ldr	r3, [r2, #0]
 8006f10:	062e      	lsls	r6, r5, #24
 8006f12:	d501      	bpl.n	8006f18 <_printf_i+0x198>
 8006f14:	6019      	str	r1, [r3, #0]
 8006f16:	e002      	b.n	8006f1e <_printf_i+0x19e>
 8006f18:	066d      	lsls	r5, r5, #25
 8006f1a:	d5fb      	bpl.n	8006f14 <_printf_i+0x194>
 8006f1c:	8019      	strh	r1, [r3, #0]
 8006f1e:	2300      	movs	r3, #0
 8006f20:	9d03      	ldr	r5, [sp, #12]
 8006f22:	6123      	str	r3, [r4, #16]
 8006f24:	e7bf      	b.n	8006ea6 <_printf_i+0x126>
 8006f26:	681a      	ldr	r2, [r3, #0]
 8006f28:	1d11      	adds	r1, r2, #4
 8006f2a:	6019      	str	r1, [r3, #0]
 8006f2c:	6815      	ldr	r5, [r2, #0]
 8006f2e:	2100      	movs	r1, #0
 8006f30:	0028      	movs	r0, r5
 8006f32:	6862      	ldr	r2, [r4, #4]
 8006f34:	f000 f858 	bl	8006fe8 <memchr>
 8006f38:	2800      	cmp	r0, #0
 8006f3a:	d001      	beq.n	8006f40 <_printf_i+0x1c0>
 8006f3c:	1b40      	subs	r0, r0, r5
 8006f3e:	6060      	str	r0, [r4, #4]
 8006f40:	6863      	ldr	r3, [r4, #4]
 8006f42:	6123      	str	r3, [r4, #16]
 8006f44:	2300      	movs	r3, #0
 8006f46:	9a03      	ldr	r2, [sp, #12]
 8006f48:	7013      	strb	r3, [r2, #0]
 8006f4a:	e7ac      	b.n	8006ea6 <_printf_i+0x126>
 8006f4c:	002a      	movs	r2, r5
 8006f4e:	6923      	ldr	r3, [r4, #16]
 8006f50:	9906      	ldr	r1, [sp, #24]
 8006f52:	9805      	ldr	r0, [sp, #20]
 8006f54:	9d07      	ldr	r5, [sp, #28]
 8006f56:	47a8      	blx	r5
 8006f58:	3001      	adds	r0, #1
 8006f5a:	d0ae      	beq.n	8006eba <_printf_i+0x13a>
 8006f5c:	6823      	ldr	r3, [r4, #0]
 8006f5e:	079b      	lsls	r3, r3, #30
 8006f60:	d415      	bmi.n	8006f8e <_printf_i+0x20e>
 8006f62:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006f64:	68e0      	ldr	r0, [r4, #12]
 8006f66:	4298      	cmp	r0, r3
 8006f68:	daa9      	bge.n	8006ebe <_printf_i+0x13e>
 8006f6a:	0018      	movs	r0, r3
 8006f6c:	e7a7      	b.n	8006ebe <_printf_i+0x13e>
 8006f6e:	0022      	movs	r2, r4
 8006f70:	2301      	movs	r3, #1
 8006f72:	9906      	ldr	r1, [sp, #24]
 8006f74:	9805      	ldr	r0, [sp, #20]
 8006f76:	9e07      	ldr	r6, [sp, #28]
 8006f78:	3219      	adds	r2, #25
 8006f7a:	47b0      	blx	r6
 8006f7c:	3001      	adds	r0, #1
 8006f7e:	d09c      	beq.n	8006eba <_printf_i+0x13a>
 8006f80:	3501      	adds	r5, #1
 8006f82:	68e3      	ldr	r3, [r4, #12]
 8006f84:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006f86:	1a9b      	subs	r3, r3, r2
 8006f88:	42ab      	cmp	r3, r5
 8006f8a:	dcf0      	bgt.n	8006f6e <_printf_i+0x1ee>
 8006f8c:	e7e9      	b.n	8006f62 <_printf_i+0x1e2>
 8006f8e:	2500      	movs	r5, #0
 8006f90:	e7f7      	b.n	8006f82 <_printf_i+0x202>
 8006f92:	46c0      	nop			@ (mov r8, r8)
 8006f94:	080071b5 	.word	0x080071b5
 8006f98:	080071c6 	.word	0x080071c6

08006f9c <memmove>:
 8006f9c:	b510      	push	{r4, lr}
 8006f9e:	4288      	cmp	r0, r1
 8006fa0:	d806      	bhi.n	8006fb0 <memmove+0x14>
 8006fa2:	2300      	movs	r3, #0
 8006fa4:	429a      	cmp	r2, r3
 8006fa6:	d008      	beq.n	8006fba <memmove+0x1e>
 8006fa8:	5ccc      	ldrb	r4, [r1, r3]
 8006faa:	54c4      	strb	r4, [r0, r3]
 8006fac:	3301      	adds	r3, #1
 8006fae:	e7f9      	b.n	8006fa4 <memmove+0x8>
 8006fb0:	188b      	adds	r3, r1, r2
 8006fb2:	4298      	cmp	r0, r3
 8006fb4:	d2f5      	bcs.n	8006fa2 <memmove+0x6>
 8006fb6:	3a01      	subs	r2, #1
 8006fb8:	d200      	bcs.n	8006fbc <memmove+0x20>
 8006fba:	bd10      	pop	{r4, pc}
 8006fbc:	5c8b      	ldrb	r3, [r1, r2]
 8006fbe:	5483      	strb	r3, [r0, r2]
 8006fc0:	e7f9      	b.n	8006fb6 <memmove+0x1a>
	...

08006fc4 <_sbrk_r>:
 8006fc4:	2300      	movs	r3, #0
 8006fc6:	b570      	push	{r4, r5, r6, lr}
 8006fc8:	4d06      	ldr	r5, [pc, #24]	@ (8006fe4 <_sbrk_r+0x20>)
 8006fca:	0004      	movs	r4, r0
 8006fcc:	0008      	movs	r0, r1
 8006fce:	602b      	str	r3, [r5, #0]
 8006fd0:	f7fa f936 	bl	8001240 <_sbrk>
 8006fd4:	1c43      	adds	r3, r0, #1
 8006fd6:	d103      	bne.n	8006fe0 <_sbrk_r+0x1c>
 8006fd8:	682b      	ldr	r3, [r5, #0]
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d000      	beq.n	8006fe0 <_sbrk_r+0x1c>
 8006fde:	6023      	str	r3, [r4, #0]
 8006fe0:	bd70      	pop	{r4, r5, r6, pc}
 8006fe2:	46c0      	nop			@ (mov r8, r8)
 8006fe4:	20001278 	.word	0x20001278

08006fe8 <memchr>:
 8006fe8:	b2c9      	uxtb	r1, r1
 8006fea:	1882      	adds	r2, r0, r2
 8006fec:	4290      	cmp	r0, r2
 8006fee:	d101      	bne.n	8006ff4 <memchr+0xc>
 8006ff0:	2000      	movs	r0, #0
 8006ff2:	4770      	bx	lr
 8006ff4:	7803      	ldrb	r3, [r0, #0]
 8006ff6:	428b      	cmp	r3, r1
 8006ff8:	d0fb      	beq.n	8006ff2 <memchr+0xa>
 8006ffa:	3001      	adds	r0, #1
 8006ffc:	e7f6      	b.n	8006fec <memchr+0x4>

08006ffe <_realloc_r>:
 8006ffe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007000:	0006      	movs	r6, r0
 8007002:	000c      	movs	r4, r1
 8007004:	0015      	movs	r5, r2
 8007006:	2900      	cmp	r1, #0
 8007008:	d105      	bne.n	8007016 <_realloc_r+0x18>
 800700a:	0011      	movs	r1, r2
 800700c:	f7ff fc5a 	bl	80068c4 <_malloc_r>
 8007010:	0004      	movs	r4, r0
 8007012:	0020      	movs	r0, r4
 8007014:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007016:	2a00      	cmp	r2, #0
 8007018:	d103      	bne.n	8007022 <_realloc_r+0x24>
 800701a:	f7ff fbe7 	bl	80067ec <_free_r>
 800701e:	2400      	movs	r4, #0
 8007020:	e7f7      	b.n	8007012 <_realloc_r+0x14>
 8007022:	f000 f81b 	bl	800705c <_malloc_usable_size_r>
 8007026:	0007      	movs	r7, r0
 8007028:	4285      	cmp	r5, r0
 800702a:	d802      	bhi.n	8007032 <_realloc_r+0x34>
 800702c:	0843      	lsrs	r3, r0, #1
 800702e:	42ab      	cmp	r3, r5
 8007030:	d3ef      	bcc.n	8007012 <_realloc_r+0x14>
 8007032:	0029      	movs	r1, r5
 8007034:	0030      	movs	r0, r6
 8007036:	f7ff fc45 	bl	80068c4 <_malloc_r>
 800703a:	9001      	str	r0, [sp, #4]
 800703c:	2800      	cmp	r0, #0
 800703e:	d0ee      	beq.n	800701e <_realloc_r+0x20>
 8007040:	002a      	movs	r2, r5
 8007042:	42bd      	cmp	r5, r7
 8007044:	d900      	bls.n	8007048 <_realloc_r+0x4a>
 8007046:	003a      	movs	r2, r7
 8007048:	0021      	movs	r1, r4
 800704a:	9801      	ldr	r0, [sp, #4]
 800704c:	f7ff fbc4 	bl	80067d8 <memcpy>
 8007050:	0021      	movs	r1, r4
 8007052:	0030      	movs	r0, r6
 8007054:	f7ff fbca 	bl	80067ec <_free_r>
 8007058:	9c01      	ldr	r4, [sp, #4]
 800705a:	e7da      	b.n	8007012 <_realloc_r+0x14>

0800705c <_malloc_usable_size_r>:
 800705c:	1f0b      	subs	r3, r1, #4
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	1f18      	subs	r0, r3, #4
 8007062:	2b00      	cmp	r3, #0
 8007064:	da01      	bge.n	800706a <_malloc_usable_size_r+0xe>
 8007066:	580b      	ldr	r3, [r1, r0]
 8007068:	18c0      	adds	r0, r0, r3
 800706a:	4770      	bx	lr

0800706c <_init>:
 800706c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800706e:	46c0      	nop			@ (mov r8, r8)
 8007070:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007072:	bc08      	pop	{r3}
 8007074:	469e      	mov	lr, r3
 8007076:	4770      	bx	lr

08007078 <_fini>:
 8007078:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800707a:	46c0      	nop			@ (mov r8, r8)
 800707c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800707e:	bc08      	pop	{r3}
 8007080:	469e      	mov	lr, r3
 8007082:	4770      	bx	lr
