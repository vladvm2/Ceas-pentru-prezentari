
test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007ec8  080000c0  080000c0  000010c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000158  08007f88  08007f88  00008f88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080080e0  080080e0  0000a208  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080080e0  080080e0  000090e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080080e8  080080e8  0000a208  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080080e8  080080e8  000090e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080080ec  080080ec  000090ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000208  20000000  080080f0  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001088  20000208  080082f8  0000a208  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001290  080082f8  0000a290  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000a208  2**0
                  CONTENTS, READONLY
 12 .debug_info   000175d6  00000000  00000000  0000a230  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003713  00000000  00000000  00021806  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001490  00000000  00000000  00024f20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001009  00000000  00000000  000263b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003976  00000000  00000000  000273b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000189f9  00000000  00000000  0002ad2f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a9e4f  00000000  00000000  00043728  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ed577  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004e90  00000000  00000000  000ed5bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000083  00000000  00000000  000f244c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000208 	.word	0x20000208
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08007f70 	.word	0x08007f70

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000020c 	.word	0x2000020c
 8000104:	08007f70 	.word	0x08007f70

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	@ 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f8f0 	bl	8000414 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			@ (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__divsi3>:
 8000240:	4603      	mov	r3, r0
 8000242:	430b      	orrs	r3, r1
 8000244:	d47f      	bmi.n	8000346 <__divsi3+0x106>
 8000246:	2200      	movs	r2, #0
 8000248:	0843      	lsrs	r3, r0, #1
 800024a:	428b      	cmp	r3, r1
 800024c:	d374      	bcc.n	8000338 <__divsi3+0xf8>
 800024e:	0903      	lsrs	r3, r0, #4
 8000250:	428b      	cmp	r3, r1
 8000252:	d35f      	bcc.n	8000314 <__divsi3+0xd4>
 8000254:	0a03      	lsrs	r3, r0, #8
 8000256:	428b      	cmp	r3, r1
 8000258:	d344      	bcc.n	80002e4 <__divsi3+0xa4>
 800025a:	0b03      	lsrs	r3, r0, #12
 800025c:	428b      	cmp	r3, r1
 800025e:	d328      	bcc.n	80002b2 <__divsi3+0x72>
 8000260:	0c03      	lsrs	r3, r0, #16
 8000262:	428b      	cmp	r3, r1
 8000264:	d30d      	bcc.n	8000282 <__divsi3+0x42>
 8000266:	22ff      	movs	r2, #255	@ 0xff
 8000268:	0209      	lsls	r1, r1, #8
 800026a:	ba12      	rev	r2, r2
 800026c:	0c03      	lsrs	r3, r0, #16
 800026e:	428b      	cmp	r3, r1
 8000270:	d302      	bcc.n	8000278 <__divsi3+0x38>
 8000272:	1212      	asrs	r2, r2, #8
 8000274:	0209      	lsls	r1, r1, #8
 8000276:	d065      	beq.n	8000344 <__divsi3+0x104>
 8000278:	0b03      	lsrs	r3, r0, #12
 800027a:	428b      	cmp	r3, r1
 800027c:	d319      	bcc.n	80002b2 <__divsi3+0x72>
 800027e:	e000      	b.n	8000282 <__divsi3+0x42>
 8000280:	0a09      	lsrs	r1, r1, #8
 8000282:	0bc3      	lsrs	r3, r0, #15
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x4c>
 8000288:	03cb      	lsls	r3, r1, #15
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0b83      	lsrs	r3, r0, #14
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x58>
 8000294:	038b      	lsls	r3, r1, #14
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0b43      	lsrs	r3, r0, #13
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x64>
 80002a0:	034b      	lsls	r3, r1, #13
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0b03      	lsrs	r3, r0, #12
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x70>
 80002ac:	030b      	lsls	r3, r1, #12
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0ac3      	lsrs	r3, r0, #11
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x7c>
 80002b8:	02cb      	lsls	r3, r1, #11
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0a83      	lsrs	r3, r0, #10
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x88>
 80002c4:	028b      	lsls	r3, r1, #10
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0a43      	lsrs	r3, r0, #9
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x94>
 80002d0:	024b      	lsls	r3, r1, #9
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0a03      	lsrs	r3, r0, #8
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0xa0>
 80002dc:	020b      	lsls	r3, r1, #8
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	d2cd      	bcs.n	8000280 <__divsi3+0x40>
 80002e4:	09c3      	lsrs	r3, r0, #7
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xae>
 80002ea:	01cb      	lsls	r3, r1, #7
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	0983      	lsrs	r3, r0, #6
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xba>
 80002f6:	018b      	lsls	r3, r1, #6
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0943      	lsrs	r3, r0, #5
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xc6>
 8000302:	014b      	lsls	r3, r1, #5
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0903      	lsrs	r3, r0, #4
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xd2>
 800030e:	010b      	lsls	r3, r1, #4
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	08c3      	lsrs	r3, r0, #3
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xde>
 800031a:	00cb      	lsls	r3, r1, #3
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	0883      	lsrs	r3, r0, #2
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xea>
 8000326:	008b      	lsls	r3, r1, #2
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0843      	lsrs	r3, r0, #1
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xf6>
 8000332:	004b      	lsls	r3, r1, #1
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	1a41      	subs	r1, r0, r1
 800033a:	d200      	bcs.n	800033e <__divsi3+0xfe>
 800033c:	4601      	mov	r1, r0
 800033e:	4152      	adcs	r2, r2
 8000340:	4610      	mov	r0, r2
 8000342:	4770      	bx	lr
 8000344:	e05d      	b.n	8000402 <__divsi3+0x1c2>
 8000346:	0fca      	lsrs	r2, r1, #31
 8000348:	d000      	beq.n	800034c <__divsi3+0x10c>
 800034a:	4249      	negs	r1, r1
 800034c:	1003      	asrs	r3, r0, #32
 800034e:	d300      	bcc.n	8000352 <__divsi3+0x112>
 8000350:	4240      	negs	r0, r0
 8000352:	4053      	eors	r3, r2
 8000354:	2200      	movs	r2, #0
 8000356:	469c      	mov	ip, r3
 8000358:	0903      	lsrs	r3, r0, #4
 800035a:	428b      	cmp	r3, r1
 800035c:	d32d      	bcc.n	80003ba <__divsi3+0x17a>
 800035e:	0a03      	lsrs	r3, r0, #8
 8000360:	428b      	cmp	r3, r1
 8000362:	d312      	bcc.n	800038a <__divsi3+0x14a>
 8000364:	22fc      	movs	r2, #252	@ 0xfc
 8000366:	0189      	lsls	r1, r1, #6
 8000368:	ba12      	rev	r2, r2
 800036a:	0a03      	lsrs	r3, r0, #8
 800036c:	428b      	cmp	r3, r1
 800036e:	d30c      	bcc.n	800038a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	1192      	asrs	r2, r2, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d308      	bcc.n	800038a <__divsi3+0x14a>
 8000378:	0189      	lsls	r1, r1, #6
 800037a:	1192      	asrs	r2, r2, #6
 800037c:	428b      	cmp	r3, r1
 800037e:	d304      	bcc.n	800038a <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	d03a      	beq.n	80003fa <__divsi3+0x1ba>
 8000384:	1192      	asrs	r2, r2, #6
 8000386:	e000      	b.n	800038a <__divsi3+0x14a>
 8000388:	0989      	lsrs	r1, r1, #6
 800038a:	09c3      	lsrs	r3, r0, #7
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x154>
 8000390:	01cb      	lsls	r3, r1, #7
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	0983      	lsrs	r3, r0, #6
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x160>
 800039c:	018b      	lsls	r3, r1, #6
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0943      	lsrs	r3, r0, #5
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x16c>
 80003a8:	014b      	lsls	r3, r1, #5
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0903      	lsrs	r3, r0, #4
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x178>
 80003b4:	010b      	lsls	r3, r1, #4
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	08c3      	lsrs	r3, r0, #3
 80003bc:	428b      	cmp	r3, r1
 80003be:	d301      	bcc.n	80003c4 <__divsi3+0x184>
 80003c0:	00cb      	lsls	r3, r1, #3
 80003c2:	1ac0      	subs	r0, r0, r3
 80003c4:	4152      	adcs	r2, r2
 80003c6:	0883      	lsrs	r3, r0, #2
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x190>
 80003cc:	008b      	lsls	r3, r1, #2
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	d2d9      	bcs.n	8000388 <__divsi3+0x148>
 80003d4:	0843      	lsrs	r3, r0, #1
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d301      	bcc.n	80003de <__divsi3+0x19e>
 80003da:	004b      	lsls	r3, r1, #1
 80003dc:	1ac0      	subs	r0, r0, r3
 80003de:	4152      	adcs	r2, r2
 80003e0:	1a41      	subs	r1, r0, r1
 80003e2:	d200      	bcs.n	80003e6 <__divsi3+0x1a6>
 80003e4:	4601      	mov	r1, r0
 80003e6:	4663      	mov	r3, ip
 80003e8:	4152      	adcs	r2, r2
 80003ea:	105b      	asrs	r3, r3, #1
 80003ec:	4610      	mov	r0, r2
 80003ee:	d301      	bcc.n	80003f4 <__divsi3+0x1b4>
 80003f0:	4240      	negs	r0, r0
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d500      	bpl.n	80003f8 <__divsi3+0x1b8>
 80003f6:	4249      	negs	r1, r1
 80003f8:	4770      	bx	lr
 80003fa:	4663      	mov	r3, ip
 80003fc:	105b      	asrs	r3, r3, #1
 80003fe:	d300      	bcc.n	8000402 <__divsi3+0x1c2>
 8000400:	4240      	negs	r0, r0
 8000402:	b501      	push	{r0, lr}
 8000404:	2000      	movs	r0, #0
 8000406:	f000 f805 	bl	8000414 <__aeabi_idiv0>
 800040a:	bd02      	pop	{r1, pc}

0800040c <__aeabi_idivmod>:
 800040c:	2900      	cmp	r1, #0
 800040e:	d0f8      	beq.n	8000402 <__divsi3+0x1c2>
 8000410:	e716      	b.n	8000240 <__divsi3>
 8000412:	4770      	bx	lr

08000414 <__aeabi_idiv0>:
 8000414:	4770      	bx	lr
 8000416:	46c0      	nop			@ (mov r8, r8)

08000418 <__aeabi_uldivmod>:
 8000418:	2b00      	cmp	r3, #0
 800041a:	d111      	bne.n	8000440 <__aeabi_uldivmod+0x28>
 800041c:	2a00      	cmp	r2, #0
 800041e:	d10f      	bne.n	8000440 <__aeabi_uldivmod+0x28>
 8000420:	2900      	cmp	r1, #0
 8000422:	d100      	bne.n	8000426 <__aeabi_uldivmod+0xe>
 8000424:	2800      	cmp	r0, #0
 8000426:	d002      	beq.n	800042e <__aeabi_uldivmod+0x16>
 8000428:	2100      	movs	r1, #0
 800042a:	43c9      	mvns	r1, r1
 800042c:	0008      	movs	r0, r1
 800042e:	b407      	push	{r0, r1, r2}
 8000430:	4802      	ldr	r0, [pc, #8]	@ (800043c <__aeabi_uldivmod+0x24>)
 8000432:	a102      	add	r1, pc, #8	@ (adr r1, 800043c <__aeabi_uldivmod+0x24>)
 8000434:	1840      	adds	r0, r0, r1
 8000436:	9002      	str	r0, [sp, #8]
 8000438:	bd03      	pop	{r0, r1, pc}
 800043a:	46c0      	nop			@ (mov r8, r8)
 800043c:	ffffffd9 	.word	0xffffffd9
 8000440:	b403      	push	{r0, r1}
 8000442:	4668      	mov	r0, sp
 8000444:	b501      	push	{r0, lr}
 8000446:	9802      	ldr	r0, [sp, #8]
 8000448:	f000 f806 	bl	8000458 <__udivmoddi4>
 800044c:	9b01      	ldr	r3, [sp, #4]
 800044e:	469e      	mov	lr, r3
 8000450:	b002      	add	sp, #8
 8000452:	bc0c      	pop	{r2, r3}
 8000454:	4770      	bx	lr
 8000456:	46c0      	nop			@ (mov r8, r8)

08000458 <__udivmoddi4>:
 8000458:	b5f0      	push	{r4, r5, r6, r7, lr}
 800045a:	4657      	mov	r7, sl
 800045c:	464e      	mov	r6, r9
 800045e:	4645      	mov	r5, r8
 8000460:	46de      	mov	lr, fp
 8000462:	b5e0      	push	{r5, r6, r7, lr}
 8000464:	0004      	movs	r4, r0
 8000466:	000d      	movs	r5, r1
 8000468:	4692      	mov	sl, r2
 800046a:	4699      	mov	r9, r3
 800046c:	b083      	sub	sp, #12
 800046e:	428b      	cmp	r3, r1
 8000470:	d830      	bhi.n	80004d4 <__udivmoddi4+0x7c>
 8000472:	d02d      	beq.n	80004d0 <__udivmoddi4+0x78>
 8000474:	4649      	mov	r1, r9
 8000476:	4650      	mov	r0, sl
 8000478:	f000 f8ba 	bl	80005f0 <__clzdi2>
 800047c:	0029      	movs	r1, r5
 800047e:	0006      	movs	r6, r0
 8000480:	0020      	movs	r0, r4
 8000482:	f000 f8b5 	bl	80005f0 <__clzdi2>
 8000486:	1a33      	subs	r3, r6, r0
 8000488:	4698      	mov	r8, r3
 800048a:	3b20      	subs	r3, #32
 800048c:	d434      	bmi.n	80004f8 <__udivmoddi4+0xa0>
 800048e:	469b      	mov	fp, r3
 8000490:	4653      	mov	r3, sl
 8000492:	465a      	mov	r2, fp
 8000494:	4093      	lsls	r3, r2
 8000496:	4642      	mov	r2, r8
 8000498:	001f      	movs	r7, r3
 800049a:	4653      	mov	r3, sl
 800049c:	4093      	lsls	r3, r2
 800049e:	001e      	movs	r6, r3
 80004a0:	42af      	cmp	r7, r5
 80004a2:	d83b      	bhi.n	800051c <__udivmoddi4+0xc4>
 80004a4:	42af      	cmp	r7, r5
 80004a6:	d100      	bne.n	80004aa <__udivmoddi4+0x52>
 80004a8:	e079      	b.n	800059e <__udivmoddi4+0x146>
 80004aa:	465b      	mov	r3, fp
 80004ac:	1ba4      	subs	r4, r4, r6
 80004ae:	41bd      	sbcs	r5, r7
 80004b0:	2b00      	cmp	r3, #0
 80004b2:	da00      	bge.n	80004b6 <__udivmoddi4+0x5e>
 80004b4:	e076      	b.n	80005a4 <__udivmoddi4+0x14c>
 80004b6:	2200      	movs	r2, #0
 80004b8:	2300      	movs	r3, #0
 80004ba:	9200      	str	r2, [sp, #0]
 80004bc:	9301      	str	r3, [sp, #4]
 80004be:	2301      	movs	r3, #1
 80004c0:	465a      	mov	r2, fp
 80004c2:	4093      	lsls	r3, r2
 80004c4:	9301      	str	r3, [sp, #4]
 80004c6:	2301      	movs	r3, #1
 80004c8:	4642      	mov	r2, r8
 80004ca:	4093      	lsls	r3, r2
 80004cc:	9300      	str	r3, [sp, #0]
 80004ce:	e029      	b.n	8000524 <__udivmoddi4+0xcc>
 80004d0:	4282      	cmp	r2, r0
 80004d2:	d9cf      	bls.n	8000474 <__udivmoddi4+0x1c>
 80004d4:	2200      	movs	r2, #0
 80004d6:	2300      	movs	r3, #0
 80004d8:	9200      	str	r2, [sp, #0]
 80004da:	9301      	str	r3, [sp, #4]
 80004dc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80004de:	2b00      	cmp	r3, #0
 80004e0:	d001      	beq.n	80004e6 <__udivmoddi4+0x8e>
 80004e2:	601c      	str	r4, [r3, #0]
 80004e4:	605d      	str	r5, [r3, #4]
 80004e6:	9800      	ldr	r0, [sp, #0]
 80004e8:	9901      	ldr	r1, [sp, #4]
 80004ea:	b003      	add	sp, #12
 80004ec:	bcf0      	pop	{r4, r5, r6, r7}
 80004ee:	46bb      	mov	fp, r7
 80004f0:	46b2      	mov	sl, r6
 80004f2:	46a9      	mov	r9, r5
 80004f4:	46a0      	mov	r8, r4
 80004f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004f8:	4642      	mov	r2, r8
 80004fa:	469b      	mov	fp, r3
 80004fc:	2320      	movs	r3, #32
 80004fe:	1a9b      	subs	r3, r3, r2
 8000500:	4652      	mov	r2, sl
 8000502:	40da      	lsrs	r2, r3
 8000504:	4641      	mov	r1, r8
 8000506:	0013      	movs	r3, r2
 8000508:	464a      	mov	r2, r9
 800050a:	408a      	lsls	r2, r1
 800050c:	0017      	movs	r7, r2
 800050e:	4642      	mov	r2, r8
 8000510:	431f      	orrs	r7, r3
 8000512:	4653      	mov	r3, sl
 8000514:	4093      	lsls	r3, r2
 8000516:	001e      	movs	r6, r3
 8000518:	42af      	cmp	r7, r5
 800051a:	d9c3      	bls.n	80004a4 <__udivmoddi4+0x4c>
 800051c:	2200      	movs	r2, #0
 800051e:	2300      	movs	r3, #0
 8000520:	9200      	str	r2, [sp, #0]
 8000522:	9301      	str	r3, [sp, #4]
 8000524:	4643      	mov	r3, r8
 8000526:	2b00      	cmp	r3, #0
 8000528:	d0d8      	beq.n	80004dc <__udivmoddi4+0x84>
 800052a:	07fb      	lsls	r3, r7, #31
 800052c:	0872      	lsrs	r2, r6, #1
 800052e:	431a      	orrs	r2, r3
 8000530:	4646      	mov	r6, r8
 8000532:	087b      	lsrs	r3, r7, #1
 8000534:	e00e      	b.n	8000554 <__udivmoddi4+0xfc>
 8000536:	42ab      	cmp	r3, r5
 8000538:	d101      	bne.n	800053e <__udivmoddi4+0xe6>
 800053a:	42a2      	cmp	r2, r4
 800053c:	d80c      	bhi.n	8000558 <__udivmoddi4+0x100>
 800053e:	1aa4      	subs	r4, r4, r2
 8000540:	419d      	sbcs	r5, r3
 8000542:	2001      	movs	r0, #1
 8000544:	1924      	adds	r4, r4, r4
 8000546:	416d      	adcs	r5, r5
 8000548:	2100      	movs	r1, #0
 800054a:	3e01      	subs	r6, #1
 800054c:	1824      	adds	r4, r4, r0
 800054e:	414d      	adcs	r5, r1
 8000550:	2e00      	cmp	r6, #0
 8000552:	d006      	beq.n	8000562 <__udivmoddi4+0x10a>
 8000554:	42ab      	cmp	r3, r5
 8000556:	d9ee      	bls.n	8000536 <__udivmoddi4+0xde>
 8000558:	3e01      	subs	r6, #1
 800055a:	1924      	adds	r4, r4, r4
 800055c:	416d      	adcs	r5, r5
 800055e:	2e00      	cmp	r6, #0
 8000560:	d1f8      	bne.n	8000554 <__udivmoddi4+0xfc>
 8000562:	9800      	ldr	r0, [sp, #0]
 8000564:	9901      	ldr	r1, [sp, #4]
 8000566:	465b      	mov	r3, fp
 8000568:	1900      	adds	r0, r0, r4
 800056a:	4169      	adcs	r1, r5
 800056c:	2b00      	cmp	r3, #0
 800056e:	db24      	blt.n	80005ba <__udivmoddi4+0x162>
 8000570:	002b      	movs	r3, r5
 8000572:	465a      	mov	r2, fp
 8000574:	4644      	mov	r4, r8
 8000576:	40d3      	lsrs	r3, r2
 8000578:	002a      	movs	r2, r5
 800057a:	40e2      	lsrs	r2, r4
 800057c:	001c      	movs	r4, r3
 800057e:	465b      	mov	r3, fp
 8000580:	0015      	movs	r5, r2
 8000582:	2b00      	cmp	r3, #0
 8000584:	db2a      	blt.n	80005dc <__udivmoddi4+0x184>
 8000586:	0026      	movs	r6, r4
 8000588:	409e      	lsls	r6, r3
 800058a:	0033      	movs	r3, r6
 800058c:	0026      	movs	r6, r4
 800058e:	4647      	mov	r7, r8
 8000590:	40be      	lsls	r6, r7
 8000592:	0032      	movs	r2, r6
 8000594:	1a80      	subs	r0, r0, r2
 8000596:	4199      	sbcs	r1, r3
 8000598:	9000      	str	r0, [sp, #0]
 800059a:	9101      	str	r1, [sp, #4]
 800059c:	e79e      	b.n	80004dc <__udivmoddi4+0x84>
 800059e:	42a3      	cmp	r3, r4
 80005a0:	d8bc      	bhi.n	800051c <__udivmoddi4+0xc4>
 80005a2:	e782      	b.n	80004aa <__udivmoddi4+0x52>
 80005a4:	4642      	mov	r2, r8
 80005a6:	2320      	movs	r3, #32
 80005a8:	2100      	movs	r1, #0
 80005aa:	1a9b      	subs	r3, r3, r2
 80005ac:	2200      	movs	r2, #0
 80005ae:	9100      	str	r1, [sp, #0]
 80005b0:	9201      	str	r2, [sp, #4]
 80005b2:	2201      	movs	r2, #1
 80005b4:	40da      	lsrs	r2, r3
 80005b6:	9201      	str	r2, [sp, #4]
 80005b8:	e785      	b.n	80004c6 <__udivmoddi4+0x6e>
 80005ba:	4642      	mov	r2, r8
 80005bc:	2320      	movs	r3, #32
 80005be:	1a9b      	subs	r3, r3, r2
 80005c0:	002a      	movs	r2, r5
 80005c2:	4646      	mov	r6, r8
 80005c4:	409a      	lsls	r2, r3
 80005c6:	0023      	movs	r3, r4
 80005c8:	40f3      	lsrs	r3, r6
 80005ca:	4644      	mov	r4, r8
 80005cc:	4313      	orrs	r3, r2
 80005ce:	002a      	movs	r2, r5
 80005d0:	40e2      	lsrs	r2, r4
 80005d2:	001c      	movs	r4, r3
 80005d4:	465b      	mov	r3, fp
 80005d6:	0015      	movs	r5, r2
 80005d8:	2b00      	cmp	r3, #0
 80005da:	dad4      	bge.n	8000586 <__udivmoddi4+0x12e>
 80005dc:	4642      	mov	r2, r8
 80005de:	002f      	movs	r7, r5
 80005e0:	2320      	movs	r3, #32
 80005e2:	0026      	movs	r6, r4
 80005e4:	4097      	lsls	r7, r2
 80005e6:	1a9b      	subs	r3, r3, r2
 80005e8:	40de      	lsrs	r6, r3
 80005ea:	003b      	movs	r3, r7
 80005ec:	4333      	orrs	r3, r6
 80005ee:	e7cd      	b.n	800058c <__udivmoddi4+0x134>

080005f0 <__clzdi2>:
 80005f0:	b510      	push	{r4, lr}
 80005f2:	2900      	cmp	r1, #0
 80005f4:	d103      	bne.n	80005fe <__clzdi2+0xe>
 80005f6:	f000 f807 	bl	8000608 <__clzsi2>
 80005fa:	3020      	adds	r0, #32
 80005fc:	e002      	b.n	8000604 <__clzdi2+0x14>
 80005fe:	0008      	movs	r0, r1
 8000600:	f000 f802 	bl	8000608 <__clzsi2>
 8000604:	bd10      	pop	{r4, pc}
 8000606:	46c0      	nop			@ (mov r8, r8)

08000608 <__clzsi2>:
 8000608:	211c      	movs	r1, #28
 800060a:	2301      	movs	r3, #1
 800060c:	041b      	lsls	r3, r3, #16
 800060e:	4298      	cmp	r0, r3
 8000610:	d301      	bcc.n	8000616 <__clzsi2+0xe>
 8000612:	0c00      	lsrs	r0, r0, #16
 8000614:	3910      	subs	r1, #16
 8000616:	0a1b      	lsrs	r3, r3, #8
 8000618:	4298      	cmp	r0, r3
 800061a:	d301      	bcc.n	8000620 <__clzsi2+0x18>
 800061c:	0a00      	lsrs	r0, r0, #8
 800061e:	3908      	subs	r1, #8
 8000620:	091b      	lsrs	r3, r3, #4
 8000622:	4298      	cmp	r0, r3
 8000624:	d301      	bcc.n	800062a <__clzsi2+0x22>
 8000626:	0900      	lsrs	r0, r0, #4
 8000628:	3904      	subs	r1, #4
 800062a:	a202      	add	r2, pc, #8	@ (adr r2, 8000634 <__clzsi2+0x2c>)
 800062c:	5c10      	ldrb	r0, [r2, r0]
 800062e:	1840      	adds	r0, r0, r1
 8000630:	4770      	bx	lr
 8000632:	46c0      	nop			@ (mov r8, r8)
 8000634:	02020304 	.word	0x02020304
 8000638:	01010101 	.word	0x01010101
	...

08000644 <Display_Update>:

// global variable to track debug mode
uint8_t debugActive = 0;
uint32_t debugTimestamp = 0;

void Display_Update(void) {
 8000644:	b590      	push	{r4, r7, lr}
 8000646:	b083      	sub	sp, #12
 8000648:	af00      	add	r7, sp, #0
	// Turn off all digits
	for (int i = 0; i < 4; i++) {
 800064a:	2300      	movs	r3, #0
 800064c:	607b      	str	r3, [r7, #4]
 800064e:	e00e      	b.n	800066e <Display_Update+0x2a>
		HAL_GPIO_WritePin(digitPorts[i], digitPins[i], GPIO_PIN_SET);
 8000650:	4b34      	ldr	r3, [pc, #208]	@ (8000724 <Display_Update+0xe0>)
 8000652:	687a      	ldr	r2, [r7, #4]
 8000654:	0092      	lsls	r2, r2, #2
 8000656:	58d0      	ldr	r0, [r2, r3]
 8000658:	4b33      	ldr	r3, [pc, #204]	@ (8000728 <Display_Update+0xe4>)
 800065a:	687a      	ldr	r2, [r7, #4]
 800065c:	0052      	lsls	r2, r2, #1
 800065e:	5ad3      	ldrh	r3, [r2, r3]
 8000660:	2201      	movs	r2, #1
 8000662:	0019      	movs	r1, r3
 8000664:	f001 fb26 	bl	8001cb4 <HAL_GPIO_WritePin>
	for (int i = 0; i < 4; i++) {
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	3301      	adds	r3, #1
 800066c:	607b      	str	r3, [r7, #4]
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	2b03      	cmp	r3, #3
 8000672:	dded      	ble.n	8000650 <Display_Update+0xc>
	}

	// Set segments for the current digit
	for (int seg = 0; seg < 8; seg++) {
 8000674:	2300      	movs	r3, #0
 8000676:	603b      	str	r3, [r7, #0]
 8000678:	e01c      	b.n	80006b4 <Display_Update+0x70>
		HAL_GPIO_WritePin(segmentPorts[seg], segmentPins[seg],
 800067a:	4b2c      	ldr	r3, [pc, #176]	@ (800072c <Display_Update+0xe8>)
 800067c:	683a      	ldr	r2, [r7, #0]
 800067e:	0092      	lsls	r2, r2, #2
 8000680:	58d0      	ldr	r0, [r2, r3]
 8000682:	4b2b      	ldr	r3, [pc, #172]	@ (8000730 <Display_Update+0xec>)
 8000684:	683a      	ldr	r2, [r7, #0]
 8000686:	0052      	lsls	r2, r2, #1
 8000688:	5ad4      	ldrh	r4, [r2, r3]
				segmentMap[digits[currentDigit]][seg] ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800068a:	4b2a      	ldr	r3, [pc, #168]	@ (8000734 <Display_Update+0xf0>)
 800068c:	681a      	ldr	r2, [r3, #0]
 800068e:	4b2a      	ldr	r3, [pc, #168]	@ (8000738 <Display_Update+0xf4>)
 8000690:	0092      	lsls	r2, r2, #2
 8000692:	58d2      	ldr	r2, [r2, r3]
 8000694:	4b29      	ldr	r3, [pc, #164]	@ (800073c <Display_Update+0xf8>)
 8000696:	00d1      	lsls	r1, r2, #3
 8000698:	683a      	ldr	r2, [r7, #0]
 800069a:	188a      	adds	r2, r1, r2
 800069c:	0092      	lsls	r2, r2, #2
 800069e:	58d3      	ldr	r3, [r2, r3]
		HAL_GPIO_WritePin(segmentPorts[seg], segmentPins[seg],
 80006a0:	1e5a      	subs	r2, r3, #1
 80006a2:	4193      	sbcs	r3, r2
 80006a4:	b2db      	uxtb	r3, r3
 80006a6:	001a      	movs	r2, r3
 80006a8:	0021      	movs	r1, r4
 80006aa:	f001 fb03 	bl	8001cb4 <HAL_GPIO_WritePin>
	for (int seg = 0; seg < 8; seg++) {
 80006ae:	683b      	ldr	r3, [r7, #0]
 80006b0:	3301      	adds	r3, #1
 80006b2:	603b      	str	r3, [r7, #0]
 80006b4:	683b      	ldr	r3, [r7, #0]
 80006b6:	2b07      	cmp	r3, #7
 80006b8:	dddf      	ble.n	800067a <Display_Update+0x36>
	}

	HAL_GPIO_WritePin(segmentPorts[7], segmentPins[7],
 80006ba:	4b1c      	ldr	r3, [pc, #112]	@ (800072c <Display_Update+0xe8>)
 80006bc:	69d8      	ldr	r0, [r3, #28]
 80006be:	4b1c      	ldr	r3, [pc, #112]	@ (8000730 <Display_Update+0xec>)
 80006c0:	89d9      	ldrh	r1, [r3, #14]
			(totalTime/1000 > 60 && currentDigit == 1) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80006c2:	4b1f      	ldr	r3, [pc, #124]	@ (8000740 <Display_Update+0xfc>)
 80006c4:	681b      	ldr	r3, [r3, #0]
 80006c6:	4a1f      	ldr	r2, [pc, #124]	@ (8000744 <Display_Update+0x100>)
 80006c8:	4293      	cmp	r3, r2
 80006ca:	d905      	bls.n	80006d8 <Display_Update+0x94>
 80006cc:	4b19      	ldr	r3, [pc, #100]	@ (8000734 <Display_Update+0xf0>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	2b01      	cmp	r3, #1
 80006d2:	d101      	bne.n	80006d8 <Display_Update+0x94>
 80006d4:	2301      	movs	r3, #1
 80006d6:	e000      	b.n	80006da <Display_Update+0x96>
 80006d8:	2300      	movs	r3, #0
	HAL_GPIO_WritePin(segmentPorts[7], segmentPins[7],
 80006da:	b2db      	uxtb	r3, r3
 80006dc:	001a      	movs	r2, r3
 80006de:	f001 fae9 	bl	8001cb4 <HAL_GPIO_WritePin>


	// Enable current digit
	HAL_GPIO_WritePin(digitPorts[currentDigit], digitPins[currentDigit], GPIO_PIN_RESET);
 80006e2:	4b14      	ldr	r3, [pc, #80]	@ (8000734 <Display_Update+0xf0>)
 80006e4:	681a      	ldr	r2, [r3, #0]
 80006e6:	4b0f      	ldr	r3, [pc, #60]	@ (8000724 <Display_Update+0xe0>)
 80006e8:	0092      	lsls	r2, r2, #2
 80006ea:	58d0      	ldr	r0, [r2, r3]
 80006ec:	4b11      	ldr	r3, [pc, #68]	@ (8000734 <Display_Update+0xf0>)
 80006ee:	681a      	ldr	r2, [r3, #0]
 80006f0:	4b0d      	ldr	r3, [pc, #52]	@ (8000728 <Display_Update+0xe4>)
 80006f2:	0052      	lsls	r2, r2, #1
 80006f4:	5ad3      	ldrh	r3, [r2, r3]
 80006f6:	2200      	movs	r2, #0
 80006f8:	0019      	movs	r1, r3
 80006fa:	f001 fadb 	bl	8001cb4 <HAL_GPIO_WritePin>

	// Advance to the next digit for next call
	currentDigit = (currentDigit + 1) % 4;
 80006fe:	4b0d      	ldr	r3, [pc, #52]	@ (8000734 <Display_Update+0xf0>)
 8000700:	681b      	ldr	r3, [r3, #0]
 8000702:	3301      	adds	r3, #1
 8000704:	4a10      	ldr	r2, [pc, #64]	@ (8000748 <Display_Update+0x104>)
 8000706:	4013      	ands	r3, r2
 8000708:	d504      	bpl.n	8000714 <Display_Update+0xd0>
 800070a:	3b01      	subs	r3, #1
 800070c:	2204      	movs	r2, #4
 800070e:	4252      	negs	r2, r2
 8000710:	4313      	orrs	r3, r2
 8000712:	3301      	adds	r3, #1
 8000714:	001a      	movs	r2, r3
 8000716:	4b07      	ldr	r3, [pc, #28]	@ (8000734 <Display_Update+0xf0>)
 8000718:	601a      	str	r2, [r3, #0]

}
 800071a:	46c0      	nop			@ (mov r8, r8)
 800071c:	46bd      	mov	sp, r7
 800071e:	b003      	add	sp, #12
 8000720:	bd90      	pop	{r4, r7, pc}
 8000722:	46c0      	nop			@ (mov r8, r8)
 8000724:	20000000 	.word	0x20000000
 8000728:	20000010 	.word	0x20000010
 800072c:	20000018 	.word	0x20000018
 8000730:	20000038 	.word	0x20000038
 8000734:	20000254 	.word	0x20000254
 8000738:	20000244 	.word	0x20000244
 800073c:	20000048 	.word	0x20000048
 8000740:	20000238 	.word	0x20000238
 8000744:	0000ee47 	.word	0x0000ee47
 8000748:	80000003 	.word	0x80000003

0800074c <UpdateDisplayFromTime>:



void UpdateDisplayFromTime(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b084      	sub	sp, #16
 8000750:	af00      	add	r7, sp, #0
	uint32_t totalSeconds = totalTime / 1000;
 8000752:	4b24      	ldr	r3, [pc, #144]	@ (80007e4 <UpdateDisplayFromTime+0x98>)
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	22fa      	movs	r2, #250	@ 0xfa
 8000758:	0091      	lsls	r1, r2, #2
 800075a:	0018      	movs	r0, r3
 800075c:	f7ff fce6 	bl	800012c <__udivsi3>
 8000760:	0003      	movs	r3, r0
 8000762:	60fb      	str	r3, [r7, #12]
	uint32_t minutes = totalSeconds / 60;
 8000764:	68fb      	ldr	r3, [r7, #12]
 8000766:	213c      	movs	r1, #60	@ 0x3c
 8000768:	0018      	movs	r0, r3
 800076a:	f7ff fcdf 	bl	800012c <__udivsi3>
 800076e:	0003      	movs	r3, r0
 8000770:	60bb      	str	r3, [r7, #8]
	uint32_t seconds = totalSeconds % 60;
 8000772:	68fb      	ldr	r3, [r7, #12]
 8000774:	213c      	movs	r1, #60	@ 0x3c
 8000776:	0018      	movs	r0, r3
 8000778:	f7ff fd5e 	bl	8000238 <__aeabi_uidivmod>
 800077c:	000b      	movs	r3, r1
 800077e:	607b      	str	r3, [r7, #4]

	// MM:SS
	digits[0] = (minutes / 10) % 10;
 8000780:	68bb      	ldr	r3, [r7, #8]
 8000782:	210a      	movs	r1, #10
 8000784:	0018      	movs	r0, r3
 8000786:	f7ff fcd1 	bl	800012c <__udivsi3>
 800078a:	0003      	movs	r3, r0
 800078c:	210a      	movs	r1, #10
 800078e:	0018      	movs	r0, r3
 8000790:	f7ff fd52 	bl	8000238 <__aeabi_uidivmod>
 8000794:	000b      	movs	r3, r1
 8000796:	001a      	movs	r2, r3
 8000798:	4b13      	ldr	r3, [pc, #76]	@ (80007e8 <UpdateDisplayFromTime+0x9c>)
 800079a:	601a      	str	r2, [r3, #0]
	digits[1] =  minutes % 10;
 800079c:	68bb      	ldr	r3, [r7, #8]
 800079e:	210a      	movs	r1, #10
 80007a0:	0018      	movs	r0, r3
 80007a2:	f7ff fd49 	bl	8000238 <__aeabi_uidivmod>
 80007a6:	000b      	movs	r3, r1
 80007a8:	001a      	movs	r2, r3
 80007aa:	4b0f      	ldr	r3, [pc, #60]	@ (80007e8 <UpdateDisplayFromTime+0x9c>)
 80007ac:	605a      	str	r2, [r3, #4]
	digits[2] = (int)((int)((seconds / 10)) % 10);
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	210a      	movs	r1, #10
 80007b2:	0018      	movs	r0, r3
 80007b4:	f7ff fcba 	bl	800012c <__udivsi3>
 80007b8:	0003      	movs	r3, r0
 80007ba:	210a      	movs	r1, #10
 80007bc:	0018      	movs	r0, r3
 80007be:	f7ff fe25 	bl	800040c <__aeabi_idivmod>
 80007c2:	000b      	movs	r3, r1
 80007c4:	001a      	movs	r2, r3
 80007c6:	4b08      	ldr	r3, [pc, #32]	@ (80007e8 <UpdateDisplayFromTime+0x9c>)
 80007c8:	609a      	str	r2, [r3, #8]
	digits[3] =  seconds % 10;
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	210a      	movs	r1, #10
 80007ce:	0018      	movs	r0, r3
 80007d0:	f7ff fd32 	bl	8000238 <__aeabi_uidivmod>
 80007d4:	000b      	movs	r3, r1
 80007d6:	001a      	movs	r2, r3
 80007d8:	4b03      	ldr	r3, [pc, #12]	@ (80007e8 <UpdateDisplayFromTime+0x9c>)
 80007da:	60da      	str	r2, [r3, #12]
}
 80007dc:	46c0      	nop			@ (mov r8, r8)
 80007de:	46bd      	mov	sp, r7
 80007e0:	b004      	add	sp, #16
 80007e2:	bd80      	pop	{r7, pc}
 80007e4:	20000238 	.word	0x20000238
 80007e8:	20000244 	.word	0x20000244

080007ec <StartDefaultTask>:


void StartDefaultTask(void const * argument)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b082      	sub	sp, #8
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
	for(;;)
	{
		osDelay(1);
 80007f4:	2001      	movs	r0, #1
 80007f6:	f004 ff76 	bl	80056e6 <osDelay>
 80007fa:	e7fb      	b.n	80007f4 <StartDefaultTask+0x8>

080007fc <StartTask01>:
	}
}

void StartTask01(void const * argument)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b086      	sub	sp, #24
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
	uint32_t lastSampledTime = HAL_GetTick();
 8000804:	f000 fde2 	bl	80013cc <HAL_GetTick>
 8000808:	0003      	movs	r3, r0
 800080a:	617b      	str	r3, [r7, #20]

	osSemaphoreDef(semHandle);
 800080c:	2300      	movs	r3, #0
 800080e:	60fb      	str	r3, [r7, #12]
	semHandle = osSemaphoreCreate(osSemaphore(semHandle), 1);
 8000810:	230c      	movs	r3, #12
 8000812:	18fb      	adds	r3, r7, r3
 8000814:	2101      	movs	r1, #1
 8000816:	0018      	movs	r0, r3
 8000818:	f004 ff79 	bl	800570e <osSemaphoreCreate>
 800081c:	0002      	movs	r2, r0
 800081e:	4b31      	ldr	r3, [pc, #196]	@ (80008e4 <StartTask01+0xe8>)
 8000820:	601a      	str	r2, [r3, #0]

	for(;;)
	{
		// now = timpul de la inceputul buclei
		uint32_t now = HAL_GetTick();
 8000822:	f000 fdd3 	bl	80013cc <HAL_GetTick>
 8000826:	0003      	movs	r3, r0
 8000828:	613b      	str	r3, [r7, #16]

		switch(startFlag) {
 800082a:	4b2f      	ldr	r3, [pc, #188]	@ (80008e8 <StartTask01+0xec>)
 800082c:	781b      	ldrb	r3, [r3, #0]
 800082e:	b2db      	uxtb	r3, r3
 8000830:	2b05      	cmp	r3, #5
 8000832:	d852      	bhi.n	80008da <StartTask01+0xde>
 8000834:	009a      	lsls	r2, r3, #2
 8000836:	4b2d      	ldr	r3, [pc, #180]	@ (80008ec <StartTask01+0xf0>)
 8000838:	18d3      	adds	r3, r2, r3
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	469f      	mov	pc, r3
		case 0: // idle
			break;

		case 1: // start or resume
			startTime       = now;          // remember momentul preluării
 800083e:	4b2c      	ldr	r3, [pc, #176]	@ (80008f0 <StartTask01+0xf4>)
 8000840:	693a      	ldr	r2, [r7, #16]
 8000842:	601a      	str	r2, [r3, #0]
			lastRunTime     = now;          // for UART pacing in Task01
 8000844:	4b2b      	ldr	r3, [pc, #172]	@ (80008f4 <StartTask01+0xf8>)
 8000846:	693a      	ldr	r2, [r7, #16]
 8000848:	601a      	str	r2, [r3, #0]
			lastSampledTime = now;          // for delta accumulation
 800084a:	693b      	ldr	r3, [r7, #16]
 800084c:	617b      	str	r3, [r7, #20]
			startFlag       = 2;            // transition to running
 800084e:	4b26      	ldr	r3, [pc, #152]	@ (80008e8 <StartTask01+0xec>)
 8000850:	2202      	movs	r2, #2
 8000852:	701a      	strb	r2, [r3, #0]
			break;
 8000854:	e041      	b.n	80008da <StartTask01+0xde>

		case 2: // running
			totalTime += (now - lastSampledTime);
 8000856:	693a      	ldr	r2, [r7, #16]
 8000858:	697b      	ldr	r3, [r7, #20]
 800085a:	1ad2      	subs	r2, r2, r3
 800085c:	4b26      	ldr	r3, [pc, #152]	@ (80008f8 <StartTask01+0xfc>)
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	18d2      	adds	r2, r2, r3
 8000862:	4b25      	ldr	r3, [pc, #148]	@ (80008f8 <StartTask01+0xfc>)
 8000864:	601a      	str	r2, [r3, #0]
			lastSampledTime = now;
 8000866:	693b      	ldr	r3, [r7, #16]
 8000868:	617b      	str	r3, [r7, #20]

			if ((now - lastRunTime) >= 500) {
 800086a:	4b22      	ldr	r3, [pc, #136]	@ (80008f4 <StartTask01+0xf8>)
 800086c:	681b      	ldr	r3, [r3, #0]
 800086e:	693a      	ldr	r2, [r7, #16]
 8000870:	1ad2      	subs	r2, r2, r3
 8000872:	23fa      	movs	r3, #250	@ 0xfa
 8000874:	005b      	lsls	r3, r3, #1
 8000876:	429a      	cmp	r2, r3
 8000878:	d32e      	bcc.n	80008d8 <StartTask01+0xdc>
				lastRunTime = now;
 800087a:	4b1e      	ldr	r3, [pc, #120]	@ (80008f4 <StartTask01+0xf8>)
 800087c:	693a      	ldr	r2, [r7, #16]
 800087e:	601a      	str	r2, [r3, #0]
				osSemaphoreRelease(semHandle);   // release every 500ms
 8000880:	4b18      	ldr	r3, [pc, #96]	@ (80008e4 <StartTask01+0xe8>)
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	0018      	movs	r0, r3
 8000886:	f004 ffab 	bl	80057e0 <osSemaphoreRelease>
			}
			break;
 800088a:	e025      	b.n	80008d8 <StartTask01+0xdc>

		case 3: // stop
			elapsedTime += now - startTime;
 800088c:	4b18      	ldr	r3, [pc, #96]	@ (80008f0 <StartTask01+0xf4>)
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	693a      	ldr	r2, [r7, #16]
 8000892:	1ad2      	subs	r2, r2, r3
 8000894:	4b19      	ldr	r3, [pc, #100]	@ (80008fc <StartTask01+0x100>)
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	18d2      	adds	r2, r2, r3
 800089a:	4b18      	ldr	r3, [pc, #96]	@ (80008fc <StartTask01+0x100>)
 800089c:	601a      	str	r2, [r3, #0]
			totalTime    = elapsedTime;
 800089e:	4b17      	ldr	r3, [pc, #92]	@ (80008fc <StartTask01+0x100>)
 80008a0:	681a      	ldr	r2, [r3, #0]
 80008a2:	4b15      	ldr	r3, [pc, #84]	@ (80008f8 <StartTask01+0xfc>)
 80008a4:	601a      	str	r2, [r3, #0]
			startFlag    = 0; // pause
 80008a6:	4b10      	ldr	r3, [pc, #64]	@ (80008e8 <StartTask01+0xec>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	701a      	strb	r2, [r3, #0]
			break;
 80008ac:	e015      	b.n	80008da <StartTask01+0xde>

		case 4: // reset
			elapsedTime = 0;
 80008ae:	4b13      	ldr	r3, [pc, #76]	@ (80008fc <StartTask01+0x100>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	601a      	str	r2, [r3, #0]
			totalTime   = 0;
 80008b4:	4b10      	ldr	r3, [pc, #64]	@ (80008f8 <StartTask01+0xfc>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	601a      	str	r2, [r3, #0]
			startFlag   = 0;
 80008ba:	4b0b      	ldr	r3, [pc, #44]	@ (80008e8 <StartTask01+0xec>)
 80008bc:	2200      	movs	r2, #0
 80008be:	701a      	strb	r2, [r3, #0]
			break;
 80008c0:	e00b      	b.n	80008da <StartTask01+0xde>

		case 5: // debbug
			osDelay(1000);
 80008c2:	23fa      	movs	r3, #250	@ 0xfa
 80008c4:	009b      	lsls	r3, r3, #2
 80008c6:	0018      	movs	r0, r3
 80008c8:	f004 ff0d 	bl	80056e6 <osDelay>
			startFlag = 3;
 80008cc:	4b06      	ldr	r3, [pc, #24]	@ (80008e8 <StartTask01+0xec>)
 80008ce:	2203      	movs	r2, #3
 80008d0:	701a      	strb	r2, [r3, #0]
			break;
 80008d2:	e002      	b.n	80008da <StartTask01+0xde>
			break;
 80008d4:	46c0      	nop			@ (mov r8, r8)
 80008d6:	e000      	b.n	80008da <StartTask01+0xde>
			break;
 80008d8:	46c0      	nop			@ (mov r8, r8)
		}
		osDelay(1);
 80008da:	2001      	movs	r0, #1
 80008dc:	f004 ff03 	bl	80056e6 <osDelay>
	{
 80008e0:	e79f      	b.n	8000822 <StartTask01+0x26>
 80008e2:	46c0      	nop			@ (mov r8, r8)
 80008e4:	20000224 	.word	0x20000224
 80008e8:	20000228 	.word	0x20000228
 80008ec:	0800800c 	.word	0x0800800c
 80008f0:	2000022c 	.word	0x2000022c
 80008f4:	20000234 	.word	0x20000234
 80008f8:	20000238 	.word	0x20000238
 80008fc:	20000230 	.word	0x20000230

08000900 <StartTask02>:
	}
}

void StartTask02(void const * argument)
{
 8000900:	b590      	push	{r4, r7, lr}
 8000902:	b093      	sub	sp, #76	@ 0x4c
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
	// Recepție UART activă permanent
	HAL_UART_Receive_IT(&huart2, &rxData, 1);
 8000908:	4923      	ldr	r1, [pc, #140]	@ (8000998 <StartTask02+0x98>)
 800090a:	4b24      	ldr	r3, [pc, #144]	@ (800099c <StartTask02+0x9c>)
 800090c:	2201      	movs	r2, #1
 800090e:	0018      	movs	r0, r3
 8000910:	f002 fe56 	bl	80035c0 <HAL_UART_Receive_IT>

	for (;;)
	{
		uint32_t now = HAL_GetTick();
 8000914:	f000 fd5a 	bl	80013cc <HAL_GetTick>
 8000918:	0003      	movs	r3, r0
 800091a:	647b      	str	r3, [r7, #68]	@ 0x44
		{
			lastRunTime = now;
			sendStatus |= 0b1;
		}*/
		//if(sendStatus) {
		if (osSemaphoreWait(semHandle, 20) == osOK) {
 800091c:	4b20      	ldr	r3, [pc, #128]	@ (80009a0 <StartTask02+0xa0>)
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	2114      	movs	r1, #20
 8000922:	0018      	movs	r0, r3
 8000924:	f004 ff12 	bl	800574c <osSemaphoreWait>
 8000928:	1e03      	subs	r3, r0, #0
 800092a:	d119      	bne.n	8000960 <StartTask02+0x60>
			char buffer[50];
			int len = sprintf(buffer, "Timp: %lu ms\r\n", totalTime);
 800092c:	4b1d      	ldr	r3, [pc, #116]	@ (80009a4 <StartTask02+0xa4>)
 800092e:	681a      	ldr	r2, [r3, #0]
 8000930:	491d      	ldr	r1, [pc, #116]	@ (80009a8 <StartTask02+0xa8>)
 8000932:	240c      	movs	r4, #12
 8000934:	193b      	adds	r3, r7, r4
 8000936:	0018      	movs	r0, r3
 8000938:	f006 fe12 	bl	8007560 <siprintf>
 800093c:	0003      	movs	r3, r0
 800093e:	643b      	str	r3, [r7, #64]	@ 0x40
			HAL_UART_Transmit(&huart2, (uint8_t*)buffer, len, HAL_MAX_DELAY);
 8000940:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000942:	b29a      	uxth	r2, r3
 8000944:	2301      	movs	r3, #1
 8000946:	425b      	negs	r3, r3
 8000948:	1939      	adds	r1, r7, r4
 800094a:	4814      	ldr	r0, [pc, #80]	@ (800099c <StartTask02+0x9c>)
 800094c:	f002 fd94 	bl	8003478 <HAL_UART_Transmit>

			sendStatus &= ~(0b1);
 8000950:	4b16      	ldr	r3, [pc, #88]	@ (80009ac <StartTask02+0xac>)
 8000952:	781b      	ldrb	r3, [r3, #0]
 8000954:	b2db      	uxtb	r3, r3
 8000956:	2201      	movs	r2, #1
 8000958:	4393      	bics	r3, r2
 800095a:	b2da      	uxtb	r2, r3
 800095c:	4b13      	ldr	r3, [pc, #76]	@ (80009ac <StartTask02+0xac>)
 800095e:	701a      	strb	r2, [r3, #0]
		}
		if(debugActive)
 8000960:	4b13      	ldr	r3, [pc, #76]	@ (80009b0 <StartTask02+0xb0>)
 8000962:	781b      	ldrb	r3, [r3, #0]
 8000964:	2b00      	cmp	r3, #0
 8000966:	d00d      	beq.n	8000984 <StartTask02+0x84>
		{
			if(now - debugTimestamp < 2000)
 8000968:	4b12      	ldr	r3, [pc, #72]	@ (80009b4 <StartTask02+0xb4>)
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800096e:	1ad2      	subs	r2, r2, r3
 8000970:	23fa      	movs	r3, #250	@ 0xfa
 8000972:	00db      	lsls	r3, r3, #3
 8000974:	429a      	cmp	r2, r3
 8000976:	d202      	bcs.n	800097e <StartTask02+0x7e>
			{
				// Keep showing debug values
				Display_Update();
 8000978:	f7ff fe64 	bl	8000644 <Display_Update>
 800097c:	e002      	b.n	8000984 <StartTask02+0x84>
			}
			else
			{
				debugActive = 0; // Debug mode expired
 800097e:	4b0c      	ldr	r3, [pc, #48]	@ (80009b0 <StartTask02+0xb0>)
 8000980:	2200      	movs	r2, #0
 8000982:	701a      	strb	r2, [r3, #0]
			}
		}
		UpdateDisplayFromTime();
 8000984:	f7ff fee2 	bl	800074c <UpdateDisplayFromTime>
		lastTimeDisplayed = HAL_GetTick();
 8000988:	f000 fd20 	bl	80013cc <HAL_GetTick>
 800098c:	0002      	movs	r2, r0
 800098e:	4b0a      	ldr	r3, [pc, #40]	@ (80009b8 <StartTask02+0xb8>)
 8000990:	601a      	str	r2, [r3, #0]
		Display_Update();
 8000992:	f7ff fe57 	bl	8000644 <Display_Update>
	{
 8000996:	e7bd      	b.n	8000914 <StartTask02+0x14>
 8000998:	20000241 	.word	0x20000241
 800099c:	20000308 	.word	0x20000308
 80009a0:	20000224 	.word	0x20000224
 80009a4:	20000238 	.word	0x20000238
 80009a8:	08007f88 	.word	0x08007f88
 80009ac:	20000240 	.word	0x20000240
 80009b0:	20000258 	.word	0x20000258
 80009b4:	2000025c 	.word	0x2000025c
 80009b8:	2000023c 	.word	0x2000023c

080009bc <HAL_UART_RxCpltCallback>:

}

// Callback UART
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80009bc:	b590      	push	{r4, r7, lr}
 80009be:	b087      	sub	sp, #28
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART2)
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	4a38      	ldr	r2, [pc, #224]	@ (8000aac <HAL_UART_RxCpltCallback+0xf0>)
 80009ca:	4293      	cmp	r3, r2
 80009cc:	d169      	bne.n	8000aa2 <HAL_UART_RxCpltCallback+0xe6>
	{
		// Debug: trimitem caracterul primit înapoi
		HAL_UART_Transmit(&huart2, &rxData, 1, HAL_MAX_DELAY);
 80009ce:	2301      	movs	r3, #1
 80009d0:	425b      	negs	r3, r3
 80009d2:	4937      	ldr	r1, [pc, #220]	@ (8000ab0 <HAL_UART_RxCpltCallback+0xf4>)
 80009d4:	4837      	ldr	r0, [pc, #220]	@ (8000ab4 <HAL_UART_RxCpltCallback+0xf8>)
 80009d6:	2201      	movs	r2, #1
 80009d8:	f002 fd4e 	bl	8003478 <HAL_UART_Transmit>

		if (rxData == 'S')  // Start
 80009dc:	4b34      	ldr	r3, [pc, #208]	@ (8000ab0 <HAL_UART_RxCpltCallback+0xf4>)
 80009de:	781b      	ldrb	r3, [r3, #0]
 80009e0:	2b53      	cmp	r3, #83	@ 0x53
 80009e2:	d10a      	bne.n	80009fa <HAL_UART_RxCpltCallback+0x3e>
		{
			HAL_GPIO_WritePin(GPIOA, LED_GREEN_Pin, GPIO_PIN_SET);
 80009e4:	23a0      	movs	r3, #160	@ 0xa0
 80009e6:	05db      	lsls	r3, r3, #23
 80009e8:	2201      	movs	r2, #1
 80009ea:	2120      	movs	r1, #32
 80009ec:	0018      	movs	r0, r3
 80009ee:	f001 f961 	bl	8001cb4 <HAL_GPIO_WritePin>
			startFlag = 1;
 80009f2:	4b31      	ldr	r3, [pc, #196]	@ (8000ab8 <HAL_UART_RxCpltCallback+0xfc>)
 80009f4:	2201      	movs	r2, #1
 80009f6:	701a      	strb	r2, [r3, #0]
 80009f8:	e04d      	b.n	8000a96 <HAL_UART_RxCpltCallback+0xda>
		}
		else if (rxData == 'T') // Stop
 80009fa:	4b2d      	ldr	r3, [pc, #180]	@ (8000ab0 <HAL_UART_RxCpltCallback+0xf4>)
 80009fc:	781b      	ldrb	r3, [r3, #0]
 80009fe:	2b54      	cmp	r3, #84	@ 0x54
 8000a00:	d10a      	bne.n	8000a18 <HAL_UART_RxCpltCallback+0x5c>
		{
			HAL_GPIO_WritePin(GPIOA, LED_GREEN_Pin, GPIO_PIN_RESET);
 8000a02:	23a0      	movs	r3, #160	@ 0xa0
 8000a04:	05db      	lsls	r3, r3, #23
 8000a06:	2200      	movs	r2, #0
 8000a08:	2120      	movs	r1, #32
 8000a0a:	0018      	movs	r0, r3
 8000a0c:	f001 f952 	bl	8001cb4 <HAL_GPIO_WritePin>
			startFlag = 3;
 8000a10:	4b29      	ldr	r3, [pc, #164]	@ (8000ab8 <HAL_UART_RxCpltCallback+0xfc>)
 8000a12:	2203      	movs	r2, #3
 8000a14:	701a      	strb	r2, [r3, #0]
 8000a16:	e03e      	b.n	8000a96 <HAL_UART_RxCpltCallback+0xda>
		}
		else if (rxData == 'R') // Reset (opțional)
 8000a18:	4b25      	ldr	r3, [pc, #148]	@ (8000ab0 <HAL_UART_RxCpltCallback+0xf4>)
 8000a1a:	781b      	ldrb	r3, [r3, #0]
 8000a1c:	2b52      	cmp	r3, #82	@ 0x52
 8000a1e:	d109      	bne.n	8000a34 <HAL_UART_RxCpltCallback+0x78>
		{
			startFlag = 4; // va reseta timerul
 8000a20:	4b25      	ldr	r3, [pc, #148]	@ (8000ab8 <HAL_UART_RxCpltCallback+0xfc>)
 8000a22:	2204      	movs	r2, #4
 8000a24:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_TogglePin(GPIOA, LED_GREEN_Pin);
 8000a26:	23a0      	movs	r3, #160	@ 0xa0
 8000a28:	05db      	lsls	r3, r3, #23
 8000a2a:	2120      	movs	r1, #32
 8000a2c:	0018      	movs	r0, r3
 8000a2e:	f001 f95e 	bl	8001cee <HAL_GPIO_TogglePin>
 8000a32:	e030      	b.n	8000a96 <HAL_UART_RxCpltCallback+0xda>
		}
		else if (rxData == 'Z') // Debug: afișăm cifra 1
 8000a34:	4b1e      	ldr	r3, [pc, #120]	@ (8000ab0 <HAL_UART_RxCpltCallback+0xf4>)
 8000a36:	781b      	ldrb	r3, [r3, #0]
 8000a38:	2b5a      	cmp	r3, #90	@ 0x5a
 8000a3a:	d12c      	bne.n	8000a96 <HAL_UART_RxCpltCallback+0xda>
		{
			startFlag = 0;
 8000a3c:	4b1e      	ldr	r3, [pc, #120]	@ (8000ab8 <HAL_UART_RxCpltCallback+0xfc>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	701a      	strb	r2, [r3, #0]
			digits[0] = 1;
 8000a42:	4b1e      	ldr	r3, [pc, #120]	@ (8000abc <HAL_UART_RxCpltCallback+0x100>)
 8000a44:	2201      	movs	r2, #1
 8000a46:	601a      	str	r2, [r3, #0]
			digits[1] = 2;
 8000a48:	4b1c      	ldr	r3, [pc, #112]	@ (8000abc <HAL_UART_RxCpltCallback+0x100>)
 8000a4a:	2202      	movs	r2, #2
 8000a4c:	605a      	str	r2, [r3, #4]
			digits[2] = 3;
 8000a4e:	4b1b      	ldr	r3, [pc, #108]	@ (8000abc <HAL_UART_RxCpltCallback+0x100>)
 8000a50:	2203      	movs	r2, #3
 8000a52:	609a      	str	r2, [r3, #8]
			digits[3] = 4;
 8000a54:	4b19      	ldr	r3, [pc, #100]	@ (8000abc <HAL_UART_RxCpltCallback+0x100>)
 8000a56:	2204      	movs	r2, #4
 8000a58:	60da      	str	r2, [r3, #12]

			debugActive = 1;                 // enable debug
 8000a5a:	4b19      	ldr	r3, [pc, #100]	@ (8000ac0 <HAL_UART_RxCpltCallback+0x104>)
 8000a5c:	2201      	movs	r2, #1
 8000a5e:	701a      	strb	r2, [r3, #0]
			debugTimestamp = HAL_GetTick();  // store the current time
 8000a60:	f000 fcb4 	bl	80013cc <HAL_GetTick>
 8000a64:	0002      	movs	r2, r0
 8000a66:	4b17      	ldr	r3, [pc, #92]	@ (8000ac4 <HAL_UART_RxCpltCallback+0x108>)
 8000a68:	601a      	str	r2, [r3, #0]

			char dbgMsg[] = "DEBUG: \r\n";
 8000a6a:	240c      	movs	r4, #12
 8000a6c:	193b      	adds	r3, r7, r4
 8000a6e:	4a16      	ldr	r2, [pc, #88]	@ (8000ac8 <HAL_UART_RxCpltCallback+0x10c>)
 8000a70:	ca03      	ldmia	r2!, {r0, r1}
 8000a72:	c303      	stmia	r3!, {r0, r1}
 8000a74:	8812      	ldrh	r2, [r2, #0]
 8000a76:	801a      	strh	r2, [r3, #0]
			HAL_UART_Transmit(&huart2, (uint8_t*)dbgMsg, strlen(dbgMsg), HAL_MAX_DELAY);
 8000a78:	193b      	adds	r3, r7, r4
 8000a7a:	0018      	movs	r0, r3
 8000a7c:	f7ff fb44 	bl	8000108 <strlen>
 8000a80:	0003      	movs	r3, r0
 8000a82:	b29a      	uxth	r2, r3
 8000a84:	2301      	movs	r3, #1
 8000a86:	425b      	negs	r3, r3
 8000a88:	1939      	adds	r1, r7, r4
 8000a8a:	480a      	ldr	r0, [pc, #40]	@ (8000ab4 <HAL_UART_RxCpltCallback+0xf8>)
 8000a8c:	f002 fcf4 	bl	8003478 <HAL_UART_Transmit>

			startFlag = 5;
 8000a90:	4b09      	ldr	r3, [pc, #36]	@ (8000ab8 <HAL_UART_RxCpltCallback+0xfc>)
 8000a92:	2205      	movs	r2, #5
 8000a94:	701a      	strb	r2, [r3, #0]
		}
		// Re-armăm recepția
		HAL_UART_Receive_IT(&huart2, &rxData, 1);
 8000a96:	4906      	ldr	r1, [pc, #24]	@ (8000ab0 <HAL_UART_RxCpltCallback+0xf4>)
 8000a98:	4b06      	ldr	r3, [pc, #24]	@ (8000ab4 <HAL_UART_RxCpltCallback+0xf8>)
 8000a9a:	2201      	movs	r2, #1
 8000a9c:	0018      	movs	r0, r3
 8000a9e:	f002 fd8f 	bl	80035c0 <HAL_UART_Receive_IT>
	}
}
 8000aa2:	46c0      	nop			@ (mov r8, r8)
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	b007      	add	sp, #28
 8000aa8:	bd90      	pop	{r4, r7, pc}
 8000aaa:	46c0      	nop			@ (mov r8, r8)
 8000aac:	40004400 	.word	0x40004400
 8000ab0:	20000241 	.word	0x20000241
 8000ab4:	20000308 	.word	0x20000308
 8000ab8:	20000228 	.word	0x20000228
 8000abc:	20000244 	.word	0x20000244
 8000ac0:	20000258 	.word	0x20000258
 8000ac4:	2000025c 	.word	0x2000025c
 8000ac8:	08007f98 	.word	0x08007f98

08000acc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000acc:	b5b0      	push	{r4, r5, r7, lr}
 8000ace:	b090      	sub	sp, #64	@ 0x40
 8000ad0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ad2:	f000 fc49 	bl	8001368 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ad6:	f000 f845 	bl	8000b64 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ada:	f000 f94d 	bl	8000d78 <MX_GPIO_Init>
  MX_DMA_Init();
 8000ade:	f000 f92d 	bl	8000d3c <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000ae2:	f000 f8dd 	bl	8000ca0 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000ae6:	f000 f885 	bl	8000bf4 <MX_TIM2_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000aea:	252c      	movs	r5, #44	@ 0x2c
 8000aec:	197b      	adds	r3, r7, r5
 8000aee:	4a17      	ldr	r2, [pc, #92]	@ (8000b4c <main+0x80>)
 8000af0:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000af2:	c313      	stmia	r3!, {r0, r1, r4}
 8000af4:	ca03      	ldmia	r2!, {r0, r1}
 8000af6:	c303      	stmia	r3!, {r0, r1}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000af8:	197b      	adds	r3, r7, r5
 8000afa:	2100      	movs	r1, #0
 8000afc:	0018      	movs	r0, r3
 8000afe:	f004 fdca 	bl	8005696 <osThreadCreate>
 8000b02:	0002      	movs	r2, r0
 8000b04:	4b12      	ldr	r3, [pc, #72]	@ (8000b50 <main+0x84>)
 8000b06:	601a      	str	r2, [r3, #0]

  /* definition and creation of myTask02 */
  osThreadDef(myTask02, StartTask02, osPriorityBelowNormal, 0, 128);
 8000b08:	2518      	movs	r5, #24
 8000b0a:	197b      	adds	r3, r7, r5
 8000b0c:	4a11      	ldr	r2, [pc, #68]	@ (8000b54 <main+0x88>)
 8000b0e:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000b10:	c313      	stmia	r3!, {r0, r1, r4}
 8000b12:	ca03      	ldmia	r2!, {r0, r1}
 8000b14:	c303      	stmia	r3!, {r0, r1}
  myTask02Handle = osThreadCreate(osThread(myTask02), NULL);
 8000b16:	197b      	adds	r3, r7, r5
 8000b18:	2100      	movs	r1, #0
 8000b1a:	0018      	movs	r0, r3
 8000b1c:	f004 fdbb 	bl	8005696 <osThreadCreate>
 8000b20:	0002      	movs	r2, r0
 8000b22:	4b0d      	ldr	r3, [pc, #52]	@ (8000b58 <main+0x8c>)
 8000b24:	601a      	str	r2, [r3, #0]

  /* definition and creation of myTask01 */
  osThreadDef(myTask01, StartTask01, osPriorityRealtime, 0, 128);
 8000b26:	1d3b      	adds	r3, r7, #4
 8000b28:	4a0c      	ldr	r2, [pc, #48]	@ (8000b5c <main+0x90>)
 8000b2a:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000b2c:	c313      	stmia	r3!, {r0, r1, r4}
 8000b2e:	ca03      	ldmia	r2!, {r0, r1}
 8000b30:	c303      	stmia	r3!, {r0, r1}
  myTask01Handle = osThreadCreate(osThread(myTask01), NULL);
 8000b32:	1d3b      	adds	r3, r7, #4
 8000b34:	2100      	movs	r1, #0
 8000b36:	0018      	movs	r0, r3
 8000b38:	f004 fdad 	bl	8005696 <osThreadCreate>
 8000b3c:	0002      	movs	r2, r0
 8000b3e:	4b08      	ldr	r3, [pc, #32]	@ (8000b60 <main+0x94>)
 8000b40:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000b42:	f004 fda0 	bl	8005686 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000b46:	46c0      	nop			@ (mov r8, r8)
 8000b48:	e7fd      	b.n	8000b46 <main+0x7a>
 8000b4a:	46c0      	nop			@ (mov r8, r8)
 8000b4c:	08007fb0 	.word	0x08007fb0
 8000b50:	2000039c 	.word	0x2000039c
 8000b54:	08007fd0 	.word	0x08007fd0
 8000b58:	200003a0 	.word	0x200003a0
 8000b5c:	08007ff0 	.word	0x08007ff0
 8000b60:	200003a4 	.word	0x200003a4

08000b64 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b64:	b590      	push	{r4, r7, lr}
 8000b66:	b093      	sub	sp, #76	@ 0x4c
 8000b68:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b6a:	2410      	movs	r4, #16
 8000b6c:	193b      	adds	r3, r7, r4
 8000b6e:	0018      	movs	r0, r3
 8000b70:	2338      	movs	r3, #56	@ 0x38
 8000b72:	001a      	movs	r2, r3
 8000b74:	2100      	movs	r1, #0
 8000b76:	f006 fd15 	bl	80075a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b7a:	003b      	movs	r3, r7
 8000b7c:	0018      	movs	r0, r3
 8000b7e:	2310      	movs	r3, #16
 8000b80:	001a      	movs	r2, r3
 8000b82:	2100      	movs	r1, #0
 8000b84:	f006 fd0e 	bl	80075a4 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b88:	2380      	movs	r3, #128	@ 0x80
 8000b8a:	009b      	lsls	r3, r3, #2
 8000b8c:	0018      	movs	r0, r3
 8000b8e:	f001 f8c9 	bl	8001d24 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b92:	193b      	adds	r3, r7, r4
 8000b94:	2202      	movs	r2, #2
 8000b96:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b98:	193b      	adds	r3, r7, r4
 8000b9a:	2280      	movs	r2, #128	@ 0x80
 8000b9c:	0052      	lsls	r2, r2, #1
 8000b9e:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000ba0:	193b      	adds	r3, r7, r4
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ba6:	193b      	adds	r3, r7, r4
 8000ba8:	2240      	movs	r2, #64	@ 0x40
 8000baa:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000bac:	193b      	adds	r3, r7, r4
 8000bae:	2200      	movs	r2, #0
 8000bb0:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bb2:	193b      	adds	r3, r7, r4
 8000bb4:	0018      	movs	r0, r3
 8000bb6:	f001 f901 	bl	8001dbc <HAL_RCC_OscConfig>
 8000bba:	1e03      	subs	r3, r0, #0
 8000bbc:	d001      	beq.n	8000bc2 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8000bbe:	f000 f9d7 	bl	8000f70 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bc2:	003b      	movs	r3, r7
 8000bc4:	2207      	movs	r2, #7
 8000bc6:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000bc8:	003b      	movs	r3, r7
 8000bca:	2200      	movs	r2, #0
 8000bcc:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bce:	003b      	movs	r3, r7
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000bd4:	003b      	movs	r3, r7
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000bda:	003b      	movs	r3, r7
 8000bdc:	2100      	movs	r1, #0
 8000bde:	0018      	movs	r0, r3
 8000be0:	f001 fc06 	bl	80023f0 <HAL_RCC_ClockConfig>
 8000be4:	1e03      	subs	r3, r0, #0
 8000be6:	d001      	beq.n	8000bec <SystemClock_Config+0x88>
  {
    Error_Handler();
 8000be8:	f000 f9c2 	bl	8000f70 <Error_Handler>
  }
}
 8000bec:	46c0      	nop			@ (mov r8, r8)
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	b013      	add	sp, #76	@ 0x4c
 8000bf2:	bd90      	pop	{r4, r7, pc}

08000bf4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b088      	sub	sp, #32
 8000bf8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000bfa:	2310      	movs	r3, #16
 8000bfc:	18fb      	adds	r3, r7, r3
 8000bfe:	0018      	movs	r0, r3
 8000c00:	2310      	movs	r3, #16
 8000c02:	001a      	movs	r2, r3
 8000c04:	2100      	movs	r1, #0
 8000c06:	f006 fccd 	bl	80075a4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c0a:	1d3b      	adds	r3, r7, #4
 8000c0c:	0018      	movs	r0, r3
 8000c0e:	230c      	movs	r3, #12
 8000c10:	001a      	movs	r2, r3
 8000c12:	2100      	movs	r1, #0
 8000c14:	f006 fcc6 	bl	80075a4 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000c18:	4b1e      	ldr	r3, [pc, #120]	@ (8000c94 <MX_TIM2_Init+0xa0>)
 8000c1a:	2280      	movs	r2, #128	@ 0x80
 8000c1c:	05d2      	lsls	r2, r2, #23
 8000c1e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 16000-1;
 8000c20:	4b1c      	ldr	r3, [pc, #112]	@ (8000c94 <MX_TIM2_Init+0xa0>)
 8000c22:	4a1d      	ldr	r2, [pc, #116]	@ (8000c98 <MX_TIM2_Init+0xa4>)
 8000c24:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c26:	4b1b      	ldr	r3, [pc, #108]	@ (8000c94 <MX_TIM2_Init+0xa0>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8000c2c:	4b19      	ldr	r3, [pc, #100]	@ (8000c94 <MX_TIM2_Init+0xa0>)
 8000c2e:	4a1b      	ldr	r2, [pc, #108]	@ (8000c9c <MX_TIM2_Init+0xa8>)
 8000c30:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c32:	4b18      	ldr	r3, [pc, #96]	@ (8000c94 <MX_TIM2_Init+0xa0>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c38:	4b16      	ldr	r3, [pc, #88]	@ (8000c94 <MX_TIM2_Init+0xa0>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000c3e:	4b15      	ldr	r3, [pc, #84]	@ (8000c94 <MX_TIM2_Init+0xa0>)
 8000c40:	0018      	movs	r0, r3
 8000c42:	f001 ff61 	bl	8002b08 <HAL_TIM_Base_Init>
 8000c46:	1e03      	subs	r3, r0, #0
 8000c48:	d001      	beq.n	8000c4e <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8000c4a:	f000 f991 	bl	8000f70 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c4e:	2110      	movs	r1, #16
 8000c50:	187b      	adds	r3, r7, r1
 8000c52:	2280      	movs	r2, #128	@ 0x80
 8000c54:	0152      	lsls	r2, r2, #5
 8000c56:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000c58:	187a      	adds	r2, r7, r1
 8000c5a:	4b0e      	ldr	r3, [pc, #56]	@ (8000c94 <MX_TIM2_Init+0xa0>)
 8000c5c:	0011      	movs	r1, r2
 8000c5e:	0018      	movs	r0, r3
 8000c60:	f002 f90e 	bl	8002e80 <HAL_TIM_ConfigClockSource>
 8000c64:	1e03      	subs	r3, r0, #0
 8000c66:	d001      	beq.n	8000c6c <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8000c68:	f000 f982 	bl	8000f70 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c6c:	1d3b      	adds	r3, r7, #4
 8000c6e:	2200      	movs	r2, #0
 8000c70:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c72:	1d3b      	adds	r3, r7, #4
 8000c74:	2200      	movs	r2, #0
 8000c76:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000c78:	1d3a      	adds	r2, r7, #4
 8000c7a:	4b06      	ldr	r3, [pc, #24]	@ (8000c94 <MX_TIM2_Init+0xa0>)
 8000c7c:	0011      	movs	r1, r2
 8000c7e:	0018      	movs	r0, r3
 8000c80:	f002 fb1e 	bl	80032c0 <HAL_TIMEx_MasterConfigSynchronization>
 8000c84:	1e03      	subs	r3, r0, #0
 8000c86:	d001      	beq.n	8000c8c <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8000c88:	f000 f972 	bl	8000f70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000c8c:	46c0      	nop			@ (mov r8, r8)
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	b008      	add	sp, #32
 8000c92:	bd80      	pop	{r7, pc}
 8000c94:	20000260 	.word	0x20000260
 8000c98:	00003e7f 	.word	0x00003e7f
 8000c9c:	000003e7 	.word	0x000003e7

08000ca0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000ca4:	4b23      	ldr	r3, [pc, #140]	@ (8000d34 <MX_USART2_UART_Init+0x94>)
 8000ca6:	4a24      	ldr	r2, [pc, #144]	@ (8000d38 <MX_USART2_UART_Init+0x98>)
 8000ca8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000caa:	4b22      	ldr	r3, [pc, #136]	@ (8000d34 <MX_USART2_UART_Init+0x94>)
 8000cac:	2296      	movs	r2, #150	@ 0x96
 8000cae:	0192      	lsls	r2, r2, #6
 8000cb0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000cb2:	4b20      	ldr	r3, [pc, #128]	@ (8000d34 <MX_USART2_UART_Init+0x94>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000cb8:	4b1e      	ldr	r3, [pc, #120]	@ (8000d34 <MX_USART2_UART_Init+0x94>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000cbe:	4b1d      	ldr	r3, [pc, #116]	@ (8000d34 <MX_USART2_UART_Init+0x94>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000cc4:	4b1b      	ldr	r3, [pc, #108]	@ (8000d34 <MX_USART2_UART_Init+0x94>)
 8000cc6:	220c      	movs	r2, #12
 8000cc8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cca:	4b1a      	ldr	r3, [pc, #104]	@ (8000d34 <MX_USART2_UART_Init+0x94>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cd0:	4b18      	ldr	r3, [pc, #96]	@ (8000d34 <MX_USART2_UART_Init+0x94>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000cd6:	4b17      	ldr	r3, [pc, #92]	@ (8000d34 <MX_USART2_UART_Init+0x94>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000cdc:	4b15      	ldr	r3, [pc, #84]	@ (8000d34 <MX_USART2_UART_Init+0x94>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ce2:	4b14      	ldr	r3, [pc, #80]	@ (8000d34 <MX_USART2_UART_Init+0x94>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000ce8:	4b12      	ldr	r3, [pc, #72]	@ (8000d34 <MX_USART2_UART_Init+0x94>)
 8000cea:	0018      	movs	r0, r3
 8000cec:	f002 fb6e 	bl	80033cc <HAL_UART_Init>
 8000cf0:	1e03      	subs	r3, r0, #0
 8000cf2:	d001      	beq.n	8000cf8 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000cf4:	f000 f93c 	bl	8000f70 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000cf8:	4b0e      	ldr	r3, [pc, #56]	@ (8000d34 <MX_USART2_UART_Init+0x94>)
 8000cfa:	2100      	movs	r1, #0
 8000cfc:	0018      	movs	r0, r3
 8000cfe:	f004 fbbb 	bl	8005478 <HAL_UARTEx_SetTxFifoThreshold>
 8000d02:	1e03      	subs	r3, r0, #0
 8000d04:	d001      	beq.n	8000d0a <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000d06:	f000 f933 	bl	8000f70 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d0a:	4b0a      	ldr	r3, [pc, #40]	@ (8000d34 <MX_USART2_UART_Init+0x94>)
 8000d0c:	2100      	movs	r1, #0
 8000d0e:	0018      	movs	r0, r3
 8000d10:	f004 fbf2 	bl	80054f8 <HAL_UARTEx_SetRxFifoThreshold>
 8000d14:	1e03      	subs	r3, r0, #0
 8000d16:	d001      	beq.n	8000d1c <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000d18:	f000 f92a 	bl	8000f70 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000d1c:	4b05      	ldr	r3, [pc, #20]	@ (8000d34 <MX_USART2_UART_Init+0x94>)
 8000d1e:	0018      	movs	r0, r3
 8000d20:	f004 fb70 	bl	8005404 <HAL_UARTEx_DisableFifoMode>
 8000d24:	1e03      	subs	r3, r0, #0
 8000d26:	d001      	beq.n	8000d2c <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000d28:	f000 f922 	bl	8000f70 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000d2c:	46c0      	nop			@ (mov r8, r8)
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bd80      	pop	{r7, pc}
 8000d32:	46c0      	nop			@ (mov r8, r8)
 8000d34:	20000308 	.word	0x20000308
 8000d38:	40004400 	.word	0x40004400

08000d3c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b082      	sub	sp, #8
 8000d40:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000d42:	4b0c      	ldr	r3, [pc, #48]	@ (8000d74 <MX_DMA_Init+0x38>)
 8000d44:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000d46:	4b0b      	ldr	r3, [pc, #44]	@ (8000d74 <MX_DMA_Init+0x38>)
 8000d48:	2101      	movs	r1, #1
 8000d4a:	430a      	orrs	r2, r1
 8000d4c:	639a      	str	r2, [r3, #56]	@ 0x38
 8000d4e:	4b09      	ldr	r3, [pc, #36]	@ (8000d74 <MX_DMA_Init+0x38>)
 8000d50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000d52:	2201      	movs	r2, #1
 8000d54:	4013      	ands	r3, r2
 8000d56:	607b      	str	r3, [r7, #4]
 8000d58:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 3, 0);
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	2103      	movs	r1, #3
 8000d5e:	2009      	movs	r0, #9
 8000d60:	f000 fbc6 	bl	80014f0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000d64:	2009      	movs	r0, #9
 8000d66:	f000 fbd8 	bl	800151a <HAL_NVIC_EnableIRQ>

}
 8000d6a:	46c0      	nop			@ (mov r8, r8)
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	b002      	add	sp, #8
 8000d70:	bd80      	pop	{r7, pc}
 8000d72:	46c0      	nop			@ (mov r8, r8)
 8000d74:	40021000 	.word	0x40021000

08000d78 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d78:	b590      	push	{r4, r7, lr}
 8000d7a:	b08b      	sub	sp, #44	@ 0x2c
 8000d7c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d7e:	2414      	movs	r4, #20
 8000d80:	193b      	adds	r3, r7, r4
 8000d82:	0018      	movs	r0, r3
 8000d84:	2314      	movs	r3, #20
 8000d86:	001a      	movs	r2, r3
 8000d88:	2100      	movs	r1, #0
 8000d8a:	f006 fc0b 	bl	80075a4 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d8e:	4b67      	ldr	r3, [pc, #412]	@ (8000f2c <MX_GPIO_Init+0x1b4>)
 8000d90:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000d92:	4b66      	ldr	r3, [pc, #408]	@ (8000f2c <MX_GPIO_Init+0x1b4>)
 8000d94:	2104      	movs	r1, #4
 8000d96:	430a      	orrs	r2, r1
 8000d98:	635a      	str	r2, [r3, #52]	@ 0x34
 8000d9a:	4b64      	ldr	r3, [pc, #400]	@ (8000f2c <MX_GPIO_Init+0x1b4>)
 8000d9c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000d9e:	2204      	movs	r2, #4
 8000da0:	4013      	ands	r3, r2
 8000da2:	613b      	str	r3, [r7, #16]
 8000da4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000da6:	4b61      	ldr	r3, [pc, #388]	@ (8000f2c <MX_GPIO_Init+0x1b4>)
 8000da8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000daa:	4b60      	ldr	r3, [pc, #384]	@ (8000f2c <MX_GPIO_Init+0x1b4>)
 8000dac:	2120      	movs	r1, #32
 8000dae:	430a      	orrs	r2, r1
 8000db0:	635a      	str	r2, [r3, #52]	@ 0x34
 8000db2:	4b5e      	ldr	r3, [pc, #376]	@ (8000f2c <MX_GPIO_Init+0x1b4>)
 8000db4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000db6:	2220      	movs	r2, #32
 8000db8:	4013      	ands	r3, r2
 8000dba:	60fb      	str	r3, [r7, #12]
 8000dbc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dbe:	4b5b      	ldr	r3, [pc, #364]	@ (8000f2c <MX_GPIO_Init+0x1b4>)
 8000dc0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000dc2:	4b5a      	ldr	r3, [pc, #360]	@ (8000f2c <MX_GPIO_Init+0x1b4>)
 8000dc4:	2101      	movs	r1, #1
 8000dc6:	430a      	orrs	r2, r1
 8000dc8:	635a      	str	r2, [r3, #52]	@ 0x34
 8000dca:	4b58      	ldr	r3, [pc, #352]	@ (8000f2c <MX_GPIO_Init+0x1b4>)
 8000dcc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000dce:	2201      	movs	r2, #1
 8000dd0:	4013      	ands	r3, r2
 8000dd2:	60bb      	str	r3, [r7, #8]
 8000dd4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dd6:	4b55      	ldr	r3, [pc, #340]	@ (8000f2c <MX_GPIO_Init+0x1b4>)
 8000dd8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000dda:	4b54      	ldr	r3, [pc, #336]	@ (8000f2c <MX_GPIO_Init+0x1b4>)
 8000ddc:	2102      	movs	r1, #2
 8000dde:	430a      	orrs	r2, r1
 8000de0:	635a      	str	r2, [r3, #52]	@ 0x34
 8000de2:	4b52      	ldr	r3, [pc, #328]	@ (8000f2c <MX_GPIO_Init+0x1b4>)
 8000de4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000de6:	2202      	movs	r2, #2
 8000de8:	4013      	ands	r3, r2
 8000dea:	607b      	str	r3, [r7, #4]
 8000dec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000dee:	4b4f      	ldr	r3, [pc, #316]	@ (8000f2c <MX_GPIO_Init+0x1b4>)
 8000df0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000df2:	4b4e      	ldr	r3, [pc, #312]	@ (8000f2c <MX_GPIO_Init+0x1b4>)
 8000df4:	2108      	movs	r1, #8
 8000df6:	430a      	orrs	r2, r1
 8000df8:	635a      	str	r2, [r3, #52]	@ 0x34
 8000dfa:	4b4c      	ldr	r3, [pc, #304]	@ (8000f2c <MX_GPIO_Init+0x1b4>)
 8000dfc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000dfe:	2208      	movs	r2, #8
 8000e00:	4013      	ands	r3, r2
 8000e02:	603b      	str	r3, [r7, #0]
 8000e04:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Dig2_GPIO_Port, Dig2_Pin, GPIO_PIN_RESET);
 8000e06:	4b4a      	ldr	r3, [pc, #296]	@ (8000f30 <MX_GPIO_Init+0x1b8>)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	2102      	movs	r1, #2
 8000e0c:	0018      	movs	r0, r3
 8000e0e:	f000 ff51 	bl	8001cb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Dig3_Pin|Dig4_Pin, GPIO_PIN_RESET);
 8000e12:	4b48      	ldr	r3, [pc, #288]	@ (8000f34 <MX_GPIO_Init+0x1bc>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	210c      	movs	r1, #12
 8000e18:	0018      	movs	r0, r3
 8000e1a:	f000 ff4b 	bl	8001cb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, B_Pin|C_Pin|D_Pin|LED_GREEN_Pin
 8000e1e:	4946      	ldr	r1, [pc, #280]	@ (8000f38 <MX_GPIO_Init+0x1c0>)
 8000e20:	23a0      	movs	r3, #160	@ 0xa0
 8000e22:	05db      	lsls	r3, r3, #23
 8000e24:	2200      	movs	r2, #0
 8000e26:	0018      	movs	r0, r3
 8000e28:	f000 ff44 	bl	8001cb4 <HAL_GPIO_WritePin>
                          |DP_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, E_Pin|F_Pin|G_Pin|Dig1_Pin, GPIO_PIN_RESET);
 8000e2c:	4943      	ldr	r1, [pc, #268]	@ (8000f3c <MX_GPIO_Init+0x1c4>)
 8000e2e:	4b44      	ldr	r3, [pc, #272]	@ (8000f40 <MX_GPIO_Init+0x1c8>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	0018      	movs	r0, r3
 8000e34:	f000 ff3e 	bl	8001cb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(A_GPIO_Port, A_Pin, GPIO_PIN_RESET);
 8000e38:	4b42      	ldr	r3, [pc, #264]	@ (8000f44 <MX_GPIO_Init+0x1cc>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	2120      	movs	r1, #32
 8000e3e:	0018      	movs	r0, r3
 8000e40:	f000 ff38 	bl	8001cb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Dig2_Pin */
  GPIO_InitStruct.Pin = Dig2_Pin;
 8000e44:	193b      	adds	r3, r7, r4
 8000e46:	2202      	movs	r2, #2
 8000e48:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e4a:	193b      	adds	r3, r7, r4
 8000e4c:	2201      	movs	r2, #1
 8000e4e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e50:	193b      	adds	r3, r7, r4
 8000e52:	2200      	movs	r2, #0
 8000e54:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e56:	193b      	adds	r3, r7, r4
 8000e58:	2200      	movs	r2, #0
 8000e5a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(Dig2_GPIO_Port, &GPIO_InitStruct);
 8000e5c:	193b      	adds	r3, r7, r4
 8000e5e:	4a34      	ldr	r2, [pc, #208]	@ (8000f30 <MX_GPIO_Init+0x1b8>)
 8000e60:	0019      	movs	r1, r3
 8000e62:	0010      	movs	r0, r2
 8000e64:	f000 fdc2 	bl	80019ec <HAL_GPIO_Init>

  /*Configure GPIO pins : Dig3_Pin Dig4_Pin */
  GPIO_InitStruct.Pin = Dig3_Pin|Dig4_Pin;
 8000e68:	193b      	adds	r3, r7, r4
 8000e6a:	220c      	movs	r2, #12
 8000e6c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e6e:	193b      	adds	r3, r7, r4
 8000e70:	2201      	movs	r2, #1
 8000e72:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e74:	193b      	adds	r3, r7, r4
 8000e76:	2200      	movs	r2, #0
 8000e78:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e7a:	193b      	adds	r3, r7, r4
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e80:	193b      	adds	r3, r7, r4
 8000e82:	4a2c      	ldr	r2, [pc, #176]	@ (8000f34 <MX_GPIO_Init+0x1bc>)
 8000e84:	0019      	movs	r1, r3
 8000e86:	0010      	movs	r0, r2
 8000e88:	f000 fdb0 	bl	80019ec <HAL_GPIO_Init>

  /*Configure GPIO pins : B_Pin C_Pin D_Pin DP_Pin */
  GPIO_InitStruct.Pin = B_Pin|C_Pin|D_Pin|DP_Pin;
 8000e8c:	193b      	adds	r3, r7, r4
 8000e8e:	4a2e      	ldr	r2, [pc, #184]	@ (8000f48 <MX_GPIO_Init+0x1d0>)
 8000e90:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e92:	193b      	adds	r3, r7, r4
 8000e94:	2201      	movs	r2, #1
 8000e96:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e98:	193b      	adds	r3, r7, r4
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e9e:	193b      	adds	r3, r7, r4
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ea4:	193a      	adds	r2, r7, r4
 8000ea6:	23a0      	movs	r3, #160	@ 0xa0
 8000ea8:	05db      	lsls	r3, r3, #23
 8000eaa:	0011      	movs	r1, r2
 8000eac:	0018      	movs	r0, r3
 8000eae:	f000 fd9d 	bl	80019ec <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 8000eb2:	193b      	adds	r3, r7, r4
 8000eb4:	2220      	movs	r2, #32
 8000eb6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eb8:	193b      	adds	r3, r7, r4
 8000eba:	2201      	movs	r2, #1
 8000ebc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ebe:	193b      	adds	r3, r7, r4
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ec4:	193b      	adds	r3, r7, r4
 8000ec6:	2202      	movs	r2, #2
 8000ec8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 8000eca:	193a      	adds	r2, r7, r4
 8000ecc:	23a0      	movs	r3, #160	@ 0xa0
 8000ece:	05db      	lsls	r3, r3, #23
 8000ed0:	0011      	movs	r1, r2
 8000ed2:	0018      	movs	r0, r3
 8000ed4:	f000 fd8a 	bl	80019ec <HAL_GPIO_Init>

  /*Configure GPIO pins : E_Pin F_Pin G_Pin Dig1_Pin */
  GPIO_InitStruct.Pin = E_Pin|F_Pin|G_Pin|Dig1_Pin;
 8000ed8:	193b      	adds	r3, r7, r4
 8000eda:	4a18      	ldr	r2, [pc, #96]	@ (8000f3c <MX_GPIO_Init+0x1c4>)
 8000edc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ede:	193b      	adds	r3, r7, r4
 8000ee0:	2201      	movs	r2, #1
 8000ee2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee4:	193b      	adds	r3, r7, r4
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eea:	193b      	adds	r3, r7, r4
 8000eec:	2200      	movs	r2, #0
 8000eee:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ef0:	193b      	adds	r3, r7, r4
 8000ef2:	4a13      	ldr	r2, [pc, #76]	@ (8000f40 <MX_GPIO_Init+0x1c8>)
 8000ef4:	0019      	movs	r1, r3
 8000ef6:	0010      	movs	r0, r2
 8000ef8:	f000 fd78 	bl	80019ec <HAL_GPIO_Init>

  /*Configure GPIO pin : A_Pin */
  GPIO_InitStruct.Pin = A_Pin;
 8000efc:	0021      	movs	r1, r4
 8000efe:	187b      	adds	r3, r7, r1
 8000f00:	2220      	movs	r2, #32
 8000f02:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f04:	187b      	adds	r3, r7, r1
 8000f06:	2201      	movs	r2, #1
 8000f08:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f0a:	187b      	adds	r3, r7, r1
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f10:	187b      	adds	r3, r7, r1
 8000f12:	2200      	movs	r2, #0
 8000f14:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(A_GPIO_Port, &GPIO_InitStruct);
 8000f16:	187b      	adds	r3, r7, r1
 8000f18:	4a0a      	ldr	r2, [pc, #40]	@ (8000f44 <MX_GPIO_Init+0x1cc>)
 8000f1a:	0019      	movs	r1, r3
 8000f1c:	0010      	movs	r0, r2
 8000f1e:	f000 fd65 	bl	80019ec <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000f22:	46c0      	nop			@ (mov r8, r8)
 8000f24:	46bd      	mov	sp, r7
 8000f26:	b00b      	add	sp, #44	@ 0x2c
 8000f28:	bd90      	pop	{r4, r7, pc}
 8000f2a:	46c0      	nop			@ (mov r8, r8)
 8000f2c:	40021000 	.word	0x40021000
 8000f30:	50001400 	.word	0x50001400
 8000f34:	50000800 	.word	0x50000800
 8000f38:	00008033 	.word	0x00008033
 8000f3c:	00001882 	.word	0x00001882
 8000f40:	50000400 	.word	0x50000400
 8000f44:	50000c00 	.word	0x50000c00
 8000f48:	00008013 	.word	0x00008013

08000f4c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b082      	sub	sp, #8
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	4a04      	ldr	r2, [pc, #16]	@ (8000f6c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000f5a:	4293      	cmp	r3, r2
 8000f5c:	d101      	bne.n	8000f62 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000f5e:	f000 fa23 	bl	80013a8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000f62:	46c0      	nop			@ (mov r8, r8)
 8000f64:	46bd      	mov	sp, r7
 8000f66:	b002      	add	sp, #8
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	46c0      	nop			@ (mov r8, r8)
 8000f6c:	40012c00 	.word	0x40012c00

08000f70 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f74:	b672      	cpsid	i
}
 8000f76:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f78:	46c0      	nop			@ (mov r8, r8)
 8000f7a:	e7fd      	b.n	8000f78 <Error_Handler+0x8>

08000f7c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b082      	sub	sp, #8
 8000f80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f82:	4b12      	ldr	r3, [pc, #72]	@ (8000fcc <HAL_MspInit+0x50>)
 8000f84:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000f86:	4b11      	ldr	r3, [pc, #68]	@ (8000fcc <HAL_MspInit+0x50>)
 8000f88:	2101      	movs	r1, #1
 8000f8a:	430a      	orrs	r2, r1
 8000f8c:	641a      	str	r2, [r3, #64]	@ 0x40
 8000f8e:	4b0f      	ldr	r3, [pc, #60]	@ (8000fcc <HAL_MspInit+0x50>)
 8000f90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f92:	2201      	movs	r2, #1
 8000f94:	4013      	ands	r3, r2
 8000f96:	607b      	str	r3, [r7, #4]
 8000f98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f9a:	4b0c      	ldr	r3, [pc, #48]	@ (8000fcc <HAL_MspInit+0x50>)
 8000f9c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000f9e:	4b0b      	ldr	r3, [pc, #44]	@ (8000fcc <HAL_MspInit+0x50>)
 8000fa0:	2180      	movs	r1, #128	@ 0x80
 8000fa2:	0549      	lsls	r1, r1, #21
 8000fa4:	430a      	orrs	r2, r1
 8000fa6:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000fa8:	4b08      	ldr	r3, [pc, #32]	@ (8000fcc <HAL_MspInit+0x50>)
 8000faa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000fac:	2380      	movs	r3, #128	@ 0x80
 8000fae:	055b      	lsls	r3, r3, #21
 8000fb0:	4013      	ands	r3, r2
 8000fb2:	603b      	str	r3, [r7, #0]
 8000fb4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 8000fb6:	2302      	movs	r3, #2
 8000fb8:	425b      	negs	r3, r3
 8000fba:	2200      	movs	r2, #0
 8000fbc:	2103      	movs	r1, #3
 8000fbe:	0018      	movs	r0, r3
 8000fc0:	f000 fa96 	bl	80014f0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fc4:	46c0      	nop			@ (mov r8, r8)
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	b002      	add	sp, #8
 8000fca:	bd80      	pop	{r7, pc}
 8000fcc:	40021000 	.word	0x40021000

08000fd0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b084      	sub	sp, #16
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681a      	ldr	r2, [r3, #0]
 8000fdc:	2380      	movs	r3, #128	@ 0x80
 8000fde:	05db      	lsls	r3, r3, #23
 8000fe0:	429a      	cmp	r2, r3
 8000fe2:	d136      	bne.n	8001052 <HAL_TIM_Base_MspInit+0x82>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000fe4:	4b1d      	ldr	r3, [pc, #116]	@ (800105c <HAL_TIM_Base_MspInit+0x8c>)
 8000fe6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000fe8:	4b1c      	ldr	r3, [pc, #112]	@ (800105c <HAL_TIM_Base_MspInit+0x8c>)
 8000fea:	2101      	movs	r1, #1
 8000fec:	430a      	orrs	r2, r1
 8000fee:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000ff0:	4b1a      	ldr	r3, [pc, #104]	@ (800105c <HAL_TIM_Base_MspInit+0x8c>)
 8000ff2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000ff4:	2201      	movs	r2, #1
 8000ff6:	4013      	ands	r3, r2
 8000ff8:	60fb      	str	r3, [r7, #12]
 8000ffa:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 DMA Init */
    /* TIM2_UP Init */
    hdma_tim2_up.Instance = DMA1_Channel1;
 8000ffc:	4b18      	ldr	r3, [pc, #96]	@ (8001060 <HAL_TIM_Base_MspInit+0x90>)
 8000ffe:	4a19      	ldr	r2, [pc, #100]	@ (8001064 <HAL_TIM_Base_MspInit+0x94>)
 8001000:	601a      	str	r2, [r3, #0]
    hdma_tim2_up.Init.Request = DMA_REQUEST_TIM2_UP;
 8001002:	4b17      	ldr	r3, [pc, #92]	@ (8001060 <HAL_TIM_Base_MspInit+0x90>)
 8001004:	221f      	movs	r2, #31
 8001006:	605a      	str	r2, [r3, #4]
    hdma_tim2_up.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001008:	4b15      	ldr	r3, [pc, #84]	@ (8001060 <HAL_TIM_Base_MspInit+0x90>)
 800100a:	2200      	movs	r2, #0
 800100c:	609a      	str	r2, [r3, #8]
    hdma_tim2_up.Init.PeriphInc = DMA_PINC_DISABLE;
 800100e:	4b14      	ldr	r3, [pc, #80]	@ (8001060 <HAL_TIM_Base_MspInit+0x90>)
 8001010:	2200      	movs	r2, #0
 8001012:	60da      	str	r2, [r3, #12]
    hdma_tim2_up.Init.MemInc = DMA_MINC_ENABLE;
 8001014:	4b12      	ldr	r3, [pc, #72]	@ (8001060 <HAL_TIM_Base_MspInit+0x90>)
 8001016:	2280      	movs	r2, #128	@ 0x80
 8001018:	611a      	str	r2, [r3, #16]
    hdma_tim2_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800101a:	4b11      	ldr	r3, [pc, #68]	@ (8001060 <HAL_TIM_Base_MspInit+0x90>)
 800101c:	2280      	movs	r2, #128	@ 0x80
 800101e:	0092      	lsls	r2, r2, #2
 8001020:	615a      	str	r2, [r3, #20]
    hdma_tim2_up.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001022:	4b0f      	ldr	r3, [pc, #60]	@ (8001060 <HAL_TIM_Base_MspInit+0x90>)
 8001024:	2280      	movs	r2, #128	@ 0x80
 8001026:	0112      	lsls	r2, r2, #4
 8001028:	619a      	str	r2, [r3, #24]
    hdma_tim2_up.Init.Mode = DMA_NORMAL;
 800102a:	4b0d      	ldr	r3, [pc, #52]	@ (8001060 <HAL_TIM_Base_MspInit+0x90>)
 800102c:	2200      	movs	r2, #0
 800102e:	61da      	str	r2, [r3, #28]
    hdma_tim2_up.Init.Priority = DMA_PRIORITY_LOW;
 8001030:	4b0b      	ldr	r3, [pc, #44]	@ (8001060 <HAL_TIM_Base_MspInit+0x90>)
 8001032:	2200      	movs	r2, #0
 8001034:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim2_up) != HAL_OK)
 8001036:	4b0a      	ldr	r3, [pc, #40]	@ (8001060 <HAL_TIM_Base_MspInit+0x90>)
 8001038:	0018      	movs	r0, r3
 800103a:	f000 fa7f 	bl	800153c <HAL_DMA_Init>
 800103e:	1e03      	subs	r3, r0, #0
 8001040:	d001      	beq.n	8001046 <HAL_TIM_Base_MspInit+0x76>
    {
      Error_Handler();
 8001042:	f7ff ff95 	bl	8000f70 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim2_up);
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	4a05      	ldr	r2, [pc, #20]	@ (8001060 <HAL_TIM_Base_MspInit+0x90>)
 800104a:	621a      	str	r2, [r3, #32]
 800104c:	4b04      	ldr	r3, [pc, #16]	@ (8001060 <HAL_TIM_Base_MspInit+0x90>)
 800104e:	687a      	ldr	r2, [r7, #4]
 8001050:	629a      	str	r2, [r3, #40]	@ 0x28

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8001052:	46c0      	nop			@ (mov r8, r8)
 8001054:	46bd      	mov	sp, r7
 8001056:	b004      	add	sp, #16
 8001058:	bd80      	pop	{r7, pc}
 800105a:	46c0      	nop			@ (mov r8, r8)
 800105c:	40021000 	.word	0x40021000
 8001060:	200002ac 	.word	0x200002ac
 8001064:	40020008 	.word	0x40020008

08001068 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001068:	b590      	push	{r4, r7, lr}
 800106a:	b097      	sub	sp, #92	@ 0x5c
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001070:	2344      	movs	r3, #68	@ 0x44
 8001072:	18fb      	adds	r3, r7, r3
 8001074:	0018      	movs	r0, r3
 8001076:	2314      	movs	r3, #20
 8001078:	001a      	movs	r2, r3
 800107a:	2100      	movs	r1, #0
 800107c:	f006 fa92 	bl	80075a4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001080:	2410      	movs	r4, #16
 8001082:	193b      	adds	r3, r7, r4
 8001084:	0018      	movs	r0, r3
 8001086:	2334      	movs	r3, #52	@ 0x34
 8001088:	001a      	movs	r2, r3
 800108a:	2100      	movs	r1, #0
 800108c:	f006 fa8a 	bl	80075a4 <memset>
  if(huart->Instance==USART2)
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	4a26      	ldr	r2, [pc, #152]	@ (8001130 <HAL_UART_MspInit+0xc8>)
 8001096:	4293      	cmp	r3, r2
 8001098:	d146      	bne.n	8001128 <HAL_UART_MspInit+0xc0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800109a:	193b      	adds	r3, r7, r4
 800109c:	2202      	movs	r2, #2
 800109e:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80010a0:	193b      	adds	r3, r7, r4
 80010a2:	2200      	movs	r2, #0
 80010a4:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80010a6:	193b      	adds	r3, r7, r4
 80010a8:	0018      	movs	r0, r3
 80010aa:	f001 fb75 	bl	8002798 <HAL_RCCEx_PeriphCLKConfig>
 80010ae:	1e03      	subs	r3, r0, #0
 80010b0:	d001      	beq.n	80010b6 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80010b2:	f7ff ff5d 	bl	8000f70 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80010b6:	4b1f      	ldr	r3, [pc, #124]	@ (8001134 <HAL_UART_MspInit+0xcc>)
 80010b8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80010ba:	4b1e      	ldr	r3, [pc, #120]	@ (8001134 <HAL_UART_MspInit+0xcc>)
 80010bc:	2180      	movs	r1, #128	@ 0x80
 80010be:	0289      	lsls	r1, r1, #10
 80010c0:	430a      	orrs	r2, r1
 80010c2:	63da      	str	r2, [r3, #60]	@ 0x3c
 80010c4:	4b1b      	ldr	r3, [pc, #108]	@ (8001134 <HAL_UART_MspInit+0xcc>)
 80010c6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80010c8:	2380      	movs	r3, #128	@ 0x80
 80010ca:	029b      	lsls	r3, r3, #10
 80010cc:	4013      	ands	r3, r2
 80010ce:	60fb      	str	r3, [r7, #12]
 80010d0:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010d2:	4b18      	ldr	r3, [pc, #96]	@ (8001134 <HAL_UART_MspInit+0xcc>)
 80010d4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80010d6:	4b17      	ldr	r3, [pc, #92]	@ (8001134 <HAL_UART_MspInit+0xcc>)
 80010d8:	2101      	movs	r1, #1
 80010da:	430a      	orrs	r2, r1
 80010dc:	635a      	str	r2, [r3, #52]	@ 0x34
 80010de:	4b15      	ldr	r3, [pc, #84]	@ (8001134 <HAL_UART_MspInit+0xcc>)
 80010e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80010e2:	2201      	movs	r2, #1
 80010e4:	4013      	ands	r3, r2
 80010e6:	60bb      	str	r3, [r7, #8]
 80010e8:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 80010ea:	2144      	movs	r1, #68	@ 0x44
 80010ec:	187b      	adds	r3, r7, r1
 80010ee:	220c      	movs	r2, #12
 80010f0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010f2:	187b      	adds	r3, r7, r1
 80010f4:	2202      	movs	r2, #2
 80010f6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f8:	187b      	adds	r3, r7, r1
 80010fa:	2200      	movs	r2, #0
 80010fc:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010fe:	187b      	adds	r3, r7, r1
 8001100:	2200      	movs	r2, #0
 8001102:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8001104:	187b      	adds	r3, r7, r1
 8001106:	2201      	movs	r2, #1
 8001108:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800110a:	187a      	adds	r2, r7, r1
 800110c:	23a0      	movs	r3, #160	@ 0xa0
 800110e:	05db      	lsls	r3, r3, #23
 8001110:	0011      	movs	r1, r2
 8001112:	0018      	movs	r0, r3
 8001114:	f000 fc6a 	bl	80019ec <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 3, 0);
 8001118:	2200      	movs	r2, #0
 800111a:	2103      	movs	r1, #3
 800111c:	201c      	movs	r0, #28
 800111e:	f000 f9e7 	bl	80014f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001122:	201c      	movs	r0, #28
 8001124:	f000 f9f9 	bl	800151a <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8001128:	46c0      	nop			@ (mov r8, r8)
 800112a:	46bd      	mov	sp, r7
 800112c:	b017      	add	sp, #92	@ 0x5c
 800112e:	bd90      	pop	{r4, r7, pc}
 8001130:	40004400 	.word	0x40004400
 8001134:	40021000 	.word	0x40021000

08001138 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001138:	b5b0      	push	{r4, r5, r7, lr}
 800113a:	b08c      	sub	sp, #48	@ 0x30
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8001140:	232b      	movs	r3, #43	@ 0x2b
 8001142:	18fb      	adds	r3, r7, r3
 8001144:	2200      	movs	r2, #0
 8001146:	701a      	strb	r2, [r3, #0]

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001148:	4b38      	ldr	r3, [pc, #224]	@ (800122c <HAL_InitTick+0xf4>)
 800114a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800114c:	4b37      	ldr	r3, [pc, #220]	@ (800122c <HAL_InitTick+0xf4>)
 800114e:	2180      	movs	r1, #128	@ 0x80
 8001150:	0109      	lsls	r1, r1, #4
 8001152:	430a      	orrs	r2, r1
 8001154:	641a      	str	r2, [r3, #64]	@ 0x40
 8001156:	4b35      	ldr	r3, [pc, #212]	@ (800122c <HAL_InitTick+0xf4>)
 8001158:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800115a:	2380      	movs	r3, #128	@ 0x80
 800115c:	011b      	lsls	r3, r3, #4
 800115e:	4013      	ands	r3, r2
 8001160:	60bb      	str	r3, [r7, #8]
 8001162:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001164:	230c      	movs	r3, #12
 8001166:	18fa      	adds	r2, r7, r3
 8001168:	2410      	movs	r4, #16
 800116a:	193b      	adds	r3, r7, r4
 800116c:	0011      	movs	r1, r2
 800116e:	0018      	movs	r0, r3
 8001170:	f001 fae8 	bl	8002744 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001174:	193b      	adds	r3, r7, r4
 8001176:	68db      	ldr	r3, [r3, #12]
 8001178:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Compute TIM1 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800117a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800117c:	2b00      	cmp	r3, #0
 800117e:	d104      	bne.n	800118a <HAL_InitTick+0x52>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001180:	f001 faca 	bl	8002718 <HAL_RCC_GetPCLK1Freq>
 8001184:	0003      	movs	r3, r0
 8001186:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001188:	e004      	b.n	8001194 <HAL_InitTick+0x5c>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800118a:	f001 fac5 	bl	8002718 <HAL_RCC_GetPCLK1Freq>
 800118e:	0003      	movs	r3, r0
 8001190:	005b      	lsls	r3, r3, #1
 8001192:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001194:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001196:	4926      	ldr	r1, [pc, #152]	@ (8001230 <HAL_InitTick+0xf8>)
 8001198:	0018      	movs	r0, r3
 800119a:	f7fe ffc7 	bl	800012c <__udivsi3>
 800119e:	0003      	movs	r3, r0
 80011a0:	3b01      	subs	r3, #1
 80011a2:	623b      	str	r3, [r7, #32]

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80011a4:	4b23      	ldr	r3, [pc, #140]	@ (8001234 <HAL_InitTick+0xfc>)
 80011a6:	4a24      	ldr	r2, [pc, #144]	@ (8001238 <HAL_InitTick+0x100>)
 80011a8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80011aa:	4b22      	ldr	r3, [pc, #136]	@ (8001234 <HAL_InitTick+0xfc>)
 80011ac:	4a23      	ldr	r2, [pc, #140]	@ (800123c <HAL_InitTick+0x104>)
 80011ae:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80011b0:	4b20      	ldr	r3, [pc, #128]	@ (8001234 <HAL_InitTick+0xfc>)
 80011b2:	6a3a      	ldr	r2, [r7, #32]
 80011b4:	605a      	str	r2, [r3, #4]
  htim1.Init.ClockDivision = 0;
 80011b6:	4b1f      	ldr	r3, [pc, #124]	@ (8001234 <HAL_InitTick+0xfc>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011bc:	4b1d      	ldr	r3, [pc, #116]	@ (8001234 <HAL_InitTick+0xfc>)
 80011be:	2200      	movs	r2, #0
 80011c0:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011c2:	4b1c      	ldr	r3, [pc, #112]	@ (8001234 <HAL_InitTick+0xfc>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 80011c8:	252b      	movs	r5, #43	@ 0x2b
 80011ca:	197c      	adds	r4, r7, r5
 80011cc:	4b19      	ldr	r3, [pc, #100]	@ (8001234 <HAL_InitTick+0xfc>)
 80011ce:	0018      	movs	r0, r3
 80011d0:	f001 fc9a 	bl	8002b08 <HAL_TIM_Base_Init>
 80011d4:	0003      	movs	r3, r0
 80011d6:	7023      	strb	r3, [r4, #0]
  if (status == HAL_OK)
 80011d8:	197b      	adds	r3, r7, r5
 80011da:	781b      	ldrb	r3, [r3, #0]
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d11e      	bne.n	800121e <HAL_InitTick+0xe6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80011e0:	197c      	adds	r4, r7, r5
 80011e2:	4b14      	ldr	r3, [pc, #80]	@ (8001234 <HAL_InitTick+0xfc>)
 80011e4:	0018      	movs	r0, r3
 80011e6:	f001 fce7 	bl	8002bb8 <HAL_TIM_Base_Start_IT>
 80011ea:	0003      	movs	r3, r0
 80011ec:	7023      	strb	r3, [r4, #0]
    if (status == HAL_OK)
 80011ee:	197b      	adds	r3, r7, r5
 80011f0:	781b      	ldrb	r3, [r3, #0]
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d113      	bne.n	800121e <HAL_InitTick+0xe6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn);
 80011f6:	200d      	movs	r0, #13
 80011f8:	f000 f98f 	bl	800151a <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	2b03      	cmp	r3, #3
 8001200:	d809      	bhi.n	8001216 <HAL_InitTick+0xde>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, TickPriority, 0U);
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	2200      	movs	r2, #0
 8001206:	0019      	movs	r1, r3
 8001208:	200d      	movs	r0, #13
 800120a:	f000 f971 	bl	80014f0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800120e:	4b0c      	ldr	r3, [pc, #48]	@ (8001240 <HAL_InitTick+0x108>)
 8001210:	687a      	ldr	r2, [r7, #4]
 8001212:	601a      	str	r2, [r3, #0]
 8001214:	e003      	b.n	800121e <HAL_InitTick+0xe6>
      }
      else
      {
        status = HAL_ERROR;
 8001216:	232b      	movs	r3, #43	@ 0x2b
 8001218:	18fb      	adds	r3, r7, r3
 800121a:	2201      	movs	r2, #1
 800121c:	701a      	strb	r2, [r3, #0]
      }
    }
  }

 /* Return function status */
  return status;
 800121e:	232b      	movs	r3, #43	@ 0x2b
 8001220:	18fb      	adds	r3, r7, r3
 8001222:	781b      	ldrb	r3, [r3, #0]
}
 8001224:	0018      	movs	r0, r3
 8001226:	46bd      	mov	sp, r7
 8001228:	b00c      	add	sp, #48	@ 0x30
 800122a:	bdb0      	pop	{r4, r5, r7, pc}
 800122c:	40021000 	.word	0x40021000
 8001230:	000f4240 	.word	0x000f4240
 8001234:	200003a8 	.word	0x200003a8
 8001238:	40012c00 	.word	0x40012c00
 800123c:	000003e7 	.word	0x000003e7
 8001240:	200001ac 	.word	0x200001ac

08001244 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001248:	46c0      	nop			@ (mov r8, r8)
 800124a:	e7fd      	b.n	8001248 <NMI_Handler+0x4>

0800124c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001250:	46c0      	nop			@ (mov r8, r8)
 8001252:	e7fd      	b.n	8001250 <HardFault_Handler+0x4>

08001254 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_up);
 8001258:	4b03      	ldr	r3, [pc, #12]	@ (8001268 <DMA1_Channel1_IRQHandler+0x14>)
 800125a:	0018      	movs	r0, r3
 800125c:	f000 fac4 	bl	80017e8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001260:	46c0      	nop			@ (mov r8, r8)
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}
 8001266:	46c0      	nop			@ (mov r8, r8)
 8001268:	200002ac 	.word	0x200002ac

0800126c <TIM1_BRK_UP_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 break, update, trigger and commutation interrupts.
  */
void TIM1_BRK_UP_TRG_COM_IRQHandler(void)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001270:	4b03      	ldr	r3, [pc, #12]	@ (8001280 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x14>)
 8001272:	0018      	movs	r0, r3
 8001274:	f001 fcfc 	bl	8002c70 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 1 */
}
 8001278:	46c0      	nop			@ (mov r8, r8)
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}
 800127e:	46c0      	nop			@ (mov r8, r8)
 8001280:	200003a8 	.word	0x200003a8

08001284 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001288:	4b03      	ldr	r3, [pc, #12]	@ (8001298 <USART2_IRQHandler+0x14>)
 800128a:	0018      	movs	r0, r3
 800128c:	f002 f9f6 	bl	800367c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001290:	46c0      	nop			@ (mov r8, r8)
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}
 8001296:	46c0      	nop			@ (mov r8, r8)
 8001298:	20000308 	.word	0x20000308

0800129c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b086      	sub	sp, #24
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80012a4:	4a14      	ldr	r2, [pc, #80]	@ (80012f8 <_sbrk+0x5c>)
 80012a6:	4b15      	ldr	r3, [pc, #84]	@ (80012fc <_sbrk+0x60>)
 80012a8:	1ad3      	subs	r3, r2, r3
 80012aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80012ac:	697b      	ldr	r3, [r7, #20]
 80012ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80012b0:	4b13      	ldr	r3, [pc, #76]	@ (8001300 <_sbrk+0x64>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d102      	bne.n	80012be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80012b8:	4b11      	ldr	r3, [pc, #68]	@ (8001300 <_sbrk+0x64>)
 80012ba:	4a12      	ldr	r2, [pc, #72]	@ (8001304 <_sbrk+0x68>)
 80012bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80012be:	4b10      	ldr	r3, [pc, #64]	@ (8001300 <_sbrk+0x64>)
 80012c0:	681a      	ldr	r2, [r3, #0]
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	18d3      	adds	r3, r2, r3
 80012c6:	693a      	ldr	r2, [r7, #16]
 80012c8:	429a      	cmp	r2, r3
 80012ca:	d207      	bcs.n	80012dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80012cc:	f006 f9dc 	bl	8007688 <__errno>
 80012d0:	0003      	movs	r3, r0
 80012d2:	220c      	movs	r2, #12
 80012d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80012d6:	2301      	movs	r3, #1
 80012d8:	425b      	negs	r3, r3
 80012da:	e009      	b.n	80012f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80012dc:	4b08      	ldr	r3, [pc, #32]	@ (8001300 <_sbrk+0x64>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80012e2:	4b07      	ldr	r3, [pc, #28]	@ (8001300 <_sbrk+0x64>)
 80012e4:	681a      	ldr	r2, [r3, #0]
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	18d2      	adds	r2, r2, r3
 80012ea:	4b05      	ldr	r3, [pc, #20]	@ (8001300 <_sbrk+0x64>)
 80012ec:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80012ee:	68fb      	ldr	r3, [r7, #12]
}
 80012f0:	0018      	movs	r0, r3
 80012f2:	46bd      	mov	sp, r7
 80012f4:	b006      	add	sp, #24
 80012f6:	bd80      	pop	{r7, pc}
 80012f8:	20009000 	.word	0x20009000
 80012fc:	00000400 	.word	0x00000400
 8001300:	200003f4 	.word	0x200003f4
 8001304:	20001290 	.word	0x20001290

08001308 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800130c:	46c0      	nop			@ (mov r8, r8)
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}
	...

08001314 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001314:	480d      	ldr	r0, [pc, #52]	@ (800134c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001316:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001318:	f7ff fff6 	bl	8001308 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800131c:	480c      	ldr	r0, [pc, #48]	@ (8001350 <LoopForever+0x6>)
  ldr r1, =_edata
 800131e:	490d      	ldr	r1, [pc, #52]	@ (8001354 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001320:	4a0d      	ldr	r2, [pc, #52]	@ (8001358 <LoopForever+0xe>)
  movs r3, #0
 8001322:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001324:	e002      	b.n	800132c <LoopCopyDataInit>

08001326 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001326:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001328:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800132a:	3304      	adds	r3, #4

0800132c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800132c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800132e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001330:	d3f9      	bcc.n	8001326 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001332:	4a0a      	ldr	r2, [pc, #40]	@ (800135c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001334:	4c0a      	ldr	r4, [pc, #40]	@ (8001360 <LoopForever+0x16>)
  movs r3, #0
 8001336:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001338:	e001      	b.n	800133e <LoopFillZerobss>

0800133a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800133a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800133c:	3204      	adds	r2, #4

0800133e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800133e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001340:	d3fb      	bcc.n	800133a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001342:	f006 f9a7 	bl	8007694 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8001346:	f7ff fbc1 	bl	8000acc <main>

0800134a <LoopForever>:

LoopForever:
  b LoopForever
 800134a:	e7fe      	b.n	800134a <LoopForever>
  ldr   r0, =_estack
 800134c:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8001350:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001354:	20000208 	.word	0x20000208
  ldr r2, =_sidata
 8001358:	080080f0 	.word	0x080080f0
  ldr r2, =_sbss
 800135c:	20000208 	.word	0x20000208
  ldr r4, =_ebss
 8001360:	20001290 	.word	0x20001290

08001364 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001364:	e7fe      	b.n	8001364 <ADC1_COMP_IRQHandler>
	...

08001368 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b082      	sub	sp, #8
 800136c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800136e:	1dfb      	adds	r3, r7, #7
 8001370:	2200      	movs	r2, #0
 8001372:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001374:	4b0b      	ldr	r3, [pc, #44]	@ (80013a4 <HAL_Init+0x3c>)
 8001376:	681a      	ldr	r2, [r3, #0]
 8001378:	4b0a      	ldr	r3, [pc, #40]	@ (80013a4 <HAL_Init+0x3c>)
 800137a:	2180      	movs	r1, #128	@ 0x80
 800137c:	0049      	lsls	r1, r1, #1
 800137e:	430a      	orrs	r2, r1
 8001380:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001382:	2003      	movs	r0, #3
 8001384:	f7ff fed8 	bl	8001138 <HAL_InitTick>
 8001388:	1e03      	subs	r3, r0, #0
 800138a:	d003      	beq.n	8001394 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 800138c:	1dfb      	adds	r3, r7, #7
 800138e:	2201      	movs	r2, #1
 8001390:	701a      	strb	r2, [r3, #0]
 8001392:	e001      	b.n	8001398 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8001394:	f7ff fdf2 	bl	8000f7c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001398:	1dfb      	adds	r3, r7, #7
 800139a:	781b      	ldrb	r3, [r3, #0]
}
 800139c:	0018      	movs	r0, r3
 800139e:	46bd      	mov	sp, r7
 80013a0:	b002      	add	sp, #8
 80013a2:	bd80      	pop	{r7, pc}
 80013a4:	40022000 	.word	0x40022000

080013a8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80013ac:	4b05      	ldr	r3, [pc, #20]	@ (80013c4 <HAL_IncTick+0x1c>)
 80013ae:	781b      	ldrb	r3, [r3, #0]
 80013b0:	001a      	movs	r2, r3
 80013b2:	4b05      	ldr	r3, [pc, #20]	@ (80013c8 <HAL_IncTick+0x20>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	18d2      	adds	r2, r2, r3
 80013b8:	4b03      	ldr	r3, [pc, #12]	@ (80013c8 <HAL_IncTick+0x20>)
 80013ba:	601a      	str	r2, [r3, #0]
}
 80013bc:	46c0      	nop			@ (mov r8, r8)
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	46c0      	nop			@ (mov r8, r8)
 80013c4:	200001b0 	.word	0x200001b0
 80013c8:	200003f8 	.word	0x200003f8

080013cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	af00      	add	r7, sp, #0
  return uwTick;
 80013d0:	4b02      	ldr	r3, [pc, #8]	@ (80013dc <HAL_GetTick+0x10>)
 80013d2:	681b      	ldr	r3, [r3, #0]
}
 80013d4:	0018      	movs	r0, r3
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	46c0      	nop			@ (mov r8, r8)
 80013dc:	200003f8 	.word	0x200003f8

080013e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b082      	sub	sp, #8
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	0002      	movs	r2, r0
 80013e8:	1dfb      	adds	r3, r7, #7
 80013ea:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80013ec:	1dfb      	adds	r3, r7, #7
 80013ee:	781b      	ldrb	r3, [r3, #0]
 80013f0:	2b7f      	cmp	r3, #127	@ 0x7f
 80013f2:	d809      	bhi.n	8001408 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013f4:	1dfb      	adds	r3, r7, #7
 80013f6:	781b      	ldrb	r3, [r3, #0]
 80013f8:	001a      	movs	r2, r3
 80013fa:	231f      	movs	r3, #31
 80013fc:	401a      	ands	r2, r3
 80013fe:	4b04      	ldr	r3, [pc, #16]	@ (8001410 <__NVIC_EnableIRQ+0x30>)
 8001400:	2101      	movs	r1, #1
 8001402:	4091      	lsls	r1, r2
 8001404:	000a      	movs	r2, r1
 8001406:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8001408:	46c0      	nop			@ (mov r8, r8)
 800140a:	46bd      	mov	sp, r7
 800140c:	b002      	add	sp, #8
 800140e:	bd80      	pop	{r7, pc}
 8001410:	e000e100 	.word	0xe000e100

08001414 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001414:	b590      	push	{r4, r7, lr}
 8001416:	b083      	sub	sp, #12
 8001418:	af00      	add	r7, sp, #0
 800141a:	0002      	movs	r2, r0
 800141c:	6039      	str	r1, [r7, #0]
 800141e:	1dfb      	adds	r3, r7, #7
 8001420:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001422:	1dfb      	adds	r3, r7, #7
 8001424:	781b      	ldrb	r3, [r3, #0]
 8001426:	2b7f      	cmp	r3, #127	@ 0x7f
 8001428:	d828      	bhi.n	800147c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800142a:	4a2f      	ldr	r2, [pc, #188]	@ (80014e8 <__NVIC_SetPriority+0xd4>)
 800142c:	1dfb      	adds	r3, r7, #7
 800142e:	781b      	ldrb	r3, [r3, #0]
 8001430:	b25b      	sxtb	r3, r3
 8001432:	089b      	lsrs	r3, r3, #2
 8001434:	33c0      	adds	r3, #192	@ 0xc0
 8001436:	009b      	lsls	r3, r3, #2
 8001438:	589b      	ldr	r3, [r3, r2]
 800143a:	1dfa      	adds	r2, r7, #7
 800143c:	7812      	ldrb	r2, [r2, #0]
 800143e:	0011      	movs	r1, r2
 8001440:	2203      	movs	r2, #3
 8001442:	400a      	ands	r2, r1
 8001444:	00d2      	lsls	r2, r2, #3
 8001446:	21ff      	movs	r1, #255	@ 0xff
 8001448:	4091      	lsls	r1, r2
 800144a:	000a      	movs	r2, r1
 800144c:	43d2      	mvns	r2, r2
 800144e:	401a      	ands	r2, r3
 8001450:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	019b      	lsls	r3, r3, #6
 8001456:	22ff      	movs	r2, #255	@ 0xff
 8001458:	401a      	ands	r2, r3
 800145a:	1dfb      	adds	r3, r7, #7
 800145c:	781b      	ldrb	r3, [r3, #0]
 800145e:	0018      	movs	r0, r3
 8001460:	2303      	movs	r3, #3
 8001462:	4003      	ands	r3, r0
 8001464:	00db      	lsls	r3, r3, #3
 8001466:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001468:	481f      	ldr	r0, [pc, #124]	@ (80014e8 <__NVIC_SetPriority+0xd4>)
 800146a:	1dfb      	adds	r3, r7, #7
 800146c:	781b      	ldrb	r3, [r3, #0]
 800146e:	b25b      	sxtb	r3, r3
 8001470:	089b      	lsrs	r3, r3, #2
 8001472:	430a      	orrs	r2, r1
 8001474:	33c0      	adds	r3, #192	@ 0xc0
 8001476:	009b      	lsls	r3, r3, #2
 8001478:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800147a:	e031      	b.n	80014e0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800147c:	4a1b      	ldr	r2, [pc, #108]	@ (80014ec <__NVIC_SetPriority+0xd8>)
 800147e:	1dfb      	adds	r3, r7, #7
 8001480:	781b      	ldrb	r3, [r3, #0]
 8001482:	0019      	movs	r1, r3
 8001484:	230f      	movs	r3, #15
 8001486:	400b      	ands	r3, r1
 8001488:	3b08      	subs	r3, #8
 800148a:	089b      	lsrs	r3, r3, #2
 800148c:	3306      	adds	r3, #6
 800148e:	009b      	lsls	r3, r3, #2
 8001490:	18d3      	adds	r3, r2, r3
 8001492:	3304      	adds	r3, #4
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	1dfa      	adds	r2, r7, #7
 8001498:	7812      	ldrb	r2, [r2, #0]
 800149a:	0011      	movs	r1, r2
 800149c:	2203      	movs	r2, #3
 800149e:	400a      	ands	r2, r1
 80014a0:	00d2      	lsls	r2, r2, #3
 80014a2:	21ff      	movs	r1, #255	@ 0xff
 80014a4:	4091      	lsls	r1, r2
 80014a6:	000a      	movs	r2, r1
 80014a8:	43d2      	mvns	r2, r2
 80014aa:	401a      	ands	r2, r3
 80014ac:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80014ae:	683b      	ldr	r3, [r7, #0]
 80014b0:	019b      	lsls	r3, r3, #6
 80014b2:	22ff      	movs	r2, #255	@ 0xff
 80014b4:	401a      	ands	r2, r3
 80014b6:	1dfb      	adds	r3, r7, #7
 80014b8:	781b      	ldrb	r3, [r3, #0]
 80014ba:	0018      	movs	r0, r3
 80014bc:	2303      	movs	r3, #3
 80014be:	4003      	ands	r3, r0
 80014c0:	00db      	lsls	r3, r3, #3
 80014c2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80014c4:	4809      	ldr	r0, [pc, #36]	@ (80014ec <__NVIC_SetPriority+0xd8>)
 80014c6:	1dfb      	adds	r3, r7, #7
 80014c8:	781b      	ldrb	r3, [r3, #0]
 80014ca:	001c      	movs	r4, r3
 80014cc:	230f      	movs	r3, #15
 80014ce:	4023      	ands	r3, r4
 80014d0:	3b08      	subs	r3, #8
 80014d2:	089b      	lsrs	r3, r3, #2
 80014d4:	430a      	orrs	r2, r1
 80014d6:	3306      	adds	r3, #6
 80014d8:	009b      	lsls	r3, r3, #2
 80014da:	18c3      	adds	r3, r0, r3
 80014dc:	3304      	adds	r3, #4
 80014de:	601a      	str	r2, [r3, #0]
}
 80014e0:	46c0      	nop			@ (mov r8, r8)
 80014e2:	46bd      	mov	sp, r7
 80014e4:	b003      	add	sp, #12
 80014e6:	bd90      	pop	{r4, r7, pc}
 80014e8:	e000e100 	.word	0xe000e100
 80014ec:	e000ed00 	.word	0xe000ed00

080014f0 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b084      	sub	sp, #16
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	60b9      	str	r1, [r7, #8]
 80014f8:	607a      	str	r2, [r7, #4]
 80014fa:	210f      	movs	r1, #15
 80014fc:	187b      	adds	r3, r7, r1
 80014fe:	1c02      	adds	r2, r0, #0
 8001500:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8001502:	68ba      	ldr	r2, [r7, #8]
 8001504:	187b      	adds	r3, r7, r1
 8001506:	781b      	ldrb	r3, [r3, #0]
 8001508:	b25b      	sxtb	r3, r3
 800150a:	0011      	movs	r1, r2
 800150c:	0018      	movs	r0, r3
 800150e:	f7ff ff81 	bl	8001414 <__NVIC_SetPriority>
}
 8001512:	46c0      	nop			@ (mov r8, r8)
 8001514:	46bd      	mov	sp, r7
 8001516:	b004      	add	sp, #16
 8001518:	bd80      	pop	{r7, pc}

0800151a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800151a:	b580      	push	{r7, lr}
 800151c:	b082      	sub	sp, #8
 800151e:	af00      	add	r7, sp, #0
 8001520:	0002      	movs	r2, r0
 8001522:	1dfb      	adds	r3, r7, #7
 8001524:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001526:	1dfb      	adds	r3, r7, #7
 8001528:	781b      	ldrb	r3, [r3, #0]
 800152a:	b25b      	sxtb	r3, r3
 800152c:	0018      	movs	r0, r3
 800152e:	f7ff ff57 	bl	80013e0 <__NVIC_EnableIRQ>
}
 8001532:	46c0      	nop			@ (mov r8, r8)
 8001534:	46bd      	mov	sp, r7
 8001536:	b002      	add	sp, #8
 8001538:	bd80      	pop	{r7, pc}
	...

0800153c <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b082      	sub	sp, #8
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	2b00      	cmp	r3, #0
 8001548:	d101      	bne.n	800154e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800154a:	2301      	movs	r3, #1
 800154c:	e077      	b.n	800163e <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	4a3d      	ldr	r2, [pc, #244]	@ (8001648 <HAL_DMA_Init+0x10c>)
 8001554:	4694      	mov	ip, r2
 8001556:	4463      	add	r3, ip
 8001558:	2114      	movs	r1, #20
 800155a:	0018      	movs	r0, r3
 800155c:	f7fe fde6 	bl	800012c <__udivsi3>
 8001560:	0003      	movs	r3, r0
 8001562:	009a      	lsls	r2, r3, #2
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	641a      	str	r2, [r3, #64]	@ 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	2225      	movs	r2, #37	@ 0x25
 800156c:	2102      	movs	r1, #2
 800156e:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	681a      	ldr	r2, [r3, #0]
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	4934      	ldr	r1, [pc, #208]	@ (800164c <HAL_DMA_Init+0x110>)
 800157c:	400a      	ands	r2, r1
 800157e:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	6819      	ldr	r1, [r3, #0]
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	689a      	ldr	r2, [r3, #8]
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	68db      	ldr	r3, [r3, #12]
 800158e:	431a      	orrs	r2, r3
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	691b      	ldr	r3, [r3, #16]
 8001594:	431a      	orrs	r2, r3
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	695b      	ldr	r3, [r3, #20]
 800159a:	431a      	orrs	r2, r3
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	699b      	ldr	r3, [r3, #24]
 80015a0:	431a      	orrs	r2, r3
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	69db      	ldr	r3, [r3, #28]
 80015a6:	431a      	orrs	r2, r3
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	6a1b      	ldr	r3, [r3, #32]
 80015ac:	431a      	orrs	r2, r3
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	430a      	orrs	r2, r1
 80015b4:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	0018      	movs	r0, r3
 80015ba:	f000 f9c7 	bl	800194c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	689a      	ldr	r2, [r3, #8]
 80015c2:	2380      	movs	r3, #128	@ 0x80
 80015c4:	01db      	lsls	r3, r3, #7
 80015c6:	429a      	cmp	r2, r3
 80015c8:	d102      	bne.n	80015d0 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	2200      	movs	r2, #0
 80015ce:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	685a      	ldr	r2, [r3, #4]
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015d8:	213f      	movs	r1, #63	@ 0x3f
 80015da:	400a      	ands	r2, r1
 80015dc:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80015e2:	687a      	ldr	r2, [r7, #4]
 80015e4:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80015e6:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	685b      	ldr	r3, [r3, #4]
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d011      	beq.n	8001614 <HAL_DMA_Init+0xd8>
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	685b      	ldr	r3, [r3, #4]
 80015f4:	2b04      	cmp	r3, #4
 80015f6:	d80d      	bhi.n	8001614 <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	0018      	movs	r0, r3
 80015fc:	f000 f9d2 	bl	80019a4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001604:	2200      	movs	r2, #0
 8001606:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800160c:	687a      	ldr	r2, [r7, #4]
 800160e:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8001610:	605a      	str	r2, [r3, #4]
 8001612:	e008      	b.n	8001626 <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	2200      	movs	r2, #0
 8001618:	651a      	str	r2, [r3, #80]	@ 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	2200      	movs	r2, #0
 800161e:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	2200      	movs	r2, #0
 8001624:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	2200      	movs	r2, #0
 800162a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	2225      	movs	r2, #37	@ 0x25
 8001630:	2101      	movs	r1, #1
 8001632:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	2224      	movs	r2, #36	@ 0x24
 8001638:	2100      	movs	r1, #0
 800163a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800163c:	2300      	movs	r3, #0
}
 800163e:	0018      	movs	r0, r3
 8001640:	46bd      	mov	sp, r7
 8001642:	b002      	add	sp, #8
 8001644:	bd80      	pop	{r7, pc}
 8001646:	46c0      	nop			@ (mov r8, r8)
 8001648:	bffdfff8 	.word	0xbffdfff8
 800164c:	ffff800f 	.word	0xffff800f

08001650 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b082      	sub	sp, #8
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	2b00      	cmp	r3, #0
 800165c:	d101      	bne.n	8001662 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 800165e:	2301      	movs	r3, #1
 8001660:	e050      	b.n	8001704 <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	2225      	movs	r2, #37	@ 0x25
 8001666:	5c9b      	ldrb	r3, [r3, r2]
 8001668:	b2db      	uxtb	r3, r3
 800166a:	2b02      	cmp	r3, #2
 800166c:	d008      	beq.n	8001680 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	2204      	movs	r2, #4
 8001672:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	2224      	movs	r2, #36	@ 0x24
 8001678:	2100      	movs	r1, #0
 800167a:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 800167c:	2301      	movs	r3, #1
 800167e:	e041      	b.n	8001704 <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	681a      	ldr	r2, [r3, #0]
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	210e      	movs	r1, #14
 800168c:	438a      	bics	r2, r1
 800168e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001694:	681a      	ldr	r2, [r3, #0]
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800169a:	491c      	ldr	r1, [pc, #112]	@ (800170c <HAL_DMA_Abort+0xbc>)
 800169c:	400a      	ands	r2, r1
 800169e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	681a      	ldr	r2, [r3, #0]
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	2101      	movs	r1, #1
 80016ac:	438a      	bics	r2, r1
 80016ae:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 80016b0:	4b17      	ldr	r3, [pc, #92]	@ (8001710 <HAL_DMA_Abort+0xc0>)
 80016b2:	6859      	ldr	r1, [r3, #4]
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016b8:	221c      	movs	r2, #28
 80016ba:	4013      	ands	r3, r2
 80016bc:	2201      	movs	r2, #1
 80016be:	409a      	lsls	r2, r3
 80016c0:	4b13      	ldr	r3, [pc, #76]	@ (8001710 <HAL_DMA_Abort+0xc0>)
 80016c2:	430a      	orrs	r2, r1
 80016c4:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80016ca:	687a      	ldr	r2, [r7, #4]
 80016cc:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80016ce:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d00c      	beq.n	80016f2 <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80016dc:	681a      	ldr	r2, [r3, #0]
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80016e2:	490a      	ldr	r1, [pc, #40]	@ (800170c <HAL_DMA_Abort+0xbc>)
 80016e4:	400a      	ands	r2, r1
 80016e6:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80016ec:	687a      	ldr	r2, [r7, #4]
 80016ee:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 80016f0:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	2225      	movs	r2, #37	@ 0x25
 80016f6:	2101      	movs	r1, #1
 80016f8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	2224      	movs	r2, #36	@ 0x24
 80016fe:	2100      	movs	r1, #0
 8001700:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 8001702:	2300      	movs	r3, #0
}
 8001704:	0018      	movs	r0, r3
 8001706:	46bd      	mov	sp, r7
 8001708:	b002      	add	sp, #8
 800170a:	bd80      	pop	{r7, pc}
 800170c:	fffffeff 	.word	0xfffffeff
 8001710:	40020000 	.word	0x40020000

08001714 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b084      	sub	sp, #16
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800171c:	210f      	movs	r1, #15
 800171e:	187b      	adds	r3, r7, r1
 8001720:	2200      	movs	r2, #0
 8001722:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	2225      	movs	r2, #37	@ 0x25
 8001728:	5c9b      	ldrb	r3, [r3, r2]
 800172a:	b2db      	uxtb	r3, r3
 800172c:	2b02      	cmp	r3, #2
 800172e:	d006      	beq.n	800173e <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	2204      	movs	r2, #4
 8001734:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8001736:	187b      	adds	r3, r7, r1
 8001738:	2201      	movs	r2, #1
 800173a:	701a      	strb	r2, [r3, #0]
 800173c:	e049      	b.n	80017d2 <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	681a      	ldr	r2, [r3, #0]
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	210e      	movs	r1, #14
 800174a:	438a      	bics	r2, r1
 800174c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	681a      	ldr	r2, [r3, #0]
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	2101      	movs	r1, #1
 800175a:	438a      	bics	r2, r1
 800175c:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001762:	681a      	ldr	r2, [r3, #0]
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001768:	491d      	ldr	r1, [pc, #116]	@ (80017e0 <HAL_DMA_Abort_IT+0xcc>)
 800176a:	400a      	ands	r2, r1
 800176c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 800176e:	4b1d      	ldr	r3, [pc, #116]	@ (80017e4 <HAL_DMA_Abort_IT+0xd0>)
 8001770:	6859      	ldr	r1, [r3, #4]
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001776:	221c      	movs	r2, #28
 8001778:	4013      	ands	r3, r2
 800177a:	2201      	movs	r2, #1
 800177c:	409a      	lsls	r2, r3
 800177e:	4b19      	ldr	r3, [pc, #100]	@ (80017e4 <HAL_DMA_Abort_IT+0xd0>)
 8001780:	430a      	orrs	r2, r1
 8001782:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001788:	687a      	ldr	r2, [r7, #4]
 800178a:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800178c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001792:	2b00      	cmp	r3, #0
 8001794:	d00c      	beq.n	80017b0 <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800179a:	681a      	ldr	r2, [r3, #0]
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80017a0:	490f      	ldr	r1, [pc, #60]	@ (80017e0 <HAL_DMA_Abort_IT+0xcc>)
 80017a2:	400a      	ands	r2, r1
 80017a4:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80017aa:	687a      	ldr	r2, [r7, #4]
 80017ac:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 80017ae:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	2225      	movs	r2, #37	@ 0x25
 80017b4:	2101      	movs	r1, #1
 80017b6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	2224      	movs	r2, #36	@ 0x24
 80017bc:	2100      	movs	r1, #0
 80017be:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d004      	beq.n	80017d2 <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80017cc:	687a      	ldr	r2, [r7, #4]
 80017ce:	0010      	movs	r0, r2
 80017d0:	4798      	blx	r3
    }
  }
  return status;
 80017d2:	230f      	movs	r3, #15
 80017d4:	18fb      	adds	r3, r7, r3
 80017d6:	781b      	ldrb	r3, [r3, #0]
}
 80017d8:	0018      	movs	r0, r3
 80017da:	46bd      	mov	sp, r7
 80017dc:	b004      	add	sp, #16
 80017de:	bd80      	pop	{r7, pc}
 80017e0:	fffffeff 	.word	0xfffffeff
 80017e4:	40020000 	.word	0x40020000

080017e8 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b084      	sub	sp, #16
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 80017f0:	4b55      	ldr	r3, [pc, #340]	@ (8001948 <HAL_DMA_IRQHandler+0x160>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001802:	221c      	movs	r2, #28
 8001804:	4013      	ands	r3, r2
 8001806:	2204      	movs	r2, #4
 8001808:	409a      	lsls	r2, r3
 800180a:	0013      	movs	r3, r2
 800180c:	68fa      	ldr	r2, [r7, #12]
 800180e:	4013      	ands	r3, r2
 8001810:	d027      	beq.n	8001862 <HAL_DMA_IRQHandler+0x7a>
 8001812:	68bb      	ldr	r3, [r7, #8]
 8001814:	2204      	movs	r2, #4
 8001816:	4013      	ands	r3, r2
 8001818:	d023      	beq.n	8001862 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	2220      	movs	r2, #32
 8001822:	4013      	ands	r3, r2
 8001824:	d107      	bne.n	8001836 <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	681a      	ldr	r2, [r3, #0]
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	2104      	movs	r1, #4
 8001832:	438a      	bics	r2, r1
 8001834:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 8001836:	4b44      	ldr	r3, [pc, #272]	@ (8001948 <HAL_DMA_IRQHandler+0x160>)
 8001838:	6859      	ldr	r1, [r3, #4]
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800183e:	221c      	movs	r2, #28
 8001840:	4013      	ands	r3, r2
 8001842:	2204      	movs	r2, #4
 8001844:	409a      	lsls	r2, r3
 8001846:	4b40      	ldr	r3, [pc, #256]	@ (8001948 <HAL_DMA_IRQHandler+0x160>)
 8001848:	430a      	orrs	r2, r1
 800184a:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001850:	2b00      	cmp	r3, #0
 8001852:	d100      	bne.n	8001856 <HAL_DMA_IRQHandler+0x6e>
 8001854:	e073      	b.n	800193e <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800185a:	687a      	ldr	r2, [r7, #4]
 800185c:	0010      	movs	r0, r2
 800185e:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8001860:	e06d      	b.n	800193e <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001866:	221c      	movs	r2, #28
 8001868:	4013      	ands	r3, r2
 800186a:	2202      	movs	r2, #2
 800186c:	409a      	lsls	r2, r3
 800186e:	0013      	movs	r3, r2
 8001870:	68fa      	ldr	r2, [r7, #12]
 8001872:	4013      	ands	r3, r2
 8001874:	d02e      	beq.n	80018d4 <HAL_DMA_IRQHandler+0xec>
 8001876:	68bb      	ldr	r3, [r7, #8]
 8001878:	2202      	movs	r2, #2
 800187a:	4013      	ands	r3, r2
 800187c:	d02a      	beq.n	80018d4 <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	2220      	movs	r2, #32
 8001886:	4013      	ands	r3, r2
 8001888:	d10b      	bne.n	80018a2 <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	681a      	ldr	r2, [r3, #0]
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	210a      	movs	r1, #10
 8001896:	438a      	bics	r2, r1
 8001898:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	2225      	movs	r2, #37	@ 0x25
 800189e:	2101      	movs	r1, #1
 80018a0:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 80018a2:	4b29      	ldr	r3, [pc, #164]	@ (8001948 <HAL_DMA_IRQHandler+0x160>)
 80018a4:	6859      	ldr	r1, [r3, #4]
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018aa:	221c      	movs	r2, #28
 80018ac:	4013      	ands	r3, r2
 80018ae:	2202      	movs	r2, #2
 80018b0:	409a      	lsls	r2, r3
 80018b2:	4b25      	ldr	r3, [pc, #148]	@ (8001948 <HAL_DMA_IRQHandler+0x160>)
 80018b4:	430a      	orrs	r2, r1
 80018b6:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	2224      	movs	r2, #36	@ 0x24
 80018bc:	2100      	movs	r1, #0
 80018be:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d03a      	beq.n	800193e <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018cc:	687a      	ldr	r2, [r7, #4]
 80018ce:	0010      	movs	r0, r2
 80018d0:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 80018d2:	e034      	b.n	800193e <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018d8:	221c      	movs	r2, #28
 80018da:	4013      	ands	r3, r2
 80018dc:	2208      	movs	r2, #8
 80018de:	409a      	lsls	r2, r3
 80018e0:	0013      	movs	r3, r2
 80018e2:	68fa      	ldr	r2, [r7, #12]
 80018e4:	4013      	ands	r3, r2
 80018e6:	d02b      	beq.n	8001940 <HAL_DMA_IRQHandler+0x158>
 80018e8:	68bb      	ldr	r3, [r7, #8]
 80018ea:	2208      	movs	r2, #8
 80018ec:	4013      	ands	r3, r2
 80018ee:	d027      	beq.n	8001940 <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	681a      	ldr	r2, [r3, #0]
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	210e      	movs	r1, #14
 80018fc:	438a      	bics	r2, r1
 80018fe:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8001900:	4b11      	ldr	r3, [pc, #68]	@ (8001948 <HAL_DMA_IRQHandler+0x160>)
 8001902:	6859      	ldr	r1, [r3, #4]
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001908:	221c      	movs	r2, #28
 800190a:	4013      	ands	r3, r2
 800190c:	2201      	movs	r2, #1
 800190e:	409a      	lsls	r2, r3
 8001910:	4b0d      	ldr	r3, [pc, #52]	@ (8001948 <HAL_DMA_IRQHandler+0x160>)
 8001912:	430a      	orrs	r2, r1
 8001914:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	2201      	movs	r2, #1
 800191a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	2225      	movs	r2, #37	@ 0x25
 8001920:	2101      	movs	r1, #1
 8001922:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	2224      	movs	r2, #36	@ 0x24
 8001928:	2100      	movs	r1, #0
 800192a:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001930:	2b00      	cmp	r3, #0
 8001932:	d005      	beq.n	8001940 <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001938:	687a      	ldr	r2, [r7, #4]
 800193a:	0010      	movs	r0, r2
 800193c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800193e:	46c0      	nop			@ (mov r8, r8)
 8001940:	46c0      	nop			@ (mov r8, r8)
}
 8001942:	46bd      	mov	sp, r7
 8001944:	b004      	add	sp, #16
 8001946:	bd80      	pop	{r7, pc}
 8001948:	40020000 	.word	0x40020000

0800194c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b084      	sub	sp, #16
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001958:	089b      	lsrs	r3, r3, #2
 800195a:	4a10      	ldr	r2, [pc, #64]	@ (800199c <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 800195c:	4694      	mov	ip, r2
 800195e:	4463      	add	r3, ip
 8001960:	009b      	lsls	r3, r3, #2
 8001962:	001a      	movs	r2, r3
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	001a      	movs	r2, r3
 800196e:	23ff      	movs	r3, #255	@ 0xff
 8001970:	4013      	ands	r3, r2
 8001972:	3b08      	subs	r3, #8
 8001974:	2114      	movs	r1, #20
 8001976:	0018      	movs	r0, r3
 8001978:	f7fe fbd8 	bl	800012c <__udivsi3>
 800197c:	0003      	movs	r3, r0
 800197e:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	4a07      	ldr	r2, [pc, #28]	@ (80019a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8001984:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	221f      	movs	r2, #31
 800198a:	4013      	ands	r3, r2
 800198c:	2201      	movs	r2, #1
 800198e:	409a      	lsls	r2, r3
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	64da      	str	r2, [r3, #76]	@ 0x4c
}
 8001994:	46c0      	nop			@ (mov r8, r8)
 8001996:	46bd      	mov	sp, r7
 8001998:	b004      	add	sp, #16
 800199a:	bd80      	pop	{r7, pc}
 800199c:	10008200 	.word	0x10008200
 80019a0:	40020880 	.word	0x40020880

080019a4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b084      	sub	sp, #16
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	685b      	ldr	r3, [r3, #4]
 80019b0:	223f      	movs	r2, #63	@ 0x3f
 80019b2:	4013      	ands	r3, r2
 80019b4:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	4a0a      	ldr	r2, [pc, #40]	@ (80019e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80019ba:	4694      	mov	ip, r2
 80019bc:	4463      	add	r3, ip
 80019be:	009b      	lsls	r3, r3, #2
 80019c0:	001a      	movs	r2, r3
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	651a      	str	r2, [r3, #80]	@ 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	4a07      	ldr	r2, [pc, #28]	@ (80019e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80019ca:	655a      	str	r2, [r3, #84]	@ 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	3b01      	subs	r3, #1
 80019d0:	2203      	movs	r2, #3
 80019d2:	4013      	ands	r3, r2
 80019d4:	2201      	movs	r2, #1
 80019d6:	409a      	lsls	r2, r3
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	659a      	str	r2, [r3, #88]	@ 0x58
}
 80019dc:	46c0      	nop			@ (mov r8, r8)
 80019de:	46bd      	mov	sp, r7
 80019e0:	b004      	add	sp, #16
 80019e2:	bd80      	pop	{r7, pc}
 80019e4:	1000823f 	.word	0x1000823f
 80019e8:	40020940 	.word	0x40020940

080019ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b086      	sub	sp, #24
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
 80019f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80019f6:	2300      	movs	r3, #0
 80019f8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019fa:	e147      	b.n	8001c8c <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	2101      	movs	r1, #1
 8001a02:	697a      	ldr	r2, [r7, #20]
 8001a04:	4091      	lsls	r1, r2
 8001a06:	000a      	movs	r2, r1
 8001a08:	4013      	ands	r3, r2
 8001a0a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d100      	bne.n	8001a14 <HAL_GPIO_Init+0x28>
 8001a12:	e138      	b.n	8001c86 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	685b      	ldr	r3, [r3, #4]
 8001a18:	2203      	movs	r2, #3
 8001a1a:	4013      	ands	r3, r2
 8001a1c:	2b01      	cmp	r3, #1
 8001a1e:	d005      	beq.n	8001a2c <HAL_GPIO_Init+0x40>
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	685b      	ldr	r3, [r3, #4]
 8001a24:	2203      	movs	r2, #3
 8001a26:	4013      	ands	r3, r2
 8001a28:	2b02      	cmp	r3, #2
 8001a2a:	d130      	bne.n	8001a8e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	689b      	ldr	r3, [r3, #8]
 8001a30:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001a32:	697b      	ldr	r3, [r7, #20]
 8001a34:	005b      	lsls	r3, r3, #1
 8001a36:	2203      	movs	r2, #3
 8001a38:	409a      	lsls	r2, r3
 8001a3a:	0013      	movs	r3, r2
 8001a3c:	43da      	mvns	r2, r3
 8001a3e:	693b      	ldr	r3, [r7, #16]
 8001a40:	4013      	ands	r3, r2
 8001a42:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	68da      	ldr	r2, [r3, #12]
 8001a48:	697b      	ldr	r3, [r7, #20]
 8001a4a:	005b      	lsls	r3, r3, #1
 8001a4c:	409a      	lsls	r2, r3
 8001a4e:	0013      	movs	r3, r2
 8001a50:	693a      	ldr	r2, [r7, #16]
 8001a52:	4313      	orrs	r3, r2
 8001a54:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	693a      	ldr	r2, [r7, #16]
 8001a5a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001a62:	2201      	movs	r2, #1
 8001a64:	697b      	ldr	r3, [r7, #20]
 8001a66:	409a      	lsls	r2, r3
 8001a68:	0013      	movs	r3, r2
 8001a6a:	43da      	mvns	r2, r3
 8001a6c:	693b      	ldr	r3, [r7, #16]
 8001a6e:	4013      	ands	r3, r2
 8001a70:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	685b      	ldr	r3, [r3, #4]
 8001a76:	091b      	lsrs	r3, r3, #4
 8001a78:	2201      	movs	r2, #1
 8001a7a:	401a      	ands	r2, r3
 8001a7c:	697b      	ldr	r3, [r7, #20]
 8001a7e:	409a      	lsls	r2, r3
 8001a80:	0013      	movs	r3, r2
 8001a82:	693a      	ldr	r2, [r7, #16]
 8001a84:	4313      	orrs	r3, r2
 8001a86:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	693a      	ldr	r2, [r7, #16]
 8001a8c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	685b      	ldr	r3, [r3, #4]
 8001a92:	2203      	movs	r2, #3
 8001a94:	4013      	ands	r3, r2
 8001a96:	2b03      	cmp	r3, #3
 8001a98:	d017      	beq.n	8001aca <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	68db      	ldr	r3, [r3, #12]
 8001a9e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001aa0:	697b      	ldr	r3, [r7, #20]
 8001aa2:	005b      	lsls	r3, r3, #1
 8001aa4:	2203      	movs	r2, #3
 8001aa6:	409a      	lsls	r2, r3
 8001aa8:	0013      	movs	r3, r2
 8001aaa:	43da      	mvns	r2, r3
 8001aac:	693b      	ldr	r3, [r7, #16]
 8001aae:	4013      	ands	r3, r2
 8001ab0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	689a      	ldr	r2, [r3, #8]
 8001ab6:	697b      	ldr	r3, [r7, #20]
 8001ab8:	005b      	lsls	r3, r3, #1
 8001aba:	409a      	lsls	r2, r3
 8001abc:	0013      	movs	r3, r2
 8001abe:	693a      	ldr	r2, [r7, #16]
 8001ac0:	4313      	orrs	r3, r2
 8001ac2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	693a      	ldr	r2, [r7, #16]
 8001ac8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	685b      	ldr	r3, [r3, #4]
 8001ace:	2203      	movs	r2, #3
 8001ad0:	4013      	ands	r3, r2
 8001ad2:	2b02      	cmp	r3, #2
 8001ad4:	d123      	bne.n	8001b1e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001ad6:	697b      	ldr	r3, [r7, #20]
 8001ad8:	08da      	lsrs	r2, r3, #3
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	3208      	adds	r2, #8
 8001ade:	0092      	lsls	r2, r2, #2
 8001ae0:	58d3      	ldr	r3, [r2, r3]
 8001ae2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001ae4:	697b      	ldr	r3, [r7, #20]
 8001ae6:	2207      	movs	r2, #7
 8001ae8:	4013      	ands	r3, r2
 8001aea:	009b      	lsls	r3, r3, #2
 8001aec:	220f      	movs	r2, #15
 8001aee:	409a      	lsls	r2, r3
 8001af0:	0013      	movs	r3, r2
 8001af2:	43da      	mvns	r2, r3
 8001af4:	693b      	ldr	r3, [r7, #16]
 8001af6:	4013      	ands	r3, r2
 8001af8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	691a      	ldr	r2, [r3, #16]
 8001afe:	697b      	ldr	r3, [r7, #20]
 8001b00:	2107      	movs	r1, #7
 8001b02:	400b      	ands	r3, r1
 8001b04:	009b      	lsls	r3, r3, #2
 8001b06:	409a      	lsls	r2, r3
 8001b08:	0013      	movs	r3, r2
 8001b0a:	693a      	ldr	r2, [r7, #16]
 8001b0c:	4313      	orrs	r3, r2
 8001b0e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001b10:	697b      	ldr	r3, [r7, #20]
 8001b12:	08da      	lsrs	r2, r3, #3
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	3208      	adds	r2, #8
 8001b18:	0092      	lsls	r2, r2, #2
 8001b1a:	6939      	ldr	r1, [r7, #16]
 8001b1c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001b24:	697b      	ldr	r3, [r7, #20]
 8001b26:	005b      	lsls	r3, r3, #1
 8001b28:	2203      	movs	r2, #3
 8001b2a:	409a      	lsls	r2, r3
 8001b2c:	0013      	movs	r3, r2
 8001b2e:	43da      	mvns	r2, r3
 8001b30:	693b      	ldr	r3, [r7, #16]
 8001b32:	4013      	ands	r3, r2
 8001b34:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	685b      	ldr	r3, [r3, #4]
 8001b3a:	2203      	movs	r2, #3
 8001b3c:	401a      	ands	r2, r3
 8001b3e:	697b      	ldr	r3, [r7, #20]
 8001b40:	005b      	lsls	r3, r3, #1
 8001b42:	409a      	lsls	r2, r3
 8001b44:	0013      	movs	r3, r2
 8001b46:	693a      	ldr	r2, [r7, #16]
 8001b48:	4313      	orrs	r3, r2
 8001b4a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	693a      	ldr	r2, [r7, #16]
 8001b50:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	685a      	ldr	r2, [r3, #4]
 8001b56:	23c0      	movs	r3, #192	@ 0xc0
 8001b58:	029b      	lsls	r3, r3, #10
 8001b5a:	4013      	ands	r3, r2
 8001b5c:	d100      	bne.n	8001b60 <HAL_GPIO_Init+0x174>
 8001b5e:	e092      	b.n	8001c86 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8001b60:	4a50      	ldr	r2, [pc, #320]	@ (8001ca4 <HAL_GPIO_Init+0x2b8>)
 8001b62:	697b      	ldr	r3, [r7, #20]
 8001b64:	089b      	lsrs	r3, r3, #2
 8001b66:	3318      	adds	r3, #24
 8001b68:	009b      	lsls	r3, r3, #2
 8001b6a:	589b      	ldr	r3, [r3, r2]
 8001b6c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8001b6e:	697b      	ldr	r3, [r7, #20]
 8001b70:	2203      	movs	r2, #3
 8001b72:	4013      	ands	r3, r2
 8001b74:	00db      	lsls	r3, r3, #3
 8001b76:	220f      	movs	r2, #15
 8001b78:	409a      	lsls	r2, r3
 8001b7a:	0013      	movs	r3, r2
 8001b7c:	43da      	mvns	r2, r3
 8001b7e:	693b      	ldr	r3, [r7, #16]
 8001b80:	4013      	ands	r3, r2
 8001b82:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8001b84:	687a      	ldr	r2, [r7, #4]
 8001b86:	23a0      	movs	r3, #160	@ 0xa0
 8001b88:	05db      	lsls	r3, r3, #23
 8001b8a:	429a      	cmp	r2, r3
 8001b8c:	d013      	beq.n	8001bb6 <HAL_GPIO_Init+0x1ca>
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	4a45      	ldr	r2, [pc, #276]	@ (8001ca8 <HAL_GPIO_Init+0x2bc>)
 8001b92:	4293      	cmp	r3, r2
 8001b94:	d00d      	beq.n	8001bb2 <HAL_GPIO_Init+0x1c6>
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	4a44      	ldr	r2, [pc, #272]	@ (8001cac <HAL_GPIO_Init+0x2c0>)
 8001b9a:	4293      	cmp	r3, r2
 8001b9c:	d007      	beq.n	8001bae <HAL_GPIO_Init+0x1c2>
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	4a43      	ldr	r2, [pc, #268]	@ (8001cb0 <HAL_GPIO_Init+0x2c4>)
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	d101      	bne.n	8001baa <HAL_GPIO_Init+0x1be>
 8001ba6:	2303      	movs	r3, #3
 8001ba8:	e006      	b.n	8001bb8 <HAL_GPIO_Init+0x1cc>
 8001baa:	2305      	movs	r3, #5
 8001bac:	e004      	b.n	8001bb8 <HAL_GPIO_Init+0x1cc>
 8001bae:	2302      	movs	r3, #2
 8001bb0:	e002      	b.n	8001bb8 <HAL_GPIO_Init+0x1cc>
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	e000      	b.n	8001bb8 <HAL_GPIO_Init+0x1cc>
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	697a      	ldr	r2, [r7, #20]
 8001bba:	2103      	movs	r1, #3
 8001bbc:	400a      	ands	r2, r1
 8001bbe:	00d2      	lsls	r2, r2, #3
 8001bc0:	4093      	lsls	r3, r2
 8001bc2:	693a      	ldr	r2, [r7, #16]
 8001bc4:	4313      	orrs	r3, r2
 8001bc6:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8001bc8:	4936      	ldr	r1, [pc, #216]	@ (8001ca4 <HAL_GPIO_Init+0x2b8>)
 8001bca:	697b      	ldr	r3, [r7, #20]
 8001bcc:	089b      	lsrs	r3, r3, #2
 8001bce:	3318      	adds	r3, #24
 8001bd0:	009b      	lsls	r3, r3, #2
 8001bd2:	693a      	ldr	r2, [r7, #16]
 8001bd4:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001bd6:	4b33      	ldr	r3, [pc, #204]	@ (8001ca4 <HAL_GPIO_Init+0x2b8>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	43da      	mvns	r2, r3
 8001be0:	693b      	ldr	r3, [r7, #16]
 8001be2:	4013      	ands	r3, r2
 8001be4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	685a      	ldr	r2, [r3, #4]
 8001bea:	2380      	movs	r3, #128	@ 0x80
 8001bec:	035b      	lsls	r3, r3, #13
 8001bee:	4013      	ands	r3, r2
 8001bf0:	d003      	beq.n	8001bfa <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8001bf2:	693a      	ldr	r2, [r7, #16]
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	4313      	orrs	r3, r2
 8001bf8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001bfa:	4b2a      	ldr	r3, [pc, #168]	@ (8001ca4 <HAL_GPIO_Init+0x2b8>)
 8001bfc:	693a      	ldr	r2, [r7, #16]
 8001bfe:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8001c00:	4b28      	ldr	r3, [pc, #160]	@ (8001ca4 <HAL_GPIO_Init+0x2b8>)
 8001c02:	685b      	ldr	r3, [r3, #4]
 8001c04:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	43da      	mvns	r2, r3
 8001c0a:	693b      	ldr	r3, [r7, #16]
 8001c0c:	4013      	ands	r3, r2
 8001c0e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	685a      	ldr	r2, [r3, #4]
 8001c14:	2380      	movs	r3, #128	@ 0x80
 8001c16:	039b      	lsls	r3, r3, #14
 8001c18:	4013      	ands	r3, r2
 8001c1a:	d003      	beq.n	8001c24 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8001c1c:	693a      	ldr	r2, [r7, #16]
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	4313      	orrs	r3, r2
 8001c22:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001c24:	4b1f      	ldr	r3, [pc, #124]	@ (8001ca4 <HAL_GPIO_Init+0x2b8>)
 8001c26:	693a      	ldr	r2, [r7, #16]
 8001c28:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001c2a:	4a1e      	ldr	r2, [pc, #120]	@ (8001ca4 <HAL_GPIO_Init+0x2b8>)
 8001c2c:	2384      	movs	r3, #132	@ 0x84
 8001c2e:	58d3      	ldr	r3, [r2, r3]
 8001c30:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	43da      	mvns	r2, r3
 8001c36:	693b      	ldr	r3, [r7, #16]
 8001c38:	4013      	ands	r3, r2
 8001c3a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	685a      	ldr	r2, [r3, #4]
 8001c40:	2380      	movs	r3, #128	@ 0x80
 8001c42:	029b      	lsls	r3, r3, #10
 8001c44:	4013      	ands	r3, r2
 8001c46:	d003      	beq.n	8001c50 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8001c48:	693a      	ldr	r2, [r7, #16]
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	4313      	orrs	r3, r2
 8001c4e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001c50:	4914      	ldr	r1, [pc, #80]	@ (8001ca4 <HAL_GPIO_Init+0x2b8>)
 8001c52:	2284      	movs	r2, #132	@ 0x84
 8001c54:	693b      	ldr	r3, [r7, #16]
 8001c56:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8001c58:	4a12      	ldr	r2, [pc, #72]	@ (8001ca4 <HAL_GPIO_Init+0x2b8>)
 8001c5a:	2380      	movs	r3, #128	@ 0x80
 8001c5c:	58d3      	ldr	r3, [r2, r3]
 8001c5e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	43da      	mvns	r2, r3
 8001c64:	693b      	ldr	r3, [r7, #16]
 8001c66:	4013      	ands	r3, r2
 8001c68:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	685a      	ldr	r2, [r3, #4]
 8001c6e:	2380      	movs	r3, #128	@ 0x80
 8001c70:	025b      	lsls	r3, r3, #9
 8001c72:	4013      	ands	r3, r2
 8001c74:	d003      	beq.n	8001c7e <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8001c76:	693a      	ldr	r2, [r7, #16]
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	4313      	orrs	r3, r2
 8001c7c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001c7e:	4909      	ldr	r1, [pc, #36]	@ (8001ca4 <HAL_GPIO_Init+0x2b8>)
 8001c80:	2280      	movs	r2, #128	@ 0x80
 8001c82:	693b      	ldr	r3, [r7, #16]
 8001c84:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8001c86:	697b      	ldr	r3, [r7, #20]
 8001c88:	3301      	adds	r3, #1
 8001c8a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	681a      	ldr	r2, [r3, #0]
 8001c90:	697b      	ldr	r3, [r7, #20]
 8001c92:	40da      	lsrs	r2, r3
 8001c94:	1e13      	subs	r3, r2, #0
 8001c96:	d000      	beq.n	8001c9a <HAL_GPIO_Init+0x2ae>
 8001c98:	e6b0      	b.n	80019fc <HAL_GPIO_Init+0x10>
  }
}
 8001c9a:	46c0      	nop			@ (mov r8, r8)
 8001c9c:	46c0      	nop			@ (mov r8, r8)
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	b006      	add	sp, #24
 8001ca2:	bd80      	pop	{r7, pc}
 8001ca4:	40021800 	.word	0x40021800
 8001ca8:	50000400 	.word	0x50000400
 8001cac:	50000800 	.word	0x50000800
 8001cb0:	50000c00 	.word	0x50000c00

08001cb4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b082      	sub	sp, #8
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
 8001cbc:	0008      	movs	r0, r1
 8001cbe:	0011      	movs	r1, r2
 8001cc0:	1cbb      	adds	r3, r7, #2
 8001cc2:	1c02      	adds	r2, r0, #0
 8001cc4:	801a      	strh	r2, [r3, #0]
 8001cc6:	1c7b      	adds	r3, r7, #1
 8001cc8:	1c0a      	adds	r2, r1, #0
 8001cca:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001ccc:	1c7b      	adds	r3, r7, #1
 8001cce:	781b      	ldrb	r3, [r3, #0]
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d004      	beq.n	8001cde <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001cd4:	1cbb      	adds	r3, r7, #2
 8001cd6:	881a      	ldrh	r2, [r3, #0]
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001cdc:	e003      	b.n	8001ce6 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001cde:	1cbb      	adds	r3, r7, #2
 8001ce0:	881a      	ldrh	r2, [r3, #0]
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001ce6:	46c0      	nop			@ (mov r8, r8)
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	b002      	add	sp, #8
 8001cec:	bd80      	pop	{r7, pc}

08001cee <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001cee:	b580      	push	{r7, lr}
 8001cf0:	b084      	sub	sp, #16
 8001cf2:	af00      	add	r7, sp, #0
 8001cf4:	6078      	str	r0, [r7, #4]
 8001cf6:	000a      	movs	r2, r1
 8001cf8:	1cbb      	adds	r3, r7, #2
 8001cfa:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	695b      	ldr	r3, [r3, #20]
 8001d00:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001d02:	1cbb      	adds	r3, r7, #2
 8001d04:	881b      	ldrh	r3, [r3, #0]
 8001d06:	68fa      	ldr	r2, [r7, #12]
 8001d08:	4013      	ands	r3, r2
 8001d0a:	041a      	lsls	r2, r3, #16
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	43db      	mvns	r3, r3
 8001d10:	1cb9      	adds	r1, r7, #2
 8001d12:	8809      	ldrh	r1, [r1, #0]
 8001d14:	400b      	ands	r3, r1
 8001d16:	431a      	orrs	r2, r3
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	619a      	str	r2, [r3, #24]
}
 8001d1c:	46c0      	nop			@ (mov r8, r8)
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	b004      	add	sp, #16
 8001d22:	bd80      	pop	{r7, pc}

08001d24 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b084      	sub	sp, #16
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001d2c:	4b19      	ldr	r3, [pc, #100]	@ (8001d94 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	4a19      	ldr	r2, [pc, #100]	@ (8001d98 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8001d32:	4013      	ands	r3, r2
 8001d34:	0019      	movs	r1, r3
 8001d36:	4b17      	ldr	r3, [pc, #92]	@ (8001d94 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001d38:	687a      	ldr	r2, [r7, #4]
 8001d3a:	430a      	orrs	r2, r1
 8001d3c:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001d3e:	687a      	ldr	r2, [r7, #4]
 8001d40:	2380      	movs	r3, #128	@ 0x80
 8001d42:	009b      	lsls	r3, r3, #2
 8001d44:	429a      	cmp	r2, r3
 8001d46:	d11f      	bne.n	8001d88 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8001d48:	4b14      	ldr	r3, [pc, #80]	@ (8001d9c <HAL_PWREx_ControlVoltageScaling+0x78>)
 8001d4a:	681a      	ldr	r2, [r3, #0]
 8001d4c:	0013      	movs	r3, r2
 8001d4e:	005b      	lsls	r3, r3, #1
 8001d50:	189b      	adds	r3, r3, r2
 8001d52:	005b      	lsls	r3, r3, #1
 8001d54:	4912      	ldr	r1, [pc, #72]	@ (8001da0 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8001d56:	0018      	movs	r0, r3
 8001d58:	f7fe f9e8 	bl	800012c <__udivsi3>
 8001d5c:	0003      	movs	r3, r0
 8001d5e:	3301      	adds	r3, #1
 8001d60:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001d62:	e008      	b.n	8001d76 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d003      	beq.n	8001d72 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	3b01      	subs	r3, #1
 8001d6e:	60fb      	str	r3, [r7, #12]
 8001d70:	e001      	b.n	8001d76 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8001d72:	2303      	movs	r3, #3
 8001d74:	e009      	b.n	8001d8a <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001d76:	4b07      	ldr	r3, [pc, #28]	@ (8001d94 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001d78:	695a      	ldr	r2, [r3, #20]
 8001d7a:	2380      	movs	r3, #128	@ 0x80
 8001d7c:	00db      	lsls	r3, r3, #3
 8001d7e:	401a      	ands	r2, r3
 8001d80:	2380      	movs	r3, #128	@ 0x80
 8001d82:	00db      	lsls	r3, r3, #3
 8001d84:	429a      	cmp	r2, r3
 8001d86:	d0ed      	beq.n	8001d64 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8001d88:	2300      	movs	r3, #0
}
 8001d8a:	0018      	movs	r0, r3
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	b004      	add	sp, #16
 8001d90:	bd80      	pop	{r7, pc}
 8001d92:	46c0      	nop			@ (mov r8, r8)
 8001d94:	40007000 	.word	0x40007000
 8001d98:	fffff9ff 	.word	0xfffff9ff
 8001d9c:	200001a8 	.word	0x200001a8
 8001da0:	000f4240 	.word	0x000f4240

08001da4 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8001da8:	4b03      	ldr	r3, [pc, #12]	@ (8001db8 <LL_RCC_GetAPB1Prescaler+0x14>)
 8001daa:	689a      	ldr	r2, [r3, #8]
 8001dac:	23e0      	movs	r3, #224	@ 0xe0
 8001dae:	01db      	lsls	r3, r3, #7
 8001db0:	4013      	ands	r3, r2
}
 8001db2:	0018      	movs	r0, r3
 8001db4:	46bd      	mov	sp, r7
 8001db6:	bd80      	pop	{r7, pc}
 8001db8:	40021000 	.word	0x40021000

08001dbc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b088      	sub	sp, #32
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d101      	bne.n	8001dce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001dca:	2301      	movs	r3, #1
 8001dcc:	e2fe      	b.n	80023cc <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	2201      	movs	r2, #1
 8001dd4:	4013      	ands	r3, r2
 8001dd6:	d100      	bne.n	8001dda <HAL_RCC_OscConfig+0x1e>
 8001dd8:	e07c      	b.n	8001ed4 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001dda:	4bc3      	ldr	r3, [pc, #780]	@ (80020e8 <HAL_RCC_OscConfig+0x32c>)
 8001ddc:	689b      	ldr	r3, [r3, #8]
 8001dde:	2238      	movs	r2, #56	@ 0x38
 8001de0:	4013      	ands	r3, r2
 8001de2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001de4:	4bc0      	ldr	r3, [pc, #768]	@ (80020e8 <HAL_RCC_OscConfig+0x32c>)
 8001de6:	68db      	ldr	r3, [r3, #12]
 8001de8:	2203      	movs	r2, #3
 8001dea:	4013      	ands	r3, r2
 8001dec:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8001dee:	69bb      	ldr	r3, [r7, #24]
 8001df0:	2b10      	cmp	r3, #16
 8001df2:	d102      	bne.n	8001dfa <HAL_RCC_OscConfig+0x3e>
 8001df4:	697b      	ldr	r3, [r7, #20]
 8001df6:	2b03      	cmp	r3, #3
 8001df8:	d002      	beq.n	8001e00 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8001dfa:	69bb      	ldr	r3, [r7, #24]
 8001dfc:	2b08      	cmp	r3, #8
 8001dfe:	d10b      	bne.n	8001e18 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e00:	4bb9      	ldr	r3, [pc, #740]	@ (80020e8 <HAL_RCC_OscConfig+0x32c>)
 8001e02:	681a      	ldr	r2, [r3, #0]
 8001e04:	2380      	movs	r3, #128	@ 0x80
 8001e06:	029b      	lsls	r3, r3, #10
 8001e08:	4013      	ands	r3, r2
 8001e0a:	d062      	beq.n	8001ed2 <HAL_RCC_OscConfig+0x116>
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	685b      	ldr	r3, [r3, #4]
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d15e      	bne.n	8001ed2 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8001e14:	2301      	movs	r3, #1
 8001e16:	e2d9      	b.n	80023cc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	685a      	ldr	r2, [r3, #4]
 8001e1c:	2380      	movs	r3, #128	@ 0x80
 8001e1e:	025b      	lsls	r3, r3, #9
 8001e20:	429a      	cmp	r2, r3
 8001e22:	d107      	bne.n	8001e34 <HAL_RCC_OscConfig+0x78>
 8001e24:	4bb0      	ldr	r3, [pc, #704]	@ (80020e8 <HAL_RCC_OscConfig+0x32c>)
 8001e26:	681a      	ldr	r2, [r3, #0]
 8001e28:	4baf      	ldr	r3, [pc, #700]	@ (80020e8 <HAL_RCC_OscConfig+0x32c>)
 8001e2a:	2180      	movs	r1, #128	@ 0x80
 8001e2c:	0249      	lsls	r1, r1, #9
 8001e2e:	430a      	orrs	r2, r1
 8001e30:	601a      	str	r2, [r3, #0]
 8001e32:	e020      	b.n	8001e76 <HAL_RCC_OscConfig+0xba>
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	685a      	ldr	r2, [r3, #4]
 8001e38:	23a0      	movs	r3, #160	@ 0xa0
 8001e3a:	02db      	lsls	r3, r3, #11
 8001e3c:	429a      	cmp	r2, r3
 8001e3e:	d10e      	bne.n	8001e5e <HAL_RCC_OscConfig+0xa2>
 8001e40:	4ba9      	ldr	r3, [pc, #676]	@ (80020e8 <HAL_RCC_OscConfig+0x32c>)
 8001e42:	681a      	ldr	r2, [r3, #0]
 8001e44:	4ba8      	ldr	r3, [pc, #672]	@ (80020e8 <HAL_RCC_OscConfig+0x32c>)
 8001e46:	2180      	movs	r1, #128	@ 0x80
 8001e48:	02c9      	lsls	r1, r1, #11
 8001e4a:	430a      	orrs	r2, r1
 8001e4c:	601a      	str	r2, [r3, #0]
 8001e4e:	4ba6      	ldr	r3, [pc, #664]	@ (80020e8 <HAL_RCC_OscConfig+0x32c>)
 8001e50:	681a      	ldr	r2, [r3, #0]
 8001e52:	4ba5      	ldr	r3, [pc, #660]	@ (80020e8 <HAL_RCC_OscConfig+0x32c>)
 8001e54:	2180      	movs	r1, #128	@ 0x80
 8001e56:	0249      	lsls	r1, r1, #9
 8001e58:	430a      	orrs	r2, r1
 8001e5a:	601a      	str	r2, [r3, #0]
 8001e5c:	e00b      	b.n	8001e76 <HAL_RCC_OscConfig+0xba>
 8001e5e:	4ba2      	ldr	r3, [pc, #648]	@ (80020e8 <HAL_RCC_OscConfig+0x32c>)
 8001e60:	681a      	ldr	r2, [r3, #0]
 8001e62:	4ba1      	ldr	r3, [pc, #644]	@ (80020e8 <HAL_RCC_OscConfig+0x32c>)
 8001e64:	49a1      	ldr	r1, [pc, #644]	@ (80020ec <HAL_RCC_OscConfig+0x330>)
 8001e66:	400a      	ands	r2, r1
 8001e68:	601a      	str	r2, [r3, #0]
 8001e6a:	4b9f      	ldr	r3, [pc, #636]	@ (80020e8 <HAL_RCC_OscConfig+0x32c>)
 8001e6c:	681a      	ldr	r2, [r3, #0]
 8001e6e:	4b9e      	ldr	r3, [pc, #632]	@ (80020e8 <HAL_RCC_OscConfig+0x32c>)
 8001e70:	499f      	ldr	r1, [pc, #636]	@ (80020f0 <HAL_RCC_OscConfig+0x334>)
 8001e72:	400a      	ands	r2, r1
 8001e74:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	685b      	ldr	r3, [r3, #4]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d014      	beq.n	8001ea8 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e7e:	f7ff faa5 	bl	80013cc <HAL_GetTick>
 8001e82:	0003      	movs	r3, r0
 8001e84:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e86:	e008      	b.n	8001e9a <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e88:	f7ff faa0 	bl	80013cc <HAL_GetTick>
 8001e8c:	0002      	movs	r2, r0
 8001e8e:	693b      	ldr	r3, [r7, #16]
 8001e90:	1ad3      	subs	r3, r2, r3
 8001e92:	2b64      	cmp	r3, #100	@ 0x64
 8001e94:	d901      	bls.n	8001e9a <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8001e96:	2303      	movs	r3, #3
 8001e98:	e298      	b.n	80023cc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e9a:	4b93      	ldr	r3, [pc, #588]	@ (80020e8 <HAL_RCC_OscConfig+0x32c>)
 8001e9c:	681a      	ldr	r2, [r3, #0]
 8001e9e:	2380      	movs	r3, #128	@ 0x80
 8001ea0:	029b      	lsls	r3, r3, #10
 8001ea2:	4013      	ands	r3, r2
 8001ea4:	d0f0      	beq.n	8001e88 <HAL_RCC_OscConfig+0xcc>
 8001ea6:	e015      	b.n	8001ed4 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ea8:	f7ff fa90 	bl	80013cc <HAL_GetTick>
 8001eac:	0003      	movs	r3, r0
 8001eae:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001eb0:	e008      	b.n	8001ec4 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001eb2:	f7ff fa8b 	bl	80013cc <HAL_GetTick>
 8001eb6:	0002      	movs	r2, r0
 8001eb8:	693b      	ldr	r3, [r7, #16]
 8001eba:	1ad3      	subs	r3, r2, r3
 8001ebc:	2b64      	cmp	r3, #100	@ 0x64
 8001ebe:	d901      	bls.n	8001ec4 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001ec0:	2303      	movs	r3, #3
 8001ec2:	e283      	b.n	80023cc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001ec4:	4b88      	ldr	r3, [pc, #544]	@ (80020e8 <HAL_RCC_OscConfig+0x32c>)
 8001ec6:	681a      	ldr	r2, [r3, #0]
 8001ec8:	2380      	movs	r3, #128	@ 0x80
 8001eca:	029b      	lsls	r3, r3, #10
 8001ecc:	4013      	ands	r3, r2
 8001ece:	d1f0      	bne.n	8001eb2 <HAL_RCC_OscConfig+0xf6>
 8001ed0:	e000      	b.n	8001ed4 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ed2:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	2202      	movs	r2, #2
 8001eda:	4013      	ands	r3, r2
 8001edc:	d100      	bne.n	8001ee0 <HAL_RCC_OscConfig+0x124>
 8001ede:	e099      	b.n	8002014 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001ee0:	4b81      	ldr	r3, [pc, #516]	@ (80020e8 <HAL_RCC_OscConfig+0x32c>)
 8001ee2:	689b      	ldr	r3, [r3, #8]
 8001ee4:	2238      	movs	r2, #56	@ 0x38
 8001ee6:	4013      	ands	r3, r2
 8001ee8:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001eea:	4b7f      	ldr	r3, [pc, #508]	@ (80020e8 <HAL_RCC_OscConfig+0x32c>)
 8001eec:	68db      	ldr	r3, [r3, #12]
 8001eee:	2203      	movs	r2, #3
 8001ef0:	4013      	ands	r3, r2
 8001ef2:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8001ef4:	69bb      	ldr	r3, [r7, #24]
 8001ef6:	2b10      	cmp	r3, #16
 8001ef8:	d102      	bne.n	8001f00 <HAL_RCC_OscConfig+0x144>
 8001efa:	697b      	ldr	r3, [r7, #20]
 8001efc:	2b02      	cmp	r3, #2
 8001efe:	d002      	beq.n	8001f06 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8001f00:	69bb      	ldr	r3, [r7, #24]
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d135      	bne.n	8001f72 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001f06:	4b78      	ldr	r3, [pc, #480]	@ (80020e8 <HAL_RCC_OscConfig+0x32c>)
 8001f08:	681a      	ldr	r2, [r3, #0]
 8001f0a:	2380      	movs	r3, #128	@ 0x80
 8001f0c:	00db      	lsls	r3, r3, #3
 8001f0e:	4013      	ands	r3, r2
 8001f10:	d005      	beq.n	8001f1e <HAL_RCC_OscConfig+0x162>
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	68db      	ldr	r3, [r3, #12]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d101      	bne.n	8001f1e <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	e256      	b.n	80023cc <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f1e:	4b72      	ldr	r3, [pc, #456]	@ (80020e8 <HAL_RCC_OscConfig+0x32c>)
 8001f20:	685b      	ldr	r3, [r3, #4]
 8001f22:	4a74      	ldr	r2, [pc, #464]	@ (80020f4 <HAL_RCC_OscConfig+0x338>)
 8001f24:	4013      	ands	r3, r2
 8001f26:	0019      	movs	r1, r3
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	695b      	ldr	r3, [r3, #20]
 8001f2c:	021a      	lsls	r2, r3, #8
 8001f2e:	4b6e      	ldr	r3, [pc, #440]	@ (80020e8 <HAL_RCC_OscConfig+0x32c>)
 8001f30:	430a      	orrs	r2, r1
 8001f32:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001f34:	69bb      	ldr	r3, [r7, #24]
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d112      	bne.n	8001f60 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001f3a:	4b6b      	ldr	r3, [pc, #428]	@ (80020e8 <HAL_RCC_OscConfig+0x32c>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	4a6e      	ldr	r2, [pc, #440]	@ (80020f8 <HAL_RCC_OscConfig+0x33c>)
 8001f40:	4013      	ands	r3, r2
 8001f42:	0019      	movs	r1, r3
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	691a      	ldr	r2, [r3, #16]
 8001f48:	4b67      	ldr	r3, [pc, #412]	@ (80020e8 <HAL_RCC_OscConfig+0x32c>)
 8001f4a:	430a      	orrs	r2, r1
 8001f4c:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8001f4e:	4b66      	ldr	r3, [pc, #408]	@ (80020e8 <HAL_RCC_OscConfig+0x32c>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	0adb      	lsrs	r3, r3, #11
 8001f54:	2207      	movs	r2, #7
 8001f56:	4013      	ands	r3, r2
 8001f58:	4a68      	ldr	r2, [pc, #416]	@ (80020fc <HAL_RCC_OscConfig+0x340>)
 8001f5a:	40da      	lsrs	r2, r3
 8001f5c:	4b68      	ldr	r3, [pc, #416]	@ (8002100 <HAL_RCC_OscConfig+0x344>)
 8001f5e:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001f60:	4b68      	ldr	r3, [pc, #416]	@ (8002104 <HAL_RCC_OscConfig+0x348>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	0018      	movs	r0, r3
 8001f66:	f7ff f8e7 	bl	8001138 <HAL_InitTick>
 8001f6a:	1e03      	subs	r3, r0, #0
 8001f6c:	d051      	beq.n	8002012 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8001f6e:	2301      	movs	r3, #1
 8001f70:	e22c      	b.n	80023cc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	68db      	ldr	r3, [r3, #12]
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d030      	beq.n	8001fdc <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001f7a:	4b5b      	ldr	r3, [pc, #364]	@ (80020e8 <HAL_RCC_OscConfig+0x32c>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	4a5e      	ldr	r2, [pc, #376]	@ (80020f8 <HAL_RCC_OscConfig+0x33c>)
 8001f80:	4013      	ands	r3, r2
 8001f82:	0019      	movs	r1, r3
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	691a      	ldr	r2, [r3, #16]
 8001f88:	4b57      	ldr	r3, [pc, #348]	@ (80020e8 <HAL_RCC_OscConfig+0x32c>)
 8001f8a:	430a      	orrs	r2, r1
 8001f8c:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8001f8e:	4b56      	ldr	r3, [pc, #344]	@ (80020e8 <HAL_RCC_OscConfig+0x32c>)
 8001f90:	681a      	ldr	r2, [r3, #0]
 8001f92:	4b55      	ldr	r3, [pc, #340]	@ (80020e8 <HAL_RCC_OscConfig+0x32c>)
 8001f94:	2180      	movs	r1, #128	@ 0x80
 8001f96:	0049      	lsls	r1, r1, #1
 8001f98:	430a      	orrs	r2, r1
 8001f9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f9c:	f7ff fa16 	bl	80013cc <HAL_GetTick>
 8001fa0:	0003      	movs	r3, r0
 8001fa2:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001fa4:	e008      	b.n	8001fb8 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001fa6:	f7ff fa11 	bl	80013cc <HAL_GetTick>
 8001faa:	0002      	movs	r2, r0
 8001fac:	693b      	ldr	r3, [r7, #16]
 8001fae:	1ad3      	subs	r3, r2, r3
 8001fb0:	2b02      	cmp	r3, #2
 8001fb2:	d901      	bls.n	8001fb8 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8001fb4:	2303      	movs	r3, #3
 8001fb6:	e209      	b.n	80023cc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001fb8:	4b4b      	ldr	r3, [pc, #300]	@ (80020e8 <HAL_RCC_OscConfig+0x32c>)
 8001fba:	681a      	ldr	r2, [r3, #0]
 8001fbc:	2380      	movs	r3, #128	@ 0x80
 8001fbe:	00db      	lsls	r3, r3, #3
 8001fc0:	4013      	ands	r3, r2
 8001fc2:	d0f0      	beq.n	8001fa6 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fc4:	4b48      	ldr	r3, [pc, #288]	@ (80020e8 <HAL_RCC_OscConfig+0x32c>)
 8001fc6:	685b      	ldr	r3, [r3, #4]
 8001fc8:	4a4a      	ldr	r2, [pc, #296]	@ (80020f4 <HAL_RCC_OscConfig+0x338>)
 8001fca:	4013      	ands	r3, r2
 8001fcc:	0019      	movs	r1, r3
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	695b      	ldr	r3, [r3, #20]
 8001fd2:	021a      	lsls	r2, r3, #8
 8001fd4:	4b44      	ldr	r3, [pc, #272]	@ (80020e8 <HAL_RCC_OscConfig+0x32c>)
 8001fd6:	430a      	orrs	r2, r1
 8001fd8:	605a      	str	r2, [r3, #4]
 8001fda:	e01b      	b.n	8002014 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8001fdc:	4b42      	ldr	r3, [pc, #264]	@ (80020e8 <HAL_RCC_OscConfig+0x32c>)
 8001fde:	681a      	ldr	r2, [r3, #0]
 8001fe0:	4b41      	ldr	r3, [pc, #260]	@ (80020e8 <HAL_RCC_OscConfig+0x32c>)
 8001fe2:	4949      	ldr	r1, [pc, #292]	@ (8002108 <HAL_RCC_OscConfig+0x34c>)
 8001fe4:	400a      	ands	r2, r1
 8001fe6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fe8:	f7ff f9f0 	bl	80013cc <HAL_GetTick>
 8001fec:	0003      	movs	r3, r0
 8001fee:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001ff0:	e008      	b.n	8002004 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ff2:	f7ff f9eb 	bl	80013cc <HAL_GetTick>
 8001ff6:	0002      	movs	r2, r0
 8001ff8:	693b      	ldr	r3, [r7, #16]
 8001ffa:	1ad3      	subs	r3, r2, r3
 8001ffc:	2b02      	cmp	r3, #2
 8001ffe:	d901      	bls.n	8002004 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8002000:	2303      	movs	r3, #3
 8002002:	e1e3      	b.n	80023cc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002004:	4b38      	ldr	r3, [pc, #224]	@ (80020e8 <HAL_RCC_OscConfig+0x32c>)
 8002006:	681a      	ldr	r2, [r3, #0]
 8002008:	2380      	movs	r3, #128	@ 0x80
 800200a:	00db      	lsls	r3, r3, #3
 800200c:	4013      	ands	r3, r2
 800200e:	d1f0      	bne.n	8001ff2 <HAL_RCC_OscConfig+0x236>
 8002010:	e000      	b.n	8002014 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002012:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	2208      	movs	r2, #8
 800201a:	4013      	ands	r3, r2
 800201c:	d047      	beq.n	80020ae <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800201e:	4b32      	ldr	r3, [pc, #200]	@ (80020e8 <HAL_RCC_OscConfig+0x32c>)
 8002020:	689b      	ldr	r3, [r3, #8]
 8002022:	2238      	movs	r2, #56	@ 0x38
 8002024:	4013      	ands	r3, r2
 8002026:	2b18      	cmp	r3, #24
 8002028:	d10a      	bne.n	8002040 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 800202a:	4b2f      	ldr	r3, [pc, #188]	@ (80020e8 <HAL_RCC_OscConfig+0x32c>)
 800202c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800202e:	2202      	movs	r2, #2
 8002030:	4013      	ands	r3, r2
 8002032:	d03c      	beq.n	80020ae <HAL_RCC_OscConfig+0x2f2>
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	699b      	ldr	r3, [r3, #24]
 8002038:	2b00      	cmp	r3, #0
 800203a:	d138      	bne.n	80020ae <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 800203c:	2301      	movs	r3, #1
 800203e:	e1c5      	b.n	80023cc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	699b      	ldr	r3, [r3, #24]
 8002044:	2b00      	cmp	r3, #0
 8002046:	d019      	beq.n	800207c <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8002048:	4b27      	ldr	r3, [pc, #156]	@ (80020e8 <HAL_RCC_OscConfig+0x32c>)
 800204a:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800204c:	4b26      	ldr	r3, [pc, #152]	@ (80020e8 <HAL_RCC_OscConfig+0x32c>)
 800204e:	2101      	movs	r1, #1
 8002050:	430a      	orrs	r2, r1
 8002052:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002054:	f7ff f9ba 	bl	80013cc <HAL_GetTick>
 8002058:	0003      	movs	r3, r0
 800205a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800205c:	e008      	b.n	8002070 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800205e:	f7ff f9b5 	bl	80013cc <HAL_GetTick>
 8002062:	0002      	movs	r2, r0
 8002064:	693b      	ldr	r3, [r7, #16]
 8002066:	1ad3      	subs	r3, r2, r3
 8002068:	2b02      	cmp	r3, #2
 800206a:	d901      	bls.n	8002070 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 800206c:	2303      	movs	r3, #3
 800206e:	e1ad      	b.n	80023cc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002070:	4b1d      	ldr	r3, [pc, #116]	@ (80020e8 <HAL_RCC_OscConfig+0x32c>)
 8002072:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002074:	2202      	movs	r2, #2
 8002076:	4013      	ands	r3, r2
 8002078:	d0f1      	beq.n	800205e <HAL_RCC_OscConfig+0x2a2>
 800207a:	e018      	b.n	80020ae <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 800207c:	4b1a      	ldr	r3, [pc, #104]	@ (80020e8 <HAL_RCC_OscConfig+0x32c>)
 800207e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002080:	4b19      	ldr	r3, [pc, #100]	@ (80020e8 <HAL_RCC_OscConfig+0x32c>)
 8002082:	2101      	movs	r1, #1
 8002084:	438a      	bics	r2, r1
 8002086:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002088:	f7ff f9a0 	bl	80013cc <HAL_GetTick>
 800208c:	0003      	movs	r3, r0
 800208e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002090:	e008      	b.n	80020a4 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002092:	f7ff f99b 	bl	80013cc <HAL_GetTick>
 8002096:	0002      	movs	r2, r0
 8002098:	693b      	ldr	r3, [r7, #16]
 800209a:	1ad3      	subs	r3, r2, r3
 800209c:	2b02      	cmp	r3, #2
 800209e:	d901      	bls.n	80020a4 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 80020a0:	2303      	movs	r3, #3
 80020a2:	e193      	b.n	80023cc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80020a4:	4b10      	ldr	r3, [pc, #64]	@ (80020e8 <HAL_RCC_OscConfig+0x32c>)
 80020a6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80020a8:	2202      	movs	r2, #2
 80020aa:	4013      	ands	r3, r2
 80020ac:	d1f1      	bne.n	8002092 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	2204      	movs	r2, #4
 80020b4:	4013      	ands	r3, r2
 80020b6:	d100      	bne.n	80020ba <HAL_RCC_OscConfig+0x2fe>
 80020b8:	e0c6      	b.n	8002248 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020ba:	231f      	movs	r3, #31
 80020bc:	18fb      	adds	r3, r7, r3
 80020be:	2200      	movs	r2, #0
 80020c0:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80020c2:	4b09      	ldr	r3, [pc, #36]	@ (80020e8 <HAL_RCC_OscConfig+0x32c>)
 80020c4:	689b      	ldr	r3, [r3, #8]
 80020c6:	2238      	movs	r2, #56	@ 0x38
 80020c8:	4013      	ands	r3, r2
 80020ca:	2b20      	cmp	r3, #32
 80020cc:	d11e      	bne.n	800210c <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80020ce:	4b06      	ldr	r3, [pc, #24]	@ (80020e8 <HAL_RCC_OscConfig+0x32c>)
 80020d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020d2:	2202      	movs	r2, #2
 80020d4:	4013      	ands	r3, r2
 80020d6:	d100      	bne.n	80020da <HAL_RCC_OscConfig+0x31e>
 80020d8:	e0b6      	b.n	8002248 <HAL_RCC_OscConfig+0x48c>
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	689b      	ldr	r3, [r3, #8]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d000      	beq.n	80020e4 <HAL_RCC_OscConfig+0x328>
 80020e2:	e0b1      	b.n	8002248 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 80020e4:	2301      	movs	r3, #1
 80020e6:	e171      	b.n	80023cc <HAL_RCC_OscConfig+0x610>
 80020e8:	40021000 	.word	0x40021000
 80020ec:	fffeffff 	.word	0xfffeffff
 80020f0:	fffbffff 	.word	0xfffbffff
 80020f4:	ffff80ff 	.word	0xffff80ff
 80020f8:	ffffc7ff 	.word	0xffffc7ff
 80020fc:	00f42400 	.word	0x00f42400
 8002100:	200001a8 	.word	0x200001a8
 8002104:	200001ac 	.word	0x200001ac
 8002108:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800210c:	4bb1      	ldr	r3, [pc, #708]	@ (80023d4 <HAL_RCC_OscConfig+0x618>)
 800210e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002110:	2380      	movs	r3, #128	@ 0x80
 8002112:	055b      	lsls	r3, r3, #21
 8002114:	4013      	ands	r3, r2
 8002116:	d101      	bne.n	800211c <HAL_RCC_OscConfig+0x360>
 8002118:	2301      	movs	r3, #1
 800211a:	e000      	b.n	800211e <HAL_RCC_OscConfig+0x362>
 800211c:	2300      	movs	r3, #0
 800211e:	2b00      	cmp	r3, #0
 8002120:	d011      	beq.n	8002146 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8002122:	4bac      	ldr	r3, [pc, #688]	@ (80023d4 <HAL_RCC_OscConfig+0x618>)
 8002124:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002126:	4bab      	ldr	r3, [pc, #684]	@ (80023d4 <HAL_RCC_OscConfig+0x618>)
 8002128:	2180      	movs	r1, #128	@ 0x80
 800212a:	0549      	lsls	r1, r1, #21
 800212c:	430a      	orrs	r2, r1
 800212e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002130:	4ba8      	ldr	r3, [pc, #672]	@ (80023d4 <HAL_RCC_OscConfig+0x618>)
 8002132:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002134:	2380      	movs	r3, #128	@ 0x80
 8002136:	055b      	lsls	r3, r3, #21
 8002138:	4013      	ands	r3, r2
 800213a:	60fb      	str	r3, [r7, #12]
 800213c:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 800213e:	231f      	movs	r3, #31
 8002140:	18fb      	adds	r3, r7, r3
 8002142:	2201      	movs	r2, #1
 8002144:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002146:	4ba4      	ldr	r3, [pc, #656]	@ (80023d8 <HAL_RCC_OscConfig+0x61c>)
 8002148:	681a      	ldr	r2, [r3, #0]
 800214a:	2380      	movs	r3, #128	@ 0x80
 800214c:	005b      	lsls	r3, r3, #1
 800214e:	4013      	ands	r3, r2
 8002150:	d11a      	bne.n	8002188 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002152:	4ba1      	ldr	r3, [pc, #644]	@ (80023d8 <HAL_RCC_OscConfig+0x61c>)
 8002154:	681a      	ldr	r2, [r3, #0]
 8002156:	4ba0      	ldr	r3, [pc, #640]	@ (80023d8 <HAL_RCC_OscConfig+0x61c>)
 8002158:	2180      	movs	r1, #128	@ 0x80
 800215a:	0049      	lsls	r1, r1, #1
 800215c:	430a      	orrs	r2, r1
 800215e:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8002160:	f7ff f934 	bl	80013cc <HAL_GetTick>
 8002164:	0003      	movs	r3, r0
 8002166:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002168:	e008      	b.n	800217c <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800216a:	f7ff f92f 	bl	80013cc <HAL_GetTick>
 800216e:	0002      	movs	r2, r0
 8002170:	693b      	ldr	r3, [r7, #16]
 8002172:	1ad3      	subs	r3, r2, r3
 8002174:	2b02      	cmp	r3, #2
 8002176:	d901      	bls.n	800217c <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8002178:	2303      	movs	r3, #3
 800217a:	e127      	b.n	80023cc <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800217c:	4b96      	ldr	r3, [pc, #600]	@ (80023d8 <HAL_RCC_OscConfig+0x61c>)
 800217e:	681a      	ldr	r2, [r3, #0]
 8002180:	2380      	movs	r3, #128	@ 0x80
 8002182:	005b      	lsls	r3, r3, #1
 8002184:	4013      	ands	r3, r2
 8002186:	d0f0      	beq.n	800216a <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	689b      	ldr	r3, [r3, #8]
 800218c:	2b01      	cmp	r3, #1
 800218e:	d106      	bne.n	800219e <HAL_RCC_OscConfig+0x3e2>
 8002190:	4b90      	ldr	r3, [pc, #576]	@ (80023d4 <HAL_RCC_OscConfig+0x618>)
 8002192:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002194:	4b8f      	ldr	r3, [pc, #572]	@ (80023d4 <HAL_RCC_OscConfig+0x618>)
 8002196:	2101      	movs	r1, #1
 8002198:	430a      	orrs	r2, r1
 800219a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800219c:	e01c      	b.n	80021d8 <HAL_RCC_OscConfig+0x41c>
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	689b      	ldr	r3, [r3, #8]
 80021a2:	2b05      	cmp	r3, #5
 80021a4:	d10c      	bne.n	80021c0 <HAL_RCC_OscConfig+0x404>
 80021a6:	4b8b      	ldr	r3, [pc, #556]	@ (80023d4 <HAL_RCC_OscConfig+0x618>)
 80021a8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80021aa:	4b8a      	ldr	r3, [pc, #552]	@ (80023d4 <HAL_RCC_OscConfig+0x618>)
 80021ac:	2104      	movs	r1, #4
 80021ae:	430a      	orrs	r2, r1
 80021b0:	65da      	str	r2, [r3, #92]	@ 0x5c
 80021b2:	4b88      	ldr	r3, [pc, #544]	@ (80023d4 <HAL_RCC_OscConfig+0x618>)
 80021b4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80021b6:	4b87      	ldr	r3, [pc, #540]	@ (80023d4 <HAL_RCC_OscConfig+0x618>)
 80021b8:	2101      	movs	r1, #1
 80021ba:	430a      	orrs	r2, r1
 80021bc:	65da      	str	r2, [r3, #92]	@ 0x5c
 80021be:	e00b      	b.n	80021d8 <HAL_RCC_OscConfig+0x41c>
 80021c0:	4b84      	ldr	r3, [pc, #528]	@ (80023d4 <HAL_RCC_OscConfig+0x618>)
 80021c2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80021c4:	4b83      	ldr	r3, [pc, #524]	@ (80023d4 <HAL_RCC_OscConfig+0x618>)
 80021c6:	2101      	movs	r1, #1
 80021c8:	438a      	bics	r2, r1
 80021ca:	65da      	str	r2, [r3, #92]	@ 0x5c
 80021cc:	4b81      	ldr	r3, [pc, #516]	@ (80023d4 <HAL_RCC_OscConfig+0x618>)
 80021ce:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80021d0:	4b80      	ldr	r3, [pc, #512]	@ (80023d4 <HAL_RCC_OscConfig+0x618>)
 80021d2:	2104      	movs	r1, #4
 80021d4:	438a      	bics	r2, r1
 80021d6:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	689b      	ldr	r3, [r3, #8]
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d014      	beq.n	800220a <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021e0:	f7ff f8f4 	bl	80013cc <HAL_GetTick>
 80021e4:	0003      	movs	r3, r0
 80021e6:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80021e8:	e009      	b.n	80021fe <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021ea:	f7ff f8ef 	bl	80013cc <HAL_GetTick>
 80021ee:	0002      	movs	r2, r0
 80021f0:	693b      	ldr	r3, [r7, #16]
 80021f2:	1ad3      	subs	r3, r2, r3
 80021f4:	4a79      	ldr	r2, [pc, #484]	@ (80023dc <HAL_RCC_OscConfig+0x620>)
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d901      	bls.n	80021fe <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 80021fa:	2303      	movs	r3, #3
 80021fc:	e0e6      	b.n	80023cc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80021fe:	4b75      	ldr	r3, [pc, #468]	@ (80023d4 <HAL_RCC_OscConfig+0x618>)
 8002200:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002202:	2202      	movs	r2, #2
 8002204:	4013      	ands	r3, r2
 8002206:	d0f0      	beq.n	80021ea <HAL_RCC_OscConfig+0x42e>
 8002208:	e013      	b.n	8002232 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800220a:	f7ff f8df 	bl	80013cc <HAL_GetTick>
 800220e:	0003      	movs	r3, r0
 8002210:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002212:	e009      	b.n	8002228 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002214:	f7ff f8da 	bl	80013cc <HAL_GetTick>
 8002218:	0002      	movs	r2, r0
 800221a:	693b      	ldr	r3, [r7, #16]
 800221c:	1ad3      	subs	r3, r2, r3
 800221e:	4a6f      	ldr	r2, [pc, #444]	@ (80023dc <HAL_RCC_OscConfig+0x620>)
 8002220:	4293      	cmp	r3, r2
 8002222:	d901      	bls.n	8002228 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8002224:	2303      	movs	r3, #3
 8002226:	e0d1      	b.n	80023cc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002228:	4b6a      	ldr	r3, [pc, #424]	@ (80023d4 <HAL_RCC_OscConfig+0x618>)
 800222a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800222c:	2202      	movs	r2, #2
 800222e:	4013      	ands	r3, r2
 8002230:	d1f0      	bne.n	8002214 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8002232:	231f      	movs	r3, #31
 8002234:	18fb      	adds	r3, r7, r3
 8002236:	781b      	ldrb	r3, [r3, #0]
 8002238:	2b01      	cmp	r3, #1
 800223a:	d105      	bne.n	8002248 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800223c:	4b65      	ldr	r3, [pc, #404]	@ (80023d4 <HAL_RCC_OscConfig+0x618>)
 800223e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002240:	4b64      	ldr	r3, [pc, #400]	@ (80023d4 <HAL_RCC_OscConfig+0x618>)
 8002242:	4967      	ldr	r1, [pc, #412]	@ (80023e0 <HAL_RCC_OscConfig+0x624>)
 8002244:	400a      	ands	r2, r1
 8002246:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	69db      	ldr	r3, [r3, #28]
 800224c:	2b00      	cmp	r3, #0
 800224e:	d100      	bne.n	8002252 <HAL_RCC_OscConfig+0x496>
 8002250:	e0bb      	b.n	80023ca <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002252:	4b60      	ldr	r3, [pc, #384]	@ (80023d4 <HAL_RCC_OscConfig+0x618>)
 8002254:	689b      	ldr	r3, [r3, #8]
 8002256:	2238      	movs	r2, #56	@ 0x38
 8002258:	4013      	ands	r3, r2
 800225a:	2b10      	cmp	r3, #16
 800225c:	d100      	bne.n	8002260 <HAL_RCC_OscConfig+0x4a4>
 800225e:	e07b      	b.n	8002358 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	69db      	ldr	r3, [r3, #28]
 8002264:	2b02      	cmp	r3, #2
 8002266:	d156      	bne.n	8002316 <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002268:	4b5a      	ldr	r3, [pc, #360]	@ (80023d4 <HAL_RCC_OscConfig+0x618>)
 800226a:	681a      	ldr	r2, [r3, #0]
 800226c:	4b59      	ldr	r3, [pc, #356]	@ (80023d4 <HAL_RCC_OscConfig+0x618>)
 800226e:	495d      	ldr	r1, [pc, #372]	@ (80023e4 <HAL_RCC_OscConfig+0x628>)
 8002270:	400a      	ands	r2, r1
 8002272:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002274:	f7ff f8aa 	bl	80013cc <HAL_GetTick>
 8002278:	0003      	movs	r3, r0
 800227a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800227c:	e008      	b.n	8002290 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800227e:	f7ff f8a5 	bl	80013cc <HAL_GetTick>
 8002282:	0002      	movs	r2, r0
 8002284:	693b      	ldr	r3, [r7, #16]
 8002286:	1ad3      	subs	r3, r2, r3
 8002288:	2b02      	cmp	r3, #2
 800228a:	d901      	bls.n	8002290 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 800228c:	2303      	movs	r3, #3
 800228e:	e09d      	b.n	80023cc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002290:	4b50      	ldr	r3, [pc, #320]	@ (80023d4 <HAL_RCC_OscConfig+0x618>)
 8002292:	681a      	ldr	r2, [r3, #0]
 8002294:	2380      	movs	r3, #128	@ 0x80
 8002296:	049b      	lsls	r3, r3, #18
 8002298:	4013      	ands	r3, r2
 800229a:	d1f0      	bne.n	800227e <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800229c:	4b4d      	ldr	r3, [pc, #308]	@ (80023d4 <HAL_RCC_OscConfig+0x618>)
 800229e:	68db      	ldr	r3, [r3, #12]
 80022a0:	4a51      	ldr	r2, [pc, #324]	@ (80023e8 <HAL_RCC_OscConfig+0x62c>)
 80022a2:	4013      	ands	r3, r2
 80022a4:	0019      	movs	r1, r3
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6a1a      	ldr	r2, [r3, #32]
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022ae:	431a      	orrs	r2, r3
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022b4:	021b      	lsls	r3, r3, #8
 80022b6:	431a      	orrs	r2, r3
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022bc:	431a      	orrs	r2, r3
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022c2:	431a      	orrs	r2, r3
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80022c8:	431a      	orrs	r2, r3
 80022ca:	4b42      	ldr	r3, [pc, #264]	@ (80023d4 <HAL_RCC_OscConfig+0x618>)
 80022cc:	430a      	orrs	r2, r1
 80022ce:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80022d0:	4b40      	ldr	r3, [pc, #256]	@ (80023d4 <HAL_RCC_OscConfig+0x618>)
 80022d2:	681a      	ldr	r2, [r3, #0]
 80022d4:	4b3f      	ldr	r3, [pc, #252]	@ (80023d4 <HAL_RCC_OscConfig+0x618>)
 80022d6:	2180      	movs	r1, #128	@ 0x80
 80022d8:	0449      	lsls	r1, r1, #17
 80022da:	430a      	orrs	r2, r1
 80022dc:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 80022de:	4b3d      	ldr	r3, [pc, #244]	@ (80023d4 <HAL_RCC_OscConfig+0x618>)
 80022e0:	68da      	ldr	r2, [r3, #12]
 80022e2:	4b3c      	ldr	r3, [pc, #240]	@ (80023d4 <HAL_RCC_OscConfig+0x618>)
 80022e4:	2180      	movs	r1, #128	@ 0x80
 80022e6:	0549      	lsls	r1, r1, #21
 80022e8:	430a      	orrs	r2, r1
 80022ea:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022ec:	f7ff f86e 	bl	80013cc <HAL_GetTick>
 80022f0:	0003      	movs	r3, r0
 80022f2:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022f4:	e008      	b.n	8002308 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022f6:	f7ff f869 	bl	80013cc <HAL_GetTick>
 80022fa:	0002      	movs	r2, r0
 80022fc:	693b      	ldr	r3, [r7, #16]
 80022fe:	1ad3      	subs	r3, r2, r3
 8002300:	2b02      	cmp	r3, #2
 8002302:	d901      	bls.n	8002308 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8002304:	2303      	movs	r3, #3
 8002306:	e061      	b.n	80023cc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002308:	4b32      	ldr	r3, [pc, #200]	@ (80023d4 <HAL_RCC_OscConfig+0x618>)
 800230a:	681a      	ldr	r2, [r3, #0]
 800230c:	2380      	movs	r3, #128	@ 0x80
 800230e:	049b      	lsls	r3, r3, #18
 8002310:	4013      	ands	r3, r2
 8002312:	d0f0      	beq.n	80022f6 <HAL_RCC_OscConfig+0x53a>
 8002314:	e059      	b.n	80023ca <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002316:	4b2f      	ldr	r3, [pc, #188]	@ (80023d4 <HAL_RCC_OscConfig+0x618>)
 8002318:	681a      	ldr	r2, [r3, #0]
 800231a:	4b2e      	ldr	r3, [pc, #184]	@ (80023d4 <HAL_RCC_OscConfig+0x618>)
 800231c:	4931      	ldr	r1, [pc, #196]	@ (80023e4 <HAL_RCC_OscConfig+0x628>)
 800231e:	400a      	ands	r2, r1
 8002320:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002322:	f7ff f853 	bl	80013cc <HAL_GetTick>
 8002326:	0003      	movs	r3, r0
 8002328:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800232a:	e008      	b.n	800233e <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800232c:	f7ff f84e 	bl	80013cc <HAL_GetTick>
 8002330:	0002      	movs	r2, r0
 8002332:	693b      	ldr	r3, [r7, #16]
 8002334:	1ad3      	subs	r3, r2, r3
 8002336:	2b02      	cmp	r3, #2
 8002338:	d901      	bls.n	800233e <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 800233a:	2303      	movs	r3, #3
 800233c:	e046      	b.n	80023cc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800233e:	4b25      	ldr	r3, [pc, #148]	@ (80023d4 <HAL_RCC_OscConfig+0x618>)
 8002340:	681a      	ldr	r2, [r3, #0]
 8002342:	2380      	movs	r3, #128	@ 0x80
 8002344:	049b      	lsls	r3, r3, #18
 8002346:	4013      	ands	r3, r2
 8002348:	d1f0      	bne.n	800232c <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 800234a:	4b22      	ldr	r3, [pc, #136]	@ (80023d4 <HAL_RCC_OscConfig+0x618>)
 800234c:	68da      	ldr	r2, [r3, #12]
 800234e:	4b21      	ldr	r3, [pc, #132]	@ (80023d4 <HAL_RCC_OscConfig+0x618>)
 8002350:	4926      	ldr	r1, [pc, #152]	@ (80023ec <HAL_RCC_OscConfig+0x630>)
 8002352:	400a      	ands	r2, r1
 8002354:	60da      	str	r2, [r3, #12]
 8002356:	e038      	b.n	80023ca <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	69db      	ldr	r3, [r3, #28]
 800235c:	2b01      	cmp	r3, #1
 800235e:	d101      	bne.n	8002364 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8002360:	2301      	movs	r3, #1
 8002362:	e033      	b.n	80023cc <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8002364:	4b1b      	ldr	r3, [pc, #108]	@ (80023d4 <HAL_RCC_OscConfig+0x618>)
 8002366:	68db      	ldr	r3, [r3, #12]
 8002368:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800236a:	697b      	ldr	r3, [r7, #20]
 800236c:	2203      	movs	r2, #3
 800236e:	401a      	ands	r2, r3
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6a1b      	ldr	r3, [r3, #32]
 8002374:	429a      	cmp	r2, r3
 8002376:	d126      	bne.n	80023c6 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002378:	697b      	ldr	r3, [r7, #20]
 800237a:	2270      	movs	r2, #112	@ 0x70
 800237c:	401a      	ands	r2, r3
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002382:	429a      	cmp	r2, r3
 8002384:	d11f      	bne.n	80023c6 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002386:	697a      	ldr	r2, [r7, #20]
 8002388:	23fe      	movs	r3, #254	@ 0xfe
 800238a:	01db      	lsls	r3, r3, #7
 800238c:	401a      	ands	r2, r3
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002392:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002394:	429a      	cmp	r2, r3
 8002396:	d116      	bne.n	80023c6 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002398:	697a      	ldr	r2, [r7, #20]
 800239a:	23f8      	movs	r3, #248	@ 0xf8
 800239c:	039b      	lsls	r3, r3, #14
 800239e:	401a      	ands	r2, r3
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80023a4:	429a      	cmp	r2, r3
 80023a6:	d10e      	bne.n	80023c6 <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80023a8:	697a      	ldr	r2, [r7, #20]
 80023aa:	23e0      	movs	r3, #224	@ 0xe0
 80023ac:	051b      	lsls	r3, r3, #20
 80023ae:	401a      	ands	r2, r3
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80023b4:	429a      	cmp	r2, r3
 80023b6:	d106      	bne.n	80023c6 <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80023b8:	697b      	ldr	r3, [r7, #20]
 80023ba:	0f5b      	lsrs	r3, r3, #29
 80023bc:	075a      	lsls	r2, r3, #29
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80023c2:	429a      	cmp	r2, r3
 80023c4:	d001      	beq.n	80023ca <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 80023c6:	2301      	movs	r3, #1
 80023c8:	e000      	b.n	80023cc <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 80023ca:	2300      	movs	r3, #0
}
 80023cc:	0018      	movs	r0, r3
 80023ce:	46bd      	mov	sp, r7
 80023d0:	b008      	add	sp, #32
 80023d2:	bd80      	pop	{r7, pc}
 80023d4:	40021000 	.word	0x40021000
 80023d8:	40007000 	.word	0x40007000
 80023dc:	00001388 	.word	0x00001388
 80023e0:	efffffff 	.word	0xefffffff
 80023e4:	feffffff 	.word	0xfeffffff
 80023e8:	11c1808c 	.word	0x11c1808c
 80023ec:	eefefffc 	.word	0xeefefffc

080023f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b084      	sub	sp, #16
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
 80023f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d101      	bne.n	8002404 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002400:	2301      	movs	r3, #1
 8002402:	e0e9      	b.n	80025d8 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002404:	4b76      	ldr	r3, [pc, #472]	@ (80025e0 <HAL_RCC_ClockConfig+0x1f0>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	2207      	movs	r2, #7
 800240a:	4013      	ands	r3, r2
 800240c:	683a      	ldr	r2, [r7, #0]
 800240e:	429a      	cmp	r2, r3
 8002410:	d91e      	bls.n	8002450 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002412:	4b73      	ldr	r3, [pc, #460]	@ (80025e0 <HAL_RCC_ClockConfig+0x1f0>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	2207      	movs	r2, #7
 8002418:	4393      	bics	r3, r2
 800241a:	0019      	movs	r1, r3
 800241c:	4b70      	ldr	r3, [pc, #448]	@ (80025e0 <HAL_RCC_ClockConfig+0x1f0>)
 800241e:	683a      	ldr	r2, [r7, #0]
 8002420:	430a      	orrs	r2, r1
 8002422:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002424:	f7fe ffd2 	bl	80013cc <HAL_GetTick>
 8002428:	0003      	movs	r3, r0
 800242a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800242c:	e009      	b.n	8002442 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800242e:	f7fe ffcd 	bl	80013cc <HAL_GetTick>
 8002432:	0002      	movs	r2, r0
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	1ad3      	subs	r3, r2, r3
 8002438:	4a6a      	ldr	r2, [pc, #424]	@ (80025e4 <HAL_RCC_ClockConfig+0x1f4>)
 800243a:	4293      	cmp	r3, r2
 800243c:	d901      	bls.n	8002442 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800243e:	2303      	movs	r3, #3
 8002440:	e0ca      	b.n	80025d8 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002442:	4b67      	ldr	r3, [pc, #412]	@ (80025e0 <HAL_RCC_ClockConfig+0x1f0>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	2207      	movs	r2, #7
 8002448:	4013      	ands	r3, r2
 800244a:	683a      	ldr	r2, [r7, #0]
 800244c:	429a      	cmp	r2, r3
 800244e:	d1ee      	bne.n	800242e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	2202      	movs	r2, #2
 8002456:	4013      	ands	r3, r2
 8002458:	d015      	beq.n	8002486 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	2204      	movs	r2, #4
 8002460:	4013      	ands	r3, r2
 8002462:	d006      	beq.n	8002472 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002464:	4b60      	ldr	r3, [pc, #384]	@ (80025e8 <HAL_RCC_ClockConfig+0x1f8>)
 8002466:	689a      	ldr	r2, [r3, #8]
 8002468:	4b5f      	ldr	r3, [pc, #380]	@ (80025e8 <HAL_RCC_ClockConfig+0x1f8>)
 800246a:	21e0      	movs	r1, #224	@ 0xe0
 800246c:	01c9      	lsls	r1, r1, #7
 800246e:	430a      	orrs	r2, r1
 8002470:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002472:	4b5d      	ldr	r3, [pc, #372]	@ (80025e8 <HAL_RCC_ClockConfig+0x1f8>)
 8002474:	689b      	ldr	r3, [r3, #8]
 8002476:	4a5d      	ldr	r2, [pc, #372]	@ (80025ec <HAL_RCC_ClockConfig+0x1fc>)
 8002478:	4013      	ands	r3, r2
 800247a:	0019      	movs	r1, r3
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	689a      	ldr	r2, [r3, #8]
 8002480:	4b59      	ldr	r3, [pc, #356]	@ (80025e8 <HAL_RCC_ClockConfig+0x1f8>)
 8002482:	430a      	orrs	r2, r1
 8002484:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	2201      	movs	r2, #1
 800248c:	4013      	ands	r3, r2
 800248e:	d057      	beq.n	8002540 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	2b01      	cmp	r3, #1
 8002496:	d107      	bne.n	80024a8 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002498:	4b53      	ldr	r3, [pc, #332]	@ (80025e8 <HAL_RCC_ClockConfig+0x1f8>)
 800249a:	681a      	ldr	r2, [r3, #0]
 800249c:	2380      	movs	r3, #128	@ 0x80
 800249e:	029b      	lsls	r3, r3, #10
 80024a0:	4013      	ands	r3, r2
 80024a2:	d12b      	bne.n	80024fc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80024a4:	2301      	movs	r3, #1
 80024a6:	e097      	b.n	80025d8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	2b02      	cmp	r3, #2
 80024ae:	d107      	bne.n	80024c0 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80024b0:	4b4d      	ldr	r3, [pc, #308]	@ (80025e8 <HAL_RCC_ClockConfig+0x1f8>)
 80024b2:	681a      	ldr	r2, [r3, #0]
 80024b4:	2380      	movs	r3, #128	@ 0x80
 80024b6:	049b      	lsls	r3, r3, #18
 80024b8:	4013      	ands	r3, r2
 80024ba:	d11f      	bne.n	80024fc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80024bc:	2301      	movs	r3, #1
 80024be:	e08b      	b.n	80025d8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d107      	bne.n	80024d8 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80024c8:	4b47      	ldr	r3, [pc, #284]	@ (80025e8 <HAL_RCC_ClockConfig+0x1f8>)
 80024ca:	681a      	ldr	r2, [r3, #0]
 80024cc:	2380      	movs	r3, #128	@ 0x80
 80024ce:	00db      	lsls	r3, r3, #3
 80024d0:	4013      	ands	r3, r2
 80024d2:	d113      	bne.n	80024fc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80024d4:	2301      	movs	r3, #1
 80024d6:	e07f      	b.n	80025d8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	685b      	ldr	r3, [r3, #4]
 80024dc:	2b03      	cmp	r3, #3
 80024de:	d106      	bne.n	80024ee <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80024e0:	4b41      	ldr	r3, [pc, #260]	@ (80025e8 <HAL_RCC_ClockConfig+0x1f8>)
 80024e2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80024e4:	2202      	movs	r2, #2
 80024e6:	4013      	ands	r3, r2
 80024e8:	d108      	bne.n	80024fc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80024ea:	2301      	movs	r3, #1
 80024ec:	e074      	b.n	80025d8 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80024ee:	4b3e      	ldr	r3, [pc, #248]	@ (80025e8 <HAL_RCC_ClockConfig+0x1f8>)
 80024f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024f2:	2202      	movs	r2, #2
 80024f4:	4013      	ands	r3, r2
 80024f6:	d101      	bne.n	80024fc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80024f8:	2301      	movs	r3, #1
 80024fa:	e06d      	b.n	80025d8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80024fc:	4b3a      	ldr	r3, [pc, #232]	@ (80025e8 <HAL_RCC_ClockConfig+0x1f8>)
 80024fe:	689b      	ldr	r3, [r3, #8]
 8002500:	2207      	movs	r2, #7
 8002502:	4393      	bics	r3, r2
 8002504:	0019      	movs	r1, r3
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	685a      	ldr	r2, [r3, #4]
 800250a:	4b37      	ldr	r3, [pc, #220]	@ (80025e8 <HAL_RCC_ClockConfig+0x1f8>)
 800250c:	430a      	orrs	r2, r1
 800250e:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002510:	f7fe ff5c 	bl	80013cc <HAL_GetTick>
 8002514:	0003      	movs	r3, r0
 8002516:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002518:	e009      	b.n	800252e <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800251a:	f7fe ff57 	bl	80013cc <HAL_GetTick>
 800251e:	0002      	movs	r2, r0
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	1ad3      	subs	r3, r2, r3
 8002524:	4a2f      	ldr	r2, [pc, #188]	@ (80025e4 <HAL_RCC_ClockConfig+0x1f4>)
 8002526:	4293      	cmp	r3, r2
 8002528:	d901      	bls.n	800252e <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 800252a:	2303      	movs	r3, #3
 800252c:	e054      	b.n	80025d8 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800252e:	4b2e      	ldr	r3, [pc, #184]	@ (80025e8 <HAL_RCC_ClockConfig+0x1f8>)
 8002530:	689b      	ldr	r3, [r3, #8]
 8002532:	2238      	movs	r2, #56	@ 0x38
 8002534:	401a      	ands	r2, r3
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	685b      	ldr	r3, [r3, #4]
 800253a:	00db      	lsls	r3, r3, #3
 800253c:	429a      	cmp	r2, r3
 800253e:	d1ec      	bne.n	800251a <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002540:	4b27      	ldr	r3, [pc, #156]	@ (80025e0 <HAL_RCC_ClockConfig+0x1f0>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	2207      	movs	r2, #7
 8002546:	4013      	ands	r3, r2
 8002548:	683a      	ldr	r2, [r7, #0]
 800254a:	429a      	cmp	r2, r3
 800254c:	d21e      	bcs.n	800258c <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800254e:	4b24      	ldr	r3, [pc, #144]	@ (80025e0 <HAL_RCC_ClockConfig+0x1f0>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	2207      	movs	r2, #7
 8002554:	4393      	bics	r3, r2
 8002556:	0019      	movs	r1, r3
 8002558:	4b21      	ldr	r3, [pc, #132]	@ (80025e0 <HAL_RCC_ClockConfig+0x1f0>)
 800255a:	683a      	ldr	r2, [r7, #0]
 800255c:	430a      	orrs	r2, r1
 800255e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002560:	f7fe ff34 	bl	80013cc <HAL_GetTick>
 8002564:	0003      	movs	r3, r0
 8002566:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002568:	e009      	b.n	800257e <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800256a:	f7fe ff2f 	bl	80013cc <HAL_GetTick>
 800256e:	0002      	movs	r2, r0
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	1ad3      	subs	r3, r2, r3
 8002574:	4a1b      	ldr	r2, [pc, #108]	@ (80025e4 <HAL_RCC_ClockConfig+0x1f4>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d901      	bls.n	800257e <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 800257a:	2303      	movs	r3, #3
 800257c:	e02c      	b.n	80025d8 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800257e:	4b18      	ldr	r3, [pc, #96]	@ (80025e0 <HAL_RCC_ClockConfig+0x1f0>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	2207      	movs	r2, #7
 8002584:	4013      	ands	r3, r2
 8002586:	683a      	ldr	r2, [r7, #0]
 8002588:	429a      	cmp	r2, r3
 800258a:	d1ee      	bne.n	800256a <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	2204      	movs	r2, #4
 8002592:	4013      	ands	r3, r2
 8002594:	d009      	beq.n	80025aa <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002596:	4b14      	ldr	r3, [pc, #80]	@ (80025e8 <HAL_RCC_ClockConfig+0x1f8>)
 8002598:	689b      	ldr	r3, [r3, #8]
 800259a:	4a15      	ldr	r2, [pc, #84]	@ (80025f0 <HAL_RCC_ClockConfig+0x200>)
 800259c:	4013      	ands	r3, r2
 800259e:	0019      	movs	r1, r3
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	68da      	ldr	r2, [r3, #12]
 80025a4:	4b10      	ldr	r3, [pc, #64]	@ (80025e8 <HAL_RCC_ClockConfig+0x1f8>)
 80025a6:	430a      	orrs	r2, r1
 80025a8:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80025aa:	f000 f829 	bl	8002600 <HAL_RCC_GetSysClockFreq>
 80025ae:	0001      	movs	r1, r0
 80025b0:	4b0d      	ldr	r3, [pc, #52]	@ (80025e8 <HAL_RCC_ClockConfig+0x1f8>)
 80025b2:	689b      	ldr	r3, [r3, #8]
 80025b4:	0a1b      	lsrs	r3, r3, #8
 80025b6:	220f      	movs	r2, #15
 80025b8:	401a      	ands	r2, r3
 80025ba:	4b0e      	ldr	r3, [pc, #56]	@ (80025f4 <HAL_RCC_ClockConfig+0x204>)
 80025bc:	0092      	lsls	r2, r2, #2
 80025be:	58d3      	ldr	r3, [r2, r3]
 80025c0:	221f      	movs	r2, #31
 80025c2:	4013      	ands	r3, r2
 80025c4:	000a      	movs	r2, r1
 80025c6:	40da      	lsrs	r2, r3
 80025c8:	4b0b      	ldr	r3, [pc, #44]	@ (80025f8 <HAL_RCC_ClockConfig+0x208>)
 80025ca:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80025cc:	4b0b      	ldr	r3, [pc, #44]	@ (80025fc <HAL_RCC_ClockConfig+0x20c>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	0018      	movs	r0, r3
 80025d2:	f7fe fdb1 	bl	8001138 <HAL_InitTick>
 80025d6:	0003      	movs	r3, r0
}
 80025d8:	0018      	movs	r0, r3
 80025da:	46bd      	mov	sp, r7
 80025dc:	b004      	add	sp, #16
 80025de:	bd80      	pop	{r7, pc}
 80025e0:	40022000 	.word	0x40022000
 80025e4:	00001388 	.word	0x00001388
 80025e8:	40021000 	.word	0x40021000
 80025ec:	fffff0ff 	.word	0xfffff0ff
 80025f0:	ffff8fff 	.word	0xffff8fff
 80025f4:	08008024 	.word	0x08008024
 80025f8:	200001a8 	.word	0x200001a8
 80025fc:	200001ac 	.word	0x200001ac

08002600 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	b086      	sub	sp, #24
 8002604:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002606:	4b3c      	ldr	r3, [pc, #240]	@ (80026f8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002608:	689b      	ldr	r3, [r3, #8]
 800260a:	2238      	movs	r2, #56	@ 0x38
 800260c:	4013      	ands	r3, r2
 800260e:	d10f      	bne.n	8002630 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8002610:	4b39      	ldr	r3, [pc, #228]	@ (80026f8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	0adb      	lsrs	r3, r3, #11
 8002616:	2207      	movs	r2, #7
 8002618:	4013      	ands	r3, r2
 800261a:	2201      	movs	r2, #1
 800261c:	409a      	lsls	r2, r3
 800261e:	0013      	movs	r3, r2
 8002620:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8002622:	6839      	ldr	r1, [r7, #0]
 8002624:	4835      	ldr	r0, [pc, #212]	@ (80026fc <HAL_RCC_GetSysClockFreq+0xfc>)
 8002626:	f7fd fd81 	bl	800012c <__udivsi3>
 800262a:	0003      	movs	r3, r0
 800262c:	613b      	str	r3, [r7, #16]
 800262e:	e05d      	b.n	80026ec <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002630:	4b31      	ldr	r3, [pc, #196]	@ (80026f8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002632:	689b      	ldr	r3, [r3, #8]
 8002634:	2238      	movs	r2, #56	@ 0x38
 8002636:	4013      	ands	r3, r2
 8002638:	2b08      	cmp	r3, #8
 800263a:	d102      	bne.n	8002642 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800263c:	4b30      	ldr	r3, [pc, #192]	@ (8002700 <HAL_RCC_GetSysClockFreq+0x100>)
 800263e:	613b      	str	r3, [r7, #16]
 8002640:	e054      	b.n	80026ec <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002642:	4b2d      	ldr	r3, [pc, #180]	@ (80026f8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002644:	689b      	ldr	r3, [r3, #8]
 8002646:	2238      	movs	r2, #56	@ 0x38
 8002648:	4013      	ands	r3, r2
 800264a:	2b10      	cmp	r3, #16
 800264c:	d138      	bne.n	80026c0 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800264e:	4b2a      	ldr	r3, [pc, #168]	@ (80026f8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002650:	68db      	ldr	r3, [r3, #12]
 8002652:	2203      	movs	r2, #3
 8002654:	4013      	ands	r3, r2
 8002656:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002658:	4b27      	ldr	r3, [pc, #156]	@ (80026f8 <HAL_RCC_GetSysClockFreq+0xf8>)
 800265a:	68db      	ldr	r3, [r3, #12]
 800265c:	091b      	lsrs	r3, r3, #4
 800265e:	2207      	movs	r2, #7
 8002660:	4013      	ands	r3, r2
 8002662:	3301      	adds	r3, #1
 8002664:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	2b03      	cmp	r3, #3
 800266a:	d10d      	bne.n	8002688 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800266c:	68b9      	ldr	r1, [r7, #8]
 800266e:	4824      	ldr	r0, [pc, #144]	@ (8002700 <HAL_RCC_GetSysClockFreq+0x100>)
 8002670:	f7fd fd5c 	bl	800012c <__udivsi3>
 8002674:	0003      	movs	r3, r0
 8002676:	0019      	movs	r1, r3
 8002678:	4b1f      	ldr	r3, [pc, #124]	@ (80026f8 <HAL_RCC_GetSysClockFreq+0xf8>)
 800267a:	68db      	ldr	r3, [r3, #12]
 800267c:	0a1b      	lsrs	r3, r3, #8
 800267e:	227f      	movs	r2, #127	@ 0x7f
 8002680:	4013      	ands	r3, r2
 8002682:	434b      	muls	r3, r1
 8002684:	617b      	str	r3, [r7, #20]
        break;
 8002686:	e00d      	b.n	80026a4 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8002688:	68b9      	ldr	r1, [r7, #8]
 800268a:	481c      	ldr	r0, [pc, #112]	@ (80026fc <HAL_RCC_GetSysClockFreq+0xfc>)
 800268c:	f7fd fd4e 	bl	800012c <__udivsi3>
 8002690:	0003      	movs	r3, r0
 8002692:	0019      	movs	r1, r3
 8002694:	4b18      	ldr	r3, [pc, #96]	@ (80026f8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002696:	68db      	ldr	r3, [r3, #12]
 8002698:	0a1b      	lsrs	r3, r3, #8
 800269a:	227f      	movs	r2, #127	@ 0x7f
 800269c:	4013      	ands	r3, r2
 800269e:	434b      	muls	r3, r1
 80026a0:	617b      	str	r3, [r7, #20]
        break;
 80026a2:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80026a4:	4b14      	ldr	r3, [pc, #80]	@ (80026f8 <HAL_RCC_GetSysClockFreq+0xf8>)
 80026a6:	68db      	ldr	r3, [r3, #12]
 80026a8:	0f5b      	lsrs	r3, r3, #29
 80026aa:	2207      	movs	r2, #7
 80026ac:	4013      	ands	r3, r2
 80026ae:	3301      	adds	r3, #1
 80026b0:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 80026b2:	6879      	ldr	r1, [r7, #4]
 80026b4:	6978      	ldr	r0, [r7, #20]
 80026b6:	f7fd fd39 	bl	800012c <__udivsi3>
 80026ba:	0003      	movs	r3, r0
 80026bc:	613b      	str	r3, [r7, #16]
 80026be:	e015      	b.n	80026ec <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80026c0:	4b0d      	ldr	r3, [pc, #52]	@ (80026f8 <HAL_RCC_GetSysClockFreq+0xf8>)
 80026c2:	689b      	ldr	r3, [r3, #8]
 80026c4:	2238      	movs	r2, #56	@ 0x38
 80026c6:	4013      	ands	r3, r2
 80026c8:	2b20      	cmp	r3, #32
 80026ca:	d103      	bne.n	80026d4 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80026cc:	2380      	movs	r3, #128	@ 0x80
 80026ce:	021b      	lsls	r3, r3, #8
 80026d0:	613b      	str	r3, [r7, #16]
 80026d2:	e00b      	b.n	80026ec <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80026d4:	4b08      	ldr	r3, [pc, #32]	@ (80026f8 <HAL_RCC_GetSysClockFreq+0xf8>)
 80026d6:	689b      	ldr	r3, [r3, #8]
 80026d8:	2238      	movs	r2, #56	@ 0x38
 80026da:	4013      	ands	r3, r2
 80026dc:	2b18      	cmp	r3, #24
 80026de:	d103      	bne.n	80026e8 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80026e0:	23fa      	movs	r3, #250	@ 0xfa
 80026e2:	01db      	lsls	r3, r3, #7
 80026e4:	613b      	str	r3, [r7, #16]
 80026e6:	e001      	b.n	80026ec <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 80026e8:	2300      	movs	r3, #0
 80026ea:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80026ec:	693b      	ldr	r3, [r7, #16]
}
 80026ee:	0018      	movs	r0, r3
 80026f0:	46bd      	mov	sp, r7
 80026f2:	b006      	add	sp, #24
 80026f4:	bd80      	pop	{r7, pc}
 80026f6:	46c0      	nop			@ (mov r8, r8)
 80026f8:	40021000 	.word	0x40021000
 80026fc:	00f42400 	.word	0x00f42400
 8002700:	007a1200 	.word	0x007a1200

08002704 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002708:	4b02      	ldr	r3, [pc, #8]	@ (8002714 <HAL_RCC_GetHCLKFreq+0x10>)
 800270a:	681b      	ldr	r3, [r3, #0]
}
 800270c:	0018      	movs	r0, r3
 800270e:	46bd      	mov	sp, r7
 8002710:	bd80      	pop	{r7, pc}
 8002712:	46c0      	nop			@ (mov r8, r8)
 8002714:	200001a8 	.word	0x200001a8

08002718 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002718:	b5b0      	push	{r4, r5, r7, lr}
 800271a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 800271c:	f7ff fff2 	bl	8002704 <HAL_RCC_GetHCLKFreq>
 8002720:	0004      	movs	r4, r0
 8002722:	f7ff fb3f 	bl	8001da4 <LL_RCC_GetAPB1Prescaler>
 8002726:	0003      	movs	r3, r0
 8002728:	0b1a      	lsrs	r2, r3, #12
 800272a:	4b05      	ldr	r3, [pc, #20]	@ (8002740 <HAL_RCC_GetPCLK1Freq+0x28>)
 800272c:	0092      	lsls	r2, r2, #2
 800272e:	58d3      	ldr	r3, [r2, r3]
 8002730:	221f      	movs	r2, #31
 8002732:	4013      	ands	r3, r2
 8002734:	40dc      	lsrs	r4, r3
 8002736:	0023      	movs	r3, r4
}
 8002738:	0018      	movs	r0, r3
 800273a:	46bd      	mov	sp, r7
 800273c:	bdb0      	pop	{r4, r5, r7, pc}
 800273e:	46c0      	nop			@ (mov r8, r8)
 8002740:	08008064 	.word	0x08008064

08002744 <HAL_RCC_GetClockConfig>:
  *                           will be configured.
  * @param  pFLatency         Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b082      	sub	sp, #8
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
 800274c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	2207      	movs	r2, #7
 8002752:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002754:	4b0e      	ldr	r3, [pc, #56]	@ (8002790 <HAL_RCC_GetClockConfig+0x4c>)
 8002756:	689b      	ldr	r3, [r3, #8]
 8002758:	2207      	movs	r2, #7
 800275a:	401a      	ands	r2, r3
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002760:	4b0b      	ldr	r3, [pc, #44]	@ (8002790 <HAL_RCC_GetClockConfig+0x4c>)
 8002762:	689a      	ldr	r2, [r3, #8]
 8002764:	23f0      	movs	r3, #240	@ 0xf0
 8002766:	011b      	lsls	r3, r3, #4
 8002768:	401a      	ands	r2, r3
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE);
 800276e:	4b08      	ldr	r3, [pc, #32]	@ (8002790 <HAL_RCC_GetClockConfig+0x4c>)
 8002770:	689a      	ldr	r2, [r3, #8]
 8002772:	23e0      	movs	r3, #224	@ 0xe0
 8002774:	01db      	lsls	r3, r3, #7
 8002776:	401a      	ands	r2, r3
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	60da      	str	r2, [r3, #12]


  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800277c:	4b05      	ldr	r3, [pc, #20]	@ (8002794 <HAL_RCC_GetClockConfig+0x50>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	2207      	movs	r2, #7
 8002782:	401a      	ands	r2, r3
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	601a      	str	r2, [r3, #0]
}
 8002788:	46c0      	nop			@ (mov r8, r8)
 800278a:	46bd      	mov	sp, r7
 800278c:	b002      	add	sp, #8
 800278e:	bd80      	pop	{r7, pc}
 8002790:	40021000 	.word	0x40021000
 8002794:	40022000 	.word	0x40022000

08002798 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b086      	sub	sp, #24
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 80027a0:	2313      	movs	r3, #19
 80027a2:	18fb      	adds	r3, r7, r3
 80027a4:	2200      	movs	r2, #0
 80027a6:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80027a8:	2312      	movs	r3, #18
 80027aa:	18fb      	adds	r3, r7, r3
 80027ac:	2200      	movs	r2, #0
 80027ae:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681a      	ldr	r2, [r3, #0]
 80027b4:	2380      	movs	r3, #128	@ 0x80
 80027b6:	029b      	lsls	r3, r3, #10
 80027b8:	4013      	ands	r3, r2
 80027ba:	d100      	bne.n	80027be <HAL_RCCEx_PeriphCLKConfig+0x26>
 80027bc:	e0a3      	b.n	8002906 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80027be:	2011      	movs	r0, #17
 80027c0:	183b      	adds	r3, r7, r0
 80027c2:	2200      	movs	r2, #0
 80027c4:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80027c6:	4bc3      	ldr	r3, [pc, #780]	@ (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80027c8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80027ca:	2380      	movs	r3, #128	@ 0x80
 80027cc:	055b      	lsls	r3, r3, #21
 80027ce:	4013      	ands	r3, r2
 80027d0:	d110      	bne.n	80027f4 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027d2:	4bc0      	ldr	r3, [pc, #768]	@ (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80027d4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80027d6:	4bbf      	ldr	r3, [pc, #764]	@ (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80027d8:	2180      	movs	r1, #128	@ 0x80
 80027da:	0549      	lsls	r1, r1, #21
 80027dc:	430a      	orrs	r2, r1
 80027de:	63da      	str	r2, [r3, #60]	@ 0x3c
 80027e0:	4bbc      	ldr	r3, [pc, #752]	@ (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80027e2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80027e4:	2380      	movs	r3, #128	@ 0x80
 80027e6:	055b      	lsls	r3, r3, #21
 80027e8:	4013      	ands	r3, r2
 80027ea:	60bb      	str	r3, [r7, #8]
 80027ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80027ee:	183b      	adds	r3, r7, r0
 80027f0:	2201      	movs	r2, #1
 80027f2:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80027f4:	4bb8      	ldr	r3, [pc, #736]	@ (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80027f6:	681a      	ldr	r2, [r3, #0]
 80027f8:	4bb7      	ldr	r3, [pc, #732]	@ (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80027fa:	2180      	movs	r1, #128	@ 0x80
 80027fc:	0049      	lsls	r1, r1, #1
 80027fe:	430a      	orrs	r2, r1
 8002800:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002802:	f7fe fde3 	bl	80013cc <HAL_GetTick>
 8002806:	0003      	movs	r3, r0
 8002808:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800280a:	e00b      	b.n	8002824 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800280c:	f7fe fdde 	bl	80013cc <HAL_GetTick>
 8002810:	0002      	movs	r2, r0
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	1ad3      	subs	r3, r2, r3
 8002816:	2b02      	cmp	r3, #2
 8002818:	d904      	bls.n	8002824 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 800281a:	2313      	movs	r3, #19
 800281c:	18fb      	adds	r3, r7, r3
 800281e:	2203      	movs	r2, #3
 8002820:	701a      	strb	r2, [r3, #0]
        break;
 8002822:	e005      	b.n	8002830 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002824:	4bac      	ldr	r3, [pc, #688]	@ (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8002826:	681a      	ldr	r2, [r3, #0]
 8002828:	2380      	movs	r3, #128	@ 0x80
 800282a:	005b      	lsls	r3, r3, #1
 800282c:	4013      	ands	r3, r2
 800282e:	d0ed      	beq.n	800280c <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8002830:	2313      	movs	r3, #19
 8002832:	18fb      	adds	r3, r7, r3
 8002834:	781b      	ldrb	r3, [r3, #0]
 8002836:	2b00      	cmp	r3, #0
 8002838:	d154      	bne.n	80028e4 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800283a:	4ba6      	ldr	r3, [pc, #664]	@ (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800283c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800283e:	23c0      	movs	r3, #192	@ 0xc0
 8002840:	009b      	lsls	r3, r3, #2
 8002842:	4013      	ands	r3, r2
 8002844:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002846:	697b      	ldr	r3, [r7, #20]
 8002848:	2b00      	cmp	r3, #0
 800284a:	d019      	beq.n	8002880 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002850:	697a      	ldr	r2, [r7, #20]
 8002852:	429a      	cmp	r2, r3
 8002854:	d014      	beq.n	8002880 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002856:	4b9f      	ldr	r3, [pc, #636]	@ (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002858:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800285a:	4aa0      	ldr	r2, [pc, #640]	@ (8002adc <HAL_RCCEx_PeriphCLKConfig+0x344>)
 800285c:	4013      	ands	r3, r2
 800285e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002860:	4b9c      	ldr	r3, [pc, #624]	@ (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002862:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002864:	4b9b      	ldr	r3, [pc, #620]	@ (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002866:	2180      	movs	r1, #128	@ 0x80
 8002868:	0249      	lsls	r1, r1, #9
 800286a:	430a      	orrs	r2, r1
 800286c:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 800286e:	4b99      	ldr	r3, [pc, #612]	@ (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002870:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002872:	4b98      	ldr	r3, [pc, #608]	@ (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002874:	499a      	ldr	r1, [pc, #616]	@ (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8002876:	400a      	ands	r2, r1
 8002878:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800287a:	4b96      	ldr	r3, [pc, #600]	@ (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800287c:	697a      	ldr	r2, [r7, #20]
 800287e:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002880:	697b      	ldr	r3, [r7, #20]
 8002882:	2201      	movs	r2, #1
 8002884:	4013      	ands	r3, r2
 8002886:	d016      	beq.n	80028b6 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002888:	f7fe fda0 	bl	80013cc <HAL_GetTick>
 800288c:	0003      	movs	r3, r0
 800288e:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002890:	e00c      	b.n	80028ac <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002892:	f7fe fd9b 	bl	80013cc <HAL_GetTick>
 8002896:	0002      	movs	r2, r0
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	1ad3      	subs	r3, r2, r3
 800289c:	4a91      	ldr	r2, [pc, #580]	@ (8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 800289e:	4293      	cmp	r3, r2
 80028a0:	d904      	bls.n	80028ac <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 80028a2:	2313      	movs	r3, #19
 80028a4:	18fb      	adds	r3, r7, r3
 80028a6:	2203      	movs	r2, #3
 80028a8:	701a      	strb	r2, [r3, #0]
            break;
 80028aa:	e004      	b.n	80028b6 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80028ac:	4b89      	ldr	r3, [pc, #548]	@ (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80028ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028b0:	2202      	movs	r2, #2
 80028b2:	4013      	ands	r3, r2
 80028b4:	d0ed      	beq.n	8002892 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 80028b6:	2313      	movs	r3, #19
 80028b8:	18fb      	adds	r3, r7, r3
 80028ba:	781b      	ldrb	r3, [r3, #0]
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d10a      	bne.n	80028d6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80028c0:	4b84      	ldr	r3, [pc, #528]	@ (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80028c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028c4:	4a85      	ldr	r2, [pc, #532]	@ (8002adc <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80028c6:	4013      	ands	r3, r2
 80028c8:	0019      	movs	r1, r3
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80028ce:	4b81      	ldr	r3, [pc, #516]	@ (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80028d0:	430a      	orrs	r2, r1
 80028d2:	65da      	str	r2, [r3, #92]	@ 0x5c
 80028d4:	e00c      	b.n	80028f0 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80028d6:	2312      	movs	r3, #18
 80028d8:	18fb      	adds	r3, r7, r3
 80028da:	2213      	movs	r2, #19
 80028dc:	18ba      	adds	r2, r7, r2
 80028de:	7812      	ldrb	r2, [r2, #0]
 80028e0:	701a      	strb	r2, [r3, #0]
 80028e2:	e005      	b.n	80028f0 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80028e4:	2312      	movs	r3, #18
 80028e6:	18fb      	adds	r3, r7, r3
 80028e8:	2213      	movs	r2, #19
 80028ea:	18ba      	adds	r2, r7, r2
 80028ec:	7812      	ldrb	r2, [r2, #0]
 80028ee:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80028f0:	2311      	movs	r3, #17
 80028f2:	18fb      	adds	r3, r7, r3
 80028f4:	781b      	ldrb	r3, [r3, #0]
 80028f6:	2b01      	cmp	r3, #1
 80028f8:	d105      	bne.n	8002906 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028fa:	4b76      	ldr	r3, [pc, #472]	@ (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80028fc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80028fe:	4b75      	ldr	r3, [pc, #468]	@ (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002900:	4979      	ldr	r1, [pc, #484]	@ (8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x350>)
 8002902:	400a      	ands	r2, r1
 8002904:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	2201      	movs	r2, #1
 800290c:	4013      	ands	r3, r2
 800290e:	d009      	beq.n	8002924 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002910:	4b70      	ldr	r3, [pc, #448]	@ (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002912:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002914:	2203      	movs	r2, #3
 8002916:	4393      	bics	r3, r2
 8002918:	0019      	movs	r1, r3
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	685a      	ldr	r2, [r3, #4]
 800291e:	4b6d      	ldr	r3, [pc, #436]	@ (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002920:	430a      	orrs	r2, r1
 8002922:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	2202      	movs	r2, #2
 800292a:	4013      	ands	r3, r2
 800292c:	d009      	beq.n	8002942 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800292e:	4b69      	ldr	r3, [pc, #420]	@ (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002930:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002932:	220c      	movs	r2, #12
 8002934:	4393      	bics	r3, r2
 8002936:	0019      	movs	r1, r3
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	689a      	ldr	r2, [r3, #8]
 800293c:	4b65      	ldr	r3, [pc, #404]	@ (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800293e:	430a      	orrs	r2, r1
 8002940:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	2210      	movs	r2, #16
 8002948:	4013      	ands	r3, r2
 800294a:	d009      	beq.n	8002960 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800294c:	4b61      	ldr	r3, [pc, #388]	@ (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800294e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002950:	4a66      	ldr	r2, [pc, #408]	@ (8002aec <HAL_RCCEx_PeriphCLKConfig+0x354>)
 8002952:	4013      	ands	r3, r2
 8002954:	0019      	movs	r1, r3
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	68da      	ldr	r2, [r3, #12]
 800295a:	4b5e      	ldr	r3, [pc, #376]	@ (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800295c:	430a      	orrs	r2, r1
 800295e:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681a      	ldr	r2, [r3, #0]
 8002964:	2380      	movs	r3, #128	@ 0x80
 8002966:	009b      	lsls	r3, r3, #2
 8002968:	4013      	ands	r3, r2
 800296a:	d009      	beq.n	8002980 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800296c:	4b59      	ldr	r3, [pc, #356]	@ (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800296e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002970:	4a5f      	ldr	r2, [pc, #380]	@ (8002af0 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002972:	4013      	ands	r3, r2
 8002974:	0019      	movs	r1, r3
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	699a      	ldr	r2, [r3, #24]
 800297a:	4b56      	ldr	r3, [pc, #344]	@ (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800297c:	430a      	orrs	r2, r1
 800297e:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681a      	ldr	r2, [r3, #0]
 8002984:	2380      	movs	r3, #128	@ 0x80
 8002986:	00db      	lsls	r3, r3, #3
 8002988:	4013      	ands	r3, r2
 800298a:	d009      	beq.n	80029a0 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800298c:	4b51      	ldr	r3, [pc, #324]	@ (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800298e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002990:	4a58      	ldr	r2, [pc, #352]	@ (8002af4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002992:	4013      	ands	r3, r2
 8002994:	0019      	movs	r1, r3
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	69da      	ldr	r2, [r3, #28]
 800299a:	4b4e      	ldr	r3, [pc, #312]	@ (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800299c:	430a      	orrs	r2, r1
 800299e:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	2220      	movs	r2, #32
 80029a6:	4013      	ands	r3, r2
 80029a8:	d009      	beq.n	80029be <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80029aa:	4b4a      	ldr	r3, [pc, #296]	@ (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80029ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029ae:	4a52      	ldr	r2, [pc, #328]	@ (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x360>)
 80029b0:	4013      	ands	r3, r2
 80029b2:	0019      	movs	r1, r3
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	691a      	ldr	r2, [r3, #16]
 80029b8:	4b46      	ldr	r3, [pc, #280]	@ (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80029ba:	430a      	orrs	r2, r1
 80029bc:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681a      	ldr	r2, [r3, #0]
 80029c2:	2380      	movs	r3, #128	@ 0x80
 80029c4:	01db      	lsls	r3, r3, #7
 80029c6:	4013      	ands	r3, r2
 80029c8:	d015      	beq.n	80029f6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80029ca:	4b42      	ldr	r3, [pc, #264]	@ (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80029cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029ce:	009b      	lsls	r3, r3, #2
 80029d0:	0899      	lsrs	r1, r3, #2
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6a1a      	ldr	r2, [r3, #32]
 80029d6:	4b3f      	ldr	r3, [pc, #252]	@ (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80029d8:	430a      	orrs	r2, r1
 80029da:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6a1a      	ldr	r2, [r3, #32]
 80029e0:	2380      	movs	r3, #128	@ 0x80
 80029e2:	05db      	lsls	r3, r3, #23
 80029e4:	429a      	cmp	r2, r3
 80029e6:	d106      	bne.n	80029f6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80029e8:	4b3a      	ldr	r3, [pc, #232]	@ (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80029ea:	68da      	ldr	r2, [r3, #12]
 80029ec:	4b39      	ldr	r3, [pc, #228]	@ (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80029ee:	2180      	movs	r1, #128	@ 0x80
 80029f0:	0249      	lsls	r1, r1, #9
 80029f2:	430a      	orrs	r2, r1
 80029f4:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681a      	ldr	r2, [r3, #0]
 80029fa:	2380      	movs	r3, #128	@ 0x80
 80029fc:	031b      	lsls	r3, r3, #12
 80029fe:	4013      	ands	r3, r2
 8002a00:	d009      	beq.n	8002a16 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002a02:	4b34      	ldr	r3, [pc, #208]	@ (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002a04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a06:	2240      	movs	r2, #64	@ 0x40
 8002a08:	4393      	bics	r3, r2
 8002a0a:	0019      	movs	r1, r3
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002a10:	4b30      	ldr	r3, [pc, #192]	@ (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002a12:	430a      	orrs	r2, r1
 8002a14:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681a      	ldr	r2, [r3, #0]
 8002a1a:	2380      	movs	r3, #128	@ 0x80
 8002a1c:	039b      	lsls	r3, r3, #14
 8002a1e:	4013      	ands	r3, r2
 8002a20:	d016      	beq.n	8002a50 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002a22:	4b2c      	ldr	r3, [pc, #176]	@ (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002a24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a26:	4a35      	ldr	r2, [pc, #212]	@ (8002afc <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8002a28:	4013      	ands	r3, r2
 8002a2a:	0019      	movs	r1, r3
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002a30:	4b28      	ldr	r3, [pc, #160]	@ (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002a32:	430a      	orrs	r2, r1
 8002a34:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002a3a:	2380      	movs	r3, #128	@ 0x80
 8002a3c:	03db      	lsls	r3, r3, #15
 8002a3e:	429a      	cmp	r2, r3
 8002a40:	d106      	bne.n	8002a50 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002a42:	4b24      	ldr	r3, [pc, #144]	@ (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002a44:	68da      	ldr	r2, [r3, #12]
 8002a46:	4b23      	ldr	r3, [pc, #140]	@ (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002a48:	2180      	movs	r1, #128	@ 0x80
 8002a4a:	0449      	lsls	r1, r1, #17
 8002a4c:	430a      	orrs	r2, r1
 8002a4e:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681a      	ldr	r2, [r3, #0]
 8002a54:	2380      	movs	r3, #128	@ 0x80
 8002a56:	03db      	lsls	r3, r3, #15
 8002a58:	4013      	ands	r3, r2
 8002a5a:	d016      	beq.n	8002a8a <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002a5c:	4b1d      	ldr	r3, [pc, #116]	@ (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002a5e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a60:	4a27      	ldr	r2, [pc, #156]	@ (8002b00 <HAL_RCCEx_PeriphCLKConfig+0x368>)
 8002a62:	4013      	ands	r3, r2
 8002a64:	0019      	movs	r1, r3
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002a6a:	4b1a      	ldr	r3, [pc, #104]	@ (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002a6c:	430a      	orrs	r2, r1
 8002a6e:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002a74:	2380      	movs	r3, #128	@ 0x80
 8002a76:	045b      	lsls	r3, r3, #17
 8002a78:	429a      	cmp	r2, r3
 8002a7a:	d106      	bne.n	8002a8a <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002a7c:	4b15      	ldr	r3, [pc, #84]	@ (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002a7e:	68da      	ldr	r2, [r3, #12]
 8002a80:	4b14      	ldr	r3, [pc, #80]	@ (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002a82:	2180      	movs	r1, #128	@ 0x80
 8002a84:	0449      	lsls	r1, r1, #17
 8002a86:	430a      	orrs	r2, r1
 8002a88:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681a      	ldr	r2, [r3, #0]
 8002a8e:	2380      	movs	r3, #128	@ 0x80
 8002a90:	011b      	lsls	r3, r3, #4
 8002a92:	4013      	ands	r3, r2
 8002a94:	d016      	beq.n	8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8002a96:	4b0f      	ldr	r3, [pc, #60]	@ (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002a98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a9a:	4a1a      	ldr	r2, [pc, #104]	@ (8002b04 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 8002a9c:	4013      	ands	r3, r2
 8002a9e:	0019      	movs	r1, r3
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	695a      	ldr	r2, [r3, #20]
 8002aa4:	4b0b      	ldr	r3, [pc, #44]	@ (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002aa6:	430a      	orrs	r2, r1
 8002aa8:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	695a      	ldr	r2, [r3, #20]
 8002aae:	2380      	movs	r3, #128	@ 0x80
 8002ab0:	01db      	lsls	r3, r3, #7
 8002ab2:	429a      	cmp	r2, r3
 8002ab4:	d106      	bne.n	8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002ab6:	4b07      	ldr	r3, [pc, #28]	@ (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002ab8:	68da      	ldr	r2, [r3, #12]
 8002aba:	4b06      	ldr	r3, [pc, #24]	@ (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002abc:	2180      	movs	r1, #128	@ 0x80
 8002abe:	0249      	lsls	r1, r1, #9
 8002ac0:	430a      	orrs	r2, r1
 8002ac2:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8002ac4:	2312      	movs	r3, #18
 8002ac6:	18fb      	adds	r3, r7, r3
 8002ac8:	781b      	ldrb	r3, [r3, #0]
}
 8002aca:	0018      	movs	r0, r3
 8002acc:	46bd      	mov	sp, r7
 8002ace:	b006      	add	sp, #24
 8002ad0:	bd80      	pop	{r7, pc}
 8002ad2:	46c0      	nop			@ (mov r8, r8)
 8002ad4:	40021000 	.word	0x40021000
 8002ad8:	40007000 	.word	0x40007000
 8002adc:	fffffcff 	.word	0xfffffcff
 8002ae0:	fffeffff 	.word	0xfffeffff
 8002ae4:	00001388 	.word	0x00001388
 8002ae8:	efffffff 	.word	0xefffffff
 8002aec:	fffff3ff 	.word	0xfffff3ff
 8002af0:	fff3ffff 	.word	0xfff3ffff
 8002af4:	ffcfffff 	.word	0xffcfffff
 8002af8:	ffffcfff 	.word	0xffffcfff
 8002afc:	ffbfffff 	.word	0xffbfffff
 8002b00:	feffffff 	.word	0xfeffffff
 8002b04:	ffff3fff 	.word	0xffff3fff

08002b08 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b082      	sub	sp, #8
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d101      	bne.n	8002b1a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002b16:	2301      	movs	r3, #1
 8002b18:	e04a      	b.n	8002bb0 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	223d      	movs	r2, #61	@ 0x3d
 8002b1e:	5c9b      	ldrb	r3, [r3, r2]
 8002b20:	b2db      	uxtb	r3, r3
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d107      	bne.n	8002b36 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	223c      	movs	r2, #60	@ 0x3c
 8002b2a:	2100      	movs	r1, #0
 8002b2c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	0018      	movs	r0, r3
 8002b32:	f7fe fa4d 	bl	8000fd0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	223d      	movs	r2, #61	@ 0x3d
 8002b3a:	2102      	movs	r1, #2
 8002b3c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681a      	ldr	r2, [r3, #0]
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	3304      	adds	r3, #4
 8002b46:	0019      	movs	r1, r3
 8002b48:	0010      	movs	r0, r2
 8002b4a:	f000 fa8f 	bl	800306c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	2248      	movs	r2, #72	@ 0x48
 8002b52:	2101      	movs	r1, #1
 8002b54:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	223e      	movs	r2, #62	@ 0x3e
 8002b5a:	2101      	movs	r1, #1
 8002b5c:	5499      	strb	r1, [r3, r2]
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	223f      	movs	r2, #63	@ 0x3f
 8002b62:	2101      	movs	r1, #1
 8002b64:	5499      	strb	r1, [r3, r2]
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	2240      	movs	r2, #64	@ 0x40
 8002b6a:	2101      	movs	r1, #1
 8002b6c:	5499      	strb	r1, [r3, r2]
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	2241      	movs	r2, #65	@ 0x41
 8002b72:	2101      	movs	r1, #1
 8002b74:	5499      	strb	r1, [r3, r2]
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	2242      	movs	r2, #66	@ 0x42
 8002b7a:	2101      	movs	r1, #1
 8002b7c:	5499      	strb	r1, [r3, r2]
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	2243      	movs	r2, #67	@ 0x43
 8002b82:	2101      	movs	r1, #1
 8002b84:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	2244      	movs	r2, #68	@ 0x44
 8002b8a:	2101      	movs	r1, #1
 8002b8c:	5499      	strb	r1, [r3, r2]
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	2245      	movs	r2, #69	@ 0x45
 8002b92:	2101      	movs	r1, #1
 8002b94:	5499      	strb	r1, [r3, r2]
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	2246      	movs	r2, #70	@ 0x46
 8002b9a:	2101      	movs	r1, #1
 8002b9c:	5499      	strb	r1, [r3, r2]
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	2247      	movs	r2, #71	@ 0x47
 8002ba2:	2101      	movs	r1, #1
 8002ba4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	223d      	movs	r2, #61	@ 0x3d
 8002baa:	2101      	movs	r1, #1
 8002bac:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002bae:	2300      	movs	r3, #0
}
 8002bb0:	0018      	movs	r0, r3
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	b002      	add	sp, #8
 8002bb6:	bd80      	pop	{r7, pc}

08002bb8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b084      	sub	sp, #16
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	223d      	movs	r2, #61	@ 0x3d
 8002bc4:	5c9b      	ldrb	r3, [r3, r2]
 8002bc6:	b2db      	uxtb	r3, r3
 8002bc8:	2b01      	cmp	r3, #1
 8002bca:	d001      	beq.n	8002bd0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002bcc:	2301      	movs	r3, #1
 8002bce:	e042      	b.n	8002c56 <HAL_TIM_Base_Start_IT+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	223d      	movs	r2, #61	@ 0x3d
 8002bd4:	2102      	movs	r1, #2
 8002bd6:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	68da      	ldr	r2, [r3, #12]
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	2101      	movs	r1, #1
 8002be4:	430a      	orrs	r2, r1
 8002be6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	4a1c      	ldr	r2, [pc, #112]	@ (8002c60 <HAL_TIM_Base_Start_IT+0xa8>)
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	d00f      	beq.n	8002c12 <HAL_TIM_Base_Start_IT+0x5a>
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681a      	ldr	r2, [r3, #0]
 8002bf6:	2380      	movs	r3, #128	@ 0x80
 8002bf8:	05db      	lsls	r3, r3, #23
 8002bfa:	429a      	cmp	r2, r3
 8002bfc:	d009      	beq.n	8002c12 <HAL_TIM_Base_Start_IT+0x5a>
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	4a18      	ldr	r2, [pc, #96]	@ (8002c64 <HAL_TIM_Base_Start_IT+0xac>)
 8002c04:	4293      	cmp	r3, r2
 8002c06:	d004      	beq.n	8002c12 <HAL_TIM_Base_Start_IT+0x5a>
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4a16      	ldr	r2, [pc, #88]	@ (8002c68 <HAL_TIM_Base_Start_IT+0xb0>)
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d116      	bne.n	8002c40 <HAL_TIM_Base_Start_IT+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	689b      	ldr	r3, [r3, #8]
 8002c18:	4a14      	ldr	r2, [pc, #80]	@ (8002c6c <HAL_TIM_Base_Start_IT+0xb4>)
 8002c1a:	4013      	ands	r3, r2
 8002c1c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	2b06      	cmp	r3, #6
 8002c22:	d016      	beq.n	8002c52 <HAL_TIM_Base_Start_IT+0x9a>
 8002c24:	68fa      	ldr	r2, [r7, #12]
 8002c26:	2380      	movs	r3, #128	@ 0x80
 8002c28:	025b      	lsls	r3, r3, #9
 8002c2a:	429a      	cmp	r2, r3
 8002c2c:	d011      	beq.n	8002c52 <HAL_TIM_Base_Start_IT+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	681a      	ldr	r2, [r3, #0]
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	2101      	movs	r1, #1
 8002c3a:	430a      	orrs	r2, r1
 8002c3c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c3e:	e008      	b.n	8002c52 <HAL_TIM_Base_Start_IT+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	681a      	ldr	r2, [r3, #0]
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	2101      	movs	r1, #1
 8002c4c:	430a      	orrs	r2, r1
 8002c4e:	601a      	str	r2, [r3, #0]
 8002c50:	e000      	b.n	8002c54 <HAL_TIM_Base_Start_IT+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c52:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8002c54:	2300      	movs	r3, #0
}
 8002c56:	0018      	movs	r0, r3
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	b004      	add	sp, #16
 8002c5c:	bd80      	pop	{r7, pc}
 8002c5e:	46c0      	nop			@ (mov r8, r8)
 8002c60:	40012c00 	.word	0x40012c00
 8002c64:	40000400 	.word	0x40000400
 8002c68:	40014000 	.word	0x40014000
 8002c6c:	00010007 	.word	0x00010007

08002c70 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b084      	sub	sp, #16
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	68db      	ldr	r3, [r3, #12]
 8002c7e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	691b      	ldr	r3, [r3, #16]
 8002c86:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002c88:	68bb      	ldr	r3, [r7, #8]
 8002c8a:	2202      	movs	r2, #2
 8002c8c:	4013      	ands	r3, r2
 8002c8e:	d021      	beq.n	8002cd4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	2202      	movs	r2, #2
 8002c94:	4013      	ands	r3, r2
 8002c96:	d01d      	beq.n	8002cd4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	2203      	movs	r2, #3
 8002c9e:	4252      	negs	r2, r2
 8002ca0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	2201      	movs	r2, #1
 8002ca6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	699b      	ldr	r3, [r3, #24]
 8002cae:	2203      	movs	r2, #3
 8002cb0:	4013      	ands	r3, r2
 8002cb2:	d004      	beq.n	8002cbe <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	0018      	movs	r0, r3
 8002cb8:	f000 f9c0 	bl	800303c <HAL_TIM_IC_CaptureCallback>
 8002cbc:	e007      	b.n	8002cce <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	0018      	movs	r0, r3
 8002cc2:	f000 f9b3 	bl	800302c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	0018      	movs	r0, r3
 8002cca:	f000 f9bf 	bl	800304c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002cd4:	68bb      	ldr	r3, [r7, #8]
 8002cd6:	2204      	movs	r2, #4
 8002cd8:	4013      	ands	r3, r2
 8002cda:	d022      	beq.n	8002d22 <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	2204      	movs	r2, #4
 8002ce0:	4013      	ands	r3, r2
 8002ce2:	d01e      	beq.n	8002d22 <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	2205      	movs	r2, #5
 8002cea:	4252      	negs	r2, r2
 8002cec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	2202      	movs	r2, #2
 8002cf2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	699a      	ldr	r2, [r3, #24]
 8002cfa:	23c0      	movs	r3, #192	@ 0xc0
 8002cfc:	009b      	lsls	r3, r3, #2
 8002cfe:	4013      	ands	r3, r2
 8002d00:	d004      	beq.n	8002d0c <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	0018      	movs	r0, r3
 8002d06:	f000 f999 	bl	800303c <HAL_TIM_IC_CaptureCallback>
 8002d0a:	e007      	b.n	8002d1c <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	0018      	movs	r0, r3
 8002d10:	f000 f98c 	bl	800302c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	0018      	movs	r0, r3
 8002d18:	f000 f998 	bl	800304c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2200      	movs	r2, #0
 8002d20:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002d22:	68bb      	ldr	r3, [r7, #8]
 8002d24:	2208      	movs	r2, #8
 8002d26:	4013      	ands	r3, r2
 8002d28:	d021      	beq.n	8002d6e <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	2208      	movs	r2, #8
 8002d2e:	4013      	ands	r3, r2
 8002d30:	d01d      	beq.n	8002d6e <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	2209      	movs	r2, #9
 8002d38:	4252      	negs	r2, r2
 8002d3a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2204      	movs	r2, #4
 8002d40:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	69db      	ldr	r3, [r3, #28]
 8002d48:	2203      	movs	r2, #3
 8002d4a:	4013      	ands	r3, r2
 8002d4c:	d004      	beq.n	8002d58 <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	0018      	movs	r0, r3
 8002d52:	f000 f973 	bl	800303c <HAL_TIM_IC_CaptureCallback>
 8002d56:	e007      	b.n	8002d68 <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	0018      	movs	r0, r3
 8002d5c:	f000 f966 	bl	800302c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	0018      	movs	r0, r3
 8002d64:	f000 f972 	bl	800304c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002d6e:	68bb      	ldr	r3, [r7, #8]
 8002d70:	2210      	movs	r2, #16
 8002d72:	4013      	ands	r3, r2
 8002d74:	d022      	beq.n	8002dbc <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	2210      	movs	r2, #16
 8002d7a:	4013      	ands	r3, r2
 8002d7c:	d01e      	beq.n	8002dbc <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	2211      	movs	r2, #17
 8002d84:	4252      	negs	r2, r2
 8002d86:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2208      	movs	r2, #8
 8002d8c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	69da      	ldr	r2, [r3, #28]
 8002d94:	23c0      	movs	r3, #192	@ 0xc0
 8002d96:	009b      	lsls	r3, r3, #2
 8002d98:	4013      	ands	r3, r2
 8002d9a:	d004      	beq.n	8002da6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	0018      	movs	r0, r3
 8002da0:	f000 f94c 	bl	800303c <HAL_TIM_IC_CaptureCallback>
 8002da4:	e007      	b.n	8002db6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	0018      	movs	r0, r3
 8002daa:	f000 f93f 	bl	800302c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	0018      	movs	r0, r3
 8002db2:	f000 f94b 	bl	800304c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	2200      	movs	r2, #0
 8002dba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002dbc:	68bb      	ldr	r3, [r7, #8]
 8002dbe:	2201      	movs	r2, #1
 8002dc0:	4013      	ands	r3, r2
 8002dc2:	d00c      	beq.n	8002dde <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	2201      	movs	r2, #1
 8002dc8:	4013      	ands	r3, r2
 8002dca:	d008      	beq.n	8002dde <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	2202      	movs	r2, #2
 8002dd2:	4252      	negs	r2, r2
 8002dd4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	0018      	movs	r0, r3
 8002dda:	f7fe f8b7 	bl	8000f4c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8002dde:	68bb      	ldr	r3, [r7, #8]
 8002de0:	2280      	movs	r2, #128	@ 0x80
 8002de2:	4013      	ands	r3, r2
 8002de4:	d104      	bne.n	8002df0 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8002de6:	68ba      	ldr	r2, [r7, #8]
 8002de8:	2380      	movs	r3, #128	@ 0x80
 8002dea:	019b      	lsls	r3, r3, #6
 8002dec:	4013      	ands	r3, r2
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8002dee:	d00b      	beq.n	8002e08 <HAL_TIM_IRQHandler+0x198>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	2280      	movs	r2, #128	@ 0x80
 8002df4:	4013      	ands	r3, r2
 8002df6:	d007      	beq.n	8002e08 <HAL_TIM_IRQHandler+0x198>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	4a1e      	ldr	r2, [pc, #120]	@ (8002e78 <HAL_TIM_IRQHandler+0x208>)
 8002dfe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	0018      	movs	r0, r3
 8002e04:	f000 fad2 	bl	80033ac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8002e08:	68ba      	ldr	r2, [r7, #8]
 8002e0a:	2380      	movs	r3, #128	@ 0x80
 8002e0c:	005b      	lsls	r3, r3, #1
 8002e0e:	4013      	ands	r3, r2
 8002e10:	d00b      	beq.n	8002e2a <HAL_TIM_IRQHandler+0x1ba>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	2280      	movs	r2, #128	@ 0x80
 8002e16:	4013      	ands	r3, r2
 8002e18:	d007      	beq.n	8002e2a <HAL_TIM_IRQHandler+0x1ba>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	4a17      	ldr	r2, [pc, #92]	@ (8002e7c <HAL_TIM_IRQHandler+0x20c>)
 8002e20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	0018      	movs	r0, r3
 8002e26:	f000 fac9 	bl	80033bc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002e2a:	68bb      	ldr	r3, [r7, #8]
 8002e2c:	2240      	movs	r2, #64	@ 0x40
 8002e2e:	4013      	ands	r3, r2
 8002e30:	d00c      	beq.n	8002e4c <HAL_TIM_IRQHandler+0x1dc>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	2240      	movs	r2, #64	@ 0x40
 8002e36:	4013      	ands	r3, r2
 8002e38:	d008      	beq.n	8002e4c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	2241      	movs	r2, #65	@ 0x41
 8002e40:	4252      	negs	r2, r2
 8002e42:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	0018      	movs	r0, r3
 8002e48:	f000 f908 	bl	800305c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002e4c:	68bb      	ldr	r3, [r7, #8]
 8002e4e:	2220      	movs	r2, #32
 8002e50:	4013      	ands	r3, r2
 8002e52:	d00c      	beq.n	8002e6e <HAL_TIM_IRQHandler+0x1fe>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	2220      	movs	r2, #32
 8002e58:	4013      	ands	r3, r2
 8002e5a:	d008      	beq.n	8002e6e <HAL_TIM_IRQHandler+0x1fe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	2221      	movs	r2, #33	@ 0x21
 8002e62:	4252      	negs	r2, r2
 8002e64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	0018      	movs	r0, r3
 8002e6a:	f000 fa97 	bl	800339c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002e6e:	46c0      	nop			@ (mov r8, r8)
 8002e70:	46bd      	mov	sp, r7
 8002e72:	b004      	add	sp, #16
 8002e74:	bd80      	pop	{r7, pc}
 8002e76:	46c0      	nop			@ (mov r8, r8)
 8002e78:	ffffdf7f 	.word	0xffffdf7f
 8002e7c:	fffffeff 	.word	0xfffffeff

08002e80 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b084      	sub	sp, #16
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
 8002e88:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002e8a:	230f      	movs	r3, #15
 8002e8c:	18fb      	adds	r3, r7, r3
 8002e8e:	2200      	movs	r2, #0
 8002e90:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	223c      	movs	r2, #60	@ 0x3c
 8002e96:	5c9b      	ldrb	r3, [r3, r2]
 8002e98:	2b01      	cmp	r3, #1
 8002e9a:	d101      	bne.n	8002ea0 <HAL_TIM_ConfigClockSource+0x20>
 8002e9c:	2302      	movs	r3, #2
 8002e9e:	e0bc      	b.n	800301a <HAL_TIM_ConfigClockSource+0x19a>
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	223c      	movs	r2, #60	@ 0x3c
 8002ea4:	2101      	movs	r1, #1
 8002ea6:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	223d      	movs	r2, #61	@ 0x3d
 8002eac:	2102      	movs	r1, #2
 8002eae:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	689b      	ldr	r3, [r3, #8]
 8002eb6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002eb8:	68bb      	ldr	r3, [r7, #8]
 8002eba:	4a5a      	ldr	r2, [pc, #360]	@ (8003024 <HAL_TIM_ConfigClockSource+0x1a4>)
 8002ebc:	4013      	ands	r3, r2
 8002ebe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002ec0:	68bb      	ldr	r3, [r7, #8]
 8002ec2:	4a59      	ldr	r2, [pc, #356]	@ (8003028 <HAL_TIM_ConfigClockSource+0x1a8>)
 8002ec4:	4013      	ands	r3, r2
 8002ec6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	68ba      	ldr	r2, [r7, #8]
 8002ece:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	2280      	movs	r2, #128	@ 0x80
 8002ed6:	0192      	lsls	r2, r2, #6
 8002ed8:	4293      	cmp	r3, r2
 8002eda:	d040      	beq.n	8002f5e <HAL_TIM_ConfigClockSource+0xde>
 8002edc:	2280      	movs	r2, #128	@ 0x80
 8002ede:	0192      	lsls	r2, r2, #6
 8002ee0:	4293      	cmp	r3, r2
 8002ee2:	d900      	bls.n	8002ee6 <HAL_TIM_ConfigClockSource+0x66>
 8002ee4:	e088      	b.n	8002ff8 <HAL_TIM_ConfigClockSource+0x178>
 8002ee6:	2280      	movs	r2, #128	@ 0x80
 8002ee8:	0152      	lsls	r2, r2, #5
 8002eea:	4293      	cmp	r3, r2
 8002eec:	d100      	bne.n	8002ef0 <HAL_TIM_ConfigClockSource+0x70>
 8002eee:	e088      	b.n	8003002 <HAL_TIM_ConfigClockSource+0x182>
 8002ef0:	2280      	movs	r2, #128	@ 0x80
 8002ef2:	0152      	lsls	r2, r2, #5
 8002ef4:	4293      	cmp	r3, r2
 8002ef6:	d900      	bls.n	8002efa <HAL_TIM_ConfigClockSource+0x7a>
 8002ef8:	e07e      	b.n	8002ff8 <HAL_TIM_ConfigClockSource+0x178>
 8002efa:	2b70      	cmp	r3, #112	@ 0x70
 8002efc:	d018      	beq.n	8002f30 <HAL_TIM_ConfigClockSource+0xb0>
 8002efe:	d900      	bls.n	8002f02 <HAL_TIM_ConfigClockSource+0x82>
 8002f00:	e07a      	b.n	8002ff8 <HAL_TIM_ConfigClockSource+0x178>
 8002f02:	2b60      	cmp	r3, #96	@ 0x60
 8002f04:	d04f      	beq.n	8002fa6 <HAL_TIM_ConfigClockSource+0x126>
 8002f06:	d900      	bls.n	8002f0a <HAL_TIM_ConfigClockSource+0x8a>
 8002f08:	e076      	b.n	8002ff8 <HAL_TIM_ConfigClockSource+0x178>
 8002f0a:	2b50      	cmp	r3, #80	@ 0x50
 8002f0c:	d03b      	beq.n	8002f86 <HAL_TIM_ConfigClockSource+0x106>
 8002f0e:	d900      	bls.n	8002f12 <HAL_TIM_ConfigClockSource+0x92>
 8002f10:	e072      	b.n	8002ff8 <HAL_TIM_ConfigClockSource+0x178>
 8002f12:	2b40      	cmp	r3, #64	@ 0x40
 8002f14:	d057      	beq.n	8002fc6 <HAL_TIM_ConfigClockSource+0x146>
 8002f16:	d900      	bls.n	8002f1a <HAL_TIM_ConfigClockSource+0x9a>
 8002f18:	e06e      	b.n	8002ff8 <HAL_TIM_ConfigClockSource+0x178>
 8002f1a:	2b30      	cmp	r3, #48	@ 0x30
 8002f1c:	d063      	beq.n	8002fe6 <HAL_TIM_ConfigClockSource+0x166>
 8002f1e:	d86b      	bhi.n	8002ff8 <HAL_TIM_ConfigClockSource+0x178>
 8002f20:	2b20      	cmp	r3, #32
 8002f22:	d060      	beq.n	8002fe6 <HAL_TIM_ConfigClockSource+0x166>
 8002f24:	d868      	bhi.n	8002ff8 <HAL_TIM_ConfigClockSource+0x178>
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d05d      	beq.n	8002fe6 <HAL_TIM_ConfigClockSource+0x166>
 8002f2a:	2b10      	cmp	r3, #16
 8002f2c:	d05b      	beq.n	8002fe6 <HAL_TIM_ConfigClockSource+0x166>
 8002f2e:	e063      	b.n	8002ff8 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002f40:	f000 f99e 	bl	8003280 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	689b      	ldr	r3, [r3, #8]
 8002f4a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002f4c:	68bb      	ldr	r3, [r7, #8]
 8002f4e:	2277      	movs	r2, #119	@ 0x77
 8002f50:	4313      	orrs	r3, r2
 8002f52:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	68ba      	ldr	r2, [r7, #8]
 8002f5a:	609a      	str	r2, [r3, #8]
      break;
 8002f5c:	e052      	b.n	8003004 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002f6e:	f000 f987 	bl	8003280 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	689a      	ldr	r2, [r3, #8]
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	2180      	movs	r1, #128	@ 0x80
 8002f7e:	01c9      	lsls	r1, r1, #7
 8002f80:	430a      	orrs	r2, r1
 8002f82:	609a      	str	r2, [r3, #8]
      break;
 8002f84:	e03e      	b.n	8003004 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f92:	001a      	movs	r2, r3
 8002f94:	f000 f8f8 	bl	8003188 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	2150      	movs	r1, #80	@ 0x50
 8002f9e:	0018      	movs	r0, r3
 8002fa0:	f000 f952 	bl	8003248 <TIM_ITRx_SetConfig>
      break;
 8002fa4:	e02e      	b.n	8003004 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002fb2:	001a      	movs	r2, r3
 8002fb4:	f000 f916 	bl	80031e4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	2160      	movs	r1, #96	@ 0x60
 8002fbe:	0018      	movs	r0, r3
 8002fc0:	f000 f942 	bl	8003248 <TIM_ITRx_SetConfig>
      break;
 8002fc4:	e01e      	b.n	8003004 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002fd2:	001a      	movs	r2, r3
 8002fd4:	f000 f8d8 	bl	8003188 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	2140      	movs	r1, #64	@ 0x40
 8002fde:	0018      	movs	r0, r3
 8002fe0:	f000 f932 	bl	8003248 <TIM_ITRx_SetConfig>
      break;
 8002fe4:	e00e      	b.n	8003004 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681a      	ldr	r2, [r3, #0]
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	0019      	movs	r1, r3
 8002ff0:	0010      	movs	r0, r2
 8002ff2:	f000 f929 	bl	8003248 <TIM_ITRx_SetConfig>
      break;
 8002ff6:	e005      	b.n	8003004 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8002ff8:	230f      	movs	r3, #15
 8002ffa:	18fb      	adds	r3, r7, r3
 8002ffc:	2201      	movs	r2, #1
 8002ffe:	701a      	strb	r2, [r3, #0]
      break;
 8003000:	e000      	b.n	8003004 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8003002:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	223d      	movs	r2, #61	@ 0x3d
 8003008:	2101      	movs	r1, #1
 800300a:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	223c      	movs	r2, #60	@ 0x3c
 8003010:	2100      	movs	r1, #0
 8003012:	5499      	strb	r1, [r3, r2]

  return status;
 8003014:	230f      	movs	r3, #15
 8003016:	18fb      	adds	r3, r7, r3
 8003018:	781b      	ldrb	r3, [r3, #0]
}
 800301a:	0018      	movs	r0, r3
 800301c:	46bd      	mov	sp, r7
 800301e:	b004      	add	sp, #16
 8003020:	bd80      	pop	{r7, pc}
 8003022:	46c0      	nop			@ (mov r8, r8)
 8003024:	ffceff88 	.word	0xffceff88
 8003028:	ffff00ff 	.word	0xffff00ff

0800302c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	b082      	sub	sp, #8
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003034:	46c0      	nop			@ (mov r8, r8)
 8003036:	46bd      	mov	sp, r7
 8003038:	b002      	add	sp, #8
 800303a:	bd80      	pop	{r7, pc}

0800303c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b082      	sub	sp, #8
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003044:	46c0      	nop			@ (mov r8, r8)
 8003046:	46bd      	mov	sp, r7
 8003048:	b002      	add	sp, #8
 800304a:	bd80      	pop	{r7, pc}

0800304c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	b082      	sub	sp, #8
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003054:	46c0      	nop			@ (mov r8, r8)
 8003056:	46bd      	mov	sp, r7
 8003058:	b002      	add	sp, #8
 800305a:	bd80      	pop	{r7, pc}

0800305c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	b082      	sub	sp, #8
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003064:	46c0      	nop			@ (mov r8, r8)
 8003066:	46bd      	mov	sp, r7
 8003068:	b002      	add	sp, #8
 800306a:	bd80      	pop	{r7, pc}

0800306c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	b084      	sub	sp, #16
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
 8003074:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	4a3b      	ldr	r2, [pc, #236]	@ (800316c <TIM_Base_SetConfig+0x100>)
 8003080:	4293      	cmp	r3, r2
 8003082:	d008      	beq.n	8003096 <TIM_Base_SetConfig+0x2a>
 8003084:	687a      	ldr	r2, [r7, #4]
 8003086:	2380      	movs	r3, #128	@ 0x80
 8003088:	05db      	lsls	r3, r3, #23
 800308a:	429a      	cmp	r2, r3
 800308c:	d003      	beq.n	8003096 <TIM_Base_SetConfig+0x2a>
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	4a37      	ldr	r2, [pc, #220]	@ (8003170 <TIM_Base_SetConfig+0x104>)
 8003092:	4293      	cmp	r3, r2
 8003094:	d108      	bne.n	80030a8 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	2270      	movs	r2, #112	@ 0x70
 800309a:	4393      	bics	r3, r2
 800309c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	685b      	ldr	r3, [r3, #4]
 80030a2:	68fa      	ldr	r2, [r7, #12]
 80030a4:	4313      	orrs	r3, r2
 80030a6:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	4a30      	ldr	r2, [pc, #192]	@ (800316c <TIM_Base_SetConfig+0x100>)
 80030ac:	4293      	cmp	r3, r2
 80030ae:	d018      	beq.n	80030e2 <TIM_Base_SetConfig+0x76>
 80030b0:	687a      	ldr	r2, [r7, #4]
 80030b2:	2380      	movs	r3, #128	@ 0x80
 80030b4:	05db      	lsls	r3, r3, #23
 80030b6:	429a      	cmp	r2, r3
 80030b8:	d013      	beq.n	80030e2 <TIM_Base_SetConfig+0x76>
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	4a2c      	ldr	r2, [pc, #176]	@ (8003170 <TIM_Base_SetConfig+0x104>)
 80030be:	4293      	cmp	r3, r2
 80030c0:	d00f      	beq.n	80030e2 <TIM_Base_SetConfig+0x76>
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	4a2b      	ldr	r2, [pc, #172]	@ (8003174 <TIM_Base_SetConfig+0x108>)
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d00b      	beq.n	80030e2 <TIM_Base_SetConfig+0x76>
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	4a2a      	ldr	r2, [pc, #168]	@ (8003178 <TIM_Base_SetConfig+0x10c>)
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d007      	beq.n	80030e2 <TIM_Base_SetConfig+0x76>
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	4a29      	ldr	r2, [pc, #164]	@ (800317c <TIM_Base_SetConfig+0x110>)
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d003      	beq.n	80030e2 <TIM_Base_SetConfig+0x76>
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	4a28      	ldr	r2, [pc, #160]	@ (8003180 <TIM_Base_SetConfig+0x114>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	d108      	bne.n	80030f4 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	4a27      	ldr	r2, [pc, #156]	@ (8003184 <TIM_Base_SetConfig+0x118>)
 80030e6:	4013      	ands	r3, r2
 80030e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	68db      	ldr	r3, [r3, #12]
 80030ee:	68fa      	ldr	r2, [r7, #12]
 80030f0:	4313      	orrs	r3, r2
 80030f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	2280      	movs	r2, #128	@ 0x80
 80030f8:	4393      	bics	r3, r2
 80030fa:	001a      	movs	r2, r3
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	695b      	ldr	r3, [r3, #20]
 8003100:	4313      	orrs	r3, r2
 8003102:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	68fa      	ldr	r2, [r7, #12]
 8003108:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	689a      	ldr	r2, [r3, #8]
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003112:	683b      	ldr	r3, [r7, #0]
 8003114:	681a      	ldr	r2, [r3, #0]
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	4a13      	ldr	r2, [pc, #76]	@ (800316c <TIM_Base_SetConfig+0x100>)
 800311e:	4293      	cmp	r3, r2
 8003120:	d00b      	beq.n	800313a <TIM_Base_SetConfig+0xce>
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	4a14      	ldr	r2, [pc, #80]	@ (8003178 <TIM_Base_SetConfig+0x10c>)
 8003126:	4293      	cmp	r3, r2
 8003128:	d007      	beq.n	800313a <TIM_Base_SetConfig+0xce>
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	4a13      	ldr	r2, [pc, #76]	@ (800317c <TIM_Base_SetConfig+0x110>)
 800312e:	4293      	cmp	r3, r2
 8003130:	d003      	beq.n	800313a <TIM_Base_SetConfig+0xce>
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	4a12      	ldr	r2, [pc, #72]	@ (8003180 <TIM_Base_SetConfig+0x114>)
 8003136:	4293      	cmp	r3, r2
 8003138:	d103      	bne.n	8003142 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	691a      	ldr	r2, [r3, #16]
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	2201      	movs	r2, #1
 8003146:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	691b      	ldr	r3, [r3, #16]
 800314c:	2201      	movs	r2, #1
 800314e:	4013      	ands	r3, r2
 8003150:	2b01      	cmp	r3, #1
 8003152:	d106      	bne.n	8003162 <TIM_Base_SetConfig+0xf6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	691b      	ldr	r3, [r3, #16]
 8003158:	2201      	movs	r2, #1
 800315a:	4393      	bics	r3, r2
 800315c:	001a      	movs	r2, r3
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	611a      	str	r2, [r3, #16]
  }
}
 8003162:	46c0      	nop			@ (mov r8, r8)
 8003164:	46bd      	mov	sp, r7
 8003166:	b004      	add	sp, #16
 8003168:	bd80      	pop	{r7, pc}
 800316a:	46c0      	nop			@ (mov r8, r8)
 800316c:	40012c00 	.word	0x40012c00
 8003170:	40000400 	.word	0x40000400
 8003174:	40002000 	.word	0x40002000
 8003178:	40014000 	.word	0x40014000
 800317c:	40014400 	.word	0x40014400
 8003180:	40014800 	.word	0x40014800
 8003184:	fffffcff 	.word	0xfffffcff

08003188 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b086      	sub	sp, #24
 800318c:	af00      	add	r7, sp, #0
 800318e:	60f8      	str	r0, [r7, #12]
 8003190:	60b9      	str	r1, [r7, #8]
 8003192:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	6a1b      	ldr	r3, [r3, #32]
 8003198:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	6a1b      	ldr	r3, [r3, #32]
 800319e:	2201      	movs	r2, #1
 80031a0:	4393      	bics	r3, r2
 80031a2:	001a      	movs	r2, r3
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	699b      	ldr	r3, [r3, #24]
 80031ac:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80031ae:	693b      	ldr	r3, [r7, #16]
 80031b0:	22f0      	movs	r2, #240	@ 0xf0
 80031b2:	4393      	bics	r3, r2
 80031b4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	011b      	lsls	r3, r3, #4
 80031ba:	693a      	ldr	r2, [r7, #16]
 80031bc:	4313      	orrs	r3, r2
 80031be:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80031c0:	697b      	ldr	r3, [r7, #20]
 80031c2:	220a      	movs	r2, #10
 80031c4:	4393      	bics	r3, r2
 80031c6:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80031c8:	697a      	ldr	r2, [r7, #20]
 80031ca:	68bb      	ldr	r3, [r7, #8]
 80031cc:	4313      	orrs	r3, r2
 80031ce:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	693a      	ldr	r2, [r7, #16]
 80031d4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	697a      	ldr	r2, [r7, #20]
 80031da:	621a      	str	r2, [r3, #32]
}
 80031dc:	46c0      	nop			@ (mov r8, r8)
 80031de:	46bd      	mov	sp, r7
 80031e0:	b006      	add	sp, #24
 80031e2:	bd80      	pop	{r7, pc}

080031e4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b086      	sub	sp, #24
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	60f8      	str	r0, [r7, #12]
 80031ec:	60b9      	str	r1, [r7, #8]
 80031ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	6a1b      	ldr	r3, [r3, #32]
 80031f4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	6a1b      	ldr	r3, [r3, #32]
 80031fa:	2210      	movs	r2, #16
 80031fc:	4393      	bics	r3, r2
 80031fe:	001a      	movs	r2, r3
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	699b      	ldr	r3, [r3, #24]
 8003208:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800320a:	693b      	ldr	r3, [r7, #16]
 800320c:	4a0d      	ldr	r2, [pc, #52]	@ (8003244 <TIM_TI2_ConfigInputStage+0x60>)
 800320e:	4013      	ands	r3, r2
 8003210:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	031b      	lsls	r3, r3, #12
 8003216:	693a      	ldr	r2, [r7, #16]
 8003218:	4313      	orrs	r3, r2
 800321a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800321c:	697b      	ldr	r3, [r7, #20]
 800321e:	22a0      	movs	r2, #160	@ 0xa0
 8003220:	4393      	bics	r3, r2
 8003222:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003224:	68bb      	ldr	r3, [r7, #8]
 8003226:	011b      	lsls	r3, r3, #4
 8003228:	697a      	ldr	r2, [r7, #20]
 800322a:	4313      	orrs	r3, r2
 800322c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	693a      	ldr	r2, [r7, #16]
 8003232:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	697a      	ldr	r2, [r7, #20]
 8003238:	621a      	str	r2, [r3, #32]
}
 800323a:	46c0      	nop			@ (mov r8, r8)
 800323c:	46bd      	mov	sp, r7
 800323e:	b006      	add	sp, #24
 8003240:	bd80      	pop	{r7, pc}
 8003242:	46c0      	nop			@ (mov r8, r8)
 8003244:	ffff0fff 	.word	0xffff0fff

08003248 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b084      	sub	sp, #16
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
 8003250:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	689b      	ldr	r3, [r3, #8]
 8003256:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	4a08      	ldr	r2, [pc, #32]	@ (800327c <TIM_ITRx_SetConfig+0x34>)
 800325c:	4013      	ands	r3, r2
 800325e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003260:	683a      	ldr	r2, [r7, #0]
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	4313      	orrs	r3, r2
 8003266:	2207      	movs	r2, #7
 8003268:	4313      	orrs	r3, r2
 800326a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	68fa      	ldr	r2, [r7, #12]
 8003270:	609a      	str	r2, [r3, #8]
}
 8003272:	46c0      	nop			@ (mov r8, r8)
 8003274:	46bd      	mov	sp, r7
 8003276:	b004      	add	sp, #16
 8003278:	bd80      	pop	{r7, pc}
 800327a:	46c0      	nop			@ (mov r8, r8)
 800327c:	ffcfff8f 	.word	0xffcfff8f

08003280 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	b086      	sub	sp, #24
 8003284:	af00      	add	r7, sp, #0
 8003286:	60f8      	str	r0, [r7, #12]
 8003288:	60b9      	str	r1, [r7, #8]
 800328a:	607a      	str	r2, [r7, #4]
 800328c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	689b      	ldr	r3, [r3, #8]
 8003292:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003294:	697b      	ldr	r3, [r7, #20]
 8003296:	4a09      	ldr	r2, [pc, #36]	@ (80032bc <TIM_ETR_SetConfig+0x3c>)
 8003298:	4013      	ands	r3, r2
 800329a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	021a      	lsls	r2, r3, #8
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	431a      	orrs	r2, r3
 80032a4:	68bb      	ldr	r3, [r7, #8]
 80032a6:	4313      	orrs	r3, r2
 80032a8:	697a      	ldr	r2, [r7, #20]
 80032aa:	4313      	orrs	r3, r2
 80032ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	697a      	ldr	r2, [r7, #20]
 80032b2:	609a      	str	r2, [r3, #8]
}
 80032b4:	46c0      	nop			@ (mov r8, r8)
 80032b6:	46bd      	mov	sp, r7
 80032b8:	b006      	add	sp, #24
 80032ba:	bd80      	pop	{r7, pc}
 80032bc:	ffff00ff 	.word	0xffff00ff

080032c0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b084      	sub	sp, #16
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
 80032c8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	223c      	movs	r2, #60	@ 0x3c
 80032ce:	5c9b      	ldrb	r3, [r3, r2]
 80032d0:	2b01      	cmp	r3, #1
 80032d2:	d101      	bne.n	80032d8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80032d4:	2302      	movs	r3, #2
 80032d6:	e055      	b.n	8003384 <HAL_TIMEx_MasterConfigSynchronization+0xc4>
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	223c      	movs	r2, #60	@ 0x3c
 80032dc:	2101      	movs	r1, #1
 80032de:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	223d      	movs	r2, #61	@ 0x3d
 80032e4:	2102      	movs	r1, #2
 80032e6:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	685b      	ldr	r3, [r3, #4]
 80032ee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	689b      	ldr	r3, [r3, #8]
 80032f6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	4a23      	ldr	r2, [pc, #140]	@ (800338c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80032fe:	4293      	cmp	r3, r2
 8003300:	d108      	bne.n	8003314 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	4a22      	ldr	r2, [pc, #136]	@ (8003390 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003306:	4013      	ands	r3, r2
 8003308:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	685b      	ldr	r3, [r3, #4]
 800330e:	68fa      	ldr	r2, [r7, #12]
 8003310:	4313      	orrs	r3, r2
 8003312:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	2270      	movs	r2, #112	@ 0x70
 8003318:	4393      	bics	r3, r2
 800331a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	68fa      	ldr	r2, [r7, #12]
 8003322:	4313      	orrs	r3, r2
 8003324:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	68fa      	ldr	r2, [r7, #12]
 800332c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	4a16      	ldr	r2, [pc, #88]	@ (800338c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003334:	4293      	cmp	r3, r2
 8003336:	d00f      	beq.n	8003358 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681a      	ldr	r2, [r3, #0]
 800333c:	2380      	movs	r3, #128	@ 0x80
 800333e:	05db      	lsls	r3, r3, #23
 8003340:	429a      	cmp	r2, r3
 8003342:	d009      	beq.n	8003358 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	4a12      	ldr	r2, [pc, #72]	@ (8003394 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800334a:	4293      	cmp	r3, r2
 800334c:	d004      	beq.n	8003358 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	4a11      	ldr	r2, [pc, #68]	@ (8003398 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003354:	4293      	cmp	r3, r2
 8003356:	d10c      	bne.n	8003372 <HAL_TIMEx_MasterConfigSynchronization+0xb2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003358:	68bb      	ldr	r3, [r7, #8]
 800335a:	2280      	movs	r2, #128	@ 0x80
 800335c:	4393      	bics	r3, r2
 800335e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	689b      	ldr	r3, [r3, #8]
 8003364:	68ba      	ldr	r2, [r7, #8]
 8003366:	4313      	orrs	r3, r2
 8003368:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	68ba      	ldr	r2, [r7, #8]
 8003370:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	223d      	movs	r2, #61	@ 0x3d
 8003376:	2101      	movs	r1, #1
 8003378:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	223c      	movs	r2, #60	@ 0x3c
 800337e:	2100      	movs	r1, #0
 8003380:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003382:	2300      	movs	r3, #0
}
 8003384:	0018      	movs	r0, r3
 8003386:	46bd      	mov	sp, r7
 8003388:	b004      	add	sp, #16
 800338a:	bd80      	pop	{r7, pc}
 800338c:	40012c00 	.word	0x40012c00
 8003390:	ff0fffff 	.word	0xff0fffff
 8003394:	40000400 	.word	0x40000400
 8003398:	40014000 	.word	0x40014000

0800339c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b082      	sub	sp, #8
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80033a4:	46c0      	nop			@ (mov r8, r8)
 80033a6:	46bd      	mov	sp, r7
 80033a8:	b002      	add	sp, #8
 80033aa:	bd80      	pop	{r7, pc}

080033ac <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b082      	sub	sp, #8
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80033b4:	46c0      	nop			@ (mov r8, r8)
 80033b6:	46bd      	mov	sp, r7
 80033b8:	b002      	add	sp, #8
 80033ba:	bd80      	pop	{r7, pc}

080033bc <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	b082      	sub	sp, #8
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80033c4:	46c0      	nop			@ (mov r8, r8)
 80033c6:	46bd      	mov	sp, r7
 80033c8:	b002      	add	sp, #8
 80033ca:	bd80      	pop	{r7, pc}

080033cc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b082      	sub	sp, #8
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d101      	bne.n	80033de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80033da:	2301      	movs	r3, #1
 80033dc:	e046      	b.n	800346c <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	2288      	movs	r2, #136	@ 0x88
 80033e2:	589b      	ldr	r3, [r3, r2]
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d107      	bne.n	80033f8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2284      	movs	r2, #132	@ 0x84
 80033ec:	2100      	movs	r1, #0
 80033ee:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	0018      	movs	r0, r3
 80033f4:	f7fd fe38 	bl	8001068 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2288      	movs	r2, #136	@ 0x88
 80033fc:	2124      	movs	r1, #36	@ 0x24
 80033fe:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	681a      	ldr	r2, [r3, #0]
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	2101      	movs	r1, #1
 800340c:	438a      	bics	r2, r1
 800340e:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003414:	2b00      	cmp	r3, #0
 8003416:	d003      	beq.n	8003420 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	0018      	movs	r0, r3
 800341c:	f000 ff2e 	bl	800427c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	0018      	movs	r0, r3
 8003424:	f000 fc6c 	bl	8003d00 <UART_SetConfig>
 8003428:	0003      	movs	r3, r0
 800342a:	2b01      	cmp	r3, #1
 800342c:	d101      	bne.n	8003432 <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 800342e:	2301      	movs	r3, #1
 8003430:	e01c      	b.n	800346c <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	685a      	ldr	r2, [r3, #4]
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	490d      	ldr	r1, [pc, #52]	@ (8003474 <HAL_UART_Init+0xa8>)
 800343e:	400a      	ands	r2, r1
 8003440:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	689a      	ldr	r2, [r3, #8]
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	212a      	movs	r1, #42	@ 0x2a
 800344e:	438a      	bics	r2, r1
 8003450:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	681a      	ldr	r2, [r3, #0]
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	2101      	movs	r1, #1
 800345e:	430a      	orrs	r2, r1
 8003460:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	0018      	movs	r0, r3
 8003466:	f000 ffbd 	bl	80043e4 <UART_CheckIdleState>
 800346a:	0003      	movs	r3, r0
}
 800346c:	0018      	movs	r0, r3
 800346e:	46bd      	mov	sp, r7
 8003470:	b002      	add	sp, #8
 8003472:	bd80      	pop	{r7, pc}
 8003474:	ffffb7ff 	.word	0xffffb7ff

08003478 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	b08a      	sub	sp, #40	@ 0x28
 800347c:	af02      	add	r7, sp, #8
 800347e:	60f8      	str	r0, [r7, #12]
 8003480:	60b9      	str	r1, [r7, #8]
 8003482:	603b      	str	r3, [r7, #0]
 8003484:	1dbb      	adds	r3, r7, #6
 8003486:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	2288      	movs	r2, #136	@ 0x88
 800348c:	589b      	ldr	r3, [r3, r2]
 800348e:	2b20      	cmp	r3, #32
 8003490:	d000      	beq.n	8003494 <HAL_UART_Transmit+0x1c>
 8003492:	e090      	b.n	80035b6 <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003494:	68bb      	ldr	r3, [r7, #8]
 8003496:	2b00      	cmp	r3, #0
 8003498:	d003      	beq.n	80034a2 <HAL_UART_Transmit+0x2a>
 800349a:	1dbb      	adds	r3, r7, #6
 800349c:	881b      	ldrh	r3, [r3, #0]
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d101      	bne.n	80034a6 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 80034a2:	2301      	movs	r3, #1
 80034a4:	e088      	b.n	80035b8 <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	689a      	ldr	r2, [r3, #8]
 80034aa:	2380      	movs	r3, #128	@ 0x80
 80034ac:	015b      	lsls	r3, r3, #5
 80034ae:	429a      	cmp	r2, r3
 80034b0:	d109      	bne.n	80034c6 <HAL_UART_Transmit+0x4e>
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	691b      	ldr	r3, [r3, #16]
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d105      	bne.n	80034c6 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80034ba:	68bb      	ldr	r3, [r7, #8]
 80034bc:	2201      	movs	r2, #1
 80034be:	4013      	ands	r3, r2
 80034c0:	d001      	beq.n	80034c6 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 80034c2:	2301      	movs	r3, #1
 80034c4:	e078      	b.n	80035b8 <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	2290      	movs	r2, #144	@ 0x90
 80034ca:	2100      	movs	r1, #0
 80034cc:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	2288      	movs	r2, #136	@ 0x88
 80034d2:	2121      	movs	r1, #33	@ 0x21
 80034d4:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80034d6:	f7fd ff79 	bl	80013cc <HAL_GetTick>
 80034da:	0003      	movs	r3, r0
 80034dc:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	1dba      	adds	r2, r7, #6
 80034e2:	2154      	movs	r1, #84	@ 0x54
 80034e4:	8812      	ldrh	r2, [r2, #0]
 80034e6:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	1dba      	adds	r2, r7, #6
 80034ec:	2156      	movs	r1, #86	@ 0x56
 80034ee:	8812      	ldrh	r2, [r2, #0]
 80034f0:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	689a      	ldr	r2, [r3, #8]
 80034f6:	2380      	movs	r3, #128	@ 0x80
 80034f8:	015b      	lsls	r3, r3, #5
 80034fa:	429a      	cmp	r2, r3
 80034fc:	d108      	bne.n	8003510 <HAL_UART_Transmit+0x98>
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	691b      	ldr	r3, [r3, #16]
 8003502:	2b00      	cmp	r3, #0
 8003504:	d104      	bne.n	8003510 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 8003506:	2300      	movs	r3, #0
 8003508:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800350a:	68bb      	ldr	r3, [r7, #8]
 800350c:	61bb      	str	r3, [r7, #24]
 800350e:	e003      	b.n	8003518 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8003510:	68bb      	ldr	r3, [r7, #8]
 8003512:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003514:	2300      	movs	r3, #0
 8003516:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003518:	e030      	b.n	800357c <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800351a:	697a      	ldr	r2, [r7, #20]
 800351c:	68f8      	ldr	r0, [r7, #12]
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	9300      	str	r3, [sp, #0]
 8003522:	0013      	movs	r3, r2
 8003524:	2200      	movs	r2, #0
 8003526:	2180      	movs	r1, #128	@ 0x80
 8003528:	f001 f806 	bl	8004538 <UART_WaitOnFlagUntilTimeout>
 800352c:	1e03      	subs	r3, r0, #0
 800352e:	d005      	beq.n	800353c <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	2288      	movs	r2, #136	@ 0x88
 8003534:	2120      	movs	r1, #32
 8003536:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003538:	2303      	movs	r3, #3
 800353a:	e03d      	b.n	80035b8 <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 800353c:	69fb      	ldr	r3, [r7, #28]
 800353e:	2b00      	cmp	r3, #0
 8003540:	d10b      	bne.n	800355a <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003542:	69bb      	ldr	r3, [r7, #24]
 8003544:	881b      	ldrh	r3, [r3, #0]
 8003546:	001a      	movs	r2, r3
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	05d2      	lsls	r2, r2, #23
 800354e:	0dd2      	lsrs	r2, r2, #23
 8003550:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003552:	69bb      	ldr	r3, [r7, #24]
 8003554:	3302      	adds	r3, #2
 8003556:	61bb      	str	r3, [r7, #24]
 8003558:	e007      	b.n	800356a <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800355a:	69fb      	ldr	r3, [r7, #28]
 800355c:	781a      	ldrb	r2, [r3, #0]
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8003564:	69fb      	ldr	r3, [r7, #28]
 8003566:	3301      	adds	r3, #1
 8003568:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	2256      	movs	r2, #86	@ 0x56
 800356e:	5a9b      	ldrh	r3, [r3, r2]
 8003570:	b29b      	uxth	r3, r3
 8003572:	3b01      	subs	r3, #1
 8003574:	b299      	uxth	r1, r3
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	2256      	movs	r2, #86	@ 0x56
 800357a:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	2256      	movs	r2, #86	@ 0x56
 8003580:	5a9b      	ldrh	r3, [r3, r2]
 8003582:	b29b      	uxth	r3, r3
 8003584:	2b00      	cmp	r3, #0
 8003586:	d1c8      	bne.n	800351a <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003588:	697a      	ldr	r2, [r7, #20]
 800358a:	68f8      	ldr	r0, [r7, #12]
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	9300      	str	r3, [sp, #0]
 8003590:	0013      	movs	r3, r2
 8003592:	2200      	movs	r2, #0
 8003594:	2140      	movs	r1, #64	@ 0x40
 8003596:	f000 ffcf 	bl	8004538 <UART_WaitOnFlagUntilTimeout>
 800359a:	1e03      	subs	r3, r0, #0
 800359c:	d005      	beq.n	80035aa <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	2288      	movs	r2, #136	@ 0x88
 80035a2:	2120      	movs	r1, #32
 80035a4:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 80035a6:	2303      	movs	r3, #3
 80035a8:	e006      	b.n	80035b8 <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	2288      	movs	r2, #136	@ 0x88
 80035ae:	2120      	movs	r1, #32
 80035b0:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 80035b2:	2300      	movs	r3, #0
 80035b4:	e000      	b.n	80035b8 <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 80035b6:	2302      	movs	r3, #2
  }
}
 80035b8:	0018      	movs	r0, r3
 80035ba:	46bd      	mov	sp, r7
 80035bc:	b008      	add	sp, #32
 80035be:	bd80      	pop	{r7, pc}

080035c0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b088      	sub	sp, #32
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	60f8      	str	r0, [r7, #12]
 80035c8:	60b9      	str	r1, [r7, #8]
 80035ca:	1dbb      	adds	r3, r7, #6
 80035cc:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	228c      	movs	r2, #140	@ 0x8c
 80035d2:	589b      	ldr	r3, [r3, r2]
 80035d4:	2b20      	cmp	r3, #32
 80035d6:	d14a      	bne.n	800366e <HAL_UART_Receive_IT+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 80035d8:	68bb      	ldr	r3, [r7, #8]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d003      	beq.n	80035e6 <HAL_UART_Receive_IT+0x26>
 80035de:	1dbb      	adds	r3, r7, #6
 80035e0:	881b      	ldrh	r3, [r3, #0]
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d101      	bne.n	80035ea <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80035e6:	2301      	movs	r3, #1
 80035e8:	e042      	b.n	8003670 <HAL_UART_Receive_IT+0xb0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	689a      	ldr	r2, [r3, #8]
 80035ee:	2380      	movs	r3, #128	@ 0x80
 80035f0:	015b      	lsls	r3, r3, #5
 80035f2:	429a      	cmp	r2, r3
 80035f4:	d109      	bne.n	800360a <HAL_UART_Receive_IT+0x4a>
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	691b      	ldr	r3, [r3, #16]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d105      	bne.n	800360a <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80035fe:	68bb      	ldr	r3, [r7, #8]
 8003600:	2201      	movs	r2, #1
 8003602:	4013      	ands	r3, r2
 8003604:	d001      	beq.n	800360a <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 8003606:	2301      	movs	r3, #1
 8003608:	e032      	b.n	8003670 <HAL_UART_Receive_IT+0xb0>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	2200      	movs	r2, #0
 800360e:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	4a18      	ldr	r2, [pc, #96]	@ (8003678 <HAL_UART_Receive_IT+0xb8>)
 8003616:	4293      	cmp	r3, r2
 8003618:	d020      	beq.n	800365c <HAL_UART_Receive_IT+0x9c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	685a      	ldr	r2, [r3, #4]
 8003620:	2380      	movs	r3, #128	@ 0x80
 8003622:	041b      	lsls	r3, r3, #16
 8003624:	4013      	ands	r3, r2
 8003626:	d019      	beq.n	800365c <HAL_UART_Receive_IT+0x9c>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003628:	f3ef 8310 	mrs	r3, PRIMASK
 800362c:	613b      	str	r3, [r7, #16]
  return(result);
 800362e:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003630:	61fb      	str	r3, [r7, #28]
 8003632:	2301      	movs	r3, #1
 8003634:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003636:	697b      	ldr	r3, [r7, #20]
 8003638:	f383 8810 	msr	PRIMASK, r3
}
 800363c:	46c0      	nop			@ (mov r8, r8)
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	681a      	ldr	r2, [r3, #0]
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	2180      	movs	r1, #128	@ 0x80
 800364a:	04c9      	lsls	r1, r1, #19
 800364c:	430a      	orrs	r2, r1
 800364e:	601a      	str	r2, [r3, #0]
 8003650:	69fb      	ldr	r3, [r7, #28]
 8003652:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003654:	69bb      	ldr	r3, [r7, #24]
 8003656:	f383 8810 	msr	PRIMASK, r3
}
 800365a:	46c0      	nop			@ (mov r8, r8)
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800365c:	1dbb      	adds	r3, r7, #6
 800365e:	881a      	ldrh	r2, [r3, #0]
 8003660:	68b9      	ldr	r1, [r7, #8]
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	0018      	movs	r0, r3
 8003666:	f000 ffd7 	bl	8004618 <UART_Start_Receive_IT>
 800366a:	0003      	movs	r3, r0
 800366c:	e000      	b.n	8003670 <HAL_UART_Receive_IT+0xb0>
  }
  else
  {
    return HAL_BUSY;
 800366e:	2302      	movs	r3, #2
  }
}
 8003670:	0018      	movs	r0, r3
 8003672:	46bd      	mov	sp, r7
 8003674:	b008      	add	sp, #32
 8003676:	bd80      	pop	{r7, pc}
 8003678:	40008000 	.word	0x40008000

0800367c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800367c:	b5b0      	push	{r4, r5, r7, lr}
 800367e:	b0aa      	sub	sp, #168	@ 0xa8
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	69db      	ldr	r3, [r3, #28]
 800368a:	22a4      	movs	r2, #164	@ 0xa4
 800368c:	18b9      	adds	r1, r7, r2
 800368e:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	20a0      	movs	r0, #160	@ 0xa0
 8003698:	1839      	adds	r1, r7, r0
 800369a:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	689b      	ldr	r3, [r3, #8]
 80036a2:	249c      	movs	r4, #156	@ 0x9c
 80036a4:	1939      	adds	r1, r7, r4
 80036a6:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80036a8:	0011      	movs	r1, r2
 80036aa:	18bb      	adds	r3, r7, r2
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	4aa2      	ldr	r2, [pc, #648]	@ (8003938 <HAL_UART_IRQHandler+0x2bc>)
 80036b0:	4013      	ands	r3, r2
 80036b2:	2298      	movs	r2, #152	@ 0x98
 80036b4:	18bd      	adds	r5, r7, r2
 80036b6:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 80036b8:	18bb      	adds	r3, r7, r2
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d11a      	bne.n	80036f6 <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80036c0:	187b      	adds	r3, r7, r1
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	2220      	movs	r2, #32
 80036c6:	4013      	ands	r3, r2
 80036c8:	d015      	beq.n	80036f6 <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80036ca:	183b      	adds	r3, r7, r0
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	2220      	movs	r2, #32
 80036d0:	4013      	ands	r3, r2
 80036d2:	d105      	bne.n	80036e0 <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80036d4:	193b      	adds	r3, r7, r4
 80036d6:	681a      	ldr	r2, [r3, #0]
 80036d8:	2380      	movs	r3, #128	@ 0x80
 80036da:	055b      	lsls	r3, r3, #21
 80036dc:	4013      	ands	r3, r2
 80036de:	d00a      	beq.n	80036f6 <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d100      	bne.n	80036ea <HAL_UART_IRQHandler+0x6e>
 80036e8:	e2dc      	b.n	8003ca4 <HAL_UART_IRQHandler+0x628>
      {
        huart->RxISR(huart);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80036ee:	687a      	ldr	r2, [r7, #4]
 80036f0:	0010      	movs	r0, r2
 80036f2:	4798      	blx	r3
      }
      return;
 80036f4:	e2d6      	b.n	8003ca4 <HAL_UART_IRQHandler+0x628>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80036f6:	2398      	movs	r3, #152	@ 0x98
 80036f8:	18fb      	adds	r3, r7, r3
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d100      	bne.n	8003702 <HAL_UART_IRQHandler+0x86>
 8003700:	e122      	b.n	8003948 <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8003702:	239c      	movs	r3, #156	@ 0x9c
 8003704:	18fb      	adds	r3, r7, r3
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	4a8c      	ldr	r2, [pc, #560]	@ (800393c <HAL_UART_IRQHandler+0x2c0>)
 800370a:	4013      	ands	r3, r2
 800370c:	d106      	bne.n	800371c <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800370e:	23a0      	movs	r3, #160	@ 0xa0
 8003710:	18fb      	adds	r3, r7, r3
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4a8a      	ldr	r2, [pc, #552]	@ (8003940 <HAL_UART_IRQHandler+0x2c4>)
 8003716:	4013      	ands	r3, r2
 8003718:	d100      	bne.n	800371c <HAL_UART_IRQHandler+0xa0>
 800371a:	e115      	b.n	8003948 <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800371c:	23a4      	movs	r3, #164	@ 0xa4
 800371e:	18fb      	adds	r3, r7, r3
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	2201      	movs	r2, #1
 8003724:	4013      	ands	r3, r2
 8003726:	d012      	beq.n	800374e <HAL_UART_IRQHandler+0xd2>
 8003728:	23a0      	movs	r3, #160	@ 0xa0
 800372a:	18fb      	adds	r3, r7, r3
 800372c:	681a      	ldr	r2, [r3, #0]
 800372e:	2380      	movs	r3, #128	@ 0x80
 8003730:	005b      	lsls	r3, r3, #1
 8003732:	4013      	ands	r3, r2
 8003734:	d00b      	beq.n	800374e <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	2201      	movs	r2, #1
 800373c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	2290      	movs	r2, #144	@ 0x90
 8003742:	589b      	ldr	r3, [r3, r2]
 8003744:	2201      	movs	r2, #1
 8003746:	431a      	orrs	r2, r3
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2190      	movs	r1, #144	@ 0x90
 800374c:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800374e:	23a4      	movs	r3, #164	@ 0xa4
 8003750:	18fb      	adds	r3, r7, r3
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	2202      	movs	r2, #2
 8003756:	4013      	ands	r3, r2
 8003758:	d011      	beq.n	800377e <HAL_UART_IRQHandler+0x102>
 800375a:	239c      	movs	r3, #156	@ 0x9c
 800375c:	18fb      	adds	r3, r7, r3
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	2201      	movs	r2, #1
 8003762:	4013      	ands	r3, r2
 8003764:	d00b      	beq.n	800377e <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	2202      	movs	r2, #2
 800376c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	2290      	movs	r2, #144	@ 0x90
 8003772:	589b      	ldr	r3, [r3, r2]
 8003774:	2204      	movs	r2, #4
 8003776:	431a      	orrs	r2, r3
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2190      	movs	r1, #144	@ 0x90
 800377c:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800377e:	23a4      	movs	r3, #164	@ 0xa4
 8003780:	18fb      	adds	r3, r7, r3
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	2204      	movs	r2, #4
 8003786:	4013      	ands	r3, r2
 8003788:	d011      	beq.n	80037ae <HAL_UART_IRQHandler+0x132>
 800378a:	239c      	movs	r3, #156	@ 0x9c
 800378c:	18fb      	adds	r3, r7, r3
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	2201      	movs	r2, #1
 8003792:	4013      	ands	r3, r2
 8003794:	d00b      	beq.n	80037ae <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	2204      	movs	r2, #4
 800379c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	2290      	movs	r2, #144	@ 0x90
 80037a2:	589b      	ldr	r3, [r3, r2]
 80037a4:	2202      	movs	r2, #2
 80037a6:	431a      	orrs	r2, r3
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2190      	movs	r1, #144	@ 0x90
 80037ac:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80037ae:	23a4      	movs	r3, #164	@ 0xa4
 80037b0:	18fb      	adds	r3, r7, r3
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	2208      	movs	r2, #8
 80037b6:	4013      	ands	r3, r2
 80037b8:	d017      	beq.n	80037ea <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80037ba:	23a0      	movs	r3, #160	@ 0xa0
 80037bc:	18fb      	adds	r3, r7, r3
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	2220      	movs	r2, #32
 80037c2:	4013      	ands	r3, r2
 80037c4:	d105      	bne.n	80037d2 <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80037c6:	239c      	movs	r3, #156	@ 0x9c
 80037c8:	18fb      	adds	r3, r7, r3
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	4a5b      	ldr	r2, [pc, #364]	@ (800393c <HAL_UART_IRQHandler+0x2c0>)
 80037ce:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80037d0:	d00b      	beq.n	80037ea <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	2208      	movs	r2, #8
 80037d8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2290      	movs	r2, #144	@ 0x90
 80037de:	589b      	ldr	r3, [r3, r2]
 80037e0:	2208      	movs	r2, #8
 80037e2:	431a      	orrs	r2, r3
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2190      	movs	r1, #144	@ 0x90
 80037e8:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80037ea:	23a4      	movs	r3, #164	@ 0xa4
 80037ec:	18fb      	adds	r3, r7, r3
 80037ee:	681a      	ldr	r2, [r3, #0]
 80037f0:	2380      	movs	r3, #128	@ 0x80
 80037f2:	011b      	lsls	r3, r3, #4
 80037f4:	4013      	ands	r3, r2
 80037f6:	d013      	beq.n	8003820 <HAL_UART_IRQHandler+0x1a4>
 80037f8:	23a0      	movs	r3, #160	@ 0xa0
 80037fa:	18fb      	adds	r3, r7, r3
 80037fc:	681a      	ldr	r2, [r3, #0]
 80037fe:	2380      	movs	r3, #128	@ 0x80
 8003800:	04db      	lsls	r3, r3, #19
 8003802:	4013      	ands	r3, r2
 8003804:	d00c      	beq.n	8003820 <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	2280      	movs	r2, #128	@ 0x80
 800380c:	0112      	lsls	r2, r2, #4
 800380e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2290      	movs	r2, #144	@ 0x90
 8003814:	589b      	ldr	r3, [r3, r2]
 8003816:	2220      	movs	r2, #32
 8003818:	431a      	orrs	r2, r3
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2190      	movs	r1, #144	@ 0x90
 800381e:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2290      	movs	r2, #144	@ 0x90
 8003824:	589b      	ldr	r3, [r3, r2]
 8003826:	2b00      	cmp	r3, #0
 8003828:	d100      	bne.n	800382c <HAL_UART_IRQHandler+0x1b0>
 800382a:	e23d      	b.n	8003ca8 <HAL_UART_IRQHandler+0x62c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800382c:	23a4      	movs	r3, #164	@ 0xa4
 800382e:	18fb      	adds	r3, r7, r3
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	2220      	movs	r2, #32
 8003834:	4013      	ands	r3, r2
 8003836:	d015      	beq.n	8003864 <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8003838:	23a0      	movs	r3, #160	@ 0xa0
 800383a:	18fb      	adds	r3, r7, r3
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	2220      	movs	r2, #32
 8003840:	4013      	ands	r3, r2
 8003842:	d106      	bne.n	8003852 <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003844:	239c      	movs	r3, #156	@ 0x9c
 8003846:	18fb      	adds	r3, r7, r3
 8003848:	681a      	ldr	r2, [r3, #0]
 800384a:	2380      	movs	r3, #128	@ 0x80
 800384c:	055b      	lsls	r3, r3, #21
 800384e:	4013      	ands	r3, r2
 8003850:	d008      	beq.n	8003864 <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003856:	2b00      	cmp	r3, #0
 8003858:	d004      	beq.n	8003864 <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800385e:	687a      	ldr	r2, [r7, #4]
 8003860:	0010      	movs	r0, r2
 8003862:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2290      	movs	r2, #144	@ 0x90
 8003868:	589b      	ldr	r3, [r3, r2]
 800386a:	2194      	movs	r1, #148	@ 0x94
 800386c:	187a      	adds	r2, r7, r1
 800386e:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	689b      	ldr	r3, [r3, #8]
 8003876:	2240      	movs	r2, #64	@ 0x40
 8003878:	4013      	ands	r3, r2
 800387a:	2b40      	cmp	r3, #64	@ 0x40
 800387c:	d004      	beq.n	8003888 <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800387e:	187b      	adds	r3, r7, r1
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	2228      	movs	r2, #40	@ 0x28
 8003884:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003886:	d04c      	beq.n	8003922 <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	0018      	movs	r0, r3
 800388c:	f000 ffe8 	bl	8004860 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	689b      	ldr	r3, [r3, #8]
 8003896:	2240      	movs	r2, #64	@ 0x40
 8003898:	4013      	ands	r3, r2
 800389a:	2b40      	cmp	r3, #64	@ 0x40
 800389c:	d13c      	bne.n	8003918 <HAL_UART_IRQHandler+0x29c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800389e:	f3ef 8310 	mrs	r3, PRIMASK
 80038a2:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 80038a4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80038a6:	2090      	movs	r0, #144	@ 0x90
 80038a8:	183a      	adds	r2, r7, r0
 80038aa:	6013      	str	r3, [r2, #0]
 80038ac:	2301      	movs	r3, #1
 80038ae:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038b0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80038b2:	f383 8810 	msr	PRIMASK, r3
}
 80038b6:	46c0      	nop			@ (mov r8, r8)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	689a      	ldr	r2, [r3, #8]
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	2140      	movs	r1, #64	@ 0x40
 80038c4:	438a      	bics	r2, r1
 80038c6:	609a      	str	r2, [r3, #8]
 80038c8:	183b      	adds	r3, r7, r0
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038ce:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80038d0:	f383 8810 	msr	PRIMASK, r3
}
 80038d4:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2280      	movs	r2, #128	@ 0x80
 80038da:	589b      	ldr	r3, [r3, r2]
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d016      	beq.n	800390e <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2280      	movs	r2, #128	@ 0x80
 80038e4:	589b      	ldr	r3, [r3, r2]
 80038e6:	4a17      	ldr	r2, [pc, #92]	@ (8003944 <HAL_UART_IRQHandler+0x2c8>)
 80038e8:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2280      	movs	r2, #128	@ 0x80
 80038ee:	589b      	ldr	r3, [r3, r2]
 80038f0:	0018      	movs	r0, r3
 80038f2:	f7fd ff0f 	bl	8001714 <HAL_DMA_Abort_IT>
 80038f6:	1e03      	subs	r3, r0, #0
 80038f8:	d01c      	beq.n	8003934 <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	2280      	movs	r2, #128	@ 0x80
 80038fe:	589b      	ldr	r3, [r3, r2]
 8003900:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003902:	687a      	ldr	r2, [r7, #4]
 8003904:	2180      	movs	r1, #128	@ 0x80
 8003906:	5852      	ldr	r2, [r2, r1]
 8003908:	0010      	movs	r0, r2
 800390a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800390c:	e012      	b.n	8003934 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	0018      	movs	r0, r3
 8003912:	f000 f9e1 	bl	8003cd8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003916:	e00d      	b.n	8003934 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	0018      	movs	r0, r3
 800391c:	f000 f9dc 	bl	8003cd8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003920:	e008      	b.n	8003934 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	0018      	movs	r0, r3
 8003926:	f000 f9d7 	bl	8003cd8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	2290      	movs	r2, #144	@ 0x90
 800392e:	2100      	movs	r1, #0
 8003930:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8003932:	e1b9      	b.n	8003ca8 <HAL_UART_IRQHandler+0x62c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003934:	46c0      	nop			@ (mov r8, r8)
    return;
 8003936:	e1b7      	b.n	8003ca8 <HAL_UART_IRQHandler+0x62c>
 8003938:	0000080f 	.word	0x0000080f
 800393c:	10000001 	.word	0x10000001
 8003940:	04000120 	.word	0x04000120
 8003944:	0800492d 	.word	0x0800492d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800394c:	2b01      	cmp	r3, #1
 800394e:	d000      	beq.n	8003952 <HAL_UART_IRQHandler+0x2d6>
 8003950:	e13e      	b.n	8003bd0 <HAL_UART_IRQHandler+0x554>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003952:	23a4      	movs	r3, #164	@ 0xa4
 8003954:	18fb      	adds	r3, r7, r3
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	2210      	movs	r2, #16
 800395a:	4013      	ands	r3, r2
 800395c:	d100      	bne.n	8003960 <HAL_UART_IRQHandler+0x2e4>
 800395e:	e137      	b.n	8003bd0 <HAL_UART_IRQHandler+0x554>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003960:	23a0      	movs	r3, #160	@ 0xa0
 8003962:	18fb      	adds	r3, r7, r3
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	2210      	movs	r2, #16
 8003968:	4013      	ands	r3, r2
 800396a:	d100      	bne.n	800396e <HAL_UART_IRQHandler+0x2f2>
 800396c:	e130      	b.n	8003bd0 <HAL_UART_IRQHandler+0x554>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	2210      	movs	r2, #16
 8003974:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	689b      	ldr	r3, [r3, #8]
 800397c:	2240      	movs	r2, #64	@ 0x40
 800397e:	4013      	ands	r3, r2
 8003980:	2b40      	cmp	r3, #64	@ 0x40
 8003982:	d000      	beq.n	8003986 <HAL_UART_IRQHandler+0x30a>
 8003984:	e0a4      	b.n	8003ad0 <HAL_UART_IRQHandler+0x454>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	2280      	movs	r2, #128	@ 0x80
 800398a:	589b      	ldr	r3, [r3, r2]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	685a      	ldr	r2, [r3, #4]
 8003990:	217e      	movs	r1, #126	@ 0x7e
 8003992:	187b      	adds	r3, r7, r1
 8003994:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8003996:	187b      	adds	r3, r7, r1
 8003998:	881b      	ldrh	r3, [r3, #0]
 800399a:	2b00      	cmp	r3, #0
 800399c:	d100      	bne.n	80039a0 <HAL_UART_IRQHandler+0x324>
 800399e:	e185      	b.n	8003cac <HAL_UART_IRQHandler+0x630>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	225c      	movs	r2, #92	@ 0x5c
 80039a4:	5a9b      	ldrh	r3, [r3, r2]
 80039a6:	187a      	adds	r2, r7, r1
 80039a8:	8812      	ldrh	r2, [r2, #0]
 80039aa:	429a      	cmp	r2, r3
 80039ac:	d300      	bcc.n	80039b0 <HAL_UART_IRQHandler+0x334>
 80039ae:	e17d      	b.n	8003cac <HAL_UART_IRQHandler+0x630>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	187a      	adds	r2, r7, r1
 80039b4:	215e      	movs	r1, #94	@ 0x5e
 80039b6:	8812      	ldrh	r2, [r2, #0]
 80039b8:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	2280      	movs	r2, #128	@ 0x80
 80039be:	589b      	ldr	r3, [r3, r2]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	2220      	movs	r2, #32
 80039c6:	4013      	ands	r3, r2
 80039c8:	d170      	bne.n	8003aac <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80039ca:	f3ef 8310 	mrs	r3, PRIMASK
 80039ce:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 80039d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80039d2:	67bb      	str	r3, [r7, #120]	@ 0x78
 80039d4:	2301      	movs	r3, #1
 80039d6:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80039da:	f383 8810 	msr	PRIMASK, r3
}
 80039de:	46c0      	nop			@ (mov r8, r8)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	681a      	ldr	r2, [r3, #0]
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	49b4      	ldr	r1, [pc, #720]	@ (8003cbc <HAL_UART_IRQHandler+0x640>)
 80039ec:	400a      	ands	r2, r1
 80039ee:	601a      	str	r2, [r3, #0]
 80039f0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80039f2:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80039f6:	f383 8810 	msr	PRIMASK, r3
}
 80039fa:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80039fc:	f3ef 8310 	mrs	r3, PRIMASK
 8003a00:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 8003a02:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a04:	677b      	str	r3, [r7, #116]	@ 0x74
 8003a06:	2301      	movs	r3, #1
 8003a08:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a0a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003a0c:	f383 8810 	msr	PRIMASK, r3
}
 8003a10:	46c0      	nop			@ (mov r8, r8)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	689a      	ldr	r2, [r3, #8]
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	2101      	movs	r1, #1
 8003a1e:	438a      	bics	r2, r1
 8003a20:	609a      	str	r2, [r3, #8]
 8003a22:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003a24:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a26:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003a28:	f383 8810 	msr	PRIMASK, r3
}
 8003a2c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a2e:	f3ef 8310 	mrs	r3, PRIMASK
 8003a32:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 8003a34:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003a36:	673b      	str	r3, [r7, #112]	@ 0x70
 8003a38:	2301      	movs	r3, #1
 8003a3a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a3c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003a3e:	f383 8810 	msr	PRIMASK, r3
}
 8003a42:	46c0      	nop			@ (mov r8, r8)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	689a      	ldr	r2, [r3, #8]
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	2140      	movs	r1, #64	@ 0x40
 8003a50:	438a      	bics	r2, r1
 8003a52:	609a      	str	r2, [r3, #8]
 8003a54:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003a56:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a58:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003a5a:	f383 8810 	msr	PRIMASK, r3
}
 8003a5e:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	228c      	movs	r2, #140	@ 0x8c
 8003a64:	2120      	movs	r1, #32
 8003a66:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a6e:	f3ef 8310 	mrs	r3, PRIMASK
 8003a72:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 8003a74:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a76:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003a78:	2301      	movs	r3, #1
 8003a7a:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a7c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003a7e:	f383 8810 	msr	PRIMASK, r3
}
 8003a82:	46c0      	nop			@ (mov r8, r8)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	681a      	ldr	r2, [r3, #0]
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	2110      	movs	r1, #16
 8003a90:	438a      	bics	r2, r1
 8003a92:	601a      	str	r2, [r3, #0]
 8003a94:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003a96:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a98:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003a9a:	f383 8810 	msr	PRIMASK, r3
}
 8003a9e:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2280      	movs	r2, #128	@ 0x80
 8003aa4:	589b      	ldr	r3, [r3, r2]
 8003aa6:	0018      	movs	r0, r3
 8003aa8:	f7fd fdd2 	bl	8001650 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2202      	movs	r2, #2
 8003ab0:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	225c      	movs	r2, #92	@ 0x5c
 8003ab6:	5a9a      	ldrh	r2, [r3, r2]
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	215e      	movs	r1, #94	@ 0x5e
 8003abc:	5a5b      	ldrh	r3, [r3, r1]
 8003abe:	b29b      	uxth	r3, r3
 8003ac0:	1ad3      	subs	r3, r2, r3
 8003ac2:	b29a      	uxth	r2, r3
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	0011      	movs	r1, r2
 8003ac8:	0018      	movs	r0, r3
 8003aca:	f000 f90d 	bl	8003ce8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003ace:	e0ed      	b.n	8003cac <HAL_UART_IRQHandler+0x630>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	225c      	movs	r2, #92	@ 0x5c
 8003ad4:	5a99      	ldrh	r1, [r3, r2]
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	225e      	movs	r2, #94	@ 0x5e
 8003ada:	5a9b      	ldrh	r3, [r3, r2]
 8003adc:	b29a      	uxth	r2, r3
 8003ade:	208e      	movs	r0, #142	@ 0x8e
 8003ae0:	183b      	adds	r3, r7, r0
 8003ae2:	1a8a      	subs	r2, r1, r2
 8003ae4:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	225e      	movs	r2, #94	@ 0x5e
 8003aea:	5a9b      	ldrh	r3, [r3, r2]
 8003aec:	b29b      	uxth	r3, r3
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d100      	bne.n	8003af4 <HAL_UART_IRQHandler+0x478>
 8003af2:	e0dd      	b.n	8003cb0 <HAL_UART_IRQHandler+0x634>
          && (nb_rx_data > 0U))
 8003af4:	183b      	adds	r3, r7, r0
 8003af6:	881b      	ldrh	r3, [r3, #0]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d100      	bne.n	8003afe <HAL_UART_IRQHandler+0x482>
 8003afc:	e0d8      	b.n	8003cb0 <HAL_UART_IRQHandler+0x634>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003afe:	f3ef 8310 	mrs	r3, PRIMASK
 8003b02:	60fb      	str	r3, [r7, #12]
  return(result);
 8003b04:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003b06:	2488      	movs	r4, #136	@ 0x88
 8003b08:	193a      	adds	r2, r7, r4
 8003b0a:	6013      	str	r3, [r2, #0]
 8003b0c:	2301      	movs	r3, #1
 8003b0e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b10:	693b      	ldr	r3, [r7, #16]
 8003b12:	f383 8810 	msr	PRIMASK, r3
}
 8003b16:	46c0      	nop			@ (mov r8, r8)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	681a      	ldr	r2, [r3, #0]
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	4967      	ldr	r1, [pc, #412]	@ (8003cc0 <HAL_UART_IRQHandler+0x644>)
 8003b24:	400a      	ands	r2, r1
 8003b26:	601a      	str	r2, [r3, #0]
 8003b28:	193b      	adds	r3, r7, r4
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b2e:	697b      	ldr	r3, [r7, #20]
 8003b30:	f383 8810 	msr	PRIMASK, r3
}
 8003b34:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003b36:	f3ef 8310 	mrs	r3, PRIMASK
 8003b3a:	61bb      	str	r3, [r7, #24]
  return(result);
 8003b3c:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003b3e:	2484      	movs	r4, #132	@ 0x84
 8003b40:	193a      	adds	r2, r7, r4
 8003b42:	6013      	str	r3, [r2, #0]
 8003b44:	2301      	movs	r3, #1
 8003b46:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b48:	69fb      	ldr	r3, [r7, #28]
 8003b4a:	f383 8810 	msr	PRIMASK, r3
}
 8003b4e:	46c0      	nop			@ (mov r8, r8)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	689a      	ldr	r2, [r3, #8]
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	495a      	ldr	r1, [pc, #360]	@ (8003cc4 <HAL_UART_IRQHandler+0x648>)
 8003b5c:	400a      	ands	r2, r1
 8003b5e:	609a      	str	r2, [r3, #8]
 8003b60:	193b      	adds	r3, r7, r4
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b66:	6a3b      	ldr	r3, [r7, #32]
 8003b68:	f383 8810 	msr	PRIMASK, r3
}
 8003b6c:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	228c      	movs	r2, #140	@ 0x8c
 8003b72:	2120      	movs	r1, #32
 8003b74:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	2200      	movs	r2, #0
 8003b7a:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2200      	movs	r2, #0
 8003b80:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003b82:	f3ef 8310 	mrs	r3, PRIMASK
 8003b86:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8003b88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b8a:	2480      	movs	r4, #128	@ 0x80
 8003b8c:	193a      	adds	r2, r7, r4
 8003b8e:	6013      	str	r3, [r2, #0]
 8003b90:	2301      	movs	r3, #1
 8003b92:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b96:	f383 8810 	msr	PRIMASK, r3
}
 8003b9a:	46c0      	nop			@ (mov r8, r8)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	681a      	ldr	r2, [r3, #0]
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	2110      	movs	r1, #16
 8003ba8:	438a      	bics	r2, r1
 8003baa:	601a      	str	r2, [r3, #0]
 8003bac:	193b      	adds	r3, r7, r4
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003bb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003bb4:	f383 8810 	msr	PRIMASK, r3
}
 8003bb8:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	2202      	movs	r2, #2
 8003bbe:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003bc0:	183b      	adds	r3, r7, r0
 8003bc2:	881a      	ldrh	r2, [r3, #0]
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	0011      	movs	r1, r2
 8003bc8:	0018      	movs	r0, r3
 8003bca:	f000 f88d 	bl	8003ce8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003bce:	e06f      	b.n	8003cb0 <HAL_UART_IRQHandler+0x634>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003bd0:	23a4      	movs	r3, #164	@ 0xa4
 8003bd2:	18fb      	adds	r3, r7, r3
 8003bd4:	681a      	ldr	r2, [r3, #0]
 8003bd6:	2380      	movs	r3, #128	@ 0x80
 8003bd8:	035b      	lsls	r3, r3, #13
 8003bda:	4013      	ands	r3, r2
 8003bdc:	d010      	beq.n	8003c00 <HAL_UART_IRQHandler+0x584>
 8003bde:	239c      	movs	r3, #156	@ 0x9c
 8003be0:	18fb      	adds	r3, r7, r3
 8003be2:	681a      	ldr	r2, [r3, #0]
 8003be4:	2380      	movs	r3, #128	@ 0x80
 8003be6:	03db      	lsls	r3, r3, #15
 8003be8:	4013      	ands	r3, r2
 8003bea:	d009      	beq.n	8003c00 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	2280      	movs	r2, #128	@ 0x80
 8003bf2:	0352      	lsls	r2, r2, #13
 8003bf4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	0018      	movs	r0, r3
 8003bfa:	f001 fbeb 	bl	80053d4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003bfe:	e05a      	b.n	8003cb6 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8003c00:	23a4      	movs	r3, #164	@ 0xa4
 8003c02:	18fb      	adds	r3, r7, r3
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	2280      	movs	r2, #128	@ 0x80
 8003c08:	4013      	ands	r3, r2
 8003c0a:	d016      	beq.n	8003c3a <HAL_UART_IRQHandler+0x5be>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8003c0c:	23a0      	movs	r3, #160	@ 0xa0
 8003c0e:	18fb      	adds	r3, r7, r3
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	2280      	movs	r2, #128	@ 0x80
 8003c14:	4013      	ands	r3, r2
 8003c16:	d106      	bne.n	8003c26 <HAL_UART_IRQHandler+0x5aa>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8003c18:	239c      	movs	r3, #156	@ 0x9c
 8003c1a:	18fb      	adds	r3, r7, r3
 8003c1c:	681a      	ldr	r2, [r3, #0]
 8003c1e:	2380      	movs	r3, #128	@ 0x80
 8003c20:	041b      	lsls	r3, r3, #16
 8003c22:	4013      	ands	r3, r2
 8003c24:	d009      	beq.n	8003c3a <HAL_UART_IRQHandler+0x5be>
  {
    if (huart->TxISR != NULL)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d042      	beq.n	8003cb4 <HAL_UART_IRQHandler+0x638>
    {
      huart->TxISR(huart);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003c32:	687a      	ldr	r2, [r7, #4]
 8003c34:	0010      	movs	r0, r2
 8003c36:	4798      	blx	r3
    }
    return;
 8003c38:	e03c      	b.n	8003cb4 <HAL_UART_IRQHandler+0x638>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003c3a:	23a4      	movs	r3, #164	@ 0xa4
 8003c3c:	18fb      	adds	r3, r7, r3
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	2240      	movs	r2, #64	@ 0x40
 8003c42:	4013      	ands	r3, r2
 8003c44:	d00a      	beq.n	8003c5c <HAL_UART_IRQHandler+0x5e0>
 8003c46:	23a0      	movs	r3, #160	@ 0xa0
 8003c48:	18fb      	adds	r3, r7, r3
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	2240      	movs	r2, #64	@ 0x40
 8003c4e:	4013      	ands	r3, r2
 8003c50:	d004      	beq.n	8003c5c <HAL_UART_IRQHandler+0x5e0>
  {
    UART_EndTransmit_IT(huart);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	0018      	movs	r0, r3
 8003c56:	f000 fe80 	bl	800495a <UART_EndTransmit_IT>
    return;
 8003c5a:	e02c      	b.n	8003cb6 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8003c5c:	23a4      	movs	r3, #164	@ 0xa4
 8003c5e:	18fb      	adds	r3, r7, r3
 8003c60:	681a      	ldr	r2, [r3, #0]
 8003c62:	2380      	movs	r3, #128	@ 0x80
 8003c64:	041b      	lsls	r3, r3, #16
 8003c66:	4013      	ands	r3, r2
 8003c68:	d00b      	beq.n	8003c82 <HAL_UART_IRQHandler+0x606>
 8003c6a:	23a0      	movs	r3, #160	@ 0xa0
 8003c6c:	18fb      	adds	r3, r7, r3
 8003c6e:	681a      	ldr	r2, [r3, #0]
 8003c70:	2380      	movs	r3, #128	@ 0x80
 8003c72:	05db      	lsls	r3, r3, #23
 8003c74:	4013      	ands	r3, r2
 8003c76:	d004      	beq.n	8003c82 <HAL_UART_IRQHandler+0x606>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	0018      	movs	r0, r3
 8003c7c:	f001 fbba 	bl	80053f4 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003c80:	e019      	b.n	8003cb6 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8003c82:	23a4      	movs	r3, #164	@ 0xa4
 8003c84:	18fb      	adds	r3, r7, r3
 8003c86:	681a      	ldr	r2, [r3, #0]
 8003c88:	2380      	movs	r3, #128	@ 0x80
 8003c8a:	045b      	lsls	r3, r3, #17
 8003c8c:	4013      	ands	r3, r2
 8003c8e:	d012      	beq.n	8003cb6 <HAL_UART_IRQHandler+0x63a>
 8003c90:	23a0      	movs	r3, #160	@ 0xa0
 8003c92:	18fb      	adds	r3, r7, r3
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	da0d      	bge.n	8003cb6 <HAL_UART_IRQHandler+0x63a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	0018      	movs	r0, r3
 8003c9e:	f001 fba1 	bl	80053e4 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003ca2:	e008      	b.n	8003cb6 <HAL_UART_IRQHandler+0x63a>
      return;
 8003ca4:	46c0      	nop			@ (mov r8, r8)
 8003ca6:	e006      	b.n	8003cb6 <HAL_UART_IRQHandler+0x63a>
    return;
 8003ca8:	46c0      	nop			@ (mov r8, r8)
 8003caa:	e004      	b.n	8003cb6 <HAL_UART_IRQHandler+0x63a>
      return;
 8003cac:	46c0      	nop			@ (mov r8, r8)
 8003cae:	e002      	b.n	8003cb6 <HAL_UART_IRQHandler+0x63a>
      return;
 8003cb0:	46c0      	nop			@ (mov r8, r8)
 8003cb2:	e000      	b.n	8003cb6 <HAL_UART_IRQHandler+0x63a>
    return;
 8003cb4:	46c0      	nop			@ (mov r8, r8)
  }
}
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	b02a      	add	sp, #168	@ 0xa8
 8003cba:	bdb0      	pop	{r4, r5, r7, pc}
 8003cbc:	fffffeff 	.word	0xfffffeff
 8003cc0:	fffffedf 	.word	0xfffffedf
 8003cc4:	effffffe 	.word	0xeffffffe

08003cc8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b082      	sub	sp, #8
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003cd0:	46c0      	nop			@ (mov r8, r8)
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	b002      	add	sp, #8
 8003cd6:	bd80      	pop	{r7, pc}

08003cd8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	b082      	sub	sp, #8
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003ce0:	46c0      	nop			@ (mov r8, r8)
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	b002      	add	sp, #8
 8003ce6:	bd80      	pop	{r7, pc}

08003ce8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	b082      	sub	sp, #8
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
 8003cf0:	000a      	movs	r2, r1
 8003cf2:	1cbb      	adds	r3, r7, #2
 8003cf4:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003cf6:	46c0      	nop			@ (mov r8, r8)
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	b002      	add	sp, #8
 8003cfc:	bd80      	pop	{r7, pc}
	...

08003d00 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003d00:	b5b0      	push	{r4, r5, r7, lr}
 8003d02:	b090      	sub	sp, #64	@ 0x40
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003d08:	231a      	movs	r3, #26
 8003d0a:	2220      	movs	r2, #32
 8003d0c:	189b      	adds	r3, r3, r2
 8003d0e:	19db      	adds	r3, r3, r7
 8003d10:	2200      	movs	r2, #0
 8003d12:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003d14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d16:	689a      	ldr	r2, [r3, #8]
 8003d18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d1a:	691b      	ldr	r3, [r3, #16]
 8003d1c:	431a      	orrs	r2, r3
 8003d1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d20:	695b      	ldr	r3, [r3, #20]
 8003d22:	431a      	orrs	r2, r3
 8003d24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d26:	69db      	ldr	r3, [r3, #28]
 8003d28:	4313      	orrs	r3, r2
 8003d2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003d2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	4aaf      	ldr	r2, [pc, #700]	@ (8003ff0 <UART_SetConfig+0x2f0>)
 8003d34:	4013      	ands	r3, r2
 8003d36:	0019      	movs	r1, r3
 8003d38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d3a:	681a      	ldr	r2, [r3, #0]
 8003d3c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003d3e:	430b      	orrs	r3, r1
 8003d40:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003d42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	685b      	ldr	r3, [r3, #4]
 8003d48:	4aaa      	ldr	r2, [pc, #680]	@ (8003ff4 <UART_SetConfig+0x2f4>)
 8003d4a:	4013      	ands	r3, r2
 8003d4c:	0018      	movs	r0, r3
 8003d4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d50:	68d9      	ldr	r1, [r3, #12]
 8003d52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d54:	681a      	ldr	r2, [r3, #0]
 8003d56:	0003      	movs	r3, r0
 8003d58:	430b      	orrs	r3, r1
 8003d5a:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003d5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d5e:	699b      	ldr	r3, [r3, #24]
 8003d60:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003d62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	4aa4      	ldr	r2, [pc, #656]	@ (8003ff8 <UART_SetConfig+0x2f8>)
 8003d68:	4293      	cmp	r3, r2
 8003d6a:	d004      	beq.n	8003d76 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003d6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d6e:	6a1b      	ldr	r3, [r3, #32]
 8003d70:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003d72:	4313      	orrs	r3, r2
 8003d74:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003d76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	689b      	ldr	r3, [r3, #8]
 8003d7c:	4a9f      	ldr	r2, [pc, #636]	@ (8003ffc <UART_SetConfig+0x2fc>)
 8003d7e:	4013      	ands	r3, r2
 8003d80:	0019      	movs	r1, r3
 8003d82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d84:	681a      	ldr	r2, [r3, #0]
 8003d86:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003d88:	430b      	orrs	r3, r1
 8003d8a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003d8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d92:	220f      	movs	r2, #15
 8003d94:	4393      	bics	r3, r2
 8003d96:	0018      	movs	r0, r3
 8003d98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d9a:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8003d9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d9e:	681a      	ldr	r2, [r3, #0]
 8003da0:	0003      	movs	r3, r0
 8003da2:	430b      	orrs	r3, r1
 8003da4:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003da6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	4a95      	ldr	r2, [pc, #596]	@ (8004000 <UART_SetConfig+0x300>)
 8003dac:	4293      	cmp	r3, r2
 8003dae:	d131      	bne.n	8003e14 <UART_SetConfig+0x114>
 8003db0:	4b94      	ldr	r3, [pc, #592]	@ (8004004 <UART_SetConfig+0x304>)
 8003db2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003db4:	2203      	movs	r2, #3
 8003db6:	4013      	ands	r3, r2
 8003db8:	2b03      	cmp	r3, #3
 8003dba:	d01d      	beq.n	8003df8 <UART_SetConfig+0xf8>
 8003dbc:	d823      	bhi.n	8003e06 <UART_SetConfig+0x106>
 8003dbe:	2b02      	cmp	r3, #2
 8003dc0:	d00c      	beq.n	8003ddc <UART_SetConfig+0xdc>
 8003dc2:	d820      	bhi.n	8003e06 <UART_SetConfig+0x106>
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d002      	beq.n	8003dce <UART_SetConfig+0xce>
 8003dc8:	2b01      	cmp	r3, #1
 8003dca:	d00e      	beq.n	8003dea <UART_SetConfig+0xea>
 8003dcc:	e01b      	b.n	8003e06 <UART_SetConfig+0x106>
 8003dce:	231b      	movs	r3, #27
 8003dd0:	2220      	movs	r2, #32
 8003dd2:	189b      	adds	r3, r3, r2
 8003dd4:	19db      	adds	r3, r3, r7
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	701a      	strb	r2, [r3, #0]
 8003dda:	e0b4      	b.n	8003f46 <UART_SetConfig+0x246>
 8003ddc:	231b      	movs	r3, #27
 8003dde:	2220      	movs	r2, #32
 8003de0:	189b      	adds	r3, r3, r2
 8003de2:	19db      	adds	r3, r3, r7
 8003de4:	2202      	movs	r2, #2
 8003de6:	701a      	strb	r2, [r3, #0]
 8003de8:	e0ad      	b.n	8003f46 <UART_SetConfig+0x246>
 8003dea:	231b      	movs	r3, #27
 8003dec:	2220      	movs	r2, #32
 8003dee:	189b      	adds	r3, r3, r2
 8003df0:	19db      	adds	r3, r3, r7
 8003df2:	2204      	movs	r2, #4
 8003df4:	701a      	strb	r2, [r3, #0]
 8003df6:	e0a6      	b.n	8003f46 <UART_SetConfig+0x246>
 8003df8:	231b      	movs	r3, #27
 8003dfa:	2220      	movs	r2, #32
 8003dfc:	189b      	adds	r3, r3, r2
 8003dfe:	19db      	adds	r3, r3, r7
 8003e00:	2208      	movs	r2, #8
 8003e02:	701a      	strb	r2, [r3, #0]
 8003e04:	e09f      	b.n	8003f46 <UART_SetConfig+0x246>
 8003e06:	231b      	movs	r3, #27
 8003e08:	2220      	movs	r2, #32
 8003e0a:	189b      	adds	r3, r3, r2
 8003e0c:	19db      	adds	r3, r3, r7
 8003e0e:	2210      	movs	r2, #16
 8003e10:	701a      	strb	r2, [r3, #0]
 8003e12:	e098      	b.n	8003f46 <UART_SetConfig+0x246>
 8003e14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	4a7b      	ldr	r2, [pc, #492]	@ (8004008 <UART_SetConfig+0x308>)
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	d131      	bne.n	8003e82 <UART_SetConfig+0x182>
 8003e1e:	4b79      	ldr	r3, [pc, #484]	@ (8004004 <UART_SetConfig+0x304>)
 8003e20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e22:	220c      	movs	r2, #12
 8003e24:	4013      	ands	r3, r2
 8003e26:	2b0c      	cmp	r3, #12
 8003e28:	d01d      	beq.n	8003e66 <UART_SetConfig+0x166>
 8003e2a:	d823      	bhi.n	8003e74 <UART_SetConfig+0x174>
 8003e2c:	2b08      	cmp	r3, #8
 8003e2e:	d00c      	beq.n	8003e4a <UART_SetConfig+0x14a>
 8003e30:	d820      	bhi.n	8003e74 <UART_SetConfig+0x174>
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d002      	beq.n	8003e3c <UART_SetConfig+0x13c>
 8003e36:	2b04      	cmp	r3, #4
 8003e38:	d00e      	beq.n	8003e58 <UART_SetConfig+0x158>
 8003e3a:	e01b      	b.n	8003e74 <UART_SetConfig+0x174>
 8003e3c:	231b      	movs	r3, #27
 8003e3e:	2220      	movs	r2, #32
 8003e40:	189b      	adds	r3, r3, r2
 8003e42:	19db      	adds	r3, r3, r7
 8003e44:	2200      	movs	r2, #0
 8003e46:	701a      	strb	r2, [r3, #0]
 8003e48:	e07d      	b.n	8003f46 <UART_SetConfig+0x246>
 8003e4a:	231b      	movs	r3, #27
 8003e4c:	2220      	movs	r2, #32
 8003e4e:	189b      	adds	r3, r3, r2
 8003e50:	19db      	adds	r3, r3, r7
 8003e52:	2202      	movs	r2, #2
 8003e54:	701a      	strb	r2, [r3, #0]
 8003e56:	e076      	b.n	8003f46 <UART_SetConfig+0x246>
 8003e58:	231b      	movs	r3, #27
 8003e5a:	2220      	movs	r2, #32
 8003e5c:	189b      	adds	r3, r3, r2
 8003e5e:	19db      	adds	r3, r3, r7
 8003e60:	2204      	movs	r2, #4
 8003e62:	701a      	strb	r2, [r3, #0]
 8003e64:	e06f      	b.n	8003f46 <UART_SetConfig+0x246>
 8003e66:	231b      	movs	r3, #27
 8003e68:	2220      	movs	r2, #32
 8003e6a:	189b      	adds	r3, r3, r2
 8003e6c:	19db      	adds	r3, r3, r7
 8003e6e:	2208      	movs	r2, #8
 8003e70:	701a      	strb	r2, [r3, #0]
 8003e72:	e068      	b.n	8003f46 <UART_SetConfig+0x246>
 8003e74:	231b      	movs	r3, #27
 8003e76:	2220      	movs	r2, #32
 8003e78:	189b      	adds	r3, r3, r2
 8003e7a:	19db      	adds	r3, r3, r7
 8003e7c:	2210      	movs	r2, #16
 8003e7e:	701a      	strb	r2, [r3, #0]
 8003e80:	e061      	b.n	8003f46 <UART_SetConfig+0x246>
 8003e82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	4a61      	ldr	r2, [pc, #388]	@ (800400c <UART_SetConfig+0x30c>)
 8003e88:	4293      	cmp	r3, r2
 8003e8a:	d106      	bne.n	8003e9a <UART_SetConfig+0x19a>
 8003e8c:	231b      	movs	r3, #27
 8003e8e:	2220      	movs	r2, #32
 8003e90:	189b      	adds	r3, r3, r2
 8003e92:	19db      	adds	r3, r3, r7
 8003e94:	2200      	movs	r2, #0
 8003e96:	701a      	strb	r2, [r3, #0]
 8003e98:	e055      	b.n	8003f46 <UART_SetConfig+0x246>
 8003e9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	4a5c      	ldr	r2, [pc, #368]	@ (8004010 <UART_SetConfig+0x310>)
 8003ea0:	4293      	cmp	r3, r2
 8003ea2:	d106      	bne.n	8003eb2 <UART_SetConfig+0x1b2>
 8003ea4:	231b      	movs	r3, #27
 8003ea6:	2220      	movs	r2, #32
 8003ea8:	189b      	adds	r3, r3, r2
 8003eaa:	19db      	adds	r3, r3, r7
 8003eac:	2200      	movs	r2, #0
 8003eae:	701a      	strb	r2, [r3, #0]
 8003eb0:	e049      	b.n	8003f46 <UART_SetConfig+0x246>
 8003eb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	4a50      	ldr	r2, [pc, #320]	@ (8003ff8 <UART_SetConfig+0x2f8>)
 8003eb8:	4293      	cmp	r3, r2
 8003eba:	d13e      	bne.n	8003f3a <UART_SetConfig+0x23a>
 8003ebc:	4b51      	ldr	r3, [pc, #324]	@ (8004004 <UART_SetConfig+0x304>)
 8003ebe:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003ec0:	23c0      	movs	r3, #192	@ 0xc0
 8003ec2:	011b      	lsls	r3, r3, #4
 8003ec4:	4013      	ands	r3, r2
 8003ec6:	22c0      	movs	r2, #192	@ 0xc0
 8003ec8:	0112      	lsls	r2, r2, #4
 8003eca:	4293      	cmp	r3, r2
 8003ecc:	d027      	beq.n	8003f1e <UART_SetConfig+0x21e>
 8003ece:	22c0      	movs	r2, #192	@ 0xc0
 8003ed0:	0112      	lsls	r2, r2, #4
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	d82a      	bhi.n	8003f2c <UART_SetConfig+0x22c>
 8003ed6:	2280      	movs	r2, #128	@ 0x80
 8003ed8:	0112      	lsls	r2, r2, #4
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d011      	beq.n	8003f02 <UART_SetConfig+0x202>
 8003ede:	2280      	movs	r2, #128	@ 0x80
 8003ee0:	0112      	lsls	r2, r2, #4
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d822      	bhi.n	8003f2c <UART_SetConfig+0x22c>
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d004      	beq.n	8003ef4 <UART_SetConfig+0x1f4>
 8003eea:	2280      	movs	r2, #128	@ 0x80
 8003eec:	00d2      	lsls	r2, r2, #3
 8003eee:	4293      	cmp	r3, r2
 8003ef0:	d00e      	beq.n	8003f10 <UART_SetConfig+0x210>
 8003ef2:	e01b      	b.n	8003f2c <UART_SetConfig+0x22c>
 8003ef4:	231b      	movs	r3, #27
 8003ef6:	2220      	movs	r2, #32
 8003ef8:	189b      	adds	r3, r3, r2
 8003efa:	19db      	adds	r3, r3, r7
 8003efc:	2200      	movs	r2, #0
 8003efe:	701a      	strb	r2, [r3, #0]
 8003f00:	e021      	b.n	8003f46 <UART_SetConfig+0x246>
 8003f02:	231b      	movs	r3, #27
 8003f04:	2220      	movs	r2, #32
 8003f06:	189b      	adds	r3, r3, r2
 8003f08:	19db      	adds	r3, r3, r7
 8003f0a:	2202      	movs	r2, #2
 8003f0c:	701a      	strb	r2, [r3, #0]
 8003f0e:	e01a      	b.n	8003f46 <UART_SetConfig+0x246>
 8003f10:	231b      	movs	r3, #27
 8003f12:	2220      	movs	r2, #32
 8003f14:	189b      	adds	r3, r3, r2
 8003f16:	19db      	adds	r3, r3, r7
 8003f18:	2204      	movs	r2, #4
 8003f1a:	701a      	strb	r2, [r3, #0]
 8003f1c:	e013      	b.n	8003f46 <UART_SetConfig+0x246>
 8003f1e:	231b      	movs	r3, #27
 8003f20:	2220      	movs	r2, #32
 8003f22:	189b      	adds	r3, r3, r2
 8003f24:	19db      	adds	r3, r3, r7
 8003f26:	2208      	movs	r2, #8
 8003f28:	701a      	strb	r2, [r3, #0]
 8003f2a:	e00c      	b.n	8003f46 <UART_SetConfig+0x246>
 8003f2c:	231b      	movs	r3, #27
 8003f2e:	2220      	movs	r2, #32
 8003f30:	189b      	adds	r3, r3, r2
 8003f32:	19db      	adds	r3, r3, r7
 8003f34:	2210      	movs	r2, #16
 8003f36:	701a      	strb	r2, [r3, #0]
 8003f38:	e005      	b.n	8003f46 <UART_SetConfig+0x246>
 8003f3a:	231b      	movs	r3, #27
 8003f3c:	2220      	movs	r2, #32
 8003f3e:	189b      	adds	r3, r3, r2
 8003f40:	19db      	adds	r3, r3, r7
 8003f42:	2210      	movs	r2, #16
 8003f44:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003f46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	4a2b      	ldr	r2, [pc, #172]	@ (8003ff8 <UART_SetConfig+0x2f8>)
 8003f4c:	4293      	cmp	r3, r2
 8003f4e:	d000      	beq.n	8003f52 <UART_SetConfig+0x252>
 8003f50:	e0a9      	b.n	80040a6 <UART_SetConfig+0x3a6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003f52:	231b      	movs	r3, #27
 8003f54:	2220      	movs	r2, #32
 8003f56:	189b      	adds	r3, r3, r2
 8003f58:	19db      	adds	r3, r3, r7
 8003f5a:	781b      	ldrb	r3, [r3, #0]
 8003f5c:	2b08      	cmp	r3, #8
 8003f5e:	d015      	beq.n	8003f8c <UART_SetConfig+0x28c>
 8003f60:	dc18      	bgt.n	8003f94 <UART_SetConfig+0x294>
 8003f62:	2b04      	cmp	r3, #4
 8003f64:	d00d      	beq.n	8003f82 <UART_SetConfig+0x282>
 8003f66:	dc15      	bgt.n	8003f94 <UART_SetConfig+0x294>
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d002      	beq.n	8003f72 <UART_SetConfig+0x272>
 8003f6c:	2b02      	cmp	r3, #2
 8003f6e:	d005      	beq.n	8003f7c <UART_SetConfig+0x27c>
 8003f70:	e010      	b.n	8003f94 <UART_SetConfig+0x294>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003f72:	f7fe fbd1 	bl	8002718 <HAL_RCC_GetPCLK1Freq>
 8003f76:	0003      	movs	r3, r0
 8003f78:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003f7a:	e014      	b.n	8003fa6 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003f7c:	4b25      	ldr	r3, [pc, #148]	@ (8004014 <UART_SetConfig+0x314>)
 8003f7e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003f80:	e011      	b.n	8003fa6 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003f82:	f7fe fb3d 	bl	8002600 <HAL_RCC_GetSysClockFreq>
 8003f86:	0003      	movs	r3, r0
 8003f88:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003f8a:	e00c      	b.n	8003fa6 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003f8c:	2380      	movs	r3, #128	@ 0x80
 8003f8e:	021b      	lsls	r3, r3, #8
 8003f90:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003f92:	e008      	b.n	8003fa6 <UART_SetConfig+0x2a6>
      default:
        pclk = 0U;
 8003f94:	2300      	movs	r3, #0
 8003f96:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 8003f98:	231a      	movs	r3, #26
 8003f9a:	2220      	movs	r2, #32
 8003f9c:	189b      	adds	r3, r3, r2
 8003f9e:	19db      	adds	r3, r3, r7
 8003fa0:	2201      	movs	r2, #1
 8003fa2:	701a      	strb	r2, [r3, #0]
        break;
 8003fa4:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003fa6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d100      	bne.n	8003fae <UART_SetConfig+0x2ae>
 8003fac:	e14b      	b.n	8004246 <UART_SetConfig+0x546>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003fae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fb0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003fb2:	4b19      	ldr	r3, [pc, #100]	@ (8004018 <UART_SetConfig+0x318>)
 8003fb4:	0052      	lsls	r2, r2, #1
 8003fb6:	5ad3      	ldrh	r3, [r2, r3]
 8003fb8:	0019      	movs	r1, r3
 8003fba:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8003fbc:	f7fc f8b6 	bl	800012c <__udivsi3>
 8003fc0:	0003      	movs	r3, r0
 8003fc2:	62bb      	str	r3, [r7, #40]	@ 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003fc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fc6:	685a      	ldr	r2, [r3, #4]
 8003fc8:	0013      	movs	r3, r2
 8003fca:	005b      	lsls	r3, r3, #1
 8003fcc:	189b      	adds	r3, r3, r2
 8003fce:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003fd0:	429a      	cmp	r2, r3
 8003fd2:	d305      	bcc.n	8003fe0 <UART_SetConfig+0x2e0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003fd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fd6:	685b      	ldr	r3, [r3, #4]
 8003fd8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003fda:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003fdc:	429a      	cmp	r2, r3
 8003fde:	d91d      	bls.n	800401c <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 8003fe0:	231a      	movs	r3, #26
 8003fe2:	2220      	movs	r2, #32
 8003fe4:	189b      	adds	r3, r3, r2
 8003fe6:	19db      	adds	r3, r3, r7
 8003fe8:	2201      	movs	r2, #1
 8003fea:	701a      	strb	r2, [r3, #0]
 8003fec:	e12b      	b.n	8004246 <UART_SetConfig+0x546>
 8003fee:	46c0      	nop			@ (mov r8, r8)
 8003ff0:	cfff69f3 	.word	0xcfff69f3
 8003ff4:	ffffcfff 	.word	0xffffcfff
 8003ff8:	40008000 	.word	0x40008000
 8003ffc:	11fff4ff 	.word	0x11fff4ff
 8004000:	40013800 	.word	0x40013800
 8004004:	40021000 	.word	0x40021000
 8004008:	40004400 	.word	0x40004400
 800400c:	40004800 	.word	0x40004800
 8004010:	40004c00 	.word	0x40004c00
 8004014:	00f42400 	.word	0x00f42400
 8004018:	08008084 	.word	0x08008084
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800401c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800401e:	61bb      	str	r3, [r7, #24]
 8004020:	2300      	movs	r3, #0
 8004022:	61fb      	str	r3, [r7, #28]
 8004024:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004026:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004028:	4b92      	ldr	r3, [pc, #584]	@ (8004274 <UART_SetConfig+0x574>)
 800402a:	0052      	lsls	r2, r2, #1
 800402c:	5ad3      	ldrh	r3, [r2, r3]
 800402e:	613b      	str	r3, [r7, #16]
 8004030:	2300      	movs	r3, #0
 8004032:	617b      	str	r3, [r7, #20]
 8004034:	693a      	ldr	r2, [r7, #16]
 8004036:	697b      	ldr	r3, [r7, #20]
 8004038:	69b8      	ldr	r0, [r7, #24]
 800403a:	69f9      	ldr	r1, [r7, #28]
 800403c:	f7fc f9ec 	bl	8000418 <__aeabi_uldivmod>
 8004040:	0002      	movs	r2, r0
 8004042:	000b      	movs	r3, r1
 8004044:	0e11      	lsrs	r1, r2, #24
 8004046:	021d      	lsls	r5, r3, #8
 8004048:	430d      	orrs	r5, r1
 800404a:	0214      	lsls	r4, r2, #8
 800404c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800404e:	685b      	ldr	r3, [r3, #4]
 8004050:	085b      	lsrs	r3, r3, #1
 8004052:	60bb      	str	r3, [r7, #8]
 8004054:	2300      	movs	r3, #0
 8004056:	60fb      	str	r3, [r7, #12]
 8004058:	68b8      	ldr	r0, [r7, #8]
 800405a:	68f9      	ldr	r1, [r7, #12]
 800405c:	1900      	adds	r0, r0, r4
 800405e:	4169      	adcs	r1, r5
 8004060:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004062:	685b      	ldr	r3, [r3, #4]
 8004064:	603b      	str	r3, [r7, #0]
 8004066:	2300      	movs	r3, #0
 8004068:	607b      	str	r3, [r7, #4]
 800406a:	683a      	ldr	r2, [r7, #0]
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	f7fc f9d3 	bl	8000418 <__aeabi_uldivmod>
 8004072:	0002      	movs	r2, r0
 8004074:	000b      	movs	r3, r1
 8004076:	0013      	movs	r3, r2
 8004078:	633b      	str	r3, [r7, #48]	@ 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800407a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800407c:	23c0      	movs	r3, #192	@ 0xc0
 800407e:	009b      	lsls	r3, r3, #2
 8004080:	429a      	cmp	r2, r3
 8004082:	d309      	bcc.n	8004098 <UART_SetConfig+0x398>
 8004084:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004086:	2380      	movs	r3, #128	@ 0x80
 8004088:	035b      	lsls	r3, r3, #13
 800408a:	429a      	cmp	r2, r3
 800408c:	d204      	bcs.n	8004098 <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 800408e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004094:	60da      	str	r2, [r3, #12]
 8004096:	e0d6      	b.n	8004246 <UART_SetConfig+0x546>
        }
        else
        {
          ret = HAL_ERROR;
 8004098:	231a      	movs	r3, #26
 800409a:	2220      	movs	r2, #32
 800409c:	189b      	adds	r3, r3, r2
 800409e:	19db      	adds	r3, r3, r7
 80040a0:	2201      	movs	r2, #1
 80040a2:	701a      	strb	r2, [r3, #0]
 80040a4:	e0cf      	b.n	8004246 <UART_SetConfig+0x546>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80040a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040a8:	69da      	ldr	r2, [r3, #28]
 80040aa:	2380      	movs	r3, #128	@ 0x80
 80040ac:	021b      	lsls	r3, r3, #8
 80040ae:	429a      	cmp	r2, r3
 80040b0:	d000      	beq.n	80040b4 <UART_SetConfig+0x3b4>
 80040b2:	e070      	b.n	8004196 <UART_SetConfig+0x496>
  {
    switch (clocksource)
 80040b4:	231b      	movs	r3, #27
 80040b6:	2220      	movs	r2, #32
 80040b8:	189b      	adds	r3, r3, r2
 80040ba:	19db      	adds	r3, r3, r7
 80040bc:	781b      	ldrb	r3, [r3, #0]
 80040be:	2b08      	cmp	r3, #8
 80040c0:	d015      	beq.n	80040ee <UART_SetConfig+0x3ee>
 80040c2:	dc18      	bgt.n	80040f6 <UART_SetConfig+0x3f6>
 80040c4:	2b04      	cmp	r3, #4
 80040c6:	d00d      	beq.n	80040e4 <UART_SetConfig+0x3e4>
 80040c8:	dc15      	bgt.n	80040f6 <UART_SetConfig+0x3f6>
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d002      	beq.n	80040d4 <UART_SetConfig+0x3d4>
 80040ce:	2b02      	cmp	r3, #2
 80040d0:	d005      	beq.n	80040de <UART_SetConfig+0x3de>
 80040d2:	e010      	b.n	80040f6 <UART_SetConfig+0x3f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80040d4:	f7fe fb20 	bl	8002718 <HAL_RCC_GetPCLK1Freq>
 80040d8:	0003      	movs	r3, r0
 80040da:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80040dc:	e014      	b.n	8004108 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80040de:	4b66      	ldr	r3, [pc, #408]	@ (8004278 <UART_SetConfig+0x578>)
 80040e0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80040e2:	e011      	b.n	8004108 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80040e4:	f7fe fa8c 	bl	8002600 <HAL_RCC_GetSysClockFreq>
 80040e8:	0003      	movs	r3, r0
 80040ea:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80040ec:	e00c      	b.n	8004108 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80040ee:	2380      	movs	r3, #128	@ 0x80
 80040f0:	021b      	lsls	r3, r3, #8
 80040f2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80040f4:	e008      	b.n	8004108 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 80040f6:	2300      	movs	r3, #0
 80040f8:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 80040fa:	231a      	movs	r3, #26
 80040fc:	2220      	movs	r2, #32
 80040fe:	189b      	adds	r3, r3, r2
 8004100:	19db      	adds	r3, r3, r7
 8004102:	2201      	movs	r2, #1
 8004104:	701a      	strb	r2, [r3, #0]
        break;
 8004106:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004108:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800410a:	2b00      	cmp	r3, #0
 800410c:	d100      	bne.n	8004110 <UART_SetConfig+0x410>
 800410e:	e09a      	b.n	8004246 <UART_SetConfig+0x546>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004110:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004112:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004114:	4b57      	ldr	r3, [pc, #348]	@ (8004274 <UART_SetConfig+0x574>)
 8004116:	0052      	lsls	r2, r2, #1
 8004118:	5ad3      	ldrh	r3, [r2, r3]
 800411a:	0019      	movs	r1, r3
 800411c:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800411e:	f7fc f805 	bl	800012c <__udivsi3>
 8004122:	0003      	movs	r3, r0
 8004124:	005a      	lsls	r2, r3, #1
 8004126:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004128:	685b      	ldr	r3, [r3, #4]
 800412a:	085b      	lsrs	r3, r3, #1
 800412c:	18d2      	adds	r2, r2, r3
 800412e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004130:	685b      	ldr	r3, [r3, #4]
 8004132:	0019      	movs	r1, r3
 8004134:	0010      	movs	r0, r2
 8004136:	f7fb fff9 	bl	800012c <__udivsi3>
 800413a:	0003      	movs	r3, r0
 800413c:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800413e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004140:	2b0f      	cmp	r3, #15
 8004142:	d921      	bls.n	8004188 <UART_SetConfig+0x488>
 8004144:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004146:	2380      	movs	r3, #128	@ 0x80
 8004148:	025b      	lsls	r3, r3, #9
 800414a:	429a      	cmp	r2, r3
 800414c:	d21c      	bcs.n	8004188 <UART_SetConfig+0x488>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800414e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004150:	b29a      	uxth	r2, r3
 8004152:	200e      	movs	r0, #14
 8004154:	2420      	movs	r4, #32
 8004156:	1903      	adds	r3, r0, r4
 8004158:	19db      	adds	r3, r3, r7
 800415a:	210f      	movs	r1, #15
 800415c:	438a      	bics	r2, r1
 800415e:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004160:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004162:	085b      	lsrs	r3, r3, #1
 8004164:	b29b      	uxth	r3, r3
 8004166:	2207      	movs	r2, #7
 8004168:	4013      	ands	r3, r2
 800416a:	b299      	uxth	r1, r3
 800416c:	1903      	adds	r3, r0, r4
 800416e:	19db      	adds	r3, r3, r7
 8004170:	1902      	adds	r2, r0, r4
 8004172:	19d2      	adds	r2, r2, r7
 8004174:	8812      	ldrh	r2, [r2, #0]
 8004176:	430a      	orrs	r2, r1
 8004178:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800417a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	1902      	adds	r2, r0, r4
 8004180:	19d2      	adds	r2, r2, r7
 8004182:	8812      	ldrh	r2, [r2, #0]
 8004184:	60da      	str	r2, [r3, #12]
 8004186:	e05e      	b.n	8004246 <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 8004188:	231a      	movs	r3, #26
 800418a:	2220      	movs	r2, #32
 800418c:	189b      	adds	r3, r3, r2
 800418e:	19db      	adds	r3, r3, r7
 8004190:	2201      	movs	r2, #1
 8004192:	701a      	strb	r2, [r3, #0]
 8004194:	e057      	b.n	8004246 <UART_SetConfig+0x546>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004196:	231b      	movs	r3, #27
 8004198:	2220      	movs	r2, #32
 800419a:	189b      	adds	r3, r3, r2
 800419c:	19db      	adds	r3, r3, r7
 800419e:	781b      	ldrb	r3, [r3, #0]
 80041a0:	2b08      	cmp	r3, #8
 80041a2:	d015      	beq.n	80041d0 <UART_SetConfig+0x4d0>
 80041a4:	dc18      	bgt.n	80041d8 <UART_SetConfig+0x4d8>
 80041a6:	2b04      	cmp	r3, #4
 80041a8:	d00d      	beq.n	80041c6 <UART_SetConfig+0x4c6>
 80041aa:	dc15      	bgt.n	80041d8 <UART_SetConfig+0x4d8>
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d002      	beq.n	80041b6 <UART_SetConfig+0x4b6>
 80041b0:	2b02      	cmp	r3, #2
 80041b2:	d005      	beq.n	80041c0 <UART_SetConfig+0x4c0>
 80041b4:	e010      	b.n	80041d8 <UART_SetConfig+0x4d8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80041b6:	f7fe faaf 	bl	8002718 <HAL_RCC_GetPCLK1Freq>
 80041ba:	0003      	movs	r3, r0
 80041bc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80041be:	e014      	b.n	80041ea <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80041c0:	4b2d      	ldr	r3, [pc, #180]	@ (8004278 <UART_SetConfig+0x578>)
 80041c2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80041c4:	e011      	b.n	80041ea <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80041c6:	f7fe fa1b 	bl	8002600 <HAL_RCC_GetSysClockFreq>
 80041ca:	0003      	movs	r3, r0
 80041cc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80041ce:	e00c      	b.n	80041ea <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80041d0:	2380      	movs	r3, #128	@ 0x80
 80041d2:	021b      	lsls	r3, r3, #8
 80041d4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80041d6:	e008      	b.n	80041ea <UART_SetConfig+0x4ea>
      default:
        pclk = 0U;
 80041d8:	2300      	movs	r3, #0
 80041da:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 80041dc:	231a      	movs	r3, #26
 80041de:	2220      	movs	r2, #32
 80041e0:	189b      	adds	r3, r3, r2
 80041e2:	19db      	adds	r3, r3, r7
 80041e4:	2201      	movs	r2, #1
 80041e6:	701a      	strb	r2, [r3, #0]
        break;
 80041e8:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 80041ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d02a      	beq.n	8004246 <UART_SetConfig+0x546>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80041f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041f2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80041f4:	4b1f      	ldr	r3, [pc, #124]	@ (8004274 <UART_SetConfig+0x574>)
 80041f6:	0052      	lsls	r2, r2, #1
 80041f8:	5ad3      	ldrh	r3, [r2, r3]
 80041fa:	0019      	movs	r1, r3
 80041fc:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80041fe:	f7fb ff95 	bl	800012c <__udivsi3>
 8004202:	0003      	movs	r3, r0
 8004204:	001a      	movs	r2, r3
 8004206:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004208:	685b      	ldr	r3, [r3, #4]
 800420a:	085b      	lsrs	r3, r3, #1
 800420c:	18d2      	adds	r2, r2, r3
 800420e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004210:	685b      	ldr	r3, [r3, #4]
 8004212:	0019      	movs	r1, r3
 8004214:	0010      	movs	r0, r2
 8004216:	f7fb ff89 	bl	800012c <__udivsi3>
 800421a:	0003      	movs	r3, r0
 800421c:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800421e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004220:	2b0f      	cmp	r3, #15
 8004222:	d90a      	bls.n	800423a <UART_SetConfig+0x53a>
 8004224:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004226:	2380      	movs	r3, #128	@ 0x80
 8004228:	025b      	lsls	r3, r3, #9
 800422a:	429a      	cmp	r2, r3
 800422c:	d205      	bcs.n	800423a <UART_SetConfig+0x53a>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800422e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004230:	b29a      	uxth	r2, r3
 8004232:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	60da      	str	r2, [r3, #12]
 8004238:	e005      	b.n	8004246 <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 800423a:	231a      	movs	r3, #26
 800423c:	2220      	movs	r2, #32
 800423e:	189b      	adds	r3, r3, r2
 8004240:	19db      	adds	r3, r3, r7
 8004242:	2201      	movs	r2, #1
 8004244:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004246:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004248:	226a      	movs	r2, #106	@ 0x6a
 800424a:	2101      	movs	r1, #1
 800424c:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 800424e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004250:	2268      	movs	r2, #104	@ 0x68
 8004252:	2101      	movs	r1, #1
 8004254:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004256:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004258:	2200      	movs	r2, #0
 800425a:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800425c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800425e:	2200      	movs	r2, #0
 8004260:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8004262:	231a      	movs	r3, #26
 8004264:	2220      	movs	r2, #32
 8004266:	189b      	adds	r3, r3, r2
 8004268:	19db      	adds	r3, r3, r7
 800426a:	781b      	ldrb	r3, [r3, #0]
}
 800426c:	0018      	movs	r0, r3
 800426e:	46bd      	mov	sp, r7
 8004270:	b010      	add	sp, #64	@ 0x40
 8004272:	bdb0      	pop	{r4, r5, r7, pc}
 8004274:	08008084 	.word	0x08008084
 8004278:	00f42400 	.word	0x00f42400

0800427c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800427c:	b580      	push	{r7, lr}
 800427e:	b082      	sub	sp, #8
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004288:	2208      	movs	r2, #8
 800428a:	4013      	ands	r3, r2
 800428c:	d00b      	beq.n	80042a6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	685b      	ldr	r3, [r3, #4]
 8004294:	4a4a      	ldr	r2, [pc, #296]	@ (80043c0 <UART_AdvFeatureConfig+0x144>)
 8004296:	4013      	ands	r3, r2
 8004298:	0019      	movs	r1, r3
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	430a      	orrs	r2, r1
 80042a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042aa:	2201      	movs	r2, #1
 80042ac:	4013      	ands	r3, r2
 80042ae:	d00b      	beq.n	80042c8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	685b      	ldr	r3, [r3, #4]
 80042b6:	4a43      	ldr	r2, [pc, #268]	@ (80043c4 <UART_AdvFeatureConfig+0x148>)
 80042b8:	4013      	ands	r3, r2
 80042ba:	0019      	movs	r1, r3
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	430a      	orrs	r2, r1
 80042c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042cc:	2202      	movs	r2, #2
 80042ce:	4013      	ands	r3, r2
 80042d0:	d00b      	beq.n	80042ea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	685b      	ldr	r3, [r3, #4]
 80042d8:	4a3b      	ldr	r2, [pc, #236]	@ (80043c8 <UART_AdvFeatureConfig+0x14c>)
 80042da:	4013      	ands	r3, r2
 80042dc:	0019      	movs	r1, r3
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	430a      	orrs	r2, r1
 80042e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042ee:	2204      	movs	r2, #4
 80042f0:	4013      	ands	r3, r2
 80042f2:	d00b      	beq.n	800430c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	685b      	ldr	r3, [r3, #4]
 80042fa:	4a34      	ldr	r2, [pc, #208]	@ (80043cc <UART_AdvFeatureConfig+0x150>)
 80042fc:	4013      	ands	r3, r2
 80042fe:	0019      	movs	r1, r3
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	430a      	orrs	r2, r1
 800430a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004310:	2210      	movs	r2, #16
 8004312:	4013      	ands	r3, r2
 8004314:	d00b      	beq.n	800432e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	689b      	ldr	r3, [r3, #8]
 800431c:	4a2c      	ldr	r2, [pc, #176]	@ (80043d0 <UART_AdvFeatureConfig+0x154>)
 800431e:	4013      	ands	r3, r2
 8004320:	0019      	movs	r1, r3
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	430a      	orrs	r2, r1
 800432c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004332:	2220      	movs	r2, #32
 8004334:	4013      	ands	r3, r2
 8004336:	d00b      	beq.n	8004350 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	689b      	ldr	r3, [r3, #8]
 800433e:	4a25      	ldr	r2, [pc, #148]	@ (80043d4 <UART_AdvFeatureConfig+0x158>)
 8004340:	4013      	ands	r3, r2
 8004342:	0019      	movs	r1, r3
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	430a      	orrs	r2, r1
 800434e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004354:	2240      	movs	r2, #64	@ 0x40
 8004356:	4013      	ands	r3, r2
 8004358:	d01d      	beq.n	8004396 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	685b      	ldr	r3, [r3, #4]
 8004360:	4a1d      	ldr	r2, [pc, #116]	@ (80043d8 <UART_AdvFeatureConfig+0x15c>)
 8004362:	4013      	ands	r3, r2
 8004364:	0019      	movs	r1, r3
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	430a      	orrs	r2, r1
 8004370:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004376:	2380      	movs	r3, #128	@ 0x80
 8004378:	035b      	lsls	r3, r3, #13
 800437a:	429a      	cmp	r2, r3
 800437c:	d10b      	bne.n	8004396 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	685b      	ldr	r3, [r3, #4]
 8004384:	4a15      	ldr	r2, [pc, #84]	@ (80043dc <UART_AdvFeatureConfig+0x160>)
 8004386:	4013      	ands	r3, r2
 8004388:	0019      	movs	r1, r3
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	430a      	orrs	r2, r1
 8004394:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800439a:	2280      	movs	r2, #128	@ 0x80
 800439c:	4013      	ands	r3, r2
 800439e:	d00b      	beq.n	80043b8 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	685b      	ldr	r3, [r3, #4]
 80043a6:	4a0e      	ldr	r2, [pc, #56]	@ (80043e0 <UART_AdvFeatureConfig+0x164>)
 80043a8:	4013      	ands	r3, r2
 80043aa:	0019      	movs	r1, r3
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	430a      	orrs	r2, r1
 80043b6:	605a      	str	r2, [r3, #4]
  }
}
 80043b8:	46c0      	nop			@ (mov r8, r8)
 80043ba:	46bd      	mov	sp, r7
 80043bc:	b002      	add	sp, #8
 80043be:	bd80      	pop	{r7, pc}
 80043c0:	ffff7fff 	.word	0xffff7fff
 80043c4:	fffdffff 	.word	0xfffdffff
 80043c8:	fffeffff 	.word	0xfffeffff
 80043cc:	fffbffff 	.word	0xfffbffff
 80043d0:	ffffefff 	.word	0xffffefff
 80043d4:	ffffdfff 	.word	0xffffdfff
 80043d8:	ffefffff 	.word	0xffefffff
 80043dc:	ff9fffff 	.word	0xff9fffff
 80043e0:	fff7ffff 	.word	0xfff7ffff

080043e4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80043e4:	b580      	push	{r7, lr}
 80043e6:	b092      	sub	sp, #72	@ 0x48
 80043e8:	af02      	add	r7, sp, #8
 80043ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2290      	movs	r2, #144	@ 0x90
 80043f0:	2100      	movs	r1, #0
 80043f2:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80043f4:	f7fc ffea 	bl	80013cc <HAL_GetTick>
 80043f8:	0003      	movs	r3, r0
 80043fa:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	2208      	movs	r2, #8
 8004404:	4013      	ands	r3, r2
 8004406:	2b08      	cmp	r3, #8
 8004408:	d12d      	bne.n	8004466 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800440a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800440c:	2280      	movs	r2, #128	@ 0x80
 800440e:	0391      	lsls	r1, r2, #14
 8004410:	6878      	ldr	r0, [r7, #4]
 8004412:	4a47      	ldr	r2, [pc, #284]	@ (8004530 <UART_CheckIdleState+0x14c>)
 8004414:	9200      	str	r2, [sp, #0]
 8004416:	2200      	movs	r2, #0
 8004418:	f000 f88e 	bl	8004538 <UART_WaitOnFlagUntilTimeout>
 800441c:	1e03      	subs	r3, r0, #0
 800441e:	d022      	beq.n	8004466 <UART_CheckIdleState+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004420:	f3ef 8310 	mrs	r3, PRIMASK
 8004424:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8004426:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8004428:	63bb      	str	r3, [r7, #56]	@ 0x38
 800442a:	2301      	movs	r3, #1
 800442c:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800442e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004430:	f383 8810 	msr	PRIMASK, r3
}
 8004434:	46c0      	nop			@ (mov r8, r8)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	681a      	ldr	r2, [r3, #0]
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	2180      	movs	r1, #128	@ 0x80
 8004442:	438a      	bics	r2, r1
 8004444:	601a      	str	r2, [r3, #0]
 8004446:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004448:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800444a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800444c:	f383 8810 	msr	PRIMASK, r3
}
 8004450:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	2288      	movs	r2, #136	@ 0x88
 8004456:	2120      	movs	r1, #32
 8004458:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	2284      	movs	r2, #132	@ 0x84
 800445e:	2100      	movs	r1, #0
 8004460:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004462:	2303      	movs	r3, #3
 8004464:	e060      	b.n	8004528 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	2204      	movs	r2, #4
 800446e:	4013      	ands	r3, r2
 8004470:	2b04      	cmp	r3, #4
 8004472:	d146      	bne.n	8004502 <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004474:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004476:	2280      	movs	r2, #128	@ 0x80
 8004478:	03d1      	lsls	r1, r2, #15
 800447a:	6878      	ldr	r0, [r7, #4]
 800447c:	4a2c      	ldr	r2, [pc, #176]	@ (8004530 <UART_CheckIdleState+0x14c>)
 800447e:	9200      	str	r2, [sp, #0]
 8004480:	2200      	movs	r2, #0
 8004482:	f000 f859 	bl	8004538 <UART_WaitOnFlagUntilTimeout>
 8004486:	1e03      	subs	r3, r0, #0
 8004488:	d03b      	beq.n	8004502 <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800448a:	f3ef 8310 	mrs	r3, PRIMASK
 800448e:	60fb      	str	r3, [r7, #12]
  return(result);
 8004490:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004492:	637b      	str	r3, [r7, #52]	@ 0x34
 8004494:	2301      	movs	r3, #1
 8004496:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004498:	693b      	ldr	r3, [r7, #16]
 800449a:	f383 8810 	msr	PRIMASK, r3
}
 800449e:	46c0      	nop			@ (mov r8, r8)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	681a      	ldr	r2, [r3, #0]
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	4922      	ldr	r1, [pc, #136]	@ (8004534 <UART_CheckIdleState+0x150>)
 80044ac:	400a      	ands	r2, r1
 80044ae:	601a      	str	r2, [r3, #0]
 80044b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80044b2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80044b4:	697b      	ldr	r3, [r7, #20]
 80044b6:	f383 8810 	msr	PRIMASK, r3
}
 80044ba:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80044bc:	f3ef 8310 	mrs	r3, PRIMASK
 80044c0:	61bb      	str	r3, [r7, #24]
  return(result);
 80044c2:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044c4:	633b      	str	r3, [r7, #48]	@ 0x30
 80044c6:	2301      	movs	r3, #1
 80044c8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80044ca:	69fb      	ldr	r3, [r7, #28]
 80044cc:	f383 8810 	msr	PRIMASK, r3
}
 80044d0:	46c0      	nop			@ (mov r8, r8)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	689a      	ldr	r2, [r3, #8]
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	2101      	movs	r1, #1
 80044de:	438a      	bics	r2, r1
 80044e0:	609a      	str	r2, [r3, #8]
 80044e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044e4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80044e6:	6a3b      	ldr	r3, [r7, #32]
 80044e8:	f383 8810 	msr	PRIMASK, r3
}
 80044ec:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	228c      	movs	r2, #140	@ 0x8c
 80044f2:	2120      	movs	r1, #32
 80044f4:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	2284      	movs	r2, #132	@ 0x84
 80044fa:	2100      	movs	r1, #0
 80044fc:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80044fe:	2303      	movs	r3, #3
 8004500:	e012      	b.n	8004528 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	2288      	movs	r2, #136	@ 0x88
 8004506:	2120      	movs	r1, #32
 8004508:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	228c      	movs	r2, #140	@ 0x8c
 800450e:	2120      	movs	r1, #32
 8004510:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	2200      	movs	r2, #0
 8004516:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2200      	movs	r2, #0
 800451c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	2284      	movs	r2, #132	@ 0x84
 8004522:	2100      	movs	r1, #0
 8004524:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004526:	2300      	movs	r3, #0
}
 8004528:	0018      	movs	r0, r3
 800452a:	46bd      	mov	sp, r7
 800452c:	b010      	add	sp, #64	@ 0x40
 800452e:	bd80      	pop	{r7, pc}
 8004530:	01ffffff 	.word	0x01ffffff
 8004534:	fffffedf 	.word	0xfffffedf

08004538 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004538:	b580      	push	{r7, lr}
 800453a:	b084      	sub	sp, #16
 800453c:	af00      	add	r7, sp, #0
 800453e:	60f8      	str	r0, [r7, #12]
 8004540:	60b9      	str	r1, [r7, #8]
 8004542:	603b      	str	r3, [r7, #0]
 8004544:	1dfb      	adds	r3, r7, #7
 8004546:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004548:	e051      	b.n	80045ee <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800454a:	69bb      	ldr	r3, [r7, #24]
 800454c:	3301      	adds	r3, #1
 800454e:	d04e      	beq.n	80045ee <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004550:	f7fc ff3c 	bl	80013cc <HAL_GetTick>
 8004554:	0002      	movs	r2, r0
 8004556:	683b      	ldr	r3, [r7, #0]
 8004558:	1ad3      	subs	r3, r2, r3
 800455a:	69ba      	ldr	r2, [r7, #24]
 800455c:	429a      	cmp	r2, r3
 800455e:	d302      	bcc.n	8004566 <UART_WaitOnFlagUntilTimeout+0x2e>
 8004560:	69bb      	ldr	r3, [r7, #24]
 8004562:	2b00      	cmp	r3, #0
 8004564:	d101      	bne.n	800456a <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8004566:	2303      	movs	r3, #3
 8004568:	e051      	b.n	800460e <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	2204      	movs	r2, #4
 8004572:	4013      	ands	r3, r2
 8004574:	d03b      	beq.n	80045ee <UART_WaitOnFlagUntilTimeout+0xb6>
 8004576:	68bb      	ldr	r3, [r7, #8]
 8004578:	2b80      	cmp	r3, #128	@ 0x80
 800457a:	d038      	beq.n	80045ee <UART_WaitOnFlagUntilTimeout+0xb6>
 800457c:	68bb      	ldr	r3, [r7, #8]
 800457e:	2b40      	cmp	r3, #64	@ 0x40
 8004580:	d035      	beq.n	80045ee <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	69db      	ldr	r3, [r3, #28]
 8004588:	2208      	movs	r2, #8
 800458a:	4013      	ands	r3, r2
 800458c:	2b08      	cmp	r3, #8
 800458e:	d111      	bne.n	80045b4 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	2208      	movs	r2, #8
 8004596:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	0018      	movs	r0, r3
 800459c:	f000 f960 	bl	8004860 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	2290      	movs	r2, #144	@ 0x90
 80045a4:	2108      	movs	r1, #8
 80045a6:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	2284      	movs	r2, #132	@ 0x84
 80045ac:	2100      	movs	r1, #0
 80045ae:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80045b0:	2301      	movs	r3, #1
 80045b2:	e02c      	b.n	800460e <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	69da      	ldr	r2, [r3, #28]
 80045ba:	2380      	movs	r3, #128	@ 0x80
 80045bc:	011b      	lsls	r3, r3, #4
 80045be:	401a      	ands	r2, r3
 80045c0:	2380      	movs	r3, #128	@ 0x80
 80045c2:	011b      	lsls	r3, r3, #4
 80045c4:	429a      	cmp	r2, r3
 80045c6:	d112      	bne.n	80045ee <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	2280      	movs	r2, #128	@ 0x80
 80045ce:	0112      	lsls	r2, r2, #4
 80045d0:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	0018      	movs	r0, r3
 80045d6:	f000 f943 	bl	8004860 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	2290      	movs	r2, #144	@ 0x90
 80045de:	2120      	movs	r1, #32
 80045e0:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	2284      	movs	r2, #132	@ 0x84
 80045e6:	2100      	movs	r1, #0
 80045e8:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80045ea:	2303      	movs	r3, #3
 80045ec:	e00f      	b.n	800460e <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	69db      	ldr	r3, [r3, #28]
 80045f4:	68ba      	ldr	r2, [r7, #8]
 80045f6:	4013      	ands	r3, r2
 80045f8:	68ba      	ldr	r2, [r7, #8]
 80045fa:	1ad3      	subs	r3, r2, r3
 80045fc:	425a      	negs	r2, r3
 80045fe:	4153      	adcs	r3, r2
 8004600:	b2db      	uxtb	r3, r3
 8004602:	001a      	movs	r2, r3
 8004604:	1dfb      	adds	r3, r7, #7
 8004606:	781b      	ldrb	r3, [r3, #0]
 8004608:	429a      	cmp	r2, r3
 800460a:	d09e      	beq.n	800454a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800460c:	2300      	movs	r3, #0
}
 800460e:	0018      	movs	r0, r3
 8004610:	46bd      	mov	sp, r7
 8004612:	b004      	add	sp, #16
 8004614:	bd80      	pop	{r7, pc}
	...

08004618 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004618:	b580      	push	{r7, lr}
 800461a:	b098      	sub	sp, #96	@ 0x60
 800461c:	af00      	add	r7, sp, #0
 800461e:	60f8      	str	r0, [r7, #12]
 8004620:	60b9      	str	r1, [r7, #8]
 8004622:	1dbb      	adds	r3, r7, #6
 8004624:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	68ba      	ldr	r2, [r7, #8]
 800462a:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	1dba      	adds	r2, r7, #6
 8004630:	215c      	movs	r1, #92	@ 0x5c
 8004632:	8812      	ldrh	r2, [r2, #0]
 8004634:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	1dba      	adds	r2, r7, #6
 800463a:	215e      	movs	r1, #94	@ 0x5e
 800463c:	8812      	ldrh	r2, [r2, #0]
 800463e:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	2200      	movs	r2, #0
 8004644:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	689a      	ldr	r2, [r3, #8]
 800464a:	2380      	movs	r3, #128	@ 0x80
 800464c:	015b      	lsls	r3, r3, #5
 800464e:	429a      	cmp	r2, r3
 8004650:	d10d      	bne.n	800466e <UART_Start_Receive_IT+0x56>
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	691b      	ldr	r3, [r3, #16]
 8004656:	2b00      	cmp	r3, #0
 8004658:	d104      	bne.n	8004664 <UART_Start_Receive_IT+0x4c>
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	2260      	movs	r2, #96	@ 0x60
 800465e:	497b      	ldr	r1, [pc, #492]	@ (800484c <UART_Start_Receive_IT+0x234>)
 8004660:	5299      	strh	r1, [r3, r2]
 8004662:	e02e      	b.n	80046c2 <UART_Start_Receive_IT+0xaa>
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	2260      	movs	r2, #96	@ 0x60
 8004668:	21ff      	movs	r1, #255	@ 0xff
 800466a:	5299      	strh	r1, [r3, r2]
 800466c:	e029      	b.n	80046c2 <UART_Start_Receive_IT+0xaa>
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	689b      	ldr	r3, [r3, #8]
 8004672:	2b00      	cmp	r3, #0
 8004674:	d10d      	bne.n	8004692 <UART_Start_Receive_IT+0x7a>
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	691b      	ldr	r3, [r3, #16]
 800467a:	2b00      	cmp	r3, #0
 800467c:	d104      	bne.n	8004688 <UART_Start_Receive_IT+0x70>
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	2260      	movs	r2, #96	@ 0x60
 8004682:	21ff      	movs	r1, #255	@ 0xff
 8004684:	5299      	strh	r1, [r3, r2]
 8004686:	e01c      	b.n	80046c2 <UART_Start_Receive_IT+0xaa>
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	2260      	movs	r2, #96	@ 0x60
 800468c:	217f      	movs	r1, #127	@ 0x7f
 800468e:	5299      	strh	r1, [r3, r2]
 8004690:	e017      	b.n	80046c2 <UART_Start_Receive_IT+0xaa>
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	689a      	ldr	r2, [r3, #8]
 8004696:	2380      	movs	r3, #128	@ 0x80
 8004698:	055b      	lsls	r3, r3, #21
 800469a:	429a      	cmp	r2, r3
 800469c:	d10d      	bne.n	80046ba <UART_Start_Receive_IT+0xa2>
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	691b      	ldr	r3, [r3, #16]
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d104      	bne.n	80046b0 <UART_Start_Receive_IT+0x98>
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	2260      	movs	r2, #96	@ 0x60
 80046aa:	217f      	movs	r1, #127	@ 0x7f
 80046ac:	5299      	strh	r1, [r3, r2]
 80046ae:	e008      	b.n	80046c2 <UART_Start_Receive_IT+0xaa>
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	2260      	movs	r2, #96	@ 0x60
 80046b4:	213f      	movs	r1, #63	@ 0x3f
 80046b6:	5299      	strh	r1, [r3, r2]
 80046b8:	e003      	b.n	80046c2 <UART_Start_Receive_IT+0xaa>
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	2260      	movs	r2, #96	@ 0x60
 80046be:	2100      	movs	r1, #0
 80046c0:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	2290      	movs	r2, #144	@ 0x90
 80046c6:	2100      	movs	r1, #0
 80046c8:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	228c      	movs	r2, #140	@ 0x8c
 80046ce:	2122      	movs	r1, #34	@ 0x22
 80046d0:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80046d2:	f3ef 8310 	mrs	r3, PRIMASK
 80046d6:	643b      	str	r3, [r7, #64]	@ 0x40
  return(result);
 80046d8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046da:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80046dc:	2301      	movs	r3, #1
 80046de:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046e0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80046e2:	f383 8810 	msr	PRIMASK, r3
}
 80046e6:	46c0      	nop			@ (mov r8, r8)
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	689a      	ldr	r2, [r3, #8]
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	2101      	movs	r1, #1
 80046f4:	430a      	orrs	r2, r1
 80046f6:	609a      	str	r2, [r3, #8]
 80046f8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80046fa:	64bb      	str	r3, [r7, #72]	@ 0x48
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046fc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80046fe:	f383 8810 	msr	PRIMASK, r3
}
 8004702:	46c0      	nop			@ (mov r8, r8)

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8004708:	2380      	movs	r3, #128	@ 0x80
 800470a:	059b      	lsls	r3, r3, #22
 800470c:	429a      	cmp	r2, r3
 800470e:	d150      	bne.n	80047b2 <UART_Start_Receive_IT+0x19a>
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	2268      	movs	r2, #104	@ 0x68
 8004714:	5a9b      	ldrh	r3, [r3, r2]
 8004716:	1dba      	adds	r2, r7, #6
 8004718:	8812      	ldrh	r2, [r2, #0]
 800471a:	429a      	cmp	r2, r3
 800471c:	d349      	bcc.n	80047b2 <UART_Start_Receive_IT+0x19a>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	689a      	ldr	r2, [r3, #8]
 8004722:	2380      	movs	r3, #128	@ 0x80
 8004724:	015b      	lsls	r3, r3, #5
 8004726:	429a      	cmp	r2, r3
 8004728:	d107      	bne.n	800473a <UART_Start_Receive_IT+0x122>
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	691b      	ldr	r3, [r3, #16]
 800472e:	2b00      	cmp	r3, #0
 8004730:	d103      	bne.n	800473a <UART_Start_Receive_IT+0x122>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	4a46      	ldr	r2, [pc, #280]	@ (8004850 <UART_Start_Receive_IT+0x238>)
 8004736:	675a      	str	r2, [r3, #116]	@ 0x74
 8004738:	e002      	b.n	8004740 <UART_Start_Receive_IT+0x128>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	4a45      	ldr	r2, [pc, #276]	@ (8004854 <UART_Start_Receive_IT+0x23c>)
 800473e:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	691b      	ldr	r3, [r3, #16]
 8004744:	2b00      	cmp	r3, #0
 8004746:	d019      	beq.n	800477c <UART_Start_Receive_IT+0x164>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004748:	f3ef 8310 	mrs	r3, PRIMASK
 800474c:	637b      	str	r3, [r7, #52]	@ 0x34
  return(result);
 800474e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004750:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004752:	2301      	movs	r3, #1
 8004754:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004756:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004758:	f383 8810 	msr	PRIMASK, r3
}
 800475c:	46c0      	nop			@ (mov r8, r8)
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	681a      	ldr	r2, [r3, #0]
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	2180      	movs	r1, #128	@ 0x80
 800476a:	0049      	lsls	r1, r1, #1
 800476c:	430a      	orrs	r2, r1
 800476e:	601a      	str	r2, [r3, #0]
 8004770:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004772:	63fb      	str	r3, [r7, #60]	@ 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004774:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004776:	f383 8810 	msr	PRIMASK, r3
}
 800477a:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800477c:	f3ef 8310 	mrs	r3, PRIMASK
 8004780:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 8004782:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8004784:	657b      	str	r3, [r7, #84]	@ 0x54
 8004786:	2301      	movs	r3, #1
 8004788:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800478a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800478c:	f383 8810 	msr	PRIMASK, r3
}
 8004790:	46c0      	nop			@ (mov r8, r8)
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	689a      	ldr	r2, [r3, #8]
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	2180      	movs	r1, #128	@ 0x80
 800479e:	0549      	lsls	r1, r1, #21
 80047a0:	430a      	orrs	r2, r1
 80047a2:	609a      	str	r2, [r3, #8]
 80047a4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80047a6:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80047a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047aa:	f383 8810 	msr	PRIMASK, r3
}
 80047ae:	46c0      	nop			@ (mov r8, r8)
 80047b0:	e047      	b.n	8004842 <UART_Start_Receive_IT+0x22a>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	689a      	ldr	r2, [r3, #8]
 80047b6:	2380      	movs	r3, #128	@ 0x80
 80047b8:	015b      	lsls	r3, r3, #5
 80047ba:	429a      	cmp	r2, r3
 80047bc:	d107      	bne.n	80047ce <UART_Start_Receive_IT+0x1b6>
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	691b      	ldr	r3, [r3, #16]
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d103      	bne.n	80047ce <UART_Start_Receive_IT+0x1b6>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	4a23      	ldr	r2, [pc, #140]	@ (8004858 <UART_Start_Receive_IT+0x240>)
 80047ca:	675a      	str	r2, [r3, #116]	@ 0x74
 80047cc:	e002      	b.n	80047d4 <UART_Start_Receive_IT+0x1bc>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	4a22      	ldr	r2, [pc, #136]	@ (800485c <UART_Start_Receive_IT+0x244>)
 80047d2:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	691b      	ldr	r3, [r3, #16]
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d019      	beq.n	8004810 <UART_Start_Receive_IT+0x1f8>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80047dc:	f3ef 8310 	mrs	r3, PRIMASK
 80047e0:	61fb      	str	r3, [r7, #28]
  return(result);
 80047e2:	69fb      	ldr	r3, [r7, #28]
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80047e4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80047e6:	2301      	movs	r3, #1
 80047e8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80047ea:	6a3b      	ldr	r3, [r7, #32]
 80047ec:	f383 8810 	msr	PRIMASK, r3
}
 80047f0:	46c0      	nop			@ (mov r8, r8)
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	681a      	ldr	r2, [r3, #0]
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	2190      	movs	r1, #144	@ 0x90
 80047fe:	0049      	lsls	r1, r1, #1
 8004800:	430a      	orrs	r2, r1
 8004802:	601a      	str	r2, [r3, #0]
 8004804:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004806:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004808:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800480a:	f383 8810 	msr	PRIMASK, r3
}
 800480e:	e018      	b.n	8004842 <UART_Start_Receive_IT+0x22a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004810:	f3ef 8310 	mrs	r3, PRIMASK
 8004814:	613b      	str	r3, [r7, #16]
  return(result);
 8004816:	693b      	ldr	r3, [r7, #16]
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8004818:	653b      	str	r3, [r7, #80]	@ 0x50
 800481a:	2301      	movs	r3, #1
 800481c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800481e:	697b      	ldr	r3, [r7, #20]
 8004820:	f383 8810 	msr	PRIMASK, r3
}
 8004824:	46c0      	nop			@ (mov r8, r8)
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	681a      	ldr	r2, [r3, #0]
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	2120      	movs	r1, #32
 8004832:	430a      	orrs	r2, r1
 8004834:	601a      	str	r2, [r3, #0]
 8004836:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004838:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800483a:	69bb      	ldr	r3, [r7, #24]
 800483c:	f383 8810 	msr	PRIMASK, r3
}
 8004840:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return HAL_OK;
 8004842:	2300      	movs	r3, #0
}
 8004844:	0018      	movs	r0, r3
 8004846:	46bd      	mov	sp, r7
 8004848:	b018      	add	sp, #96	@ 0x60
 800484a:	bd80      	pop	{r7, pc}
 800484c:	000001ff 	.word	0x000001ff
 8004850:	0800507d 	.word	0x0800507d
 8004854:	08004d3d 	.word	0x08004d3d
 8004858:	08004b79 	.word	0x08004b79
 800485c:	080049b5 	.word	0x080049b5

08004860 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004860:	b580      	push	{r7, lr}
 8004862:	b08e      	sub	sp, #56	@ 0x38
 8004864:	af00      	add	r7, sp, #0
 8004866:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004868:	f3ef 8310 	mrs	r3, PRIMASK
 800486c:	617b      	str	r3, [r7, #20]
  return(result);
 800486e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004870:	637b      	str	r3, [r7, #52]	@ 0x34
 8004872:	2301      	movs	r3, #1
 8004874:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004876:	69bb      	ldr	r3, [r7, #24]
 8004878:	f383 8810 	msr	PRIMASK, r3
}
 800487c:	46c0      	nop			@ (mov r8, r8)
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	681a      	ldr	r2, [r3, #0]
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	4926      	ldr	r1, [pc, #152]	@ (8004924 <UART_EndRxTransfer+0xc4>)
 800488a:	400a      	ands	r2, r1
 800488c:	601a      	str	r2, [r3, #0]
 800488e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004890:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004892:	69fb      	ldr	r3, [r7, #28]
 8004894:	f383 8810 	msr	PRIMASK, r3
}
 8004898:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800489a:	f3ef 8310 	mrs	r3, PRIMASK
 800489e:	623b      	str	r3, [r7, #32]
  return(result);
 80048a0:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80048a2:	633b      	str	r3, [r7, #48]	@ 0x30
 80048a4:	2301      	movs	r3, #1
 80048a6:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048aa:	f383 8810 	msr	PRIMASK, r3
}
 80048ae:	46c0      	nop			@ (mov r8, r8)
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	689a      	ldr	r2, [r3, #8]
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	491b      	ldr	r1, [pc, #108]	@ (8004928 <UART_EndRxTransfer+0xc8>)
 80048bc:	400a      	ands	r2, r1
 80048be:	609a      	str	r2, [r3, #8]
 80048c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048c2:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048c6:	f383 8810 	msr	PRIMASK, r3
}
 80048ca:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80048d0:	2b01      	cmp	r3, #1
 80048d2:	d118      	bne.n	8004906 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80048d4:	f3ef 8310 	mrs	r3, PRIMASK
 80048d8:	60bb      	str	r3, [r7, #8]
  return(result);
 80048da:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80048dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80048de:	2301      	movs	r3, #1
 80048e0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	f383 8810 	msr	PRIMASK, r3
}
 80048e8:	46c0      	nop			@ (mov r8, r8)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	681a      	ldr	r2, [r3, #0]
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	2110      	movs	r1, #16
 80048f6:	438a      	bics	r2, r1
 80048f8:	601a      	str	r2, [r3, #0]
 80048fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80048fc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048fe:	693b      	ldr	r3, [r7, #16]
 8004900:	f383 8810 	msr	PRIMASK, r3
}
 8004904:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	228c      	movs	r2, #140	@ 0x8c
 800490a:	2120      	movs	r1, #32
 800490c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	2200      	movs	r2, #0
 8004912:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2200      	movs	r2, #0
 8004918:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800491a:	46c0      	nop			@ (mov r8, r8)
 800491c:	46bd      	mov	sp, r7
 800491e:	b00e      	add	sp, #56	@ 0x38
 8004920:	bd80      	pop	{r7, pc}
 8004922:	46c0      	nop			@ (mov r8, r8)
 8004924:	fffffedf 	.word	0xfffffedf
 8004928:	effffffe 	.word	0xeffffffe

0800492c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800492c:	b580      	push	{r7, lr}
 800492e:	b084      	sub	sp, #16
 8004930:	af00      	add	r7, sp, #0
 8004932:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004938:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	225e      	movs	r2, #94	@ 0x5e
 800493e:	2100      	movs	r1, #0
 8004940:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	2256      	movs	r2, #86	@ 0x56
 8004946:	2100      	movs	r1, #0
 8004948:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	0018      	movs	r0, r3
 800494e:	f7ff f9c3 	bl	8003cd8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004952:	46c0      	nop			@ (mov r8, r8)
 8004954:	46bd      	mov	sp, r7
 8004956:	b004      	add	sp, #16
 8004958:	bd80      	pop	{r7, pc}

0800495a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800495a:	b580      	push	{r7, lr}
 800495c:	b086      	sub	sp, #24
 800495e:	af00      	add	r7, sp, #0
 8004960:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004962:	f3ef 8310 	mrs	r3, PRIMASK
 8004966:	60bb      	str	r3, [r7, #8]
  return(result);
 8004968:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800496a:	617b      	str	r3, [r7, #20]
 800496c:	2301      	movs	r3, #1
 800496e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	f383 8810 	msr	PRIMASK, r3
}
 8004976:	46c0      	nop			@ (mov r8, r8)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	681a      	ldr	r2, [r3, #0]
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	2140      	movs	r1, #64	@ 0x40
 8004984:	438a      	bics	r2, r1
 8004986:	601a      	str	r2, [r3, #0]
 8004988:	697b      	ldr	r3, [r7, #20]
 800498a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800498c:	693b      	ldr	r3, [r7, #16]
 800498e:	f383 8810 	msr	PRIMASK, r3
}
 8004992:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2288      	movs	r2, #136	@ 0x88
 8004998:	2120      	movs	r1, #32
 800499a:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2200      	movs	r2, #0
 80049a0:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	0018      	movs	r0, r3
 80049a6:	f7ff f98f 	bl	8003cc8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80049aa:	46c0      	nop			@ (mov r8, r8)
 80049ac:	46bd      	mov	sp, r7
 80049ae:	b006      	add	sp, #24
 80049b0:	bd80      	pop	{r7, pc}
	...

080049b4 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80049b4:	b580      	push	{r7, lr}
 80049b6:	b094      	sub	sp, #80	@ 0x50
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80049bc:	204e      	movs	r0, #78	@ 0x4e
 80049be:	183b      	adds	r3, r7, r0
 80049c0:	687a      	ldr	r2, [r7, #4]
 80049c2:	2160      	movs	r1, #96	@ 0x60
 80049c4:	5a52      	ldrh	r2, [r2, r1]
 80049c6:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	228c      	movs	r2, #140	@ 0x8c
 80049cc:	589b      	ldr	r3, [r3, r2]
 80049ce:	2b22      	cmp	r3, #34	@ 0x22
 80049d0:	d000      	beq.n	80049d4 <UART_RxISR_8BIT+0x20>
 80049d2:	e0bf      	b.n	8004b54 <UART_RxISR_8BIT+0x1a0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80049da:	214c      	movs	r1, #76	@ 0x4c
 80049dc:	187b      	adds	r3, r7, r1
 80049de:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80049e0:	187b      	adds	r3, r7, r1
 80049e2:	881b      	ldrh	r3, [r3, #0]
 80049e4:	b2da      	uxtb	r2, r3
 80049e6:	183b      	adds	r3, r7, r0
 80049e8:	881b      	ldrh	r3, [r3, #0]
 80049ea:	b2d9      	uxtb	r1, r3
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80049f0:	400a      	ands	r2, r1
 80049f2:	b2d2      	uxtb	r2, r2
 80049f4:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80049fa:	1c5a      	adds	r2, r3, #1
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	225e      	movs	r2, #94	@ 0x5e
 8004a04:	5a9b      	ldrh	r3, [r3, r2]
 8004a06:	b29b      	uxth	r3, r3
 8004a08:	3b01      	subs	r3, #1
 8004a0a:	b299      	uxth	r1, r3
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	225e      	movs	r2, #94	@ 0x5e
 8004a10:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	225e      	movs	r2, #94	@ 0x5e
 8004a16:	5a9b      	ldrh	r3, [r3, r2]
 8004a18:	b29b      	uxth	r3, r3
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d000      	beq.n	8004a20 <UART_RxISR_8BIT+0x6c>
 8004a1e:	e0a1      	b.n	8004b64 <UART_RxISR_8BIT+0x1b0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004a20:	f3ef 8310 	mrs	r3, PRIMASK
 8004a24:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8004a26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004a28:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004a2a:	2301      	movs	r3, #1
 8004a2c:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a30:	f383 8810 	msr	PRIMASK, r3
}
 8004a34:	46c0      	nop			@ (mov r8, r8)
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	681a      	ldr	r2, [r3, #0]
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	494a      	ldr	r1, [pc, #296]	@ (8004b6c <UART_RxISR_8BIT+0x1b8>)
 8004a42:	400a      	ands	r2, r1
 8004a44:	601a      	str	r2, [r3, #0]
 8004a46:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004a48:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a4c:	f383 8810 	msr	PRIMASK, r3
}
 8004a50:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004a52:	f3ef 8310 	mrs	r3, PRIMASK
 8004a56:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8004a58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a5a:	647b      	str	r3, [r7, #68]	@ 0x44
 8004a5c:	2301      	movs	r3, #1
 8004a5e:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a62:	f383 8810 	msr	PRIMASK, r3
}
 8004a66:	46c0      	nop			@ (mov r8, r8)
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	689a      	ldr	r2, [r3, #8]
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	2101      	movs	r1, #1
 8004a74:	438a      	bics	r2, r1
 8004a76:	609a      	str	r2, [r3, #8]
 8004a78:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004a7a:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a7e:	f383 8810 	msr	PRIMASK, r3
}
 8004a82:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	228c      	movs	r2, #140	@ 0x8c
 8004a88:	2120      	movs	r1, #32
 8004a8a:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2200      	movs	r2, #0
 8004a90:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	2200      	movs	r2, #0
 8004a96:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	4a34      	ldr	r2, [pc, #208]	@ (8004b70 <UART_RxISR_8BIT+0x1bc>)
 8004a9e:	4293      	cmp	r3, r2
 8004aa0:	d01f      	beq.n	8004ae2 <UART_RxISR_8BIT+0x12e>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	685a      	ldr	r2, [r3, #4]
 8004aa8:	2380      	movs	r3, #128	@ 0x80
 8004aaa:	041b      	lsls	r3, r3, #16
 8004aac:	4013      	ands	r3, r2
 8004aae:	d018      	beq.n	8004ae2 <UART_RxISR_8BIT+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ab0:	f3ef 8310 	mrs	r3, PRIMASK
 8004ab4:	61bb      	str	r3, [r7, #24]
  return(result);
 8004ab6:	69bb      	ldr	r3, [r7, #24]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004ab8:	643b      	str	r3, [r7, #64]	@ 0x40
 8004aba:	2301      	movs	r3, #1
 8004abc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004abe:	69fb      	ldr	r3, [r7, #28]
 8004ac0:	f383 8810 	msr	PRIMASK, r3
}
 8004ac4:	46c0      	nop			@ (mov r8, r8)
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	681a      	ldr	r2, [r3, #0]
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	4928      	ldr	r1, [pc, #160]	@ (8004b74 <UART_RxISR_8BIT+0x1c0>)
 8004ad2:	400a      	ands	r2, r1
 8004ad4:	601a      	str	r2, [r3, #0]
 8004ad6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004ad8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ada:	6a3b      	ldr	r3, [r7, #32]
 8004adc:	f383 8810 	msr	PRIMASK, r3
}
 8004ae0:	46c0      	nop			@ (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004ae6:	2b01      	cmp	r3, #1
 8004ae8:	d12f      	bne.n	8004b4a <UART_RxISR_8BIT+0x196>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	2200      	movs	r2, #0
 8004aee:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004af0:	f3ef 8310 	mrs	r3, PRIMASK
 8004af4:	60fb      	str	r3, [r7, #12]
  return(result);
 8004af6:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004af8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004afa:	2301      	movs	r3, #1
 8004afc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004afe:	693b      	ldr	r3, [r7, #16]
 8004b00:	f383 8810 	msr	PRIMASK, r3
}
 8004b04:	46c0      	nop			@ (mov r8, r8)
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	681a      	ldr	r2, [r3, #0]
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	2110      	movs	r1, #16
 8004b12:	438a      	bics	r2, r1
 8004b14:	601a      	str	r2, [r3, #0]
 8004b16:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004b18:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b1a:	697b      	ldr	r3, [r7, #20]
 8004b1c:	f383 8810 	msr	PRIMASK, r3
}
 8004b20:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	69db      	ldr	r3, [r3, #28]
 8004b28:	2210      	movs	r2, #16
 8004b2a:	4013      	ands	r3, r2
 8004b2c:	2b10      	cmp	r3, #16
 8004b2e:	d103      	bne.n	8004b38 <UART_RxISR_8BIT+0x184>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	2210      	movs	r2, #16
 8004b36:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	225c      	movs	r2, #92	@ 0x5c
 8004b3c:	5a9a      	ldrh	r2, [r3, r2]
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	0011      	movs	r1, r2
 8004b42:	0018      	movs	r0, r3
 8004b44:	f7ff f8d0 	bl	8003ce8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004b48:	e00c      	b.n	8004b64 <UART_RxISR_8BIT+0x1b0>
        HAL_UART_RxCpltCallback(huart);
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	0018      	movs	r0, r3
 8004b4e:	f7fb ff35 	bl	80009bc <HAL_UART_RxCpltCallback>
}
 8004b52:	e007      	b.n	8004b64 <UART_RxISR_8BIT+0x1b0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	699a      	ldr	r2, [r3, #24]
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	2108      	movs	r1, #8
 8004b60:	430a      	orrs	r2, r1
 8004b62:	619a      	str	r2, [r3, #24]
}
 8004b64:	46c0      	nop			@ (mov r8, r8)
 8004b66:	46bd      	mov	sp, r7
 8004b68:	b014      	add	sp, #80	@ 0x50
 8004b6a:	bd80      	pop	{r7, pc}
 8004b6c:	fffffedf 	.word	0xfffffedf
 8004b70:	40008000 	.word	0x40008000
 8004b74:	fbffffff 	.word	0xfbffffff

08004b78 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004b78:	b580      	push	{r7, lr}
 8004b7a:	b094      	sub	sp, #80	@ 0x50
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8004b80:	204e      	movs	r0, #78	@ 0x4e
 8004b82:	183b      	adds	r3, r7, r0
 8004b84:	687a      	ldr	r2, [r7, #4]
 8004b86:	2160      	movs	r1, #96	@ 0x60
 8004b88:	5a52      	ldrh	r2, [r2, r1]
 8004b8a:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	228c      	movs	r2, #140	@ 0x8c
 8004b90:	589b      	ldr	r3, [r3, r2]
 8004b92:	2b22      	cmp	r3, #34	@ 0x22
 8004b94:	d000      	beq.n	8004b98 <UART_RxISR_16BIT+0x20>
 8004b96:	e0bf      	b.n	8004d18 <UART_RxISR_16BIT+0x1a0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004b9e:	214c      	movs	r1, #76	@ 0x4c
 8004ba0:	187b      	adds	r3, r7, r1
 8004ba2:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ba8:	64bb      	str	r3, [r7, #72]	@ 0x48
    *tmp = (uint16_t)(uhdata & uhMask);
 8004baa:	187b      	adds	r3, r7, r1
 8004bac:	183a      	adds	r2, r7, r0
 8004bae:	881b      	ldrh	r3, [r3, #0]
 8004bb0:	8812      	ldrh	r2, [r2, #0]
 8004bb2:	4013      	ands	r3, r2
 8004bb4:	b29a      	uxth	r2, r3
 8004bb6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004bb8:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004bbe:	1c9a      	adds	r2, r3, #2
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	225e      	movs	r2, #94	@ 0x5e
 8004bc8:	5a9b      	ldrh	r3, [r3, r2]
 8004bca:	b29b      	uxth	r3, r3
 8004bcc:	3b01      	subs	r3, #1
 8004bce:	b299      	uxth	r1, r3
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	225e      	movs	r2, #94	@ 0x5e
 8004bd4:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	225e      	movs	r2, #94	@ 0x5e
 8004bda:	5a9b      	ldrh	r3, [r3, r2]
 8004bdc:	b29b      	uxth	r3, r3
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d000      	beq.n	8004be4 <UART_RxISR_16BIT+0x6c>
 8004be2:	e0a1      	b.n	8004d28 <UART_RxISR_16BIT+0x1b0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004be4:	f3ef 8310 	mrs	r3, PRIMASK
 8004be8:	623b      	str	r3, [r7, #32]
  return(result);
 8004bea:	6a3b      	ldr	r3, [r7, #32]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004bec:	647b      	str	r3, [r7, #68]	@ 0x44
 8004bee:	2301      	movs	r3, #1
 8004bf0:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004bf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bf4:	f383 8810 	msr	PRIMASK, r3
}
 8004bf8:	46c0      	nop			@ (mov r8, r8)
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	681a      	ldr	r2, [r3, #0]
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	494a      	ldr	r1, [pc, #296]	@ (8004d30 <UART_RxISR_16BIT+0x1b8>)
 8004c06:	400a      	ands	r2, r1
 8004c08:	601a      	str	r2, [r3, #0]
 8004c0a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004c0c:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c10:	f383 8810 	msr	PRIMASK, r3
}
 8004c14:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004c16:	f3ef 8310 	mrs	r3, PRIMASK
 8004c1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 8004c1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c1e:	643b      	str	r3, [r7, #64]	@ 0x40
 8004c20:	2301      	movs	r3, #1
 8004c22:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c26:	f383 8810 	msr	PRIMASK, r3
}
 8004c2a:	46c0      	nop			@ (mov r8, r8)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	689a      	ldr	r2, [r3, #8]
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	2101      	movs	r1, #1
 8004c38:	438a      	bics	r2, r1
 8004c3a:	609a      	str	r2, [r3, #8]
 8004c3c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004c3e:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c42:	f383 8810 	msr	PRIMASK, r3
}
 8004c46:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	228c      	movs	r2, #140	@ 0x8c
 8004c4c:	2120      	movs	r1, #32
 8004c4e:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2200      	movs	r2, #0
 8004c54:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	2200      	movs	r2, #0
 8004c5a:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	4a34      	ldr	r2, [pc, #208]	@ (8004d34 <UART_RxISR_16BIT+0x1bc>)
 8004c62:	4293      	cmp	r3, r2
 8004c64:	d01f      	beq.n	8004ca6 <UART_RxISR_16BIT+0x12e>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	685a      	ldr	r2, [r3, #4]
 8004c6c:	2380      	movs	r3, #128	@ 0x80
 8004c6e:	041b      	lsls	r3, r3, #16
 8004c70:	4013      	ands	r3, r2
 8004c72:	d018      	beq.n	8004ca6 <UART_RxISR_16BIT+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004c74:	f3ef 8310 	mrs	r3, PRIMASK
 8004c78:	617b      	str	r3, [r7, #20]
  return(result);
 8004c7a:	697b      	ldr	r3, [r7, #20]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004c7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004c7e:	2301      	movs	r3, #1
 8004c80:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c82:	69bb      	ldr	r3, [r7, #24]
 8004c84:	f383 8810 	msr	PRIMASK, r3
}
 8004c88:	46c0      	nop			@ (mov r8, r8)
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	681a      	ldr	r2, [r3, #0]
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	4928      	ldr	r1, [pc, #160]	@ (8004d38 <UART_RxISR_16BIT+0x1c0>)
 8004c96:	400a      	ands	r2, r1
 8004c98:	601a      	str	r2, [r3, #0]
 8004c9a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004c9c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c9e:	69fb      	ldr	r3, [r7, #28]
 8004ca0:	f383 8810 	msr	PRIMASK, r3
}
 8004ca4:	46c0      	nop			@ (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004caa:	2b01      	cmp	r3, #1
 8004cac:	d12f      	bne.n	8004d0e <UART_RxISR_16BIT+0x196>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004cb4:	f3ef 8310 	mrs	r3, PRIMASK
 8004cb8:	60bb      	str	r3, [r7, #8]
  return(result);
 8004cba:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004cbc:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004cbe:	2301      	movs	r3, #1
 8004cc0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	f383 8810 	msr	PRIMASK, r3
}
 8004cc8:	46c0      	nop			@ (mov r8, r8)
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	681a      	ldr	r2, [r3, #0]
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	2110      	movs	r1, #16
 8004cd6:	438a      	bics	r2, r1
 8004cd8:	601a      	str	r2, [r3, #0]
 8004cda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004cdc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004cde:	693b      	ldr	r3, [r7, #16]
 8004ce0:	f383 8810 	msr	PRIMASK, r3
}
 8004ce4:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	69db      	ldr	r3, [r3, #28]
 8004cec:	2210      	movs	r2, #16
 8004cee:	4013      	ands	r3, r2
 8004cf0:	2b10      	cmp	r3, #16
 8004cf2:	d103      	bne.n	8004cfc <UART_RxISR_16BIT+0x184>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	2210      	movs	r2, #16
 8004cfa:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	225c      	movs	r2, #92	@ 0x5c
 8004d00:	5a9a      	ldrh	r2, [r3, r2]
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	0011      	movs	r1, r2
 8004d06:	0018      	movs	r0, r3
 8004d08:	f7fe ffee 	bl	8003ce8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004d0c:	e00c      	b.n	8004d28 <UART_RxISR_16BIT+0x1b0>
        HAL_UART_RxCpltCallback(huart);
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	0018      	movs	r0, r3
 8004d12:	f7fb fe53 	bl	80009bc <HAL_UART_RxCpltCallback>
}
 8004d16:	e007      	b.n	8004d28 <UART_RxISR_16BIT+0x1b0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	699a      	ldr	r2, [r3, #24]
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	2108      	movs	r1, #8
 8004d24:	430a      	orrs	r2, r1
 8004d26:	619a      	str	r2, [r3, #24]
}
 8004d28:	46c0      	nop			@ (mov r8, r8)
 8004d2a:	46bd      	mov	sp, r7
 8004d2c:	b014      	add	sp, #80	@ 0x50
 8004d2e:	bd80      	pop	{r7, pc}
 8004d30:	fffffedf 	.word	0xfffffedf
 8004d34:	40008000 	.word	0x40008000
 8004d38:	fbffffff 	.word	0xfbffffff

08004d3c <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8004d3c:	b580      	push	{r7, lr}
 8004d3e:	b0a0      	sub	sp, #128	@ 0x80
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8004d44:	237a      	movs	r3, #122	@ 0x7a
 8004d46:	18fb      	adds	r3, r7, r3
 8004d48:	687a      	ldr	r2, [r7, #4]
 8004d4a:	2160      	movs	r1, #96	@ 0x60
 8004d4c:	5a52      	ldrh	r2, [r2, r1]
 8004d4e:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	69db      	ldr	r3, [r3, #28]
 8004d56:	67fb      	str	r3, [r7, #124]	@ 0x7c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	677b      	str	r3, [r7, #116]	@ 0x74
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	689b      	ldr	r3, [r3, #8]
 8004d66:	673b      	str	r3, [r7, #112]	@ 0x70

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	228c      	movs	r2, #140	@ 0x8c
 8004d6c:	589b      	ldr	r3, [r3, r2]
 8004d6e:	2b22      	cmp	r3, #34	@ 0x22
 8004d70:	d000      	beq.n	8004d74 <UART_RxISR_8BIT_FIFOEN+0x38>
 8004d72:	e16a      	b.n	800504a <UART_RxISR_8BIT_FIFOEN+0x30e>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8004d74:	236e      	movs	r3, #110	@ 0x6e
 8004d76:	18fb      	adds	r3, r7, r3
 8004d78:	687a      	ldr	r2, [r7, #4]
 8004d7a:	2168      	movs	r1, #104	@ 0x68
 8004d7c:	5a52      	ldrh	r2, [r2, r1]
 8004d7e:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8004d80:	e111      	b.n	8004fa6 <UART_RxISR_8BIT_FIFOEN+0x26a>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004d88:	216c      	movs	r1, #108	@ 0x6c
 8004d8a:	187b      	adds	r3, r7, r1
 8004d8c:	801a      	strh	r2, [r3, #0]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004d8e:	187b      	adds	r3, r7, r1
 8004d90:	881b      	ldrh	r3, [r3, #0]
 8004d92:	b2da      	uxtb	r2, r3
 8004d94:	237a      	movs	r3, #122	@ 0x7a
 8004d96:	18fb      	adds	r3, r7, r3
 8004d98:	881b      	ldrh	r3, [r3, #0]
 8004d9a:	b2d9      	uxtb	r1, r3
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004da0:	400a      	ands	r2, r1
 8004da2:	b2d2      	uxtb	r2, r2
 8004da4:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004daa:	1c5a      	adds	r2, r3, #1
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	225e      	movs	r2, #94	@ 0x5e
 8004db4:	5a9b      	ldrh	r3, [r3, r2]
 8004db6:	b29b      	uxth	r3, r3
 8004db8:	3b01      	subs	r3, #1
 8004dba:	b299      	uxth	r1, r3
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	225e      	movs	r2, #94	@ 0x5e
 8004dc0:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	69db      	ldr	r3, [r3, #28]
 8004dc8:	67fb      	str	r3, [r7, #124]	@ 0x7c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8004dca:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004dcc:	2207      	movs	r2, #7
 8004dce:	4013      	ands	r3, r2
 8004dd0:	d049      	beq.n	8004e66 <UART_RxISR_8BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004dd2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004dd4:	2201      	movs	r2, #1
 8004dd6:	4013      	ands	r3, r2
 8004dd8:	d010      	beq.n	8004dfc <UART_RxISR_8BIT_FIFOEN+0xc0>
 8004dda:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8004ddc:	2380      	movs	r3, #128	@ 0x80
 8004dde:	005b      	lsls	r3, r3, #1
 8004de0:	4013      	ands	r3, r2
 8004de2:	d00b      	beq.n	8004dfc <UART_RxISR_8BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	2201      	movs	r2, #1
 8004dea:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2290      	movs	r2, #144	@ 0x90
 8004df0:	589b      	ldr	r3, [r3, r2]
 8004df2:	2201      	movs	r2, #1
 8004df4:	431a      	orrs	r2, r3
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	2190      	movs	r1, #144	@ 0x90
 8004dfa:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004dfc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004dfe:	2202      	movs	r2, #2
 8004e00:	4013      	ands	r3, r2
 8004e02:	d00f      	beq.n	8004e24 <UART_RxISR_8BIT_FIFOEN+0xe8>
 8004e04:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004e06:	2201      	movs	r2, #1
 8004e08:	4013      	ands	r3, r2
 8004e0a:	d00b      	beq.n	8004e24 <UART_RxISR_8BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	2202      	movs	r2, #2
 8004e12:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2290      	movs	r2, #144	@ 0x90
 8004e18:	589b      	ldr	r3, [r3, r2]
 8004e1a:	2204      	movs	r2, #4
 8004e1c:	431a      	orrs	r2, r3
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	2190      	movs	r1, #144	@ 0x90
 8004e22:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004e24:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004e26:	2204      	movs	r2, #4
 8004e28:	4013      	ands	r3, r2
 8004e2a:	d00f      	beq.n	8004e4c <UART_RxISR_8BIT_FIFOEN+0x110>
 8004e2c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004e2e:	2201      	movs	r2, #1
 8004e30:	4013      	ands	r3, r2
 8004e32:	d00b      	beq.n	8004e4c <UART_RxISR_8BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	2204      	movs	r2, #4
 8004e3a:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2290      	movs	r2, #144	@ 0x90
 8004e40:	589b      	ldr	r3, [r3, r2]
 8004e42:	2202      	movs	r2, #2
 8004e44:	431a      	orrs	r2, r3
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	2190      	movs	r1, #144	@ 0x90
 8004e4a:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2290      	movs	r2, #144	@ 0x90
 8004e50:	589b      	ldr	r3, [r3, r2]
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d007      	beq.n	8004e66 <UART_RxISR_8BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	0018      	movs	r0, r3
 8004e5a:	f7fe ff3d 	bl	8003cd8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	2290      	movs	r2, #144	@ 0x90
 8004e62:	2100      	movs	r1, #0
 8004e64:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	225e      	movs	r2, #94	@ 0x5e
 8004e6a:	5a9b      	ldrh	r3, [r3, r2]
 8004e6c:	b29b      	uxth	r3, r3
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d000      	beq.n	8004e74 <UART_RxISR_8BIT_FIFOEN+0x138>
 8004e72:	e098      	b.n	8004fa6 <UART_RxISR_8BIT_FIFOEN+0x26a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004e74:	f3ef 8310 	mrs	r3, PRIMASK
 8004e78:	63bb      	str	r3, [r7, #56]	@ 0x38
  return(result);
 8004e7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004e7c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004e7e:	2301      	movs	r3, #1
 8004e80:	63fb      	str	r3, [r7, #60]	@ 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e82:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004e84:	f383 8810 	msr	PRIMASK, r3
}
 8004e88:	46c0      	nop			@ (mov r8, r8)
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	681a      	ldr	r2, [r3, #0]
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	4973      	ldr	r1, [pc, #460]	@ (8005064 <UART_RxISR_8BIT_FIFOEN+0x328>)
 8004e96:	400a      	ands	r2, r1
 8004e98:	601a      	str	r2, [r3, #0]
 8004e9a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004e9c:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e9e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004ea0:	f383 8810 	msr	PRIMASK, r3
}
 8004ea4:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ea6:	f3ef 8310 	mrs	r3, PRIMASK
 8004eaa:	647b      	str	r3, [r7, #68]	@ 0x44
  return(result);
 8004eac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004eae:	667b      	str	r3, [r7, #100]	@ 0x64
 8004eb0:	2301      	movs	r3, #1
 8004eb2:	64bb      	str	r3, [r7, #72]	@ 0x48
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004eb4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004eb6:	f383 8810 	msr	PRIMASK, r3
}
 8004eba:	46c0      	nop			@ (mov r8, r8)
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	689a      	ldr	r2, [r3, #8]
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	4968      	ldr	r1, [pc, #416]	@ (8005068 <UART_RxISR_8BIT_FIFOEN+0x32c>)
 8004ec8:	400a      	ands	r2, r1
 8004eca:	609a      	str	r2, [r3, #8]
 8004ecc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004ece:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ed0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004ed2:	f383 8810 	msr	PRIMASK, r3
}
 8004ed6:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	228c      	movs	r2, #140	@ 0x8c
 8004edc:	2120      	movs	r1, #32
 8004ede:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	2200      	movs	r2, #0
 8004eea:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	4a5e      	ldr	r2, [pc, #376]	@ (800506c <UART_RxISR_8BIT_FIFOEN+0x330>)
 8004ef2:	4293      	cmp	r3, r2
 8004ef4:	d01f      	beq.n	8004f36 <UART_RxISR_8BIT_FIFOEN+0x1fa>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	685a      	ldr	r2, [r3, #4]
 8004efc:	2380      	movs	r3, #128	@ 0x80
 8004efe:	041b      	lsls	r3, r3, #16
 8004f00:	4013      	ands	r3, r2
 8004f02:	d018      	beq.n	8004f36 <UART_RxISR_8BIT_FIFOEN+0x1fa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004f04:	f3ef 8310 	mrs	r3, PRIMASK
 8004f08:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 8004f0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004f0c:	663b      	str	r3, [r7, #96]	@ 0x60
 8004f0e:	2301      	movs	r3, #1
 8004f10:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f14:	f383 8810 	msr	PRIMASK, r3
}
 8004f18:	46c0      	nop			@ (mov r8, r8)
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	681a      	ldr	r2, [r3, #0]
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	4952      	ldr	r1, [pc, #328]	@ (8005070 <UART_RxISR_8BIT_FIFOEN+0x334>)
 8004f26:	400a      	ands	r2, r1
 8004f28:	601a      	str	r2, [r3, #0]
 8004f2a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004f2c:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f2e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f30:	f383 8810 	msr	PRIMASK, r3
}
 8004f34:	46c0      	nop			@ (mov r8, r8)
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004f3a:	2b01      	cmp	r3, #1
 8004f3c:	d12f      	bne.n	8004f9e <UART_RxISR_8BIT_FIFOEN+0x262>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	2200      	movs	r2, #0
 8004f42:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004f44:	f3ef 8310 	mrs	r3, PRIMASK
 8004f48:	623b      	str	r3, [r7, #32]
  return(result);
 8004f4a:	6a3b      	ldr	r3, [r7, #32]

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f4c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004f4e:	2301      	movs	r3, #1
 8004f50:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f54:	f383 8810 	msr	PRIMASK, r3
}
 8004f58:	46c0      	nop			@ (mov r8, r8)
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	681a      	ldr	r2, [r3, #0]
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	2110      	movs	r1, #16
 8004f66:	438a      	bics	r2, r1
 8004f68:	601a      	str	r2, [r3, #0]
 8004f6a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004f6c:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f70:	f383 8810 	msr	PRIMASK, r3
}
 8004f74:	46c0      	nop			@ (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	69db      	ldr	r3, [r3, #28]
 8004f7c:	2210      	movs	r2, #16
 8004f7e:	4013      	ands	r3, r2
 8004f80:	2b10      	cmp	r3, #16
 8004f82:	d103      	bne.n	8004f8c <UART_RxISR_8BIT_FIFOEN+0x250>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	2210      	movs	r2, #16
 8004f8a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	225c      	movs	r2, #92	@ 0x5c
 8004f90:	5a9a      	ldrh	r2, [r3, r2]
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	0011      	movs	r1, r2
 8004f96:	0018      	movs	r0, r3
 8004f98:	f7fe fea6 	bl	8003ce8 <HAL_UARTEx_RxEventCallback>
 8004f9c:	e003      	b.n	8004fa6 <UART_RxISR_8BIT_FIFOEN+0x26a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	0018      	movs	r0, r3
 8004fa2:	f7fb fd0b 	bl	80009bc <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8004fa6:	236e      	movs	r3, #110	@ 0x6e
 8004fa8:	18fb      	adds	r3, r7, r3
 8004faa:	881b      	ldrh	r3, [r3, #0]
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d004      	beq.n	8004fba <UART_RxISR_8BIT_FIFOEN+0x27e>
 8004fb0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004fb2:	2220      	movs	r2, #32
 8004fb4:	4013      	ands	r3, r2
 8004fb6:	d000      	beq.n	8004fba <UART_RxISR_8BIT_FIFOEN+0x27e>
 8004fb8:	e6e3      	b.n	8004d82 <UART_RxISR_8BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8004fba:	205a      	movs	r0, #90	@ 0x5a
 8004fbc:	183b      	adds	r3, r7, r0
 8004fbe:	687a      	ldr	r2, [r7, #4]
 8004fc0:	215e      	movs	r1, #94	@ 0x5e
 8004fc2:	5a52      	ldrh	r2, [r2, r1]
 8004fc4:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8004fc6:	0001      	movs	r1, r0
 8004fc8:	187b      	adds	r3, r7, r1
 8004fca:	881b      	ldrh	r3, [r3, #0]
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d044      	beq.n	800505a <UART_RxISR_8BIT_FIFOEN+0x31e>
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2268      	movs	r2, #104	@ 0x68
 8004fd4:	5a9b      	ldrh	r3, [r3, r2]
 8004fd6:	187a      	adds	r2, r7, r1
 8004fd8:	8812      	ldrh	r2, [r2, #0]
 8004fda:	429a      	cmp	r2, r3
 8004fdc:	d23d      	bcs.n	800505a <UART_RxISR_8BIT_FIFOEN+0x31e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004fde:	f3ef 8310 	mrs	r3, PRIMASK
 8004fe2:	60bb      	str	r3, [r7, #8]
  return(result);
 8004fe4:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8004fe6:	657b      	str	r3, [r7, #84]	@ 0x54
 8004fe8:	2301      	movs	r3, #1
 8004fea:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	f383 8810 	msr	PRIMASK, r3
}
 8004ff2:	46c0      	nop			@ (mov r8, r8)
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	689a      	ldr	r2, [r3, #8]
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	491d      	ldr	r1, [pc, #116]	@ (8005074 <UART_RxISR_8BIT_FIFOEN+0x338>)
 8005000:	400a      	ands	r2, r1
 8005002:	609a      	str	r2, [r3, #8]
 8005004:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005006:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005008:	693b      	ldr	r3, [r7, #16]
 800500a:	f383 8810 	msr	PRIMASK, r3
}
 800500e:	46c0      	nop			@ (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	4a19      	ldr	r2, [pc, #100]	@ (8005078 <UART_RxISR_8BIT_FIFOEN+0x33c>)
 8005014:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005016:	f3ef 8310 	mrs	r3, PRIMASK
 800501a:	617b      	str	r3, [r7, #20]
  return(result);
 800501c:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800501e:	653b      	str	r3, [r7, #80]	@ 0x50
 8005020:	2301      	movs	r3, #1
 8005022:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005024:	69bb      	ldr	r3, [r7, #24]
 8005026:	f383 8810 	msr	PRIMASK, r3
}
 800502a:	46c0      	nop			@ (mov r8, r8)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	681a      	ldr	r2, [r3, #0]
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	2120      	movs	r1, #32
 8005038:	430a      	orrs	r2, r1
 800503a:	601a      	str	r2, [r3, #0]
 800503c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800503e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005040:	69fb      	ldr	r3, [r7, #28]
 8005042:	f383 8810 	msr	PRIMASK, r3
}
 8005046:	46c0      	nop			@ (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005048:	e007      	b.n	800505a <UART_RxISR_8BIT_FIFOEN+0x31e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	699a      	ldr	r2, [r3, #24]
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	2108      	movs	r1, #8
 8005056:	430a      	orrs	r2, r1
 8005058:	619a      	str	r2, [r3, #24]
}
 800505a:	46c0      	nop			@ (mov r8, r8)
 800505c:	46bd      	mov	sp, r7
 800505e:	b020      	add	sp, #128	@ 0x80
 8005060:	bd80      	pop	{r7, pc}
 8005062:	46c0      	nop			@ (mov r8, r8)
 8005064:	fffffeff 	.word	0xfffffeff
 8005068:	effffffe 	.word	0xeffffffe
 800506c:	40008000 	.word	0x40008000
 8005070:	fbffffff 	.word	0xfbffffff
 8005074:	efffffff 	.word	0xefffffff
 8005078:	080049b5 	.word	0x080049b5

0800507c <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800507c:	b580      	push	{r7, lr}
 800507e:	b0a2      	sub	sp, #136	@ 0x88
 8005080:	af00      	add	r7, sp, #0
 8005082:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8005084:	2382      	movs	r3, #130	@ 0x82
 8005086:	18fb      	adds	r3, r7, r3
 8005088:	687a      	ldr	r2, [r7, #4]
 800508a:	2160      	movs	r1, #96	@ 0x60
 800508c:	5a52      	ldrh	r2, [r2, r1]
 800508e:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	69db      	ldr	r3, [r3, #28]
 8005096:	2284      	movs	r2, #132	@ 0x84
 8005098:	18ba      	adds	r2, r7, r2
 800509a:	6013      	str	r3, [r2, #0]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	67fb      	str	r3, [r7, #124]	@ 0x7c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	689b      	ldr	r3, [r3, #8]
 80050aa:	67bb      	str	r3, [r7, #120]	@ 0x78

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	228c      	movs	r2, #140	@ 0x8c
 80050b0:	589b      	ldr	r3, [r3, r2]
 80050b2:	2b22      	cmp	r3, #34	@ 0x22
 80050b4:	d000      	beq.n	80050b8 <UART_RxISR_16BIT_FIFOEN+0x3c>
 80050b6:	e174      	b.n	80053a2 <UART_RxISR_16BIT_FIFOEN+0x326>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80050b8:	2376      	movs	r3, #118	@ 0x76
 80050ba:	18fb      	adds	r3, r7, r3
 80050bc:	687a      	ldr	r2, [r7, #4]
 80050be:	2168      	movs	r1, #104	@ 0x68
 80050c0:	5a52      	ldrh	r2, [r2, r1]
 80050c2:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80050c4:	e119      	b.n	80052fa <UART_RxISR_16BIT_FIFOEN+0x27e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80050cc:	2174      	movs	r1, #116	@ 0x74
 80050ce:	187b      	adds	r3, r7, r1
 80050d0:	801a      	strh	r2, [r3, #0]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80050d6:	673b      	str	r3, [r7, #112]	@ 0x70
      *tmp = (uint16_t)(uhdata & uhMask);
 80050d8:	187b      	adds	r3, r7, r1
 80050da:	2282      	movs	r2, #130	@ 0x82
 80050dc:	18ba      	adds	r2, r7, r2
 80050de:	881b      	ldrh	r3, [r3, #0]
 80050e0:	8812      	ldrh	r2, [r2, #0]
 80050e2:	4013      	ands	r3, r2
 80050e4:	b29a      	uxth	r2, r3
 80050e6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80050e8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80050ee:	1c9a      	adds	r2, r3, #2
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	225e      	movs	r2, #94	@ 0x5e
 80050f8:	5a9b      	ldrh	r3, [r3, r2]
 80050fa:	b29b      	uxth	r3, r3
 80050fc:	3b01      	subs	r3, #1
 80050fe:	b299      	uxth	r1, r3
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	225e      	movs	r2, #94	@ 0x5e
 8005104:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	69db      	ldr	r3, [r3, #28]
 800510c:	2184      	movs	r1, #132	@ 0x84
 800510e:	187a      	adds	r2, r7, r1
 8005110:	6013      	str	r3, [r2, #0]

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8005112:	187b      	adds	r3, r7, r1
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	2207      	movs	r2, #7
 8005118:	4013      	ands	r3, r2
 800511a:	d04e      	beq.n	80051ba <UART_RxISR_16BIT_FIFOEN+0x13e>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800511c:	187b      	adds	r3, r7, r1
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	2201      	movs	r2, #1
 8005122:	4013      	ands	r3, r2
 8005124:	d010      	beq.n	8005148 <UART_RxISR_16BIT_FIFOEN+0xcc>
 8005126:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8005128:	2380      	movs	r3, #128	@ 0x80
 800512a:	005b      	lsls	r3, r3, #1
 800512c:	4013      	ands	r3, r2
 800512e:	d00b      	beq.n	8005148 <UART_RxISR_16BIT_FIFOEN+0xcc>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	2201      	movs	r2, #1
 8005136:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2290      	movs	r2, #144	@ 0x90
 800513c:	589b      	ldr	r3, [r3, r2]
 800513e:	2201      	movs	r2, #1
 8005140:	431a      	orrs	r2, r3
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	2190      	movs	r1, #144	@ 0x90
 8005146:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005148:	2384      	movs	r3, #132	@ 0x84
 800514a:	18fb      	adds	r3, r7, r3
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	2202      	movs	r2, #2
 8005150:	4013      	ands	r3, r2
 8005152:	d00f      	beq.n	8005174 <UART_RxISR_16BIT_FIFOEN+0xf8>
 8005154:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005156:	2201      	movs	r2, #1
 8005158:	4013      	ands	r3, r2
 800515a:	d00b      	beq.n	8005174 <UART_RxISR_16BIT_FIFOEN+0xf8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	2202      	movs	r2, #2
 8005162:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2290      	movs	r2, #144	@ 0x90
 8005168:	589b      	ldr	r3, [r3, r2]
 800516a:	2204      	movs	r2, #4
 800516c:	431a      	orrs	r2, r3
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	2190      	movs	r1, #144	@ 0x90
 8005172:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005174:	2384      	movs	r3, #132	@ 0x84
 8005176:	18fb      	adds	r3, r7, r3
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	2204      	movs	r2, #4
 800517c:	4013      	ands	r3, r2
 800517e:	d00f      	beq.n	80051a0 <UART_RxISR_16BIT_FIFOEN+0x124>
 8005180:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005182:	2201      	movs	r2, #1
 8005184:	4013      	ands	r3, r2
 8005186:	d00b      	beq.n	80051a0 <UART_RxISR_16BIT_FIFOEN+0x124>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	2204      	movs	r2, #4
 800518e:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2290      	movs	r2, #144	@ 0x90
 8005194:	589b      	ldr	r3, [r3, r2]
 8005196:	2202      	movs	r2, #2
 8005198:	431a      	orrs	r2, r3
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	2190      	movs	r1, #144	@ 0x90
 800519e:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2290      	movs	r2, #144	@ 0x90
 80051a4:	589b      	ldr	r3, [r3, r2]
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d007      	beq.n	80051ba <UART_RxISR_16BIT_FIFOEN+0x13e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	0018      	movs	r0, r3
 80051ae:	f7fe fd93 	bl	8003cd8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	2290      	movs	r2, #144	@ 0x90
 80051b6:	2100      	movs	r1, #0
 80051b8:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	225e      	movs	r2, #94	@ 0x5e
 80051be:	5a9b      	ldrh	r3, [r3, r2]
 80051c0:	b29b      	uxth	r3, r3
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d000      	beq.n	80051c8 <UART_RxISR_16BIT_FIFOEN+0x14c>
 80051c6:	e098      	b.n	80052fa <UART_RxISR_16BIT_FIFOEN+0x27e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80051c8:	f3ef 8310 	mrs	r3, PRIMASK
 80051cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 80051ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80051d0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80051d2:	2301      	movs	r3, #1
 80051d4:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80051d6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80051d8:	f383 8810 	msr	PRIMASK, r3
}
 80051dc:	46c0      	nop			@ (mov r8, r8)
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	681a      	ldr	r2, [r3, #0]
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	4974      	ldr	r1, [pc, #464]	@ (80053bc <UART_RxISR_16BIT_FIFOEN+0x340>)
 80051ea:	400a      	ands	r2, r1
 80051ec:	601a      	str	r2, [r3, #0]
 80051ee:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80051f0:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80051f2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80051f4:	f383 8810 	msr	PRIMASK, r3
}
 80051f8:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80051fa:	f3ef 8310 	mrs	r3, PRIMASK
 80051fe:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 8005200:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005202:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005204:	2301      	movs	r3, #1
 8005206:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005208:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800520a:	f383 8810 	msr	PRIMASK, r3
}
 800520e:	46c0      	nop			@ (mov r8, r8)
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	689a      	ldr	r2, [r3, #8]
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	4969      	ldr	r1, [pc, #420]	@ (80053c0 <UART_RxISR_16BIT_FIFOEN+0x344>)
 800521c:	400a      	ands	r2, r1
 800521e:	609a      	str	r2, [r3, #8]
 8005220:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005222:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005224:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005226:	f383 8810 	msr	PRIMASK, r3
}
 800522a:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	228c      	movs	r2, #140	@ 0x8c
 8005230:	2120      	movs	r1, #32
 8005232:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2200      	movs	r2, #0
 8005238:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	2200      	movs	r2, #0
 800523e:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	4a5f      	ldr	r2, [pc, #380]	@ (80053c4 <UART_RxISR_16BIT_FIFOEN+0x348>)
 8005246:	4293      	cmp	r3, r2
 8005248:	d01f      	beq.n	800528a <UART_RxISR_16BIT_FIFOEN+0x20e>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	685a      	ldr	r2, [r3, #4]
 8005250:	2380      	movs	r3, #128	@ 0x80
 8005252:	041b      	lsls	r3, r3, #16
 8005254:	4013      	ands	r3, r2
 8005256:	d018      	beq.n	800528a <UART_RxISR_16BIT_FIFOEN+0x20e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005258:	f3ef 8310 	mrs	r3, PRIMASK
 800525c:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 800525e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005260:	667b      	str	r3, [r7, #100]	@ 0x64
 8005262:	2301      	movs	r3, #1
 8005264:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005266:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005268:	f383 8810 	msr	PRIMASK, r3
}
 800526c:	46c0      	nop			@ (mov r8, r8)
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	681a      	ldr	r2, [r3, #0]
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	4953      	ldr	r1, [pc, #332]	@ (80053c8 <UART_RxISR_16BIT_FIFOEN+0x34c>)
 800527a:	400a      	ands	r2, r1
 800527c:	601a      	str	r2, [r3, #0]
 800527e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005280:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005282:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005284:	f383 8810 	msr	PRIMASK, r3
}
 8005288:	46c0      	nop			@ (mov r8, r8)
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800528e:	2b01      	cmp	r3, #1
 8005290:	d12f      	bne.n	80052f2 <UART_RxISR_16BIT_FIFOEN+0x276>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	2200      	movs	r2, #0
 8005296:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005298:	f3ef 8310 	mrs	r3, PRIMASK
 800529c:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800529e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80052a0:	663b      	str	r3, [r7, #96]	@ 0x60
 80052a2:	2301      	movs	r3, #1
 80052a4:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80052a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052a8:	f383 8810 	msr	PRIMASK, r3
}
 80052ac:	46c0      	nop			@ (mov r8, r8)
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	681a      	ldr	r2, [r3, #0]
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	2110      	movs	r1, #16
 80052ba:	438a      	bics	r2, r1
 80052bc:	601a      	str	r2, [r3, #0]
 80052be:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80052c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80052c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80052c4:	f383 8810 	msr	PRIMASK, r3
}
 80052c8:	46c0      	nop			@ (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	69db      	ldr	r3, [r3, #28]
 80052d0:	2210      	movs	r2, #16
 80052d2:	4013      	ands	r3, r2
 80052d4:	2b10      	cmp	r3, #16
 80052d6:	d103      	bne.n	80052e0 <UART_RxISR_16BIT_FIFOEN+0x264>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	2210      	movs	r2, #16
 80052de:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	225c      	movs	r2, #92	@ 0x5c
 80052e4:	5a9a      	ldrh	r2, [r3, r2]
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	0011      	movs	r1, r2
 80052ea:	0018      	movs	r0, r3
 80052ec:	f7fe fcfc 	bl	8003ce8 <HAL_UARTEx_RxEventCallback>
 80052f0:	e003      	b.n	80052fa <UART_RxISR_16BIT_FIFOEN+0x27e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	0018      	movs	r0, r3
 80052f6:	f7fb fb61 	bl	80009bc <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80052fa:	2376      	movs	r3, #118	@ 0x76
 80052fc:	18fb      	adds	r3, r7, r3
 80052fe:	881b      	ldrh	r3, [r3, #0]
 8005300:	2b00      	cmp	r3, #0
 8005302:	d006      	beq.n	8005312 <UART_RxISR_16BIT_FIFOEN+0x296>
 8005304:	2384      	movs	r3, #132	@ 0x84
 8005306:	18fb      	adds	r3, r7, r3
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	2220      	movs	r2, #32
 800530c:	4013      	ands	r3, r2
 800530e:	d000      	beq.n	8005312 <UART_RxISR_16BIT_FIFOEN+0x296>
 8005310:	e6d9      	b.n	80050c6 <UART_RxISR_16BIT_FIFOEN+0x4a>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8005312:	205e      	movs	r0, #94	@ 0x5e
 8005314:	183b      	adds	r3, r7, r0
 8005316:	687a      	ldr	r2, [r7, #4]
 8005318:	215e      	movs	r1, #94	@ 0x5e
 800531a:	5a52      	ldrh	r2, [r2, r1]
 800531c:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800531e:	0001      	movs	r1, r0
 8005320:	187b      	adds	r3, r7, r1
 8005322:	881b      	ldrh	r3, [r3, #0]
 8005324:	2b00      	cmp	r3, #0
 8005326:	d044      	beq.n	80053b2 <UART_RxISR_16BIT_FIFOEN+0x336>
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2268      	movs	r2, #104	@ 0x68
 800532c:	5a9b      	ldrh	r3, [r3, r2]
 800532e:	187a      	adds	r2, r7, r1
 8005330:	8812      	ldrh	r2, [r2, #0]
 8005332:	429a      	cmp	r2, r3
 8005334:	d23d      	bcs.n	80053b2 <UART_RxISR_16BIT_FIFOEN+0x336>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005336:	f3ef 8310 	mrs	r3, PRIMASK
 800533a:	60fb      	str	r3, [r7, #12]
  return(result);
 800533c:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800533e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005340:	2301      	movs	r3, #1
 8005342:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005344:	693b      	ldr	r3, [r7, #16]
 8005346:	f383 8810 	msr	PRIMASK, r3
}
 800534a:	46c0      	nop			@ (mov r8, r8)
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	689a      	ldr	r2, [r3, #8]
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	491d      	ldr	r1, [pc, #116]	@ (80053cc <UART_RxISR_16BIT_FIFOEN+0x350>)
 8005358:	400a      	ands	r2, r1
 800535a:	609a      	str	r2, [r3, #8]
 800535c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800535e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005360:	697b      	ldr	r3, [r7, #20]
 8005362:	f383 8810 	msr	PRIMASK, r3
}
 8005366:	46c0      	nop			@ (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	4a19      	ldr	r2, [pc, #100]	@ (80053d0 <UART_RxISR_16BIT_FIFOEN+0x354>)
 800536c:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800536e:	f3ef 8310 	mrs	r3, PRIMASK
 8005372:	61bb      	str	r3, [r7, #24]
  return(result);
 8005374:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8005376:	657b      	str	r3, [r7, #84]	@ 0x54
 8005378:	2301      	movs	r3, #1
 800537a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800537c:	69fb      	ldr	r3, [r7, #28]
 800537e:	f383 8810 	msr	PRIMASK, r3
}
 8005382:	46c0      	nop			@ (mov r8, r8)
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	681a      	ldr	r2, [r3, #0]
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	2120      	movs	r1, #32
 8005390:	430a      	orrs	r2, r1
 8005392:	601a      	str	r2, [r3, #0]
 8005394:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005396:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005398:	6a3b      	ldr	r3, [r7, #32]
 800539a:	f383 8810 	msr	PRIMASK, r3
}
 800539e:	46c0      	nop			@ (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80053a0:	e007      	b.n	80053b2 <UART_RxISR_16BIT_FIFOEN+0x336>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	699a      	ldr	r2, [r3, #24]
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	2108      	movs	r1, #8
 80053ae:	430a      	orrs	r2, r1
 80053b0:	619a      	str	r2, [r3, #24]
}
 80053b2:	46c0      	nop			@ (mov r8, r8)
 80053b4:	46bd      	mov	sp, r7
 80053b6:	b022      	add	sp, #136	@ 0x88
 80053b8:	bd80      	pop	{r7, pc}
 80053ba:	46c0      	nop			@ (mov r8, r8)
 80053bc:	fffffeff 	.word	0xfffffeff
 80053c0:	effffffe 	.word	0xeffffffe
 80053c4:	40008000 	.word	0x40008000
 80053c8:	fbffffff 	.word	0xfbffffff
 80053cc:	efffffff 	.word	0xefffffff
 80053d0:	08004b79 	.word	0x08004b79

080053d4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80053d4:	b580      	push	{r7, lr}
 80053d6:	b082      	sub	sp, #8
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80053dc:	46c0      	nop			@ (mov r8, r8)
 80053de:	46bd      	mov	sp, r7
 80053e0:	b002      	add	sp, #8
 80053e2:	bd80      	pop	{r7, pc}

080053e4 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80053e4:	b580      	push	{r7, lr}
 80053e6:	b082      	sub	sp, #8
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80053ec:	46c0      	nop			@ (mov r8, r8)
 80053ee:	46bd      	mov	sp, r7
 80053f0:	b002      	add	sp, #8
 80053f2:	bd80      	pop	{r7, pc}

080053f4 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80053f4:	b580      	push	{r7, lr}
 80053f6:	b082      	sub	sp, #8
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80053fc:	46c0      	nop			@ (mov r8, r8)
 80053fe:	46bd      	mov	sp, r7
 8005400:	b002      	add	sp, #8
 8005402:	bd80      	pop	{r7, pc}

08005404 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005404:	b580      	push	{r7, lr}
 8005406:	b084      	sub	sp, #16
 8005408:	af00      	add	r7, sp, #0
 800540a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2284      	movs	r2, #132	@ 0x84
 8005410:	5c9b      	ldrb	r3, [r3, r2]
 8005412:	2b01      	cmp	r3, #1
 8005414:	d101      	bne.n	800541a <HAL_UARTEx_DisableFifoMode+0x16>
 8005416:	2302      	movs	r3, #2
 8005418:	e027      	b.n	800546a <HAL_UARTEx_DisableFifoMode+0x66>
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	2284      	movs	r2, #132	@ 0x84
 800541e:	2101      	movs	r1, #1
 8005420:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	2288      	movs	r2, #136	@ 0x88
 8005426:	2124      	movs	r1, #36	@ 0x24
 8005428:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	681a      	ldr	r2, [r3, #0]
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	2101      	movs	r1, #1
 800543e:	438a      	bics	r2, r1
 8005440:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	4a0b      	ldr	r2, [pc, #44]	@ (8005474 <HAL_UARTEx_DisableFifoMode+0x70>)
 8005446:	4013      	ands	r3, r2
 8005448:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	2200      	movs	r2, #0
 800544e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	68fa      	ldr	r2, [r7, #12]
 8005456:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2288      	movs	r2, #136	@ 0x88
 800545c:	2120      	movs	r1, #32
 800545e:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2284      	movs	r2, #132	@ 0x84
 8005464:	2100      	movs	r1, #0
 8005466:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005468:	2300      	movs	r3, #0
}
 800546a:	0018      	movs	r0, r3
 800546c:	46bd      	mov	sp, r7
 800546e:	b004      	add	sp, #16
 8005470:	bd80      	pop	{r7, pc}
 8005472:	46c0      	nop			@ (mov r8, r8)
 8005474:	dfffffff 	.word	0xdfffffff

08005478 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005478:	b580      	push	{r7, lr}
 800547a:	b084      	sub	sp, #16
 800547c:	af00      	add	r7, sp, #0
 800547e:	6078      	str	r0, [r7, #4]
 8005480:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	2284      	movs	r2, #132	@ 0x84
 8005486:	5c9b      	ldrb	r3, [r3, r2]
 8005488:	2b01      	cmp	r3, #1
 800548a:	d101      	bne.n	8005490 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800548c:	2302      	movs	r3, #2
 800548e:	e02e      	b.n	80054ee <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2284      	movs	r2, #132	@ 0x84
 8005494:	2101      	movs	r1, #1
 8005496:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2288      	movs	r2, #136	@ 0x88
 800549c:	2124      	movs	r1, #36	@ 0x24
 800549e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	681a      	ldr	r2, [r3, #0]
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	2101      	movs	r1, #1
 80054b4:	438a      	bics	r2, r1
 80054b6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	689b      	ldr	r3, [r3, #8]
 80054be:	00db      	lsls	r3, r3, #3
 80054c0:	08d9      	lsrs	r1, r3, #3
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	683a      	ldr	r2, [r7, #0]
 80054c8:	430a      	orrs	r2, r1
 80054ca:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	0018      	movs	r0, r3
 80054d0:	f000 f854 	bl	800557c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	68fa      	ldr	r2, [r7, #12]
 80054da:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	2288      	movs	r2, #136	@ 0x88
 80054e0:	2120      	movs	r1, #32
 80054e2:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2284      	movs	r2, #132	@ 0x84
 80054e8:	2100      	movs	r1, #0
 80054ea:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80054ec:	2300      	movs	r3, #0
}
 80054ee:	0018      	movs	r0, r3
 80054f0:	46bd      	mov	sp, r7
 80054f2:	b004      	add	sp, #16
 80054f4:	bd80      	pop	{r7, pc}
	...

080054f8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80054f8:	b580      	push	{r7, lr}
 80054fa:	b084      	sub	sp, #16
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	6078      	str	r0, [r7, #4]
 8005500:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	2284      	movs	r2, #132	@ 0x84
 8005506:	5c9b      	ldrb	r3, [r3, r2]
 8005508:	2b01      	cmp	r3, #1
 800550a:	d101      	bne.n	8005510 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800550c:	2302      	movs	r3, #2
 800550e:	e02f      	b.n	8005570 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2284      	movs	r2, #132	@ 0x84
 8005514:	2101      	movs	r1, #1
 8005516:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2288      	movs	r2, #136	@ 0x88
 800551c:	2124      	movs	r1, #36	@ 0x24
 800551e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	681a      	ldr	r2, [r3, #0]
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	2101      	movs	r1, #1
 8005534:	438a      	bics	r2, r1
 8005536:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	689b      	ldr	r3, [r3, #8]
 800553e:	4a0e      	ldr	r2, [pc, #56]	@ (8005578 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8005540:	4013      	ands	r3, r2
 8005542:	0019      	movs	r1, r3
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	683a      	ldr	r2, [r7, #0]
 800554a:	430a      	orrs	r2, r1
 800554c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	0018      	movs	r0, r3
 8005552:	f000 f813 	bl	800557c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	68fa      	ldr	r2, [r7, #12]
 800555c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	2288      	movs	r2, #136	@ 0x88
 8005562:	2120      	movs	r1, #32
 8005564:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	2284      	movs	r2, #132	@ 0x84
 800556a:	2100      	movs	r1, #0
 800556c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800556e:	2300      	movs	r3, #0
}
 8005570:	0018      	movs	r0, r3
 8005572:	46bd      	mov	sp, r7
 8005574:	b004      	add	sp, #16
 8005576:	bd80      	pop	{r7, pc}
 8005578:	f1ffffff 	.word	0xf1ffffff

0800557c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800557c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800557e:	b085      	sub	sp, #20
 8005580:	af00      	add	r7, sp, #0
 8005582:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005588:	2b00      	cmp	r3, #0
 800558a:	d108      	bne.n	800559e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	226a      	movs	r2, #106	@ 0x6a
 8005590:	2101      	movs	r1, #1
 8005592:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	2268      	movs	r2, #104	@ 0x68
 8005598:	2101      	movs	r1, #1
 800559a:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800559c:	e043      	b.n	8005626 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800559e:	260f      	movs	r6, #15
 80055a0:	19bb      	adds	r3, r7, r6
 80055a2:	2208      	movs	r2, #8
 80055a4:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80055a6:	200e      	movs	r0, #14
 80055a8:	183b      	adds	r3, r7, r0
 80055aa:	2208      	movs	r2, #8
 80055ac:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	689b      	ldr	r3, [r3, #8]
 80055b4:	0e5b      	lsrs	r3, r3, #25
 80055b6:	b2da      	uxtb	r2, r3
 80055b8:	240d      	movs	r4, #13
 80055ba:	193b      	adds	r3, r7, r4
 80055bc:	2107      	movs	r1, #7
 80055be:	400a      	ands	r2, r1
 80055c0:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	689b      	ldr	r3, [r3, #8]
 80055c8:	0f5b      	lsrs	r3, r3, #29
 80055ca:	b2da      	uxtb	r2, r3
 80055cc:	250c      	movs	r5, #12
 80055ce:	197b      	adds	r3, r7, r5
 80055d0:	2107      	movs	r1, #7
 80055d2:	400a      	ands	r2, r1
 80055d4:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80055d6:	183b      	adds	r3, r7, r0
 80055d8:	781b      	ldrb	r3, [r3, #0]
 80055da:	197a      	adds	r2, r7, r5
 80055dc:	7812      	ldrb	r2, [r2, #0]
 80055de:	4914      	ldr	r1, [pc, #80]	@ (8005630 <UARTEx_SetNbDataToProcess+0xb4>)
 80055e0:	5c8a      	ldrb	r2, [r1, r2]
 80055e2:	435a      	muls	r2, r3
 80055e4:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 80055e6:	197b      	adds	r3, r7, r5
 80055e8:	781b      	ldrb	r3, [r3, #0]
 80055ea:	4a12      	ldr	r2, [pc, #72]	@ (8005634 <UARTEx_SetNbDataToProcess+0xb8>)
 80055ec:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80055ee:	0019      	movs	r1, r3
 80055f0:	f7fa fe26 	bl	8000240 <__divsi3>
 80055f4:	0003      	movs	r3, r0
 80055f6:	b299      	uxth	r1, r3
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	226a      	movs	r2, #106	@ 0x6a
 80055fc:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80055fe:	19bb      	adds	r3, r7, r6
 8005600:	781b      	ldrb	r3, [r3, #0]
 8005602:	193a      	adds	r2, r7, r4
 8005604:	7812      	ldrb	r2, [r2, #0]
 8005606:	490a      	ldr	r1, [pc, #40]	@ (8005630 <UARTEx_SetNbDataToProcess+0xb4>)
 8005608:	5c8a      	ldrb	r2, [r1, r2]
 800560a:	435a      	muls	r2, r3
 800560c:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 800560e:	193b      	adds	r3, r7, r4
 8005610:	781b      	ldrb	r3, [r3, #0]
 8005612:	4a08      	ldr	r2, [pc, #32]	@ (8005634 <UARTEx_SetNbDataToProcess+0xb8>)
 8005614:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005616:	0019      	movs	r1, r3
 8005618:	f7fa fe12 	bl	8000240 <__divsi3>
 800561c:	0003      	movs	r3, r0
 800561e:	b299      	uxth	r1, r3
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2268      	movs	r2, #104	@ 0x68
 8005624:	5299      	strh	r1, [r3, r2]
}
 8005626:	46c0      	nop			@ (mov r8, r8)
 8005628:	46bd      	mov	sp, r7
 800562a:	b005      	add	sp, #20
 800562c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800562e:	46c0      	nop			@ (mov r8, r8)
 8005630:	0800809c 	.word	0x0800809c
 8005634:	080080a4 	.word	0x080080a4

08005638 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8005638:	b580      	push	{r7, lr}
 800563a:	b084      	sub	sp, #16
 800563c:	af00      	add	r7, sp, #0
 800563e:	0002      	movs	r2, r0
 8005640:	1dbb      	adds	r3, r7, #6
 8005642:	801a      	strh	r2, [r3, #0]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8005644:	2300      	movs	r3, #0
 8005646:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8005648:	1dbb      	adds	r3, r7, #6
 800564a:	2200      	movs	r2, #0
 800564c:	5e9b      	ldrsh	r3, [r3, r2]
 800564e:	2b84      	cmp	r3, #132	@ 0x84
 8005650:	d006      	beq.n	8005660 <makeFreeRtosPriority+0x28>
    fpriority += (priority - osPriorityIdle);
 8005652:	1dbb      	adds	r3, r7, #6
 8005654:	2200      	movs	r2, #0
 8005656:	5e9a      	ldrsh	r2, [r3, r2]
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	18d3      	adds	r3, r2, r3
 800565c:	3303      	adds	r3, #3
 800565e:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8005660:	68fb      	ldr	r3, [r7, #12]
}
 8005662:	0018      	movs	r0, r3
 8005664:	46bd      	mov	sp, r7
 8005666:	b004      	add	sp, #16
 8005668:	bd80      	pop	{r7, pc}

0800566a <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800566a:	b580      	push	{r7, lr}
 800566c:	b082      	sub	sp, #8
 800566e:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005670:	f3ef 8305 	mrs	r3, IPSR
 8005674:	607b      	str	r3, [r7, #4]
  return(result);
 8005676:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8005678:	1e5a      	subs	r2, r3, #1
 800567a:	4193      	sbcs	r3, r2
 800567c:	b2db      	uxtb	r3, r3
}
 800567e:	0018      	movs	r0, r3
 8005680:	46bd      	mov	sp, r7
 8005682:	b002      	add	sp, #8
 8005684:	bd80      	pop	{r7, pc}

08005686 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8005686:	b580      	push	{r7, lr}
 8005688:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800568a:	f000 ff3d 	bl	8006508 <vTaskStartScheduler>
  
  return osOK;
 800568e:	2300      	movs	r3, #0
}
 8005690:	0018      	movs	r0, r3
 8005692:	46bd      	mov	sp, r7
 8005694:	bd80      	pop	{r7, pc}

08005696 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8005696:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005698:	b087      	sub	sp, #28
 800569a:	af02      	add	r7, sp, #8
 800569c:	6078      	str	r0, [r7, #4]
 800569e:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	685c      	ldr	r4, [r3, #4]
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80056ac:	b29e      	uxth	r6, r3
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	2208      	movs	r2, #8
 80056b2:	5e9b      	ldrsh	r3, [r3, r2]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80056b4:	0018      	movs	r0, r3
 80056b6:	f7ff ffbf 	bl	8005638 <makeFreeRtosPriority>
 80056ba:	0001      	movs	r1, r0
 80056bc:	683a      	ldr	r2, [r7, #0]
 80056be:	230c      	movs	r3, #12
 80056c0:	18fb      	adds	r3, r7, r3
 80056c2:	9301      	str	r3, [sp, #4]
 80056c4:	9100      	str	r1, [sp, #0]
 80056c6:	0013      	movs	r3, r2
 80056c8:	0032      	movs	r2, r6
 80056ca:	0029      	movs	r1, r5
 80056cc:	0020      	movs	r0, r4
 80056ce:	f000 fdae 	bl	800622e <xTaskCreate>
 80056d2:	0003      	movs	r3, r0
 80056d4:	2b01      	cmp	r3, #1
 80056d6:	d001      	beq.n	80056dc <osThreadCreate+0x46>
                   &handle) != pdPASS)  {
    return NULL;
 80056d8:	2300      	movs	r3, #0
 80056da:	e000      	b.n	80056de <osThreadCreate+0x48>
  }     
#endif
  
  return handle;
 80056dc:	68fb      	ldr	r3, [r7, #12]
}
 80056de:	0018      	movs	r0, r3
 80056e0:	46bd      	mov	sp, r7
 80056e2:	b005      	add	sp, #20
 80056e4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080056e6 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80056e6:	b580      	push	{r7, lr}
 80056e8:	b084      	sub	sp, #16
 80056ea:	af00      	add	r7, sp, #0
 80056ec:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d001      	beq.n	80056fc <osDelay+0x16>
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	e000      	b.n	80056fe <osDelay+0x18>
 80056fc:	2301      	movs	r3, #1
 80056fe:	0018      	movs	r0, r3
 8005700:	f000 fedc 	bl	80064bc <vTaskDelay>
  
  return osOK;
 8005704:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8005706:	0018      	movs	r0, r3
 8005708:	46bd      	mov	sp, r7
 800570a:	b004      	add	sp, #16
 800570c:	bd80      	pop	{r7, pc}

0800570e <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 800570e:	b580      	push	{r7, lr}
 8005710:	b084      	sub	sp, #16
 8005712:	af00      	add	r7, sp, #0
 8005714:	6078      	str	r0, [r7, #4]
 8005716:	6039      	str	r1, [r7, #0]
#endif    
  }
#else  // configSUPPORT_STATIC_ALLOCATION == 0  && configSUPPORT_DYNAMIC_ALLOCATION == 1
  osSemaphoreId sema;
 
  if (count == 1) {
 8005718:	683b      	ldr	r3, [r7, #0]
 800571a:	2b01      	cmp	r3, #1
 800571c:	d111      	bne.n	8005742 <osSemaphoreCreate+0x34>
    vSemaphoreCreateBinary(sema);
 800571e:	2203      	movs	r2, #3
 8005720:	2100      	movs	r1, #0
 8005722:	2001      	movs	r0, #1
 8005724:	f000 f98c 	bl	8005a40 <xQueueGenericCreate>
 8005728:	0003      	movs	r3, r0
 800572a:	60fb      	str	r3, [r7, #12]
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	2b00      	cmp	r3, #0
 8005730:	d005      	beq.n	800573e <osSemaphoreCreate+0x30>
 8005732:	68f8      	ldr	r0, [r7, #12]
 8005734:	2300      	movs	r3, #0
 8005736:	2200      	movs	r2, #0
 8005738:	2100      	movs	r1, #0
 800573a:	f000 f9d2 	bl	8005ae2 <xQueueGenericSend>
    return sema;
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	e000      	b.n	8005744 <osSemaphoreCreate+0x36>
  }
  else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
    return xSemaphoreCreateCounting(count, count);
#else
    return NULL;
 8005742:	2300      	movs	r3, #0
#endif
  }
#endif
}
 8005744:	0018      	movs	r0, r3
 8005746:	46bd      	mov	sp, r7
 8005748:	b004      	add	sp, #16
 800574a:	bd80      	pop	{r7, pc}

0800574c <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 800574c:	b580      	push	{r7, lr}
 800574e:	b084      	sub	sp, #16
 8005750:	af00      	add	r7, sp, #0
 8005752:	6078      	str	r0, [r7, #4]
 8005754:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8005756:	2300      	movs	r3, #0
 8005758:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	2b00      	cmp	r3, #0
 800575e:	d101      	bne.n	8005764 <osSemaphoreWait+0x18>
    return osErrorParameter;
 8005760:	2380      	movs	r3, #128	@ 0x80
 8005762:	e036      	b.n	80057d2 <osSemaphoreWait+0x86>
  }
  
  ticks = 0;
 8005764:	2300      	movs	r3, #0
 8005766:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8005768:	683b      	ldr	r3, [r7, #0]
 800576a:	3301      	adds	r3, #1
 800576c:	d103      	bne.n	8005776 <osSemaphoreWait+0x2a>
    ticks = portMAX_DELAY;
 800576e:	2301      	movs	r3, #1
 8005770:	425b      	negs	r3, r3
 8005772:	60fb      	str	r3, [r7, #12]
 8005774:	e009      	b.n	800578a <osSemaphoreWait+0x3e>
  }
  else if (millisec != 0) {
 8005776:	683b      	ldr	r3, [r7, #0]
 8005778:	2b00      	cmp	r3, #0
 800577a:	d006      	beq.n	800578a <osSemaphoreWait+0x3e>
    ticks = millisec / portTICK_PERIOD_MS;
 800577c:	683b      	ldr	r3, [r7, #0]
 800577e:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	2b00      	cmp	r3, #0
 8005784:	d101      	bne.n	800578a <osSemaphoreWait+0x3e>
      ticks = 1;
 8005786:	2301      	movs	r3, #1
 8005788:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800578a:	f7ff ff6e 	bl	800566a <inHandlerMode>
 800578e:	1e03      	subs	r3, r0, #0
 8005790:	d013      	beq.n	80057ba <osSemaphoreWait+0x6e>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8005792:	2308      	movs	r3, #8
 8005794:	18fa      	adds	r2, r7, r3
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	2100      	movs	r1, #0
 800579a:	0018      	movs	r0, r3
 800579c:	f000 fbaf 	bl	8005efe <xQueueReceiveFromISR>
 80057a0:	0003      	movs	r3, r0
 80057a2:	2b01      	cmp	r3, #1
 80057a4:	d001      	beq.n	80057aa <osSemaphoreWait+0x5e>
      return osErrorOS;
 80057a6:	23ff      	movs	r3, #255	@ 0xff
 80057a8:	e013      	b.n	80057d2 <osSemaphoreWait+0x86>
    }
	portEND_SWITCHING_ISR(taskWoken);
 80057aa:	68bb      	ldr	r3, [r7, #8]
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d00f      	beq.n	80057d0 <osSemaphoreWait+0x84>
 80057b0:	4b0a      	ldr	r3, [pc, #40]	@ (80057dc <osSemaphoreWait+0x90>)
 80057b2:	2280      	movs	r2, #128	@ 0x80
 80057b4:	0552      	lsls	r2, r2, #21
 80057b6:	601a      	str	r2, [r3, #0]
 80057b8:	e00a      	b.n	80057d0 <osSemaphoreWait+0x84>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 80057ba:	68fa      	ldr	r2, [r7, #12]
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	0011      	movs	r1, r2
 80057c0:	0018      	movs	r0, r3
 80057c2:	f000 fabe 	bl	8005d42 <xQueueSemaphoreTake>
 80057c6:	0003      	movs	r3, r0
 80057c8:	2b01      	cmp	r3, #1
 80057ca:	d001      	beq.n	80057d0 <osSemaphoreWait+0x84>
    return osErrorOS;
 80057cc:	23ff      	movs	r3, #255	@ 0xff
 80057ce:	e000      	b.n	80057d2 <osSemaphoreWait+0x86>
  }
  
  return osOK;
 80057d0:	2300      	movs	r3, #0
}
 80057d2:	0018      	movs	r0, r3
 80057d4:	46bd      	mov	sp, r7
 80057d6:	b004      	add	sp, #16
 80057d8:	bd80      	pop	{r7, pc}
 80057da:	46c0      	nop			@ (mov r8, r8)
 80057dc:	e000ed04 	.word	0xe000ed04

080057e0 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 80057e0:	b580      	push	{r7, lr}
 80057e2:	b084      	sub	sp, #16
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 80057e8:	2300      	movs	r3, #0
 80057ea:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 80057ec:	2300      	movs	r3, #0
 80057ee:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 80057f0:	f7ff ff3b 	bl	800566a <inHandlerMode>
 80057f4:	1e03      	subs	r3, r0, #0
 80057f6:	d013      	beq.n	8005820 <osSemaphoreRelease+0x40>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 80057f8:	2308      	movs	r3, #8
 80057fa:	18fa      	adds	r2, r7, r3
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	0011      	movs	r1, r2
 8005800:	0018      	movs	r0, r3
 8005802:	f000 fa36 	bl	8005c72 <xQueueGiveFromISR>
 8005806:	0003      	movs	r3, r0
 8005808:	2b01      	cmp	r3, #1
 800580a:	d001      	beq.n	8005810 <osSemaphoreRelease+0x30>
      return osErrorOS;
 800580c:	23ff      	movs	r3, #255	@ 0xff
 800580e:	e013      	b.n	8005838 <osSemaphoreRelease+0x58>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8005810:	68bb      	ldr	r3, [r7, #8]
 8005812:	2b00      	cmp	r3, #0
 8005814:	d00f      	beq.n	8005836 <osSemaphoreRelease+0x56>
 8005816:	4b0a      	ldr	r3, [pc, #40]	@ (8005840 <osSemaphoreRelease+0x60>)
 8005818:	2280      	movs	r2, #128	@ 0x80
 800581a:	0552      	lsls	r2, r2, #21
 800581c:	601a      	str	r2, [r3, #0]
 800581e:	e00a      	b.n	8005836 <osSemaphoreRelease+0x56>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8005820:	6878      	ldr	r0, [r7, #4]
 8005822:	2300      	movs	r3, #0
 8005824:	2200      	movs	r2, #0
 8005826:	2100      	movs	r1, #0
 8005828:	f000 f95b 	bl	8005ae2 <xQueueGenericSend>
 800582c:	0003      	movs	r3, r0
 800582e:	2b01      	cmp	r3, #1
 8005830:	d001      	beq.n	8005836 <osSemaphoreRelease+0x56>
      result = osErrorOS;
 8005832:	23ff      	movs	r3, #255	@ 0xff
 8005834:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8005836:	68fb      	ldr	r3, [r7, #12]
}
 8005838:	0018      	movs	r0, r3
 800583a:	46bd      	mov	sp, r7
 800583c:	b004      	add	sp, #16
 800583e:	bd80      	pop	{r7, pc}
 8005840:	e000ed04 	.word	0xe000ed04

08005844 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005844:	b580      	push	{r7, lr}
 8005846:	b082      	sub	sp, #8
 8005848:	af00      	add	r7, sp, #0
 800584a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	3308      	adds	r3, #8
 8005850:	001a      	movs	r2, r3
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	2201      	movs	r2, #1
 800585a:	4252      	negs	r2, r2
 800585c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	3308      	adds	r3, #8
 8005862:	001a      	movs	r2, r3
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	3308      	adds	r3, #8
 800586c:	001a      	movs	r2, r3
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	2200      	movs	r2, #0
 8005876:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005878:	46c0      	nop			@ (mov r8, r8)
 800587a:	46bd      	mov	sp, r7
 800587c:	b002      	add	sp, #8
 800587e:	bd80      	pop	{r7, pc}

08005880 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005880:	b580      	push	{r7, lr}
 8005882:	b082      	sub	sp, #8
 8005884:	af00      	add	r7, sp, #0
 8005886:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	2200      	movs	r2, #0
 800588c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800588e:	46c0      	nop			@ (mov r8, r8)
 8005890:	46bd      	mov	sp, r7
 8005892:	b002      	add	sp, #8
 8005894:	bd80      	pop	{r7, pc}

08005896 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005896:	b580      	push	{r7, lr}
 8005898:	b084      	sub	sp, #16
 800589a:	af00      	add	r7, sp, #0
 800589c:	6078      	str	r0, [r7, #4]
 800589e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	685b      	ldr	r3, [r3, #4]
 80058a4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80058a6:	683b      	ldr	r3, [r7, #0]
 80058a8:	68fa      	ldr	r2, [r7, #12]
 80058aa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	689a      	ldr	r2, [r3, #8]
 80058b0:	683b      	ldr	r3, [r7, #0]
 80058b2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	689b      	ldr	r3, [r3, #8]
 80058b8:	683a      	ldr	r2, [r7, #0]
 80058ba:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	683a      	ldr	r2, [r7, #0]
 80058c0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80058c2:	683b      	ldr	r3, [r7, #0]
 80058c4:	687a      	ldr	r2, [r7, #4]
 80058c6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	1c5a      	adds	r2, r3, #1
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	601a      	str	r2, [r3, #0]
}
 80058d2:	46c0      	nop			@ (mov r8, r8)
 80058d4:	46bd      	mov	sp, r7
 80058d6:	b004      	add	sp, #16
 80058d8:	bd80      	pop	{r7, pc}

080058da <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80058da:	b580      	push	{r7, lr}
 80058dc:	b084      	sub	sp, #16
 80058de:	af00      	add	r7, sp, #0
 80058e0:	6078      	str	r0, [r7, #4]
 80058e2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80058e4:	683b      	ldr	r3, [r7, #0]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80058ea:	68bb      	ldr	r3, [r7, #8]
 80058ec:	3301      	adds	r3, #1
 80058ee:	d103      	bne.n	80058f8 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	691b      	ldr	r3, [r3, #16]
 80058f4:	60fb      	str	r3, [r7, #12]
 80058f6:	e00c      	b.n	8005912 <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	3308      	adds	r3, #8
 80058fc:	60fb      	str	r3, [r7, #12]
 80058fe:	e002      	b.n	8005906 <vListInsert+0x2c>
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	685b      	ldr	r3, [r3, #4]
 8005904:	60fb      	str	r3, [r7, #12]
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	685b      	ldr	r3, [r3, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	68ba      	ldr	r2, [r7, #8]
 800590e:	429a      	cmp	r2, r3
 8005910:	d2f6      	bcs.n	8005900 <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	685a      	ldr	r2, [r3, #4]
 8005916:	683b      	ldr	r3, [r7, #0]
 8005918:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800591a:	683b      	ldr	r3, [r7, #0]
 800591c:	685b      	ldr	r3, [r3, #4]
 800591e:	683a      	ldr	r2, [r7, #0]
 8005920:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005922:	683b      	ldr	r3, [r7, #0]
 8005924:	68fa      	ldr	r2, [r7, #12]
 8005926:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	683a      	ldr	r2, [r7, #0]
 800592c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800592e:	683b      	ldr	r3, [r7, #0]
 8005930:	687a      	ldr	r2, [r7, #4]
 8005932:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	1c5a      	adds	r2, r3, #1
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	601a      	str	r2, [r3, #0]
}
 800593e:	46c0      	nop			@ (mov r8, r8)
 8005940:	46bd      	mov	sp, r7
 8005942:	b004      	add	sp, #16
 8005944:	bd80      	pop	{r7, pc}

08005946 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005946:	b580      	push	{r7, lr}
 8005948:	b084      	sub	sp, #16
 800594a:	af00      	add	r7, sp, #0
 800594c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	691b      	ldr	r3, [r3, #16]
 8005952:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	685b      	ldr	r3, [r3, #4]
 8005958:	687a      	ldr	r2, [r7, #4]
 800595a:	6892      	ldr	r2, [r2, #8]
 800595c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	689b      	ldr	r3, [r3, #8]
 8005962:	687a      	ldr	r2, [r7, #4]
 8005964:	6852      	ldr	r2, [r2, #4]
 8005966:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	685b      	ldr	r3, [r3, #4]
 800596c:	687a      	ldr	r2, [r7, #4]
 800596e:	429a      	cmp	r2, r3
 8005970:	d103      	bne.n	800597a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	689a      	ldr	r2, [r3, #8]
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	2200      	movs	r2, #0
 800597e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	1e5a      	subs	r2, r3, #1
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	681b      	ldr	r3, [r3, #0]
}
 800598e:	0018      	movs	r0, r3
 8005990:	46bd      	mov	sp, r7
 8005992:	b004      	add	sp, #16
 8005994:	bd80      	pop	{r7, pc}

08005996 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005996:	b580      	push	{r7, lr}
 8005998:	b084      	sub	sp, #16
 800599a:	af00      	add	r7, sp, #0
 800599c:	6078      	str	r0, [r7, #4]
 800599e:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d102      	bne.n	80059b0 <xQueueGenericReset+0x1a>
 80059aa:	b672      	cpsid	i
 80059ac:	46c0      	nop			@ (mov r8, r8)
 80059ae:	e7fd      	b.n	80059ac <xQueueGenericReset+0x16>

	taskENTER_CRITICAL();
 80059b0:	f001 fb86 	bl	80070c0 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	681a      	ldr	r2, [r3, #0]
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059c0:	434b      	muls	r3, r1
 80059c2:	18d2      	adds	r2, r2, r3
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	2200      	movs	r2, #0
 80059cc:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	681a      	ldr	r2, [r3, #0]
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	681a      	ldr	r2, [r3, #0]
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80059de:	1e59      	subs	r1, r3, #1
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059e4:	434b      	muls	r3, r1
 80059e6:	18d2      	adds	r2, r2, r3
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	2244      	movs	r2, #68	@ 0x44
 80059f0:	21ff      	movs	r1, #255	@ 0xff
 80059f2:	5499      	strb	r1, [r3, r2]
		pxQueue->cTxLock = queueUNLOCKED;
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	2245      	movs	r2, #69	@ 0x45
 80059f8:	21ff      	movs	r1, #255	@ 0xff
 80059fa:	5499      	strb	r1, [r3, r2]

		if( xNewQueue == pdFALSE )
 80059fc:	683b      	ldr	r3, [r7, #0]
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d10d      	bne.n	8005a1e <xQueueGenericReset+0x88>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	691b      	ldr	r3, [r3, #16]
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d013      	beq.n	8005a32 <xQueueGenericReset+0x9c>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	3310      	adds	r3, #16
 8005a0e:	0018      	movs	r0, r3
 8005a10:	f000 ff7c 	bl	800690c <xTaskRemoveFromEventList>
 8005a14:	1e03      	subs	r3, r0, #0
 8005a16:	d00c      	beq.n	8005a32 <xQueueGenericReset+0x9c>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005a18:	f001 fb42 	bl	80070a0 <vPortYield>
 8005a1c:	e009      	b.n	8005a32 <xQueueGenericReset+0x9c>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	3310      	adds	r3, #16
 8005a22:	0018      	movs	r0, r3
 8005a24:	f7ff ff0e 	bl	8005844 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	3324      	adds	r3, #36	@ 0x24
 8005a2c:	0018      	movs	r0, r3
 8005a2e:	f7ff ff09 	bl	8005844 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005a32:	f001 fb57 	bl	80070e4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005a36:	2301      	movs	r3, #1
}
 8005a38:	0018      	movs	r0, r3
 8005a3a:	46bd      	mov	sp, r7
 8005a3c:	b004      	add	sp, #16
 8005a3e:	bd80      	pop	{r7, pc}

08005a40 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005a40:	b590      	push	{r4, r7, lr}
 8005a42:	b08b      	sub	sp, #44	@ 0x2c
 8005a44:	af02      	add	r7, sp, #8
 8005a46:	60f8      	str	r0, [r7, #12]
 8005a48:	60b9      	str	r1, [r7, #8]
 8005a4a:	1dfb      	adds	r3, r7, #7
 8005a4c:	701a      	strb	r2, [r3, #0]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d102      	bne.n	8005a5a <xQueueGenericCreate+0x1a>
 8005a54:	b672      	cpsid	i
 8005a56:	46c0      	nop			@ (mov r8, r8)
 8005a58:	e7fd      	b.n	8005a56 <xQueueGenericCreate+0x16>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	68ba      	ldr	r2, [r7, #8]
 8005a5e:	4353      	muls	r3, r2
 8005a60:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8005a62:	69fb      	ldr	r3, [r7, #28]
 8005a64:	3348      	adds	r3, #72	@ 0x48
 8005a66:	0018      	movs	r0, r3
 8005a68:	f001 fbc2 	bl	80071f0 <pvPortMalloc>
 8005a6c:	0003      	movs	r3, r0
 8005a6e:	61bb      	str	r3, [r7, #24]

		if( pxNewQueue != NULL )
 8005a70:	69bb      	ldr	r3, [r7, #24]
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d00e      	beq.n	8005a94 <xQueueGenericCreate+0x54>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8005a76:	69bb      	ldr	r3, [r7, #24]
 8005a78:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005a7a:	697b      	ldr	r3, [r7, #20]
 8005a7c:	3348      	adds	r3, #72	@ 0x48
 8005a7e:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005a80:	1dfb      	adds	r3, r7, #7
 8005a82:	781c      	ldrb	r4, [r3, #0]
 8005a84:	697a      	ldr	r2, [r7, #20]
 8005a86:	68b9      	ldr	r1, [r7, #8]
 8005a88:	68f8      	ldr	r0, [r7, #12]
 8005a8a:	69bb      	ldr	r3, [r7, #24]
 8005a8c:	9300      	str	r3, [sp, #0]
 8005a8e:	0023      	movs	r3, r4
 8005a90:	f000 f805 	bl	8005a9e <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005a94:	69bb      	ldr	r3, [r7, #24]
	}
 8005a96:	0018      	movs	r0, r3
 8005a98:	46bd      	mov	sp, r7
 8005a9a:	b009      	add	sp, #36	@ 0x24
 8005a9c:	bd90      	pop	{r4, r7, pc}

08005a9e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005a9e:	b580      	push	{r7, lr}
 8005aa0:	b084      	sub	sp, #16
 8005aa2:	af00      	add	r7, sp, #0
 8005aa4:	60f8      	str	r0, [r7, #12]
 8005aa6:	60b9      	str	r1, [r7, #8]
 8005aa8:	607a      	str	r2, [r7, #4]
 8005aaa:	001a      	movs	r2, r3
 8005aac:	1cfb      	adds	r3, r7, #3
 8005aae:	701a      	strb	r2, [r3, #0]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005ab0:	68bb      	ldr	r3, [r7, #8]
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d103      	bne.n	8005abe <prvInitialiseNewQueue+0x20>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005ab6:	69bb      	ldr	r3, [r7, #24]
 8005ab8:	69ba      	ldr	r2, [r7, #24]
 8005aba:	601a      	str	r2, [r3, #0]
 8005abc:	e002      	b.n	8005ac4 <prvInitialiseNewQueue+0x26>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005abe:	69bb      	ldr	r3, [r7, #24]
 8005ac0:	687a      	ldr	r2, [r7, #4]
 8005ac2:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005ac4:	69bb      	ldr	r3, [r7, #24]
 8005ac6:	68fa      	ldr	r2, [r7, #12]
 8005ac8:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005aca:	69bb      	ldr	r3, [r7, #24]
 8005acc:	68ba      	ldr	r2, [r7, #8]
 8005ace:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005ad0:	69bb      	ldr	r3, [r7, #24]
 8005ad2:	2101      	movs	r1, #1
 8005ad4:	0018      	movs	r0, r3
 8005ad6:	f7ff ff5e 	bl	8005996 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005ada:	46c0      	nop			@ (mov r8, r8)
 8005adc:	46bd      	mov	sp, r7
 8005ade:	b004      	add	sp, #16
 8005ae0:	bd80      	pop	{r7, pc}

08005ae2 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005ae2:	b580      	push	{r7, lr}
 8005ae4:	b08a      	sub	sp, #40	@ 0x28
 8005ae6:	af00      	add	r7, sp, #0
 8005ae8:	60f8      	str	r0, [r7, #12]
 8005aea:	60b9      	str	r1, [r7, #8]
 8005aec:	607a      	str	r2, [r7, #4]
 8005aee:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005af0:	2300      	movs	r3, #0
 8005af2:	627b      	str	r3, [r7, #36]	@ 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 8005af8:	6a3b      	ldr	r3, [r7, #32]
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d102      	bne.n	8005b04 <xQueueGenericSend+0x22>
 8005afe:	b672      	cpsid	i
 8005b00:	46c0      	nop			@ (mov r8, r8)
 8005b02:	e7fd      	b.n	8005b00 <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005b04:	68bb      	ldr	r3, [r7, #8]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d103      	bne.n	8005b12 <xQueueGenericSend+0x30>
 8005b0a:	6a3b      	ldr	r3, [r7, #32]
 8005b0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d101      	bne.n	8005b16 <xQueueGenericSend+0x34>
 8005b12:	2301      	movs	r3, #1
 8005b14:	e000      	b.n	8005b18 <xQueueGenericSend+0x36>
 8005b16:	2300      	movs	r3, #0
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d102      	bne.n	8005b22 <xQueueGenericSend+0x40>
 8005b1c:	b672      	cpsid	i
 8005b1e:	46c0      	nop			@ (mov r8, r8)
 8005b20:	e7fd      	b.n	8005b1e <xQueueGenericSend+0x3c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005b22:	683b      	ldr	r3, [r7, #0]
 8005b24:	2b02      	cmp	r3, #2
 8005b26:	d103      	bne.n	8005b30 <xQueueGenericSend+0x4e>
 8005b28:	6a3b      	ldr	r3, [r7, #32]
 8005b2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b2c:	2b01      	cmp	r3, #1
 8005b2e:	d101      	bne.n	8005b34 <xQueueGenericSend+0x52>
 8005b30:	2301      	movs	r3, #1
 8005b32:	e000      	b.n	8005b36 <xQueueGenericSend+0x54>
 8005b34:	2300      	movs	r3, #0
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d102      	bne.n	8005b40 <xQueueGenericSend+0x5e>
 8005b3a:	b672      	cpsid	i
 8005b3c:	46c0      	nop			@ (mov r8, r8)
 8005b3e:	e7fd      	b.n	8005b3c <xQueueGenericSend+0x5a>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005b40:	f001 f868 	bl	8006c14 <xTaskGetSchedulerState>
 8005b44:	1e03      	subs	r3, r0, #0
 8005b46:	d102      	bne.n	8005b4e <xQueueGenericSend+0x6c>
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d101      	bne.n	8005b52 <xQueueGenericSend+0x70>
 8005b4e:	2301      	movs	r3, #1
 8005b50:	e000      	b.n	8005b54 <xQueueGenericSend+0x72>
 8005b52:	2300      	movs	r3, #0
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d102      	bne.n	8005b5e <xQueueGenericSend+0x7c>
 8005b58:	b672      	cpsid	i
 8005b5a:	46c0      	nop			@ (mov r8, r8)
 8005b5c:	e7fd      	b.n	8005b5a <xQueueGenericSend+0x78>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005b5e:	f001 faaf 	bl	80070c0 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005b62:	6a3b      	ldr	r3, [r7, #32]
 8005b64:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005b66:	6a3b      	ldr	r3, [r7, #32]
 8005b68:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b6a:	429a      	cmp	r2, r3
 8005b6c:	d302      	bcc.n	8005b74 <xQueueGenericSend+0x92>
 8005b6e:	683b      	ldr	r3, [r7, #0]
 8005b70:	2b02      	cmp	r3, #2
 8005b72:	d11e      	bne.n	8005bb2 <xQueueGenericSend+0xd0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005b74:	683a      	ldr	r2, [r7, #0]
 8005b76:	68b9      	ldr	r1, [r7, #8]
 8005b78:	6a3b      	ldr	r3, [r7, #32]
 8005b7a:	0018      	movs	r0, r3
 8005b7c:	f000 fa3a 	bl	8005ff4 <prvCopyDataToQueue>
 8005b80:	0003      	movs	r3, r0
 8005b82:	61fb      	str	r3, [r7, #28]

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005b84:	6a3b      	ldr	r3, [r7, #32]
 8005b86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d009      	beq.n	8005ba0 <xQueueGenericSend+0xbe>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005b8c:	6a3b      	ldr	r3, [r7, #32]
 8005b8e:	3324      	adds	r3, #36	@ 0x24
 8005b90:	0018      	movs	r0, r3
 8005b92:	f000 febb 	bl	800690c <xTaskRemoveFromEventList>
 8005b96:	1e03      	subs	r3, r0, #0
 8005b98:	d007      	beq.n	8005baa <xQueueGenericSend+0xc8>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005b9a:	f001 fa81 	bl	80070a0 <vPortYield>
 8005b9e:	e004      	b.n	8005baa <xQueueGenericSend+0xc8>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005ba0:	69fb      	ldr	r3, [r7, #28]
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d001      	beq.n	8005baa <xQueueGenericSend+0xc8>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005ba6:	f001 fa7b 	bl	80070a0 <vPortYield>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005baa:	f001 fa9b 	bl	80070e4 <vPortExitCritical>
				return pdPASS;
 8005bae:	2301      	movs	r3, #1
 8005bb0:	e05b      	b.n	8005c6a <xQueueGenericSend+0x188>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d103      	bne.n	8005bc0 <xQueueGenericSend+0xde>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005bb8:	f001 fa94 	bl	80070e4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005bbc:	2300      	movs	r3, #0
 8005bbe:	e054      	b.n	8005c6a <xQueueGenericSend+0x188>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005bc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d106      	bne.n	8005bd4 <xQueueGenericSend+0xf2>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005bc6:	2314      	movs	r3, #20
 8005bc8:	18fb      	adds	r3, r7, r3
 8005bca:	0018      	movs	r0, r3
 8005bcc:	f000 fefc 	bl	80069c8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005bd0:	2301      	movs	r3, #1
 8005bd2:	627b      	str	r3, [r7, #36]	@ 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005bd4:	f001 fa86 	bl	80070e4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005bd8:	f000 fcd6 	bl	8006588 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005bdc:	f001 fa70 	bl	80070c0 <vPortEnterCritical>
 8005be0:	6a3b      	ldr	r3, [r7, #32]
 8005be2:	2244      	movs	r2, #68	@ 0x44
 8005be4:	5c9b      	ldrb	r3, [r3, r2]
 8005be6:	b25b      	sxtb	r3, r3
 8005be8:	3301      	adds	r3, #1
 8005bea:	d103      	bne.n	8005bf4 <xQueueGenericSend+0x112>
 8005bec:	6a3b      	ldr	r3, [r7, #32]
 8005bee:	2244      	movs	r2, #68	@ 0x44
 8005bf0:	2100      	movs	r1, #0
 8005bf2:	5499      	strb	r1, [r3, r2]
 8005bf4:	6a3b      	ldr	r3, [r7, #32]
 8005bf6:	2245      	movs	r2, #69	@ 0x45
 8005bf8:	5c9b      	ldrb	r3, [r3, r2]
 8005bfa:	b25b      	sxtb	r3, r3
 8005bfc:	3301      	adds	r3, #1
 8005bfe:	d103      	bne.n	8005c08 <xQueueGenericSend+0x126>
 8005c00:	6a3b      	ldr	r3, [r7, #32]
 8005c02:	2245      	movs	r2, #69	@ 0x45
 8005c04:	2100      	movs	r1, #0
 8005c06:	5499      	strb	r1, [r3, r2]
 8005c08:	f001 fa6c 	bl	80070e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005c0c:	1d3a      	adds	r2, r7, #4
 8005c0e:	2314      	movs	r3, #20
 8005c10:	18fb      	adds	r3, r7, r3
 8005c12:	0011      	movs	r1, r2
 8005c14:	0018      	movs	r0, r3
 8005c16:	f000 feeb 	bl	80069f0 <xTaskCheckForTimeOut>
 8005c1a:	1e03      	subs	r3, r0, #0
 8005c1c:	d11e      	bne.n	8005c5c <xQueueGenericSend+0x17a>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005c1e:	6a3b      	ldr	r3, [r7, #32]
 8005c20:	0018      	movs	r0, r3
 8005c22:	f000 faec 	bl	80061fe <prvIsQueueFull>
 8005c26:	1e03      	subs	r3, r0, #0
 8005c28:	d011      	beq.n	8005c4e <xQueueGenericSend+0x16c>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005c2a:	6a3b      	ldr	r3, [r7, #32]
 8005c2c:	3310      	adds	r3, #16
 8005c2e:	687a      	ldr	r2, [r7, #4]
 8005c30:	0011      	movs	r1, r2
 8005c32:	0018      	movs	r0, r3
 8005c34:	f000 fe4a 	bl	80068cc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005c38:	6a3b      	ldr	r3, [r7, #32]
 8005c3a:	0018      	movs	r0, r3
 8005c3c:	f000 fa6b 	bl	8006116 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005c40:	f000 fcae 	bl	80065a0 <xTaskResumeAll>
 8005c44:	1e03      	subs	r3, r0, #0
 8005c46:	d18a      	bne.n	8005b5e <xQueueGenericSend+0x7c>
				{
					portYIELD_WITHIN_API();
 8005c48:	f001 fa2a 	bl	80070a0 <vPortYield>
 8005c4c:	e787      	b.n	8005b5e <xQueueGenericSend+0x7c>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005c4e:	6a3b      	ldr	r3, [r7, #32]
 8005c50:	0018      	movs	r0, r3
 8005c52:	f000 fa60 	bl	8006116 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005c56:	f000 fca3 	bl	80065a0 <xTaskResumeAll>
 8005c5a:	e780      	b.n	8005b5e <xQueueGenericSend+0x7c>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005c5c:	6a3b      	ldr	r3, [r7, #32]
 8005c5e:	0018      	movs	r0, r3
 8005c60:	f000 fa59 	bl	8006116 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005c64:	f000 fc9c 	bl	80065a0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005c68:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005c6a:	0018      	movs	r0, r3
 8005c6c:	46bd      	mov	sp, r7
 8005c6e:	b00a      	add	sp, #40	@ 0x28
 8005c70:	bd80      	pop	{r7, pc}

08005c72 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005c72:	b580      	push	{r7, lr}
 8005c74:	b088      	sub	sp, #32
 8005c76:	af00      	add	r7, sp, #0
 8005c78:	6078      	str	r0, [r7, #4]
 8005c7a:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	61bb      	str	r3, [r7, #24]
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8005c80:	69bb      	ldr	r3, [r7, #24]
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d102      	bne.n	8005c8c <xQueueGiveFromISR+0x1a>
 8005c86:	b672      	cpsid	i
 8005c88:	46c0      	nop			@ (mov r8, r8)
 8005c8a:	e7fd      	b.n	8005c88 <xQueueGiveFromISR+0x16>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005c8c:	69bb      	ldr	r3, [r7, #24]
 8005c8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d002      	beq.n	8005c9a <xQueueGiveFromISR+0x28>
 8005c94:	b672      	cpsid	i
 8005c96:	46c0      	nop			@ (mov r8, r8)
 8005c98:	e7fd      	b.n	8005c96 <xQueueGiveFromISR+0x24>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8005c9a:	69bb      	ldr	r3, [r7, #24]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d103      	bne.n	8005caa <xQueueGiveFromISR+0x38>
 8005ca2:	69bb      	ldr	r3, [r7, #24]
 8005ca4:	689b      	ldr	r3, [r3, #8]
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d101      	bne.n	8005cae <xQueueGiveFromISR+0x3c>
 8005caa:	2301      	movs	r3, #1
 8005cac:	e000      	b.n	8005cb0 <xQueueGiveFromISR+0x3e>
 8005cae:	2300      	movs	r3, #0
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d102      	bne.n	8005cba <xQueueGiveFromISR+0x48>
 8005cb4:	b672      	cpsid	i
 8005cb6:	46c0      	nop			@ (mov r8, r8)
 8005cb8:	e7fd      	b.n	8005cb6 <xQueueGiveFromISR+0x44>
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005cba:	f001 fa2b 	bl	8007114 <ulSetInterruptMaskFromISR>
 8005cbe:	0003      	movs	r3, r0
 8005cc0:	617b      	str	r3, [r7, #20]
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005cc2:	69bb      	ldr	r3, [r7, #24]
 8005cc4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005cc6:	613b      	str	r3, [r7, #16]

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8005cc8:	69bb      	ldr	r3, [r7, #24]
 8005cca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ccc:	693a      	ldr	r2, [r7, #16]
 8005cce:	429a      	cmp	r2, r3
 8005cd0:	d22c      	bcs.n	8005d2c <xQueueGiveFromISR+0xba>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005cd2:	200f      	movs	r0, #15
 8005cd4:	183b      	adds	r3, r7, r0
 8005cd6:	69ba      	ldr	r2, [r7, #24]
 8005cd8:	2145      	movs	r1, #69	@ 0x45
 8005cda:	5c52      	ldrb	r2, [r2, r1]
 8005cdc:	701a      	strb	r2, [r3, #0]
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005cde:	693b      	ldr	r3, [r7, #16]
 8005ce0:	1c5a      	adds	r2, r3, #1
 8005ce2:	69bb      	ldr	r3, [r7, #24]
 8005ce4:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005ce6:	183b      	adds	r3, r7, r0
 8005ce8:	781b      	ldrb	r3, [r3, #0]
 8005cea:	b25b      	sxtb	r3, r3
 8005cec:	3301      	adds	r3, #1
 8005cee:	d111      	bne.n	8005d14 <xQueueGiveFromISR+0xa2>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005cf0:	69bb      	ldr	r3, [r7, #24]
 8005cf2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d016      	beq.n	8005d26 <xQueueGiveFromISR+0xb4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005cf8:	69bb      	ldr	r3, [r7, #24]
 8005cfa:	3324      	adds	r3, #36	@ 0x24
 8005cfc:	0018      	movs	r0, r3
 8005cfe:	f000 fe05 	bl	800690c <xTaskRemoveFromEventList>
 8005d02:	1e03      	subs	r3, r0, #0
 8005d04:	d00f      	beq.n	8005d26 <xQueueGiveFromISR+0xb4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005d06:	683b      	ldr	r3, [r7, #0]
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d00c      	beq.n	8005d26 <xQueueGiveFromISR+0xb4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005d0c:	683b      	ldr	r3, [r7, #0]
 8005d0e:	2201      	movs	r2, #1
 8005d10:	601a      	str	r2, [r3, #0]
 8005d12:	e008      	b.n	8005d26 <xQueueGiveFromISR+0xb4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005d14:	230f      	movs	r3, #15
 8005d16:	18fb      	adds	r3, r7, r3
 8005d18:	781b      	ldrb	r3, [r3, #0]
 8005d1a:	3301      	adds	r3, #1
 8005d1c:	b2db      	uxtb	r3, r3
 8005d1e:	b259      	sxtb	r1, r3
 8005d20:	69bb      	ldr	r3, [r7, #24]
 8005d22:	2245      	movs	r2, #69	@ 0x45
 8005d24:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
 8005d26:	2301      	movs	r3, #1
 8005d28:	61fb      	str	r3, [r7, #28]
 8005d2a:	e001      	b.n	8005d30 <xQueueGiveFromISR+0xbe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005d2c:	2300      	movs	r3, #0
 8005d2e:	61fb      	str	r3, [r7, #28]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 8005d30:	697b      	ldr	r3, [r7, #20]
 8005d32:	0018      	movs	r0, r3
 8005d34:	f001 f9f4 	bl	8007120 <vClearInterruptMaskFromISR>

	return xReturn;
 8005d38:	69fb      	ldr	r3, [r7, #28]
}
 8005d3a:	0018      	movs	r0, r3
 8005d3c:	46bd      	mov	sp, r7
 8005d3e:	b008      	add	sp, #32
 8005d40:	bd80      	pop	{r7, pc}

08005d42 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8005d42:	b580      	push	{r7, lr}
 8005d44:	b08a      	sub	sp, #40	@ 0x28
 8005d46:	af00      	add	r7, sp, #0
 8005d48:	6078      	str	r0, [r7, #4]
 8005d4a:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8005d4c:	2300      	movs	r3, #0
 8005d4e:	627b      	str	r3, [r7, #36]	@ 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	61fb      	str	r3, [r7, #28]

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8005d54:	2300      	movs	r3, #0
 8005d56:	623b      	str	r3, [r7, #32]
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005d58:	69fb      	ldr	r3, [r7, #28]
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d102      	bne.n	8005d64 <xQueueSemaphoreTake+0x22>
 8005d5e:	b672      	cpsid	i
 8005d60:	46c0      	nop			@ (mov r8, r8)
 8005d62:	e7fd      	b.n	8005d60 <xQueueSemaphoreTake+0x1e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005d64:	69fb      	ldr	r3, [r7, #28]
 8005d66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d002      	beq.n	8005d72 <xQueueSemaphoreTake+0x30>
 8005d6c:	b672      	cpsid	i
 8005d6e:	46c0      	nop			@ (mov r8, r8)
 8005d70:	e7fd      	b.n	8005d6e <xQueueSemaphoreTake+0x2c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005d72:	f000 ff4f 	bl	8006c14 <xTaskGetSchedulerState>
 8005d76:	1e03      	subs	r3, r0, #0
 8005d78:	d102      	bne.n	8005d80 <xQueueSemaphoreTake+0x3e>
 8005d7a:	683b      	ldr	r3, [r7, #0]
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d101      	bne.n	8005d84 <xQueueSemaphoreTake+0x42>
 8005d80:	2301      	movs	r3, #1
 8005d82:	e000      	b.n	8005d86 <xQueueSemaphoreTake+0x44>
 8005d84:	2300      	movs	r3, #0
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d102      	bne.n	8005d90 <xQueueSemaphoreTake+0x4e>
 8005d8a:	b672      	cpsid	i
 8005d8c:	46c0      	nop			@ (mov r8, r8)
 8005d8e:	e7fd      	b.n	8005d8c <xQueueSemaphoreTake+0x4a>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005d90:	f001 f996 	bl	80070c0 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8005d94:	69fb      	ldr	r3, [r7, #28]
 8005d96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d98:	61bb      	str	r3, [r7, #24]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8005d9a:	69bb      	ldr	r3, [r7, #24]
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d01d      	beq.n	8005ddc <xQueueSemaphoreTake+0x9a>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8005da0:	69bb      	ldr	r3, [r7, #24]
 8005da2:	1e5a      	subs	r2, r3, #1
 8005da4:	69fb      	ldr	r3, [r7, #28]
 8005da6:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005da8:	69fb      	ldr	r3, [r7, #28]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d104      	bne.n	8005dba <xQueueSemaphoreTake+0x78>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8005db0:	f001 f884 	bl	8006ebc <pvTaskIncrementMutexHeldCount>
 8005db4:	0002      	movs	r2, r0
 8005db6:	69fb      	ldr	r3, [r7, #28]
 8005db8:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005dba:	69fb      	ldr	r3, [r7, #28]
 8005dbc:	691b      	ldr	r3, [r3, #16]
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d008      	beq.n	8005dd4 <xQueueSemaphoreTake+0x92>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005dc2:	69fb      	ldr	r3, [r7, #28]
 8005dc4:	3310      	adds	r3, #16
 8005dc6:	0018      	movs	r0, r3
 8005dc8:	f000 fda0 	bl	800690c <xTaskRemoveFromEventList>
 8005dcc:	1e03      	subs	r3, r0, #0
 8005dce:	d001      	beq.n	8005dd4 <xQueueSemaphoreTake+0x92>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005dd0:	f001 f966 	bl	80070a0 <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005dd4:	f001 f986 	bl	80070e4 <vPortExitCritical>
				return pdPASS;
 8005dd8:	2301      	movs	r3, #1
 8005dda:	e08c      	b.n	8005ef6 <xQueueSemaphoreTake+0x1b4>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005ddc:	683b      	ldr	r3, [r7, #0]
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d109      	bne.n	8005df6 <xQueueSemaphoreTake+0xb4>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8005de2:	6a3b      	ldr	r3, [r7, #32]
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d002      	beq.n	8005dee <xQueueSemaphoreTake+0xac>
 8005de8:	b672      	cpsid	i
 8005dea:	46c0      	nop			@ (mov r8, r8)
 8005dec:	e7fd      	b.n	8005dea <xQueueSemaphoreTake+0xa8>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8005dee:	f001 f979 	bl	80070e4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005df2:	2300      	movs	r3, #0
 8005df4:	e07f      	b.n	8005ef6 <xQueueSemaphoreTake+0x1b4>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005df6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d106      	bne.n	8005e0a <xQueueSemaphoreTake+0xc8>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005dfc:	230c      	movs	r3, #12
 8005dfe:	18fb      	adds	r3, r7, r3
 8005e00:	0018      	movs	r0, r3
 8005e02:	f000 fde1 	bl	80069c8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005e06:	2301      	movs	r3, #1
 8005e08:	627b      	str	r3, [r7, #36]	@ 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005e0a:	f001 f96b 	bl	80070e4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005e0e:	f000 fbbb 	bl	8006588 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005e12:	f001 f955 	bl	80070c0 <vPortEnterCritical>
 8005e16:	69fb      	ldr	r3, [r7, #28]
 8005e18:	2244      	movs	r2, #68	@ 0x44
 8005e1a:	5c9b      	ldrb	r3, [r3, r2]
 8005e1c:	b25b      	sxtb	r3, r3
 8005e1e:	3301      	adds	r3, #1
 8005e20:	d103      	bne.n	8005e2a <xQueueSemaphoreTake+0xe8>
 8005e22:	69fb      	ldr	r3, [r7, #28]
 8005e24:	2244      	movs	r2, #68	@ 0x44
 8005e26:	2100      	movs	r1, #0
 8005e28:	5499      	strb	r1, [r3, r2]
 8005e2a:	69fb      	ldr	r3, [r7, #28]
 8005e2c:	2245      	movs	r2, #69	@ 0x45
 8005e2e:	5c9b      	ldrb	r3, [r3, r2]
 8005e30:	b25b      	sxtb	r3, r3
 8005e32:	3301      	adds	r3, #1
 8005e34:	d103      	bne.n	8005e3e <xQueueSemaphoreTake+0xfc>
 8005e36:	69fb      	ldr	r3, [r7, #28]
 8005e38:	2245      	movs	r2, #69	@ 0x45
 8005e3a:	2100      	movs	r1, #0
 8005e3c:	5499      	strb	r1, [r3, r2]
 8005e3e:	f001 f951 	bl	80070e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005e42:	003a      	movs	r2, r7
 8005e44:	230c      	movs	r3, #12
 8005e46:	18fb      	adds	r3, r7, r3
 8005e48:	0011      	movs	r1, r2
 8005e4a:	0018      	movs	r0, r3
 8005e4c:	f000 fdd0 	bl	80069f0 <xTaskCheckForTimeOut>
 8005e50:	1e03      	subs	r3, r0, #0
 8005e52:	d12e      	bne.n	8005eb2 <xQueueSemaphoreTake+0x170>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005e54:	69fb      	ldr	r3, [r7, #28]
 8005e56:	0018      	movs	r0, r3
 8005e58:	f000 f9bb 	bl	80061d2 <prvIsQueueEmpty>
 8005e5c:	1e03      	subs	r3, r0, #0
 8005e5e:	d021      	beq.n	8005ea4 <xQueueSemaphoreTake+0x162>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005e60:	69fb      	ldr	r3, [r7, #28]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d10a      	bne.n	8005e7e <xQueueSemaphoreTake+0x13c>
					{
						taskENTER_CRITICAL();
 8005e68:	f001 f92a 	bl	80070c0 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005e6c:	69fb      	ldr	r3, [r7, #28]
 8005e6e:	689b      	ldr	r3, [r3, #8]
 8005e70:	0018      	movs	r0, r3
 8005e72:	f000 feeb 	bl	8006c4c <xTaskPriorityInherit>
 8005e76:	0003      	movs	r3, r0
 8005e78:	623b      	str	r3, [r7, #32]
						}
						taskEXIT_CRITICAL();
 8005e7a:	f001 f933 	bl	80070e4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005e7e:	69fb      	ldr	r3, [r7, #28]
 8005e80:	3324      	adds	r3, #36	@ 0x24
 8005e82:	683a      	ldr	r2, [r7, #0]
 8005e84:	0011      	movs	r1, r2
 8005e86:	0018      	movs	r0, r3
 8005e88:	f000 fd20 	bl	80068cc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005e8c:	69fb      	ldr	r3, [r7, #28]
 8005e8e:	0018      	movs	r0, r3
 8005e90:	f000 f941 	bl	8006116 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005e94:	f000 fb84 	bl	80065a0 <xTaskResumeAll>
 8005e98:	1e03      	subs	r3, r0, #0
 8005e9a:	d000      	beq.n	8005e9e <xQueueSemaphoreTake+0x15c>
 8005e9c:	e778      	b.n	8005d90 <xQueueSemaphoreTake+0x4e>
				{
					portYIELD_WITHIN_API();
 8005e9e:	f001 f8ff 	bl	80070a0 <vPortYield>
 8005ea2:	e775      	b.n	8005d90 <xQueueSemaphoreTake+0x4e>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8005ea4:	69fb      	ldr	r3, [r7, #28]
 8005ea6:	0018      	movs	r0, r3
 8005ea8:	f000 f935 	bl	8006116 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005eac:	f000 fb78 	bl	80065a0 <xTaskResumeAll>
 8005eb0:	e76e      	b.n	8005d90 <xQueueSemaphoreTake+0x4e>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8005eb2:	69fb      	ldr	r3, [r7, #28]
 8005eb4:	0018      	movs	r0, r3
 8005eb6:	f000 f92e 	bl	8006116 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005eba:	f000 fb71 	bl	80065a0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005ebe:	69fb      	ldr	r3, [r7, #28]
 8005ec0:	0018      	movs	r0, r3
 8005ec2:	f000 f986 	bl	80061d2 <prvIsQueueEmpty>
 8005ec6:	1e03      	subs	r3, r0, #0
 8005ec8:	d100      	bne.n	8005ecc <xQueueSemaphoreTake+0x18a>
 8005eca:	e761      	b.n	8005d90 <xQueueSemaphoreTake+0x4e>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8005ecc:	6a3b      	ldr	r3, [r7, #32]
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d010      	beq.n	8005ef4 <xQueueSemaphoreTake+0x1b2>
					{
						taskENTER_CRITICAL();
 8005ed2:	f001 f8f5 	bl	80070c0 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8005ed6:	69fb      	ldr	r3, [r7, #28]
 8005ed8:	0018      	movs	r0, r3
 8005eda:	f000 f875 	bl	8005fc8 <prvGetDisinheritPriorityAfterTimeout>
 8005ede:	0003      	movs	r3, r0
 8005ee0:	617b      	str	r3, [r7, #20]
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8005ee2:	69fb      	ldr	r3, [r7, #28]
 8005ee4:	689b      	ldr	r3, [r3, #8]
 8005ee6:	697a      	ldr	r2, [r7, #20]
 8005ee8:	0011      	movs	r1, r2
 8005eea:	0018      	movs	r0, r3
 8005eec:	f000 ff74 	bl	8006dd8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8005ef0:	f001 f8f8 	bl	80070e4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005ef4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005ef6:	0018      	movs	r0, r3
 8005ef8:	46bd      	mov	sp, r7
 8005efa:	b00a      	add	sp, #40	@ 0x28
 8005efc:	bd80      	pop	{r7, pc}

08005efe <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005efe:	b590      	push	{r4, r7, lr}
 8005f00:	b08b      	sub	sp, #44	@ 0x2c
 8005f02:	af00      	add	r7, sp, #0
 8005f04:	60f8      	str	r0, [r7, #12]
 8005f06:	60b9      	str	r1, [r7, #8]
 8005f08:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 8005f0e:	6a3b      	ldr	r3, [r7, #32]
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d102      	bne.n	8005f1a <xQueueReceiveFromISR+0x1c>
 8005f14:	b672      	cpsid	i
 8005f16:	46c0      	nop			@ (mov r8, r8)
 8005f18:	e7fd      	b.n	8005f16 <xQueueReceiveFromISR+0x18>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005f1a:	68bb      	ldr	r3, [r7, #8]
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d103      	bne.n	8005f28 <xQueueReceiveFromISR+0x2a>
 8005f20:	6a3b      	ldr	r3, [r7, #32]
 8005f22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d101      	bne.n	8005f2c <xQueueReceiveFromISR+0x2e>
 8005f28:	2301      	movs	r3, #1
 8005f2a:	e000      	b.n	8005f2e <xQueueReceiveFromISR+0x30>
 8005f2c:	2300      	movs	r3, #0
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d102      	bne.n	8005f38 <xQueueReceiveFromISR+0x3a>
 8005f32:	b672      	cpsid	i
 8005f34:	46c0      	nop			@ (mov r8, r8)
 8005f36:	e7fd      	b.n	8005f34 <xQueueReceiveFromISR+0x36>
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005f38:	f001 f8ec 	bl	8007114 <ulSetInterruptMaskFromISR>
 8005f3c:	0003      	movs	r3, r0
 8005f3e:	61fb      	str	r3, [r7, #28]
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005f40:	6a3b      	ldr	r3, [r7, #32]
 8005f42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f44:	61bb      	str	r3, [r7, #24]

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005f46:	69bb      	ldr	r3, [r7, #24]
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d032      	beq.n	8005fb2 <xQueueReceiveFromISR+0xb4>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8005f4c:	2417      	movs	r4, #23
 8005f4e:	193b      	adds	r3, r7, r4
 8005f50:	6a3a      	ldr	r2, [r7, #32]
 8005f52:	2144      	movs	r1, #68	@ 0x44
 8005f54:	5c52      	ldrb	r2, [r2, r1]
 8005f56:	701a      	strb	r2, [r3, #0]

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005f58:	68ba      	ldr	r2, [r7, #8]
 8005f5a:	6a3b      	ldr	r3, [r7, #32]
 8005f5c:	0011      	movs	r1, r2
 8005f5e:	0018      	movs	r0, r3
 8005f60:	f000 f8b3 	bl	80060ca <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005f64:	69bb      	ldr	r3, [r7, #24]
 8005f66:	1e5a      	subs	r2, r3, #1
 8005f68:	6a3b      	ldr	r3, [r7, #32]
 8005f6a:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8005f6c:	193b      	adds	r3, r7, r4
 8005f6e:	781b      	ldrb	r3, [r3, #0]
 8005f70:	b25b      	sxtb	r3, r3
 8005f72:	3301      	adds	r3, #1
 8005f74:	d111      	bne.n	8005f9a <xQueueReceiveFromISR+0x9c>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005f76:	6a3b      	ldr	r3, [r7, #32]
 8005f78:	691b      	ldr	r3, [r3, #16]
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d016      	beq.n	8005fac <xQueueReceiveFromISR+0xae>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005f7e:	6a3b      	ldr	r3, [r7, #32]
 8005f80:	3310      	adds	r3, #16
 8005f82:	0018      	movs	r0, r3
 8005f84:	f000 fcc2 	bl	800690c <xTaskRemoveFromEventList>
 8005f88:	1e03      	subs	r3, r0, #0
 8005f8a:	d00f      	beq.n	8005fac <xQueueReceiveFromISR+0xae>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d00c      	beq.n	8005fac <xQueueReceiveFromISR+0xae>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	2201      	movs	r2, #1
 8005f96:	601a      	str	r2, [r3, #0]
 8005f98:	e008      	b.n	8005fac <xQueueReceiveFromISR+0xae>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8005f9a:	2317      	movs	r3, #23
 8005f9c:	18fb      	adds	r3, r7, r3
 8005f9e:	781b      	ldrb	r3, [r3, #0]
 8005fa0:	3301      	adds	r3, #1
 8005fa2:	b2db      	uxtb	r3, r3
 8005fa4:	b259      	sxtb	r1, r3
 8005fa6:	6a3b      	ldr	r3, [r7, #32]
 8005fa8:	2244      	movs	r2, #68	@ 0x44
 8005faa:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
 8005fac:	2301      	movs	r3, #1
 8005fae:	627b      	str	r3, [r7, #36]	@ 0x24
 8005fb0:	e001      	b.n	8005fb6 <xQueueReceiveFromISR+0xb8>
		}
		else
		{
			xReturn = pdFAIL;
 8005fb2:	2300      	movs	r3, #0
 8005fb4:	627b      	str	r3, [r7, #36]	@ 0x24
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 8005fb6:	69fb      	ldr	r3, [r7, #28]
 8005fb8:	0018      	movs	r0, r3
 8005fba:	f001 f8b1 	bl	8007120 <vClearInterruptMaskFromISR>

	return xReturn;
 8005fbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005fc0:	0018      	movs	r0, r3
 8005fc2:	46bd      	mov	sp, r7
 8005fc4:	b00b      	add	sp, #44	@ 0x2c
 8005fc6:	bd90      	pop	{r4, r7, pc}

08005fc8 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8005fc8:	b580      	push	{r7, lr}
 8005fca:	b084      	sub	sp, #16
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d006      	beq.n	8005fe6 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	2207      	movs	r2, #7
 8005fe0:	1ad3      	subs	r3, r2, r3
 8005fe2:	60fb      	str	r3, [r7, #12]
 8005fe4:	e001      	b.n	8005fea <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8005fe6:	2300      	movs	r3, #0
 8005fe8:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8005fea:	68fb      	ldr	r3, [r7, #12]
	}
 8005fec:	0018      	movs	r0, r3
 8005fee:	46bd      	mov	sp, r7
 8005ff0:	b004      	add	sp, #16
 8005ff2:	bd80      	pop	{r7, pc}

08005ff4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005ff4:	b580      	push	{r7, lr}
 8005ff6:	b086      	sub	sp, #24
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	60f8      	str	r0, [r7, #12]
 8005ffc:	60b9      	str	r1, [r7, #8]
 8005ffe:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006000:	2300      	movs	r3, #0
 8006002:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006008:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800600e:	2b00      	cmp	r3, #0
 8006010:	d10e      	bne.n	8006030 <prvCopyDataToQueue+0x3c>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	2b00      	cmp	r3, #0
 8006018:	d14e      	bne.n	80060b8 <prvCopyDataToQueue+0xc4>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	689b      	ldr	r3, [r3, #8]
 800601e:	0018      	movs	r0, r3
 8006020:	f000 fe7c 	bl	8006d1c <xTaskPriorityDisinherit>
 8006024:	0003      	movs	r3, r0
 8006026:	617b      	str	r3, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	2200      	movs	r2, #0
 800602c:	609a      	str	r2, [r3, #8]
 800602e:	e043      	b.n	80060b8 <prvCopyDataToQueue+0xc4>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	2b00      	cmp	r3, #0
 8006034:	d119      	bne.n	800606a <prvCopyDataToQueue+0x76>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	6858      	ldr	r0, [r3, #4]
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800603e:	68bb      	ldr	r3, [r7, #8]
 8006040:	0019      	movs	r1, r3
 8006042:	f001 fb4d 	bl	80076e0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	685a      	ldr	r2, [r3, #4]
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800604e:	18d2      	adds	r2, r2, r3
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	685a      	ldr	r2, [r3, #4]
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	689b      	ldr	r3, [r3, #8]
 800605c:	429a      	cmp	r2, r3
 800605e:	d32b      	bcc.n	80060b8 <prvCopyDataToQueue+0xc4>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	681a      	ldr	r2, [r3, #0]
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	605a      	str	r2, [r3, #4]
 8006068:	e026      	b.n	80060b8 <prvCopyDataToQueue+0xc4>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	68d8      	ldr	r0, [r3, #12]
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006072:	68bb      	ldr	r3, [r7, #8]
 8006074:	0019      	movs	r1, r3
 8006076:	f001 fb33 	bl	80076e0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	68da      	ldr	r2, [r3, #12]
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006082:	425b      	negs	r3, r3
 8006084:	18d2      	adds	r2, r2, r3
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	68da      	ldr	r2, [r3, #12]
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	429a      	cmp	r2, r3
 8006094:	d207      	bcs.n	80060a6 <prvCopyDataToQueue+0xb2>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	689a      	ldr	r2, [r3, #8]
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800609e:	425b      	negs	r3, r3
 80060a0:	18d2      	adds	r2, r2, r3
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	2b02      	cmp	r3, #2
 80060aa:	d105      	bne.n	80060b8 <prvCopyDataToQueue+0xc4>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80060ac:	693b      	ldr	r3, [r7, #16]
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d002      	beq.n	80060b8 <prvCopyDataToQueue+0xc4>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80060b2:	693b      	ldr	r3, [r7, #16]
 80060b4:	3b01      	subs	r3, #1
 80060b6:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80060b8:	693b      	ldr	r3, [r7, #16]
 80060ba:	1c5a      	adds	r2, r3, #1
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80060c0:	697b      	ldr	r3, [r7, #20]
}
 80060c2:	0018      	movs	r0, r3
 80060c4:	46bd      	mov	sp, r7
 80060c6:	b006      	add	sp, #24
 80060c8:	bd80      	pop	{r7, pc}

080060ca <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80060ca:	b580      	push	{r7, lr}
 80060cc:	b082      	sub	sp, #8
 80060ce:	af00      	add	r7, sp, #0
 80060d0:	6078      	str	r0, [r7, #4]
 80060d2:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d018      	beq.n	800610e <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	68da      	ldr	r2, [r3, #12]
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060e4:	18d2      	adds	r2, r2, r3
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	68da      	ldr	r2, [r3, #12]
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	689b      	ldr	r3, [r3, #8]
 80060f2:	429a      	cmp	r2, r3
 80060f4:	d303      	bcc.n	80060fe <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681a      	ldr	r2, [r3, #0]
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	68d9      	ldr	r1, [r3, #12]
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006106:	683b      	ldr	r3, [r7, #0]
 8006108:	0018      	movs	r0, r3
 800610a:	f001 fae9 	bl	80076e0 <memcpy>
	}
}
 800610e:	46c0      	nop			@ (mov r8, r8)
 8006110:	46bd      	mov	sp, r7
 8006112:	b002      	add	sp, #8
 8006114:	bd80      	pop	{r7, pc}

08006116 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006116:	b580      	push	{r7, lr}
 8006118:	b084      	sub	sp, #16
 800611a:	af00      	add	r7, sp, #0
 800611c:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800611e:	f000 ffcf 	bl	80070c0 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006122:	230f      	movs	r3, #15
 8006124:	18fb      	adds	r3, r7, r3
 8006126:	687a      	ldr	r2, [r7, #4]
 8006128:	2145      	movs	r1, #69	@ 0x45
 800612a:	5c52      	ldrb	r2, [r2, r1]
 800612c:	701a      	strb	r2, [r3, #0]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800612e:	e013      	b.n	8006158 <prvUnlockQueue+0x42>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006134:	2b00      	cmp	r3, #0
 8006136:	d016      	beq.n	8006166 <prvUnlockQueue+0x50>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	3324      	adds	r3, #36	@ 0x24
 800613c:	0018      	movs	r0, r3
 800613e:	f000 fbe5 	bl	800690c <xTaskRemoveFromEventList>
 8006142:	1e03      	subs	r3, r0, #0
 8006144:	d001      	beq.n	800614a <prvUnlockQueue+0x34>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006146:	f000 fca5 	bl	8006a94 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800614a:	210f      	movs	r1, #15
 800614c:	187b      	adds	r3, r7, r1
 800614e:	781b      	ldrb	r3, [r3, #0]
 8006150:	3b01      	subs	r3, #1
 8006152:	b2da      	uxtb	r2, r3
 8006154:	187b      	adds	r3, r7, r1
 8006156:	701a      	strb	r2, [r3, #0]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006158:	230f      	movs	r3, #15
 800615a:	18fb      	adds	r3, r7, r3
 800615c:	781b      	ldrb	r3, [r3, #0]
 800615e:	b25b      	sxtb	r3, r3
 8006160:	2b00      	cmp	r3, #0
 8006162:	dce5      	bgt.n	8006130 <prvUnlockQueue+0x1a>
 8006164:	e000      	b.n	8006168 <prvUnlockQueue+0x52>
					break;
 8006166:	46c0      	nop			@ (mov r8, r8)
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	2245      	movs	r2, #69	@ 0x45
 800616c:	21ff      	movs	r1, #255	@ 0xff
 800616e:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 8006170:	f000 ffb8 	bl	80070e4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006174:	f000 ffa4 	bl	80070c0 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006178:	230e      	movs	r3, #14
 800617a:	18fb      	adds	r3, r7, r3
 800617c:	687a      	ldr	r2, [r7, #4]
 800617e:	2144      	movs	r1, #68	@ 0x44
 8006180:	5c52      	ldrb	r2, [r2, r1]
 8006182:	701a      	strb	r2, [r3, #0]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006184:	e013      	b.n	80061ae <prvUnlockQueue+0x98>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	691b      	ldr	r3, [r3, #16]
 800618a:	2b00      	cmp	r3, #0
 800618c:	d016      	beq.n	80061bc <prvUnlockQueue+0xa6>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	3310      	adds	r3, #16
 8006192:	0018      	movs	r0, r3
 8006194:	f000 fbba 	bl	800690c <xTaskRemoveFromEventList>
 8006198:	1e03      	subs	r3, r0, #0
 800619a:	d001      	beq.n	80061a0 <prvUnlockQueue+0x8a>
				{
					vTaskMissedYield();
 800619c:	f000 fc7a 	bl	8006a94 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80061a0:	210e      	movs	r1, #14
 80061a2:	187b      	adds	r3, r7, r1
 80061a4:	781b      	ldrb	r3, [r3, #0]
 80061a6:	3b01      	subs	r3, #1
 80061a8:	b2da      	uxtb	r2, r3
 80061aa:	187b      	adds	r3, r7, r1
 80061ac:	701a      	strb	r2, [r3, #0]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80061ae:	230e      	movs	r3, #14
 80061b0:	18fb      	adds	r3, r7, r3
 80061b2:	781b      	ldrb	r3, [r3, #0]
 80061b4:	b25b      	sxtb	r3, r3
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	dce5      	bgt.n	8006186 <prvUnlockQueue+0x70>
 80061ba:	e000      	b.n	80061be <prvUnlockQueue+0xa8>
			}
			else
			{
				break;
 80061bc:	46c0      	nop			@ (mov r8, r8)
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	2244      	movs	r2, #68	@ 0x44
 80061c2:	21ff      	movs	r1, #255	@ 0xff
 80061c4:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 80061c6:	f000 ff8d 	bl	80070e4 <vPortExitCritical>
}
 80061ca:	46c0      	nop			@ (mov r8, r8)
 80061cc:	46bd      	mov	sp, r7
 80061ce:	b004      	add	sp, #16
 80061d0:	bd80      	pop	{r7, pc}

080061d2 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80061d2:	b580      	push	{r7, lr}
 80061d4:	b084      	sub	sp, #16
 80061d6:	af00      	add	r7, sp, #0
 80061d8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80061da:	f000 ff71 	bl	80070c0 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d102      	bne.n	80061ec <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80061e6:	2301      	movs	r3, #1
 80061e8:	60fb      	str	r3, [r7, #12]
 80061ea:	e001      	b.n	80061f0 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80061ec:	2300      	movs	r3, #0
 80061ee:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80061f0:	f000 ff78 	bl	80070e4 <vPortExitCritical>

	return xReturn;
 80061f4:	68fb      	ldr	r3, [r7, #12]
}
 80061f6:	0018      	movs	r0, r3
 80061f8:	46bd      	mov	sp, r7
 80061fa:	b004      	add	sp, #16
 80061fc:	bd80      	pop	{r7, pc}

080061fe <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80061fe:	b580      	push	{r7, lr}
 8006200:	b084      	sub	sp, #16
 8006202:	af00      	add	r7, sp, #0
 8006204:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006206:	f000 ff5b 	bl	80070c0 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006212:	429a      	cmp	r2, r3
 8006214:	d102      	bne.n	800621c <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006216:	2301      	movs	r3, #1
 8006218:	60fb      	str	r3, [r7, #12]
 800621a:	e001      	b.n	8006220 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800621c:	2300      	movs	r3, #0
 800621e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006220:	f000 ff60 	bl	80070e4 <vPortExitCritical>

	return xReturn;
 8006224:	68fb      	ldr	r3, [r7, #12]
}
 8006226:	0018      	movs	r0, r3
 8006228:	46bd      	mov	sp, r7
 800622a:	b004      	add	sp, #16
 800622c:	bd80      	pop	{r7, pc}

0800622e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800622e:	b590      	push	{r4, r7, lr}
 8006230:	b08d      	sub	sp, #52	@ 0x34
 8006232:	af04      	add	r7, sp, #16
 8006234:	60f8      	str	r0, [r7, #12]
 8006236:	60b9      	str	r1, [r7, #8]
 8006238:	603b      	str	r3, [r7, #0]
 800623a:	1dbb      	adds	r3, r7, #6
 800623c:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800623e:	1dbb      	adds	r3, r7, #6
 8006240:	881b      	ldrh	r3, [r3, #0]
 8006242:	009b      	lsls	r3, r3, #2
 8006244:	0018      	movs	r0, r3
 8006246:	f000 ffd3 	bl	80071f0 <pvPortMalloc>
 800624a:	0003      	movs	r3, r0
 800624c:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
 800624e:	697b      	ldr	r3, [r7, #20]
 8006250:	2b00      	cmp	r3, #0
 8006252:	d010      	beq.n	8006276 <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006254:	20a0      	movs	r0, #160	@ 0xa0
 8006256:	f000 ffcb 	bl	80071f0 <pvPortMalloc>
 800625a:	0003      	movs	r3, r0
 800625c:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
 800625e:	69fb      	ldr	r3, [r7, #28]
 8006260:	2b00      	cmp	r3, #0
 8006262:	d003      	beq.n	800626c <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006264:	69fb      	ldr	r3, [r7, #28]
 8006266:	697a      	ldr	r2, [r7, #20]
 8006268:	631a      	str	r2, [r3, #48]	@ 0x30
 800626a:	e006      	b.n	800627a <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800626c:	697b      	ldr	r3, [r7, #20]
 800626e:	0018      	movs	r0, r3
 8006270:	f001 f86e 	bl	8007350 <vPortFree>
 8006274:	e001      	b.n	800627a <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006276:	2300      	movs	r3, #0
 8006278:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800627a:	69fb      	ldr	r3, [r7, #28]
 800627c:	2b00      	cmp	r3, #0
 800627e:	d016      	beq.n	80062ae <xTaskCreate+0x80>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006280:	1dbb      	adds	r3, r7, #6
 8006282:	881a      	ldrh	r2, [r3, #0]
 8006284:	683c      	ldr	r4, [r7, #0]
 8006286:	68b9      	ldr	r1, [r7, #8]
 8006288:	68f8      	ldr	r0, [r7, #12]
 800628a:	2300      	movs	r3, #0
 800628c:	9303      	str	r3, [sp, #12]
 800628e:	69fb      	ldr	r3, [r7, #28]
 8006290:	9302      	str	r3, [sp, #8]
 8006292:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006294:	9301      	str	r3, [sp, #4]
 8006296:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006298:	9300      	str	r3, [sp, #0]
 800629a:	0023      	movs	r3, r4
 800629c:	f000 f810 	bl	80062c0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80062a0:	69fb      	ldr	r3, [r7, #28]
 80062a2:	0018      	movs	r0, r3
 80062a4:	f000 f8a6 	bl	80063f4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80062a8:	2301      	movs	r3, #1
 80062aa:	61bb      	str	r3, [r7, #24]
 80062ac:	e002      	b.n	80062b4 <xTaskCreate+0x86>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80062ae:	2301      	movs	r3, #1
 80062b0:	425b      	negs	r3, r3
 80062b2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80062b4:	69bb      	ldr	r3, [r7, #24]
	}
 80062b6:	0018      	movs	r0, r3
 80062b8:	46bd      	mov	sp, r7
 80062ba:	b009      	add	sp, #36	@ 0x24
 80062bc:	bd90      	pop	{r4, r7, pc}
	...

080062c0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80062c0:	b580      	push	{r7, lr}
 80062c2:	b086      	sub	sp, #24
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	60f8      	str	r0, [r7, #12]
 80062c8:	60b9      	str	r1, [r7, #8]
 80062ca:	607a      	str	r2, [r7, #4]
 80062cc:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80062ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062d0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	4943      	ldr	r1, [pc, #268]	@ (80063e4 <prvInitialiseNewTask+0x124>)
 80062d6:	468c      	mov	ip, r1
 80062d8:	4463      	add	r3, ip
 80062da:	009b      	lsls	r3, r3, #2
 80062dc:	18d3      	adds	r3, r2, r3
 80062de:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80062e0:	693b      	ldr	r3, [r7, #16]
 80062e2:	2207      	movs	r2, #7
 80062e4:	4393      	bics	r3, r2
 80062e6:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80062e8:	693b      	ldr	r3, [r7, #16]
 80062ea:	2207      	movs	r2, #7
 80062ec:	4013      	ands	r3, r2
 80062ee:	d002      	beq.n	80062f6 <prvInitialiseNewTask+0x36>
 80062f0:	b672      	cpsid	i
 80062f2:	46c0      	nop			@ (mov r8, r8)
 80062f4:	e7fd      	b.n	80062f2 <prvInitialiseNewTask+0x32>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80062f6:	68bb      	ldr	r3, [r7, #8]
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d020      	beq.n	800633e <prvInitialiseNewTask+0x7e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80062fc:	2300      	movs	r3, #0
 80062fe:	617b      	str	r3, [r7, #20]
 8006300:	e013      	b.n	800632a <prvInitialiseNewTask+0x6a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006302:	68ba      	ldr	r2, [r7, #8]
 8006304:	697b      	ldr	r3, [r7, #20]
 8006306:	18d3      	adds	r3, r2, r3
 8006308:	7818      	ldrb	r0, [r3, #0]
 800630a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800630c:	2134      	movs	r1, #52	@ 0x34
 800630e:	697b      	ldr	r3, [r7, #20]
 8006310:	18d3      	adds	r3, r2, r3
 8006312:	185b      	adds	r3, r3, r1
 8006314:	1c02      	adds	r2, r0, #0
 8006316:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006318:	68ba      	ldr	r2, [r7, #8]
 800631a:	697b      	ldr	r3, [r7, #20]
 800631c:	18d3      	adds	r3, r2, r3
 800631e:	781b      	ldrb	r3, [r3, #0]
 8006320:	2b00      	cmp	r3, #0
 8006322:	d006      	beq.n	8006332 <prvInitialiseNewTask+0x72>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006324:	697b      	ldr	r3, [r7, #20]
 8006326:	3301      	adds	r3, #1
 8006328:	617b      	str	r3, [r7, #20]
 800632a:	697b      	ldr	r3, [r7, #20]
 800632c:	2b0f      	cmp	r3, #15
 800632e:	d9e8      	bls.n	8006302 <prvInitialiseNewTask+0x42>
 8006330:	e000      	b.n	8006334 <prvInitialiseNewTask+0x74>
			{
				break;
 8006332:	46c0      	nop			@ (mov r8, r8)
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006334:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006336:	2243      	movs	r2, #67	@ 0x43
 8006338:	2100      	movs	r1, #0
 800633a:	5499      	strb	r1, [r3, r2]
 800633c:	e003      	b.n	8006346 <prvInitialiseNewTask+0x86>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800633e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006340:	2234      	movs	r2, #52	@ 0x34
 8006342:	2100      	movs	r1, #0
 8006344:	5499      	strb	r1, [r3, r2]
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006346:	6a3b      	ldr	r3, [r7, #32]
 8006348:	2b06      	cmp	r3, #6
 800634a:	d901      	bls.n	8006350 <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800634c:	2306      	movs	r3, #6
 800634e:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006350:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006352:	6a3a      	ldr	r2, [r7, #32]
 8006354:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006356:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006358:	6a3a      	ldr	r2, [r7, #32]
 800635a:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800635c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800635e:	2200      	movs	r2, #0
 8006360:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006362:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006364:	3304      	adds	r3, #4
 8006366:	0018      	movs	r0, r3
 8006368:	f7ff fa8a 	bl	8005880 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800636c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800636e:	3318      	adds	r3, #24
 8006370:	0018      	movs	r0, r3
 8006372:	f7ff fa85 	bl	8005880 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006376:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006378:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800637a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800637c:	6a3b      	ldr	r3, [r7, #32]
 800637e:	2207      	movs	r2, #7
 8006380:	1ad2      	subs	r2, r2, r3
 8006382:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006384:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006386:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006388:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800638a:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800638c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800638e:	2298      	movs	r2, #152	@ 0x98
 8006390:	2100      	movs	r1, #0
 8006392:	5099      	str	r1, [r3, r2]
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006394:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006396:	229c      	movs	r2, #156	@ 0x9c
 8006398:	2100      	movs	r1, #0
 800639a:	5499      	strb	r1, [r3, r2]
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800639c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800639e:	334c      	adds	r3, #76	@ 0x4c
 80063a0:	224c      	movs	r2, #76	@ 0x4c
 80063a2:	2100      	movs	r1, #0
 80063a4:	0018      	movs	r0, r3
 80063a6:	f001 f8fd 	bl	80075a4 <memset>
 80063aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063ac:	4a0e      	ldr	r2, [pc, #56]	@ (80063e8 <prvInitialiseNewTask+0x128>)
 80063ae:	651a      	str	r2, [r3, #80]	@ 0x50
 80063b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063b2:	4a0e      	ldr	r2, [pc, #56]	@ (80063ec <prvInitialiseNewTask+0x12c>)
 80063b4:	655a      	str	r2, [r3, #84]	@ 0x54
 80063b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063b8:	4a0d      	ldr	r2, [pc, #52]	@ (80063f0 <prvInitialiseNewTask+0x130>)
 80063ba:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80063bc:	683a      	ldr	r2, [r7, #0]
 80063be:	68f9      	ldr	r1, [r7, #12]
 80063c0:	693b      	ldr	r3, [r7, #16]
 80063c2:	0018      	movs	r0, r3
 80063c4:	f000 fde0 	bl	8006f88 <pxPortInitialiseStack>
 80063c8:	0002      	movs	r2, r0
 80063ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063cc:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80063ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d002      	beq.n	80063da <prvInitialiseNewTask+0x11a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80063d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063d6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80063d8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80063da:	46c0      	nop			@ (mov r8, r8)
 80063dc:	46bd      	mov	sp, r7
 80063de:	b006      	add	sp, #24
 80063e0:	bd80      	pop	{r7, pc}
 80063e2:	46c0      	nop			@ (mov r8, r8)
 80063e4:	3fffffff 	.word	0x3fffffff
 80063e8:	20001148 	.word	0x20001148
 80063ec:	200011b0 	.word	0x200011b0
 80063f0:	20001218 	.word	0x20001218

080063f4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80063f4:	b580      	push	{r7, lr}
 80063f6:	b082      	sub	sp, #8
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80063fc:	f000 fe60 	bl	80070c0 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006400:	4b28      	ldr	r3, [pc, #160]	@ (80064a4 <prvAddNewTaskToReadyList+0xb0>)
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	1c5a      	adds	r2, r3, #1
 8006406:	4b27      	ldr	r3, [pc, #156]	@ (80064a4 <prvAddNewTaskToReadyList+0xb0>)
 8006408:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 800640a:	4b27      	ldr	r3, [pc, #156]	@ (80064a8 <prvAddNewTaskToReadyList+0xb4>)
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	2b00      	cmp	r3, #0
 8006410:	d109      	bne.n	8006426 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006412:	4b25      	ldr	r3, [pc, #148]	@ (80064a8 <prvAddNewTaskToReadyList+0xb4>)
 8006414:	687a      	ldr	r2, [r7, #4]
 8006416:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006418:	4b22      	ldr	r3, [pc, #136]	@ (80064a4 <prvAddNewTaskToReadyList+0xb0>)
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	2b01      	cmp	r3, #1
 800641e:	d110      	bne.n	8006442 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006420:	f000 fb52 	bl	8006ac8 <prvInitialiseTaskLists>
 8006424:	e00d      	b.n	8006442 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006426:	4b21      	ldr	r3, [pc, #132]	@ (80064ac <prvAddNewTaskToReadyList+0xb8>)
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	2b00      	cmp	r3, #0
 800642c:	d109      	bne.n	8006442 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800642e:	4b1e      	ldr	r3, [pc, #120]	@ (80064a8 <prvAddNewTaskToReadyList+0xb4>)
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006438:	429a      	cmp	r2, r3
 800643a:	d802      	bhi.n	8006442 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800643c:	4b1a      	ldr	r3, [pc, #104]	@ (80064a8 <prvAddNewTaskToReadyList+0xb4>)
 800643e:	687a      	ldr	r2, [r7, #4]
 8006440:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006442:	4b1b      	ldr	r3, [pc, #108]	@ (80064b0 <prvAddNewTaskToReadyList+0xbc>)
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	1c5a      	adds	r2, r3, #1
 8006448:	4b19      	ldr	r3, [pc, #100]	@ (80064b0 <prvAddNewTaskToReadyList+0xbc>)
 800644a:	601a      	str	r2, [r3, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006450:	4b18      	ldr	r3, [pc, #96]	@ (80064b4 <prvAddNewTaskToReadyList+0xc0>)
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	429a      	cmp	r2, r3
 8006456:	d903      	bls.n	8006460 <prvAddNewTaskToReadyList+0x6c>
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800645c:	4b15      	ldr	r3, [pc, #84]	@ (80064b4 <prvAddNewTaskToReadyList+0xc0>)
 800645e:	601a      	str	r2, [r3, #0]
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006464:	0013      	movs	r3, r2
 8006466:	009b      	lsls	r3, r3, #2
 8006468:	189b      	adds	r3, r3, r2
 800646a:	009b      	lsls	r3, r3, #2
 800646c:	4a12      	ldr	r2, [pc, #72]	@ (80064b8 <prvAddNewTaskToReadyList+0xc4>)
 800646e:	189a      	adds	r2, r3, r2
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	3304      	adds	r3, #4
 8006474:	0019      	movs	r1, r3
 8006476:	0010      	movs	r0, r2
 8006478:	f7ff fa0d 	bl	8005896 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800647c:	f000 fe32 	bl	80070e4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006480:	4b0a      	ldr	r3, [pc, #40]	@ (80064ac <prvAddNewTaskToReadyList+0xb8>)
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	2b00      	cmp	r3, #0
 8006486:	d008      	beq.n	800649a <prvAddNewTaskToReadyList+0xa6>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006488:	4b07      	ldr	r3, [pc, #28]	@ (80064a8 <prvAddNewTaskToReadyList+0xb4>)
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006492:	429a      	cmp	r2, r3
 8006494:	d201      	bcs.n	800649a <prvAddNewTaskToReadyList+0xa6>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006496:	f000 fe03 	bl	80070a0 <vPortYield>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800649a:	46c0      	nop			@ (mov r8, r8)
 800649c:	46bd      	mov	sp, r7
 800649e:	b002      	add	sp, #8
 80064a0:	bd80      	pop	{r7, pc}
 80064a2:	46c0      	nop			@ (mov r8, r8)
 80064a4:	200004fc 	.word	0x200004fc
 80064a8:	200003fc 	.word	0x200003fc
 80064ac:	20000508 	.word	0x20000508
 80064b0:	20000518 	.word	0x20000518
 80064b4:	20000504 	.word	0x20000504
 80064b8:	20000400 	.word	0x20000400

080064bc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80064bc:	b580      	push	{r7, lr}
 80064be:	b084      	sub	sp, #16
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80064c4:	2300      	movs	r3, #0
 80064c6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d011      	beq.n	80064f2 <vTaskDelay+0x36>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80064ce:	4b0d      	ldr	r3, [pc, #52]	@ (8006504 <vTaskDelay+0x48>)
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d002      	beq.n	80064dc <vTaskDelay+0x20>
 80064d6:	b672      	cpsid	i
 80064d8:	46c0      	nop			@ (mov r8, r8)
 80064da:	e7fd      	b.n	80064d8 <vTaskDelay+0x1c>
			vTaskSuspendAll();
 80064dc:	f000 f854 	bl	8006588 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	2100      	movs	r1, #0
 80064e4:	0018      	movs	r0, r3
 80064e6:	f000 fcfb 	bl	8006ee0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80064ea:	f000 f859 	bl	80065a0 <xTaskResumeAll>
 80064ee:	0003      	movs	r3, r0
 80064f0:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d101      	bne.n	80064fc <vTaskDelay+0x40>
		{
			portYIELD_WITHIN_API();
 80064f8:	f000 fdd2 	bl	80070a0 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80064fc:	46c0      	nop			@ (mov r8, r8)
 80064fe:	46bd      	mov	sp, r7
 8006500:	b004      	add	sp, #16
 8006502:	bd80      	pop	{r7, pc}
 8006504:	20000524 	.word	0x20000524

08006508 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006508:	b580      	push	{r7, lr}
 800650a:	b084      	sub	sp, #16
 800650c:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 800650e:	4916      	ldr	r1, [pc, #88]	@ (8006568 <vTaskStartScheduler+0x60>)
 8006510:	4816      	ldr	r0, [pc, #88]	@ (800656c <vTaskStartScheduler+0x64>)
 8006512:	4b17      	ldr	r3, [pc, #92]	@ (8006570 <vTaskStartScheduler+0x68>)
 8006514:	9301      	str	r3, [sp, #4]
 8006516:	2300      	movs	r3, #0
 8006518:	9300      	str	r3, [sp, #0]
 800651a:	2300      	movs	r3, #0
 800651c:	2280      	movs	r2, #128	@ 0x80
 800651e:	f7ff fe86 	bl	800622e <xTaskCreate>
 8006522:	0003      	movs	r3, r0
 8006524:	607b      	str	r3, [r7, #4]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	2b01      	cmp	r3, #1
 800652a:	d113      	bne.n	8006554 <vTaskStartScheduler+0x4c>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 800652c:	b672      	cpsid	i
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800652e:	4b11      	ldr	r3, [pc, #68]	@ (8006574 <vTaskStartScheduler+0x6c>)
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	334c      	adds	r3, #76	@ 0x4c
 8006534:	001a      	movs	r2, r3
 8006536:	4b10      	ldr	r3, [pc, #64]	@ (8006578 <vTaskStartScheduler+0x70>)
 8006538:	601a      	str	r2, [r3, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800653a:	4b10      	ldr	r3, [pc, #64]	@ (800657c <vTaskStartScheduler+0x74>)
 800653c:	2201      	movs	r2, #1
 800653e:	4252      	negs	r2, r2
 8006540:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006542:	4b0f      	ldr	r3, [pc, #60]	@ (8006580 <vTaskStartScheduler+0x78>)
 8006544:	2201      	movs	r2, #1
 8006546:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006548:	4b0e      	ldr	r3, [pc, #56]	@ (8006584 <vTaskStartScheduler+0x7c>)
 800654a:	2200      	movs	r2, #0
 800654c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800654e:	f000 fd83 	bl	8007058 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006552:	e005      	b.n	8006560 <vTaskStartScheduler+0x58>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	3301      	adds	r3, #1
 8006558:	d102      	bne.n	8006560 <vTaskStartScheduler+0x58>
 800655a:	b672      	cpsid	i
 800655c:	46c0      	nop			@ (mov r8, r8)
 800655e:	e7fd      	b.n	800655c <vTaskStartScheduler+0x54>
}
 8006560:	46c0      	nop			@ (mov r8, r8)
 8006562:	46bd      	mov	sp, r7
 8006564:	b002      	add	sp, #8
 8006566:	bd80      	pop	{r7, pc}
 8006568:	08008004 	.word	0x08008004
 800656c:	08006aa9 	.word	0x08006aa9
 8006570:	20000520 	.word	0x20000520
 8006574:	200003fc 	.word	0x200003fc
 8006578:	200001b8 	.word	0x200001b8
 800657c:	2000051c 	.word	0x2000051c
 8006580:	20000508 	.word	0x20000508
 8006584:	20000500 	.word	0x20000500

08006588 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006588:	b580      	push	{r7, lr}
 800658a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800658c:	4b03      	ldr	r3, [pc, #12]	@ (800659c <vTaskSuspendAll+0x14>)
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	1c5a      	adds	r2, r3, #1
 8006592:	4b02      	ldr	r3, [pc, #8]	@ (800659c <vTaskSuspendAll+0x14>)
 8006594:	601a      	str	r2, [r3, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006596:	46c0      	nop			@ (mov r8, r8)
 8006598:	46bd      	mov	sp, r7
 800659a:	bd80      	pop	{r7, pc}
 800659c:	20000524 	.word	0x20000524

080065a0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80065a0:	b580      	push	{r7, lr}
 80065a2:	b084      	sub	sp, #16
 80065a4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80065a6:	2300      	movs	r3, #0
 80065a8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80065aa:	2300      	movs	r3, #0
 80065ac:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80065ae:	4b3a      	ldr	r3, [pc, #232]	@ (8006698 <xTaskResumeAll+0xf8>)
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d102      	bne.n	80065bc <xTaskResumeAll+0x1c>
 80065b6:	b672      	cpsid	i
 80065b8:	46c0      	nop			@ (mov r8, r8)
 80065ba:	e7fd      	b.n	80065b8 <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80065bc:	f000 fd80 	bl	80070c0 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80065c0:	4b35      	ldr	r3, [pc, #212]	@ (8006698 <xTaskResumeAll+0xf8>)
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	1e5a      	subs	r2, r3, #1
 80065c6:	4b34      	ldr	r3, [pc, #208]	@ (8006698 <xTaskResumeAll+0xf8>)
 80065c8:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80065ca:	4b33      	ldr	r3, [pc, #204]	@ (8006698 <xTaskResumeAll+0xf8>)
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d15b      	bne.n	800668a <xTaskResumeAll+0xea>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80065d2:	4b32      	ldr	r3, [pc, #200]	@ (800669c <xTaskResumeAll+0xfc>)
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d057      	beq.n	800668a <xTaskResumeAll+0xea>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80065da:	e02f      	b.n	800663c <xTaskResumeAll+0x9c>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80065dc:	4b30      	ldr	r3, [pc, #192]	@ (80066a0 <xTaskResumeAll+0x100>)
 80065de:	68db      	ldr	r3, [r3, #12]
 80065e0:	68db      	ldr	r3, [r3, #12]
 80065e2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	3318      	adds	r3, #24
 80065e8:	0018      	movs	r0, r3
 80065ea:	f7ff f9ac 	bl	8005946 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	3304      	adds	r3, #4
 80065f2:	0018      	movs	r0, r3
 80065f4:	f7ff f9a7 	bl	8005946 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80065fc:	4b29      	ldr	r3, [pc, #164]	@ (80066a4 <xTaskResumeAll+0x104>)
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	429a      	cmp	r2, r3
 8006602:	d903      	bls.n	800660c <xTaskResumeAll+0x6c>
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006608:	4b26      	ldr	r3, [pc, #152]	@ (80066a4 <xTaskResumeAll+0x104>)
 800660a:	601a      	str	r2, [r3, #0]
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006610:	0013      	movs	r3, r2
 8006612:	009b      	lsls	r3, r3, #2
 8006614:	189b      	adds	r3, r3, r2
 8006616:	009b      	lsls	r3, r3, #2
 8006618:	4a23      	ldr	r2, [pc, #140]	@ (80066a8 <xTaskResumeAll+0x108>)
 800661a:	189a      	adds	r2, r3, r2
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	3304      	adds	r3, #4
 8006620:	0019      	movs	r1, r3
 8006622:	0010      	movs	r0, r2
 8006624:	f7ff f937 	bl	8005896 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800662c:	4b1f      	ldr	r3, [pc, #124]	@ (80066ac <xTaskResumeAll+0x10c>)
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006632:	429a      	cmp	r2, r3
 8006634:	d302      	bcc.n	800663c <xTaskResumeAll+0x9c>
					{
						xYieldPending = pdTRUE;
 8006636:	4b1e      	ldr	r3, [pc, #120]	@ (80066b0 <xTaskResumeAll+0x110>)
 8006638:	2201      	movs	r2, #1
 800663a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800663c:	4b18      	ldr	r3, [pc, #96]	@ (80066a0 <xTaskResumeAll+0x100>)
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	2b00      	cmp	r3, #0
 8006642:	d1cb      	bne.n	80065dc <xTaskResumeAll+0x3c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	2b00      	cmp	r3, #0
 8006648:	d001      	beq.n	800664e <xTaskResumeAll+0xae>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800664a:	f000 fac5 	bl	8006bd8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800664e:	4b19      	ldr	r3, [pc, #100]	@ (80066b4 <xTaskResumeAll+0x114>)
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	2b00      	cmp	r3, #0
 8006658:	d00f      	beq.n	800667a <xTaskResumeAll+0xda>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800665a:	f000 f82d 	bl	80066b8 <xTaskIncrementTick>
 800665e:	1e03      	subs	r3, r0, #0
 8006660:	d002      	beq.n	8006668 <xTaskResumeAll+0xc8>
							{
								xYieldPending = pdTRUE;
 8006662:	4b13      	ldr	r3, [pc, #76]	@ (80066b0 <xTaskResumeAll+0x110>)
 8006664:	2201      	movs	r2, #1
 8006666:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	3b01      	subs	r3, #1
 800666c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	2b00      	cmp	r3, #0
 8006672:	d1f2      	bne.n	800665a <xTaskResumeAll+0xba>

						xPendedTicks = 0;
 8006674:	4b0f      	ldr	r3, [pc, #60]	@ (80066b4 <xTaskResumeAll+0x114>)
 8006676:	2200      	movs	r2, #0
 8006678:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800667a:	4b0d      	ldr	r3, [pc, #52]	@ (80066b0 <xTaskResumeAll+0x110>)
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	2b00      	cmp	r3, #0
 8006680:	d003      	beq.n	800668a <xTaskResumeAll+0xea>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006682:	2301      	movs	r3, #1
 8006684:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006686:	f000 fd0b 	bl	80070a0 <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800668a:	f000 fd2b 	bl	80070e4 <vPortExitCritical>

	return xAlreadyYielded;
 800668e:	68bb      	ldr	r3, [r7, #8]
}
 8006690:	0018      	movs	r0, r3
 8006692:	46bd      	mov	sp, r7
 8006694:	b004      	add	sp, #16
 8006696:	bd80      	pop	{r7, pc}
 8006698:	20000524 	.word	0x20000524
 800669c:	200004fc 	.word	0x200004fc
 80066a0:	200004bc 	.word	0x200004bc
 80066a4:	20000504 	.word	0x20000504
 80066a8:	20000400 	.word	0x20000400
 80066ac:	200003fc 	.word	0x200003fc
 80066b0:	20000510 	.word	0x20000510
 80066b4:	2000050c 	.word	0x2000050c

080066b8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80066b8:	b580      	push	{r7, lr}
 80066ba:	b086      	sub	sp, #24
 80066bc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80066be:	2300      	movs	r3, #0
 80066c0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80066c2:	4b4a      	ldr	r3, [pc, #296]	@ (80067ec <xTaskIncrementTick+0x134>)
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d000      	beq.n	80066cc <xTaskIncrementTick+0x14>
 80066ca:	e085      	b.n	80067d8 <xTaskIncrementTick+0x120>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80066cc:	4b48      	ldr	r3, [pc, #288]	@ (80067f0 <xTaskIncrementTick+0x138>)
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	3301      	adds	r3, #1
 80066d2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80066d4:	4b46      	ldr	r3, [pc, #280]	@ (80067f0 <xTaskIncrementTick+0x138>)
 80066d6:	693a      	ldr	r2, [r7, #16]
 80066d8:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80066da:	693b      	ldr	r3, [r7, #16]
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d118      	bne.n	8006712 <xTaskIncrementTick+0x5a>
		{
			taskSWITCH_DELAYED_LISTS();
 80066e0:	4b44      	ldr	r3, [pc, #272]	@ (80067f4 <xTaskIncrementTick+0x13c>)
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d002      	beq.n	80066f0 <xTaskIncrementTick+0x38>
 80066ea:	b672      	cpsid	i
 80066ec:	46c0      	nop			@ (mov r8, r8)
 80066ee:	e7fd      	b.n	80066ec <xTaskIncrementTick+0x34>
 80066f0:	4b40      	ldr	r3, [pc, #256]	@ (80067f4 <xTaskIncrementTick+0x13c>)
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	60fb      	str	r3, [r7, #12]
 80066f6:	4b40      	ldr	r3, [pc, #256]	@ (80067f8 <xTaskIncrementTick+0x140>)
 80066f8:	681a      	ldr	r2, [r3, #0]
 80066fa:	4b3e      	ldr	r3, [pc, #248]	@ (80067f4 <xTaskIncrementTick+0x13c>)
 80066fc:	601a      	str	r2, [r3, #0]
 80066fe:	4b3e      	ldr	r3, [pc, #248]	@ (80067f8 <xTaskIncrementTick+0x140>)
 8006700:	68fa      	ldr	r2, [r7, #12]
 8006702:	601a      	str	r2, [r3, #0]
 8006704:	4b3d      	ldr	r3, [pc, #244]	@ (80067fc <xTaskIncrementTick+0x144>)
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	1c5a      	adds	r2, r3, #1
 800670a:	4b3c      	ldr	r3, [pc, #240]	@ (80067fc <xTaskIncrementTick+0x144>)
 800670c:	601a      	str	r2, [r3, #0]
 800670e:	f000 fa63 	bl	8006bd8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006712:	4b3b      	ldr	r3, [pc, #236]	@ (8006800 <xTaskIncrementTick+0x148>)
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	693a      	ldr	r2, [r7, #16]
 8006718:	429a      	cmp	r2, r3
 800671a:	d349      	bcc.n	80067b0 <xTaskIncrementTick+0xf8>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800671c:	4b35      	ldr	r3, [pc, #212]	@ (80067f4 <xTaskIncrementTick+0x13c>)
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	2b00      	cmp	r3, #0
 8006724:	d104      	bne.n	8006730 <xTaskIncrementTick+0x78>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006726:	4b36      	ldr	r3, [pc, #216]	@ (8006800 <xTaskIncrementTick+0x148>)
 8006728:	2201      	movs	r2, #1
 800672a:	4252      	negs	r2, r2
 800672c:	601a      	str	r2, [r3, #0]
					break;
 800672e:	e03f      	b.n	80067b0 <xTaskIncrementTick+0xf8>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006730:	4b30      	ldr	r3, [pc, #192]	@ (80067f4 <xTaskIncrementTick+0x13c>)
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	68db      	ldr	r3, [r3, #12]
 8006736:	68db      	ldr	r3, [r3, #12]
 8006738:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800673a:	68bb      	ldr	r3, [r7, #8]
 800673c:	685b      	ldr	r3, [r3, #4]
 800673e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006740:	693a      	ldr	r2, [r7, #16]
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	429a      	cmp	r2, r3
 8006746:	d203      	bcs.n	8006750 <xTaskIncrementTick+0x98>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006748:	4b2d      	ldr	r3, [pc, #180]	@ (8006800 <xTaskIncrementTick+0x148>)
 800674a:	687a      	ldr	r2, [r7, #4]
 800674c:	601a      	str	r2, [r3, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800674e:	e02f      	b.n	80067b0 <xTaskIncrementTick+0xf8>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006750:	68bb      	ldr	r3, [r7, #8]
 8006752:	3304      	adds	r3, #4
 8006754:	0018      	movs	r0, r3
 8006756:	f7ff f8f6 	bl	8005946 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800675a:	68bb      	ldr	r3, [r7, #8]
 800675c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800675e:	2b00      	cmp	r3, #0
 8006760:	d004      	beq.n	800676c <xTaskIncrementTick+0xb4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006762:	68bb      	ldr	r3, [r7, #8]
 8006764:	3318      	adds	r3, #24
 8006766:	0018      	movs	r0, r3
 8006768:	f7ff f8ed 	bl	8005946 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800676c:	68bb      	ldr	r3, [r7, #8]
 800676e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006770:	4b24      	ldr	r3, [pc, #144]	@ (8006804 <xTaskIncrementTick+0x14c>)
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	429a      	cmp	r2, r3
 8006776:	d903      	bls.n	8006780 <xTaskIncrementTick+0xc8>
 8006778:	68bb      	ldr	r3, [r7, #8]
 800677a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800677c:	4b21      	ldr	r3, [pc, #132]	@ (8006804 <xTaskIncrementTick+0x14c>)
 800677e:	601a      	str	r2, [r3, #0]
 8006780:	68bb      	ldr	r3, [r7, #8]
 8006782:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006784:	0013      	movs	r3, r2
 8006786:	009b      	lsls	r3, r3, #2
 8006788:	189b      	adds	r3, r3, r2
 800678a:	009b      	lsls	r3, r3, #2
 800678c:	4a1e      	ldr	r2, [pc, #120]	@ (8006808 <xTaskIncrementTick+0x150>)
 800678e:	189a      	adds	r2, r3, r2
 8006790:	68bb      	ldr	r3, [r7, #8]
 8006792:	3304      	adds	r3, #4
 8006794:	0019      	movs	r1, r3
 8006796:	0010      	movs	r0, r2
 8006798:	f7ff f87d 	bl	8005896 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800679c:	68bb      	ldr	r3, [r7, #8]
 800679e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80067a0:	4b1a      	ldr	r3, [pc, #104]	@ (800680c <xTaskIncrementTick+0x154>)
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067a6:	429a      	cmp	r2, r3
 80067a8:	d3b8      	bcc.n	800671c <xTaskIncrementTick+0x64>
						{
							xSwitchRequired = pdTRUE;
 80067aa:	2301      	movs	r3, #1
 80067ac:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80067ae:	e7b5      	b.n	800671c <xTaskIncrementTick+0x64>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80067b0:	4b16      	ldr	r3, [pc, #88]	@ (800680c <xTaskIncrementTick+0x154>)
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80067b6:	4914      	ldr	r1, [pc, #80]	@ (8006808 <xTaskIncrementTick+0x150>)
 80067b8:	0013      	movs	r3, r2
 80067ba:	009b      	lsls	r3, r3, #2
 80067bc:	189b      	adds	r3, r3, r2
 80067be:	009b      	lsls	r3, r3, #2
 80067c0:	585b      	ldr	r3, [r3, r1]
 80067c2:	2b01      	cmp	r3, #1
 80067c4:	d901      	bls.n	80067ca <xTaskIncrementTick+0x112>
			{
				xSwitchRequired = pdTRUE;
 80067c6:	2301      	movs	r3, #1
 80067c8:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80067ca:	4b11      	ldr	r3, [pc, #68]	@ (8006810 <xTaskIncrementTick+0x158>)
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d007      	beq.n	80067e2 <xTaskIncrementTick+0x12a>
			{
				xSwitchRequired = pdTRUE;
 80067d2:	2301      	movs	r3, #1
 80067d4:	617b      	str	r3, [r7, #20]
 80067d6:	e004      	b.n	80067e2 <xTaskIncrementTick+0x12a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80067d8:	4b0e      	ldr	r3, [pc, #56]	@ (8006814 <xTaskIncrementTick+0x15c>)
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	1c5a      	adds	r2, r3, #1
 80067de:	4b0d      	ldr	r3, [pc, #52]	@ (8006814 <xTaskIncrementTick+0x15c>)
 80067e0:	601a      	str	r2, [r3, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80067e2:	697b      	ldr	r3, [r7, #20]
}
 80067e4:	0018      	movs	r0, r3
 80067e6:	46bd      	mov	sp, r7
 80067e8:	b006      	add	sp, #24
 80067ea:	bd80      	pop	{r7, pc}
 80067ec:	20000524 	.word	0x20000524
 80067f0:	20000500 	.word	0x20000500
 80067f4:	200004b4 	.word	0x200004b4
 80067f8:	200004b8 	.word	0x200004b8
 80067fc:	20000514 	.word	0x20000514
 8006800:	2000051c 	.word	0x2000051c
 8006804:	20000504 	.word	0x20000504
 8006808:	20000400 	.word	0x20000400
 800680c:	200003fc 	.word	0x200003fc
 8006810:	20000510 	.word	0x20000510
 8006814:	2000050c 	.word	0x2000050c

08006818 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006818:	b580      	push	{r7, lr}
 800681a:	b082      	sub	sp, #8
 800681c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800681e:	4b25      	ldr	r3, [pc, #148]	@ (80068b4 <vTaskSwitchContext+0x9c>)
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	2b00      	cmp	r3, #0
 8006824:	d003      	beq.n	800682e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006826:	4b24      	ldr	r3, [pc, #144]	@ (80068b8 <vTaskSwitchContext+0xa0>)
 8006828:	2201      	movs	r2, #1
 800682a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800682c:	e03e      	b.n	80068ac <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 800682e:	4b22      	ldr	r3, [pc, #136]	@ (80068b8 <vTaskSwitchContext+0xa0>)
 8006830:	2200      	movs	r2, #0
 8006832:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006834:	4b21      	ldr	r3, [pc, #132]	@ (80068bc <vTaskSwitchContext+0xa4>)
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	607b      	str	r3, [r7, #4]
 800683a:	e008      	b.n	800684e <vTaskSwitchContext+0x36>
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	2b00      	cmp	r3, #0
 8006840:	d102      	bne.n	8006848 <vTaskSwitchContext+0x30>
 8006842:	b672      	cpsid	i
 8006844:	46c0      	nop			@ (mov r8, r8)
 8006846:	e7fd      	b.n	8006844 <vTaskSwitchContext+0x2c>
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	3b01      	subs	r3, #1
 800684c:	607b      	str	r3, [r7, #4]
 800684e:	491c      	ldr	r1, [pc, #112]	@ (80068c0 <vTaskSwitchContext+0xa8>)
 8006850:	687a      	ldr	r2, [r7, #4]
 8006852:	0013      	movs	r3, r2
 8006854:	009b      	lsls	r3, r3, #2
 8006856:	189b      	adds	r3, r3, r2
 8006858:	009b      	lsls	r3, r3, #2
 800685a:	585b      	ldr	r3, [r3, r1]
 800685c:	2b00      	cmp	r3, #0
 800685e:	d0ed      	beq.n	800683c <vTaskSwitchContext+0x24>
 8006860:	687a      	ldr	r2, [r7, #4]
 8006862:	0013      	movs	r3, r2
 8006864:	009b      	lsls	r3, r3, #2
 8006866:	189b      	adds	r3, r3, r2
 8006868:	009b      	lsls	r3, r3, #2
 800686a:	4a15      	ldr	r2, [pc, #84]	@ (80068c0 <vTaskSwitchContext+0xa8>)
 800686c:	189b      	adds	r3, r3, r2
 800686e:	603b      	str	r3, [r7, #0]
 8006870:	683b      	ldr	r3, [r7, #0]
 8006872:	685b      	ldr	r3, [r3, #4]
 8006874:	685a      	ldr	r2, [r3, #4]
 8006876:	683b      	ldr	r3, [r7, #0]
 8006878:	605a      	str	r2, [r3, #4]
 800687a:	683b      	ldr	r3, [r7, #0]
 800687c:	685a      	ldr	r2, [r3, #4]
 800687e:	683b      	ldr	r3, [r7, #0]
 8006880:	3308      	adds	r3, #8
 8006882:	429a      	cmp	r2, r3
 8006884:	d104      	bne.n	8006890 <vTaskSwitchContext+0x78>
 8006886:	683b      	ldr	r3, [r7, #0]
 8006888:	685b      	ldr	r3, [r3, #4]
 800688a:	685a      	ldr	r2, [r3, #4]
 800688c:	683b      	ldr	r3, [r7, #0]
 800688e:	605a      	str	r2, [r3, #4]
 8006890:	683b      	ldr	r3, [r7, #0]
 8006892:	685b      	ldr	r3, [r3, #4]
 8006894:	68da      	ldr	r2, [r3, #12]
 8006896:	4b0b      	ldr	r3, [pc, #44]	@ (80068c4 <vTaskSwitchContext+0xac>)
 8006898:	601a      	str	r2, [r3, #0]
 800689a:	4b08      	ldr	r3, [pc, #32]	@ (80068bc <vTaskSwitchContext+0xa4>)
 800689c:	687a      	ldr	r2, [r7, #4]
 800689e:	601a      	str	r2, [r3, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80068a0:	4b08      	ldr	r3, [pc, #32]	@ (80068c4 <vTaskSwitchContext+0xac>)
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	334c      	adds	r3, #76	@ 0x4c
 80068a6:	001a      	movs	r2, r3
 80068a8:	4b07      	ldr	r3, [pc, #28]	@ (80068c8 <vTaskSwitchContext+0xb0>)
 80068aa:	601a      	str	r2, [r3, #0]
}
 80068ac:	46c0      	nop			@ (mov r8, r8)
 80068ae:	46bd      	mov	sp, r7
 80068b0:	b002      	add	sp, #8
 80068b2:	bd80      	pop	{r7, pc}
 80068b4:	20000524 	.word	0x20000524
 80068b8:	20000510 	.word	0x20000510
 80068bc:	20000504 	.word	0x20000504
 80068c0:	20000400 	.word	0x20000400
 80068c4:	200003fc 	.word	0x200003fc
 80068c8:	200001b8 	.word	0x200001b8

080068cc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80068cc:	b580      	push	{r7, lr}
 80068ce:	b082      	sub	sp, #8
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	6078      	str	r0, [r7, #4]
 80068d4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d102      	bne.n	80068e2 <vTaskPlaceOnEventList+0x16>
 80068dc:	b672      	cpsid	i
 80068de:	46c0      	nop			@ (mov r8, r8)
 80068e0:	e7fd      	b.n	80068de <vTaskPlaceOnEventList+0x12>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80068e2:	4b09      	ldr	r3, [pc, #36]	@ (8006908 <vTaskPlaceOnEventList+0x3c>)
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	3318      	adds	r3, #24
 80068e8:	001a      	movs	r2, r3
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	0011      	movs	r1, r2
 80068ee:	0018      	movs	r0, r3
 80068f0:	f7fe fff3 	bl	80058da <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80068f4:	683b      	ldr	r3, [r7, #0]
 80068f6:	2101      	movs	r1, #1
 80068f8:	0018      	movs	r0, r3
 80068fa:	f000 faf1 	bl	8006ee0 <prvAddCurrentTaskToDelayedList>
}
 80068fe:	46c0      	nop			@ (mov r8, r8)
 8006900:	46bd      	mov	sp, r7
 8006902:	b002      	add	sp, #8
 8006904:	bd80      	pop	{r7, pc}
 8006906:	46c0      	nop			@ (mov r8, r8)
 8006908:	200003fc 	.word	0x200003fc

0800690c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800690c:	b580      	push	{r7, lr}
 800690e:	b084      	sub	sp, #16
 8006910:	af00      	add	r7, sp, #0
 8006912:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	68db      	ldr	r3, [r3, #12]
 8006918:	68db      	ldr	r3, [r3, #12]
 800691a:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
 800691c:	68bb      	ldr	r3, [r7, #8]
 800691e:	2b00      	cmp	r3, #0
 8006920:	d102      	bne.n	8006928 <xTaskRemoveFromEventList+0x1c>
 8006922:	b672      	cpsid	i
 8006924:	46c0      	nop			@ (mov r8, r8)
 8006926:	e7fd      	b.n	8006924 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006928:	68bb      	ldr	r3, [r7, #8]
 800692a:	3318      	adds	r3, #24
 800692c:	0018      	movs	r0, r3
 800692e:	f7ff f80a 	bl	8005946 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006932:	4b1f      	ldr	r3, [pc, #124]	@ (80069b0 <xTaskRemoveFromEventList+0xa4>)
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	2b00      	cmp	r3, #0
 8006938:	d11d      	bne.n	8006976 <xTaskRemoveFromEventList+0x6a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800693a:	68bb      	ldr	r3, [r7, #8]
 800693c:	3304      	adds	r3, #4
 800693e:	0018      	movs	r0, r3
 8006940:	f7ff f801 	bl	8005946 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006944:	68bb      	ldr	r3, [r7, #8]
 8006946:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006948:	4b1a      	ldr	r3, [pc, #104]	@ (80069b4 <xTaskRemoveFromEventList+0xa8>)
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	429a      	cmp	r2, r3
 800694e:	d903      	bls.n	8006958 <xTaskRemoveFromEventList+0x4c>
 8006950:	68bb      	ldr	r3, [r7, #8]
 8006952:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006954:	4b17      	ldr	r3, [pc, #92]	@ (80069b4 <xTaskRemoveFromEventList+0xa8>)
 8006956:	601a      	str	r2, [r3, #0]
 8006958:	68bb      	ldr	r3, [r7, #8]
 800695a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800695c:	0013      	movs	r3, r2
 800695e:	009b      	lsls	r3, r3, #2
 8006960:	189b      	adds	r3, r3, r2
 8006962:	009b      	lsls	r3, r3, #2
 8006964:	4a14      	ldr	r2, [pc, #80]	@ (80069b8 <xTaskRemoveFromEventList+0xac>)
 8006966:	189a      	adds	r2, r3, r2
 8006968:	68bb      	ldr	r3, [r7, #8]
 800696a:	3304      	adds	r3, #4
 800696c:	0019      	movs	r1, r3
 800696e:	0010      	movs	r0, r2
 8006970:	f7fe ff91 	bl	8005896 <vListInsertEnd>
 8006974:	e007      	b.n	8006986 <xTaskRemoveFromEventList+0x7a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006976:	68bb      	ldr	r3, [r7, #8]
 8006978:	3318      	adds	r3, #24
 800697a:	001a      	movs	r2, r3
 800697c:	4b0f      	ldr	r3, [pc, #60]	@ (80069bc <xTaskRemoveFromEventList+0xb0>)
 800697e:	0011      	movs	r1, r2
 8006980:	0018      	movs	r0, r3
 8006982:	f7fe ff88 	bl	8005896 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006986:	68bb      	ldr	r3, [r7, #8]
 8006988:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800698a:	4b0d      	ldr	r3, [pc, #52]	@ (80069c0 <xTaskRemoveFromEventList+0xb4>)
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006990:	429a      	cmp	r2, r3
 8006992:	d905      	bls.n	80069a0 <xTaskRemoveFromEventList+0x94>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006994:	2301      	movs	r3, #1
 8006996:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006998:	4b0a      	ldr	r3, [pc, #40]	@ (80069c4 <xTaskRemoveFromEventList+0xb8>)
 800699a:	2201      	movs	r2, #1
 800699c:	601a      	str	r2, [r3, #0]
 800699e:	e001      	b.n	80069a4 <xTaskRemoveFromEventList+0x98>
	}
	else
	{
		xReturn = pdFALSE;
 80069a0:	2300      	movs	r3, #0
 80069a2:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
 80069a4:	68fb      	ldr	r3, [r7, #12]
}
 80069a6:	0018      	movs	r0, r3
 80069a8:	46bd      	mov	sp, r7
 80069aa:	b004      	add	sp, #16
 80069ac:	bd80      	pop	{r7, pc}
 80069ae:	46c0      	nop			@ (mov r8, r8)
 80069b0:	20000524 	.word	0x20000524
 80069b4:	20000504 	.word	0x20000504
 80069b8:	20000400 	.word	0x20000400
 80069bc:	200004bc 	.word	0x200004bc
 80069c0:	200003fc 	.word	0x200003fc
 80069c4:	20000510 	.word	0x20000510

080069c8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80069c8:	b580      	push	{r7, lr}
 80069ca:	b082      	sub	sp, #8
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80069d0:	4b05      	ldr	r3, [pc, #20]	@ (80069e8 <vTaskInternalSetTimeOutState+0x20>)
 80069d2:	681a      	ldr	r2, [r3, #0]
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80069d8:	4b04      	ldr	r3, [pc, #16]	@ (80069ec <vTaskInternalSetTimeOutState+0x24>)
 80069da:	681a      	ldr	r2, [r3, #0]
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	605a      	str	r2, [r3, #4]
}
 80069e0:	46c0      	nop			@ (mov r8, r8)
 80069e2:	46bd      	mov	sp, r7
 80069e4:	b002      	add	sp, #8
 80069e6:	bd80      	pop	{r7, pc}
 80069e8:	20000514 	.word	0x20000514
 80069ec:	20000500 	.word	0x20000500

080069f0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80069f0:	b580      	push	{r7, lr}
 80069f2:	b086      	sub	sp, #24
 80069f4:	af00      	add	r7, sp, #0
 80069f6:	6078      	str	r0, [r7, #4]
 80069f8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d102      	bne.n	8006a06 <xTaskCheckForTimeOut+0x16>
 8006a00:	b672      	cpsid	i
 8006a02:	46c0      	nop			@ (mov r8, r8)
 8006a04:	e7fd      	b.n	8006a02 <xTaskCheckForTimeOut+0x12>
	configASSERT( pxTicksToWait );
 8006a06:	683b      	ldr	r3, [r7, #0]
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d102      	bne.n	8006a12 <xTaskCheckForTimeOut+0x22>
 8006a0c:	b672      	cpsid	i
 8006a0e:	46c0      	nop			@ (mov r8, r8)
 8006a10:	e7fd      	b.n	8006a0e <xTaskCheckForTimeOut+0x1e>

	taskENTER_CRITICAL();
 8006a12:	f000 fb55 	bl	80070c0 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006a16:	4b1d      	ldr	r3, [pc, #116]	@ (8006a8c <xTaskCheckForTimeOut+0x9c>)
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	685b      	ldr	r3, [r3, #4]
 8006a20:	693a      	ldr	r2, [r7, #16]
 8006a22:	1ad3      	subs	r3, r2, r3
 8006a24:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006a26:	683b      	ldr	r3, [r7, #0]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	3301      	adds	r3, #1
 8006a2c:	d102      	bne.n	8006a34 <xTaskCheckForTimeOut+0x44>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006a2e:	2300      	movs	r3, #0
 8006a30:	617b      	str	r3, [r7, #20]
 8006a32:	e024      	b.n	8006a7e <xTaskCheckForTimeOut+0x8e>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681a      	ldr	r2, [r3, #0]
 8006a38:	4b15      	ldr	r3, [pc, #84]	@ (8006a90 <xTaskCheckForTimeOut+0xa0>)
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	429a      	cmp	r2, r3
 8006a3e:	d007      	beq.n	8006a50 <xTaskCheckForTimeOut+0x60>
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	685b      	ldr	r3, [r3, #4]
 8006a44:	693a      	ldr	r2, [r7, #16]
 8006a46:	429a      	cmp	r2, r3
 8006a48:	d302      	bcc.n	8006a50 <xTaskCheckForTimeOut+0x60>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006a4a:	2301      	movs	r3, #1
 8006a4c:	617b      	str	r3, [r7, #20]
 8006a4e:	e016      	b.n	8006a7e <xTaskCheckForTimeOut+0x8e>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006a50:	683b      	ldr	r3, [r7, #0]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	68fa      	ldr	r2, [r7, #12]
 8006a56:	429a      	cmp	r2, r3
 8006a58:	d20c      	bcs.n	8006a74 <xTaskCheckForTimeOut+0x84>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006a5a:	683b      	ldr	r3, [r7, #0]
 8006a5c:	681a      	ldr	r2, [r3, #0]
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	1ad2      	subs	r2, r2, r3
 8006a62:	683b      	ldr	r3, [r7, #0]
 8006a64:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	0018      	movs	r0, r3
 8006a6a:	f7ff ffad 	bl	80069c8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006a6e:	2300      	movs	r3, #0
 8006a70:	617b      	str	r3, [r7, #20]
 8006a72:	e004      	b.n	8006a7e <xTaskCheckForTimeOut+0x8e>
		}
		else
		{
			*pxTicksToWait = 0;
 8006a74:	683b      	ldr	r3, [r7, #0]
 8006a76:	2200      	movs	r2, #0
 8006a78:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006a7a:	2301      	movs	r3, #1
 8006a7c:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 8006a7e:	f000 fb31 	bl	80070e4 <vPortExitCritical>

	return xReturn;
 8006a82:	697b      	ldr	r3, [r7, #20]
}
 8006a84:	0018      	movs	r0, r3
 8006a86:	46bd      	mov	sp, r7
 8006a88:	b006      	add	sp, #24
 8006a8a:	bd80      	pop	{r7, pc}
 8006a8c:	20000500 	.word	0x20000500
 8006a90:	20000514 	.word	0x20000514

08006a94 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006a94:	b580      	push	{r7, lr}
 8006a96:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006a98:	4b02      	ldr	r3, [pc, #8]	@ (8006aa4 <vTaskMissedYield+0x10>)
 8006a9a:	2201      	movs	r2, #1
 8006a9c:	601a      	str	r2, [r3, #0]
}
 8006a9e:	46c0      	nop			@ (mov r8, r8)
 8006aa0:	46bd      	mov	sp, r7
 8006aa2:	bd80      	pop	{r7, pc}
 8006aa4:	20000510 	.word	0x20000510

08006aa8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006aa8:	b580      	push	{r7, lr}
 8006aaa:	b082      	sub	sp, #8
 8006aac:	af00      	add	r7, sp, #0
 8006aae:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006ab0:	f000 f84e 	bl	8006b50 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006ab4:	4b03      	ldr	r3, [pc, #12]	@ (8006ac4 <prvIdleTask+0x1c>)
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	2b01      	cmp	r3, #1
 8006aba:	d9f9      	bls.n	8006ab0 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006abc:	f000 faf0 	bl	80070a0 <vPortYield>
		prvCheckTasksWaitingTermination();
 8006ac0:	e7f6      	b.n	8006ab0 <prvIdleTask+0x8>
 8006ac2:	46c0      	nop			@ (mov r8, r8)
 8006ac4:	20000400 	.word	0x20000400

08006ac8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006ac8:	b580      	push	{r7, lr}
 8006aca:	b082      	sub	sp, #8
 8006acc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006ace:	2300      	movs	r3, #0
 8006ad0:	607b      	str	r3, [r7, #4]
 8006ad2:	e00c      	b.n	8006aee <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006ad4:	687a      	ldr	r2, [r7, #4]
 8006ad6:	0013      	movs	r3, r2
 8006ad8:	009b      	lsls	r3, r3, #2
 8006ada:	189b      	adds	r3, r3, r2
 8006adc:	009b      	lsls	r3, r3, #2
 8006ade:	4a14      	ldr	r2, [pc, #80]	@ (8006b30 <prvInitialiseTaskLists+0x68>)
 8006ae0:	189b      	adds	r3, r3, r2
 8006ae2:	0018      	movs	r0, r3
 8006ae4:	f7fe feae 	bl	8005844 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	3301      	adds	r3, #1
 8006aec:	607b      	str	r3, [r7, #4]
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	2b06      	cmp	r3, #6
 8006af2:	d9ef      	bls.n	8006ad4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006af4:	4b0f      	ldr	r3, [pc, #60]	@ (8006b34 <prvInitialiseTaskLists+0x6c>)
 8006af6:	0018      	movs	r0, r3
 8006af8:	f7fe fea4 	bl	8005844 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006afc:	4b0e      	ldr	r3, [pc, #56]	@ (8006b38 <prvInitialiseTaskLists+0x70>)
 8006afe:	0018      	movs	r0, r3
 8006b00:	f7fe fea0 	bl	8005844 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006b04:	4b0d      	ldr	r3, [pc, #52]	@ (8006b3c <prvInitialiseTaskLists+0x74>)
 8006b06:	0018      	movs	r0, r3
 8006b08:	f7fe fe9c 	bl	8005844 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006b0c:	4b0c      	ldr	r3, [pc, #48]	@ (8006b40 <prvInitialiseTaskLists+0x78>)
 8006b0e:	0018      	movs	r0, r3
 8006b10:	f7fe fe98 	bl	8005844 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006b14:	4b0b      	ldr	r3, [pc, #44]	@ (8006b44 <prvInitialiseTaskLists+0x7c>)
 8006b16:	0018      	movs	r0, r3
 8006b18:	f7fe fe94 	bl	8005844 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006b1c:	4b0a      	ldr	r3, [pc, #40]	@ (8006b48 <prvInitialiseTaskLists+0x80>)
 8006b1e:	4a05      	ldr	r2, [pc, #20]	@ (8006b34 <prvInitialiseTaskLists+0x6c>)
 8006b20:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006b22:	4b0a      	ldr	r3, [pc, #40]	@ (8006b4c <prvInitialiseTaskLists+0x84>)
 8006b24:	4a04      	ldr	r2, [pc, #16]	@ (8006b38 <prvInitialiseTaskLists+0x70>)
 8006b26:	601a      	str	r2, [r3, #0]
}
 8006b28:	46c0      	nop			@ (mov r8, r8)
 8006b2a:	46bd      	mov	sp, r7
 8006b2c:	b002      	add	sp, #8
 8006b2e:	bd80      	pop	{r7, pc}
 8006b30:	20000400 	.word	0x20000400
 8006b34:	2000048c 	.word	0x2000048c
 8006b38:	200004a0 	.word	0x200004a0
 8006b3c:	200004bc 	.word	0x200004bc
 8006b40:	200004d0 	.word	0x200004d0
 8006b44:	200004e8 	.word	0x200004e8
 8006b48:	200004b4 	.word	0x200004b4
 8006b4c:	200004b8 	.word	0x200004b8

08006b50 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006b50:	b580      	push	{r7, lr}
 8006b52:	b082      	sub	sp, #8
 8006b54:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006b56:	e01a      	b.n	8006b8e <prvCheckTasksWaitingTermination+0x3e>
		{
			taskENTER_CRITICAL();
 8006b58:	f000 fab2 	bl	80070c0 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006b5c:	4b10      	ldr	r3, [pc, #64]	@ (8006ba0 <prvCheckTasksWaitingTermination+0x50>)
 8006b5e:	68db      	ldr	r3, [r3, #12]
 8006b60:	68db      	ldr	r3, [r3, #12]
 8006b62:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	3304      	adds	r3, #4
 8006b68:	0018      	movs	r0, r3
 8006b6a:	f7fe feec 	bl	8005946 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006b6e:	4b0d      	ldr	r3, [pc, #52]	@ (8006ba4 <prvCheckTasksWaitingTermination+0x54>)
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	1e5a      	subs	r2, r3, #1
 8006b74:	4b0b      	ldr	r3, [pc, #44]	@ (8006ba4 <prvCheckTasksWaitingTermination+0x54>)
 8006b76:	601a      	str	r2, [r3, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006b78:	4b0b      	ldr	r3, [pc, #44]	@ (8006ba8 <prvCheckTasksWaitingTermination+0x58>)
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	1e5a      	subs	r2, r3, #1
 8006b7e:	4b0a      	ldr	r3, [pc, #40]	@ (8006ba8 <prvCheckTasksWaitingTermination+0x58>)
 8006b80:	601a      	str	r2, [r3, #0]
			}
			taskEXIT_CRITICAL();
 8006b82:	f000 faaf 	bl	80070e4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	0018      	movs	r0, r3
 8006b8a:	f000 f80f 	bl	8006bac <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006b8e:	4b06      	ldr	r3, [pc, #24]	@ (8006ba8 <prvCheckTasksWaitingTermination+0x58>)
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d1e0      	bne.n	8006b58 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006b96:	46c0      	nop			@ (mov r8, r8)
 8006b98:	46c0      	nop			@ (mov r8, r8)
 8006b9a:	46bd      	mov	sp, r7
 8006b9c:	b002      	add	sp, #8
 8006b9e:	bd80      	pop	{r7, pc}
 8006ba0:	200004d0 	.word	0x200004d0
 8006ba4:	200004fc 	.word	0x200004fc
 8006ba8:	200004e4 	.word	0x200004e4

08006bac <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006bac:	b580      	push	{r7, lr}
 8006bae:	b082      	sub	sp, #8
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	334c      	adds	r3, #76	@ 0x4c
 8006bb8:	0018      	movs	r0, r3
 8006bba:	f000 fcfb 	bl	80075b4 <_reclaim_reent>

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006bc2:	0018      	movs	r0, r3
 8006bc4:	f000 fbc4 	bl	8007350 <vPortFree>
			vPortFree( pxTCB );
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	0018      	movs	r0, r3
 8006bcc:	f000 fbc0 	bl	8007350 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006bd0:	46c0      	nop			@ (mov r8, r8)
 8006bd2:	46bd      	mov	sp, r7
 8006bd4:	b002      	add	sp, #8
 8006bd6:	bd80      	pop	{r7, pc}

08006bd8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006bd8:	b580      	push	{r7, lr}
 8006bda:	b082      	sub	sp, #8
 8006bdc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006bde:	4b0b      	ldr	r3, [pc, #44]	@ (8006c0c <prvResetNextTaskUnblockTime+0x34>)
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d104      	bne.n	8006bf2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006be8:	4b09      	ldr	r3, [pc, #36]	@ (8006c10 <prvResetNextTaskUnblockTime+0x38>)
 8006bea:	2201      	movs	r2, #1
 8006bec:	4252      	negs	r2, r2
 8006bee:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006bf0:	e008      	b.n	8006c04 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006bf2:	4b06      	ldr	r3, [pc, #24]	@ (8006c0c <prvResetNextTaskUnblockTime+0x34>)
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	68db      	ldr	r3, [r3, #12]
 8006bf8:	68db      	ldr	r3, [r3, #12]
 8006bfa:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	685a      	ldr	r2, [r3, #4]
 8006c00:	4b03      	ldr	r3, [pc, #12]	@ (8006c10 <prvResetNextTaskUnblockTime+0x38>)
 8006c02:	601a      	str	r2, [r3, #0]
}
 8006c04:	46c0      	nop			@ (mov r8, r8)
 8006c06:	46bd      	mov	sp, r7
 8006c08:	b002      	add	sp, #8
 8006c0a:	bd80      	pop	{r7, pc}
 8006c0c:	200004b4 	.word	0x200004b4
 8006c10:	2000051c 	.word	0x2000051c

08006c14 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006c14:	b580      	push	{r7, lr}
 8006c16:	b082      	sub	sp, #8
 8006c18:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006c1a:	4b0a      	ldr	r3, [pc, #40]	@ (8006c44 <xTaskGetSchedulerState+0x30>)
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d102      	bne.n	8006c28 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006c22:	2301      	movs	r3, #1
 8006c24:	607b      	str	r3, [r7, #4]
 8006c26:	e008      	b.n	8006c3a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006c28:	4b07      	ldr	r3, [pc, #28]	@ (8006c48 <xTaskGetSchedulerState+0x34>)
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d102      	bne.n	8006c36 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006c30:	2302      	movs	r3, #2
 8006c32:	607b      	str	r3, [r7, #4]
 8006c34:	e001      	b.n	8006c3a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006c36:	2300      	movs	r3, #0
 8006c38:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006c3a:	687b      	ldr	r3, [r7, #4]
	}
 8006c3c:	0018      	movs	r0, r3
 8006c3e:	46bd      	mov	sp, r7
 8006c40:	b002      	add	sp, #8
 8006c42:	bd80      	pop	{r7, pc}
 8006c44:	20000508 	.word	0x20000508
 8006c48:	20000524 	.word	0x20000524

08006c4c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8006c4c:	b580      	push	{r7, lr}
 8006c4e:	b084      	sub	sp, #16
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8006c58:	2300      	movs	r3, #0
 8006c5a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d051      	beq.n	8006d06 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8006c62:	68bb      	ldr	r3, [r7, #8]
 8006c64:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c66:	4b2a      	ldr	r3, [pc, #168]	@ (8006d10 <xTaskPriorityInherit+0xc4>)
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c6c:	429a      	cmp	r2, r3
 8006c6e:	d241      	bcs.n	8006cf4 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006c70:	68bb      	ldr	r3, [r7, #8]
 8006c72:	699b      	ldr	r3, [r3, #24]
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	db06      	blt.n	8006c86 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006c78:	4b25      	ldr	r3, [pc, #148]	@ (8006d10 <xTaskPriorityInherit+0xc4>)
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c7e:	2207      	movs	r2, #7
 8006c80:	1ad2      	subs	r2, r2, r3
 8006c82:	68bb      	ldr	r3, [r7, #8]
 8006c84:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8006c86:	68bb      	ldr	r3, [r7, #8]
 8006c88:	6959      	ldr	r1, [r3, #20]
 8006c8a:	68bb      	ldr	r3, [r7, #8]
 8006c8c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c8e:	0013      	movs	r3, r2
 8006c90:	009b      	lsls	r3, r3, #2
 8006c92:	189b      	adds	r3, r3, r2
 8006c94:	009b      	lsls	r3, r3, #2
 8006c96:	4a1f      	ldr	r2, [pc, #124]	@ (8006d14 <xTaskPriorityInherit+0xc8>)
 8006c98:	189b      	adds	r3, r3, r2
 8006c9a:	4299      	cmp	r1, r3
 8006c9c:	d122      	bne.n	8006ce4 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006c9e:	68bb      	ldr	r3, [r7, #8]
 8006ca0:	3304      	adds	r3, #4
 8006ca2:	0018      	movs	r0, r3
 8006ca4:	f7fe fe4f 	bl	8005946 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006ca8:	4b19      	ldr	r3, [pc, #100]	@ (8006d10 <xTaskPriorityInherit+0xc4>)
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006cae:	68bb      	ldr	r3, [r7, #8]
 8006cb0:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8006cb2:	68bb      	ldr	r3, [r7, #8]
 8006cb4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006cb6:	4b18      	ldr	r3, [pc, #96]	@ (8006d18 <xTaskPriorityInherit+0xcc>)
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	429a      	cmp	r2, r3
 8006cbc:	d903      	bls.n	8006cc6 <xTaskPriorityInherit+0x7a>
 8006cbe:	68bb      	ldr	r3, [r7, #8]
 8006cc0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006cc2:	4b15      	ldr	r3, [pc, #84]	@ (8006d18 <xTaskPriorityInherit+0xcc>)
 8006cc4:	601a      	str	r2, [r3, #0]
 8006cc6:	68bb      	ldr	r3, [r7, #8]
 8006cc8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006cca:	0013      	movs	r3, r2
 8006ccc:	009b      	lsls	r3, r3, #2
 8006cce:	189b      	adds	r3, r3, r2
 8006cd0:	009b      	lsls	r3, r3, #2
 8006cd2:	4a10      	ldr	r2, [pc, #64]	@ (8006d14 <xTaskPriorityInherit+0xc8>)
 8006cd4:	189a      	adds	r2, r3, r2
 8006cd6:	68bb      	ldr	r3, [r7, #8]
 8006cd8:	3304      	adds	r3, #4
 8006cda:	0019      	movs	r1, r3
 8006cdc:	0010      	movs	r0, r2
 8006cde:	f7fe fdda 	bl	8005896 <vListInsertEnd>
 8006ce2:	e004      	b.n	8006cee <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006ce4:	4b0a      	ldr	r3, [pc, #40]	@ (8006d10 <xTaskPriorityInherit+0xc4>)
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006cea:	68bb      	ldr	r3, [r7, #8]
 8006cec:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8006cee:	2301      	movs	r3, #1
 8006cf0:	60fb      	str	r3, [r7, #12]
 8006cf2:	e008      	b.n	8006d06 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8006cf4:	68bb      	ldr	r3, [r7, #8]
 8006cf6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006cf8:	4b05      	ldr	r3, [pc, #20]	@ (8006d10 <xTaskPriorityInherit+0xc4>)
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cfe:	429a      	cmp	r2, r3
 8006d00:	d201      	bcs.n	8006d06 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8006d02:	2301      	movs	r3, #1
 8006d04:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006d06:	68fb      	ldr	r3, [r7, #12]
	}
 8006d08:	0018      	movs	r0, r3
 8006d0a:	46bd      	mov	sp, r7
 8006d0c:	b004      	add	sp, #16
 8006d0e:	bd80      	pop	{r7, pc}
 8006d10:	200003fc 	.word	0x200003fc
 8006d14:	20000400 	.word	0x20000400
 8006d18:	20000504 	.word	0x20000504

08006d1c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006d1c:	b580      	push	{r7, lr}
 8006d1e:	b084      	sub	sp, #16
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8006d28:	2300      	movs	r3, #0
 8006d2a:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d046      	beq.n	8006dc0 <xTaskPriorityDisinherit+0xa4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006d32:	4b26      	ldr	r3, [pc, #152]	@ (8006dcc <xTaskPriorityDisinherit+0xb0>)
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	68ba      	ldr	r2, [r7, #8]
 8006d38:	429a      	cmp	r2, r3
 8006d3a:	d002      	beq.n	8006d42 <xTaskPriorityDisinherit+0x26>
 8006d3c:	b672      	cpsid	i
 8006d3e:	46c0      	nop			@ (mov r8, r8)
 8006d40:	e7fd      	b.n	8006d3e <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
 8006d42:	68bb      	ldr	r3, [r7, #8]
 8006d44:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d102      	bne.n	8006d50 <xTaskPriorityDisinherit+0x34>
 8006d4a:	b672      	cpsid	i
 8006d4c:	46c0      	nop			@ (mov r8, r8)
 8006d4e:	e7fd      	b.n	8006d4c <xTaskPriorityDisinherit+0x30>
			( pxTCB->uxMutexesHeld )--;
 8006d50:	68bb      	ldr	r3, [r7, #8]
 8006d52:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006d54:	1e5a      	subs	r2, r3, #1
 8006d56:	68bb      	ldr	r3, [r7, #8]
 8006d58:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006d5a:	68bb      	ldr	r3, [r7, #8]
 8006d5c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006d5e:	68bb      	ldr	r3, [r7, #8]
 8006d60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006d62:	429a      	cmp	r2, r3
 8006d64:	d02c      	beq.n	8006dc0 <xTaskPriorityDisinherit+0xa4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006d66:	68bb      	ldr	r3, [r7, #8]
 8006d68:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d128      	bne.n	8006dc0 <xTaskPriorityDisinherit+0xa4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006d6e:	68bb      	ldr	r3, [r7, #8]
 8006d70:	3304      	adds	r3, #4
 8006d72:	0018      	movs	r0, r3
 8006d74:	f7fe fde7 	bl	8005946 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006d78:	68bb      	ldr	r3, [r7, #8]
 8006d7a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006d7c:	68bb      	ldr	r3, [r7, #8]
 8006d7e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006d80:	68bb      	ldr	r3, [r7, #8]
 8006d82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d84:	2207      	movs	r2, #7
 8006d86:	1ad2      	subs	r2, r2, r3
 8006d88:	68bb      	ldr	r3, [r7, #8]
 8006d8a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006d8c:	68bb      	ldr	r3, [r7, #8]
 8006d8e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006d90:	4b0f      	ldr	r3, [pc, #60]	@ (8006dd0 <xTaskPriorityDisinherit+0xb4>)
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	429a      	cmp	r2, r3
 8006d96:	d903      	bls.n	8006da0 <xTaskPriorityDisinherit+0x84>
 8006d98:	68bb      	ldr	r3, [r7, #8]
 8006d9a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006d9c:	4b0c      	ldr	r3, [pc, #48]	@ (8006dd0 <xTaskPriorityDisinherit+0xb4>)
 8006d9e:	601a      	str	r2, [r3, #0]
 8006da0:	68bb      	ldr	r3, [r7, #8]
 8006da2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006da4:	0013      	movs	r3, r2
 8006da6:	009b      	lsls	r3, r3, #2
 8006da8:	189b      	adds	r3, r3, r2
 8006daa:	009b      	lsls	r3, r3, #2
 8006dac:	4a09      	ldr	r2, [pc, #36]	@ (8006dd4 <xTaskPriorityDisinherit+0xb8>)
 8006dae:	189a      	adds	r2, r3, r2
 8006db0:	68bb      	ldr	r3, [r7, #8]
 8006db2:	3304      	adds	r3, #4
 8006db4:	0019      	movs	r1, r3
 8006db6:	0010      	movs	r0, r2
 8006db8:	f7fe fd6d 	bl	8005896 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006dbc:	2301      	movs	r3, #1
 8006dbe:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006dc0:	68fb      	ldr	r3, [r7, #12]
	}
 8006dc2:	0018      	movs	r0, r3
 8006dc4:	46bd      	mov	sp, r7
 8006dc6:	b004      	add	sp, #16
 8006dc8:	bd80      	pop	{r7, pc}
 8006dca:	46c0      	nop			@ (mov r8, r8)
 8006dcc:	200003fc 	.word	0x200003fc
 8006dd0:	20000504 	.word	0x20000504
 8006dd4:	20000400 	.word	0x20000400

08006dd8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8006dd8:	b580      	push	{r7, lr}
 8006dda:	b086      	sub	sp, #24
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	6078      	str	r0, [r7, #4]
 8006de0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	613b      	str	r3, [r7, #16]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8006de6:	2301      	movs	r3, #1
 8006de8:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d05a      	beq.n	8006ea6 <vTaskPriorityDisinheritAfterTimeout+0xce>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8006df0:	693b      	ldr	r3, [r7, #16]
 8006df2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d102      	bne.n	8006dfe <vTaskPriorityDisinheritAfterTimeout+0x26>
 8006df8:	b672      	cpsid	i
 8006dfa:	46c0      	nop			@ (mov r8, r8)
 8006dfc:	e7fd      	b.n	8006dfa <vTaskPriorityDisinheritAfterTimeout+0x22>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8006dfe:	693b      	ldr	r3, [r7, #16]
 8006e00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006e02:	683a      	ldr	r2, [r7, #0]
 8006e04:	429a      	cmp	r2, r3
 8006e06:	d902      	bls.n	8006e0e <vTaskPriorityDisinheritAfterTimeout+0x36>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8006e08:	683b      	ldr	r3, [r7, #0]
 8006e0a:	617b      	str	r3, [r7, #20]
 8006e0c:	e002      	b.n	8006e14 <vTaskPriorityDisinheritAfterTimeout+0x3c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8006e0e:	693b      	ldr	r3, [r7, #16]
 8006e10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006e12:	617b      	str	r3, [r7, #20]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8006e14:	693b      	ldr	r3, [r7, #16]
 8006e16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e18:	697a      	ldr	r2, [r7, #20]
 8006e1a:	429a      	cmp	r2, r3
 8006e1c:	d043      	beq.n	8006ea6 <vTaskPriorityDisinheritAfterTimeout+0xce>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8006e1e:	693b      	ldr	r3, [r7, #16]
 8006e20:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006e22:	68fa      	ldr	r2, [r7, #12]
 8006e24:	429a      	cmp	r2, r3
 8006e26:	d13e      	bne.n	8006ea6 <vTaskPriorityDisinheritAfterTimeout+0xce>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8006e28:	4b21      	ldr	r3, [pc, #132]	@ (8006eb0 <vTaskPriorityDisinheritAfterTimeout+0xd8>)
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	693a      	ldr	r2, [r7, #16]
 8006e2e:	429a      	cmp	r2, r3
 8006e30:	d102      	bne.n	8006e38 <vTaskPriorityDisinheritAfterTimeout+0x60>
 8006e32:	b672      	cpsid	i
 8006e34:	46c0      	nop			@ (mov r8, r8)
 8006e36:	e7fd      	b.n	8006e34 <vTaskPriorityDisinheritAfterTimeout+0x5c>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8006e38:	693b      	ldr	r3, [r7, #16]
 8006e3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e3c:	60bb      	str	r3, [r7, #8]
					pxTCB->uxPriority = uxPriorityToUse;
 8006e3e:	693b      	ldr	r3, [r7, #16]
 8006e40:	697a      	ldr	r2, [r7, #20]
 8006e42:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006e44:	693b      	ldr	r3, [r7, #16]
 8006e46:	699b      	ldr	r3, [r3, #24]
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	db04      	blt.n	8006e56 <vTaskPriorityDisinheritAfterTimeout+0x7e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006e4c:	697b      	ldr	r3, [r7, #20]
 8006e4e:	2207      	movs	r2, #7
 8006e50:	1ad2      	subs	r2, r2, r3
 8006e52:	693b      	ldr	r3, [r7, #16]
 8006e54:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8006e56:	693b      	ldr	r3, [r7, #16]
 8006e58:	6959      	ldr	r1, [r3, #20]
 8006e5a:	68ba      	ldr	r2, [r7, #8]
 8006e5c:	0013      	movs	r3, r2
 8006e5e:	009b      	lsls	r3, r3, #2
 8006e60:	189b      	adds	r3, r3, r2
 8006e62:	009b      	lsls	r3, r3, #2
 8006e64:	4a13      	ldr	r2, [pc, #76]	@ (8006eb4 <vTaskPriorityDisinheritAfterTimeout+0xdc>)
 8006e66:	189b      	adds	r3, r3, r2
 8006e68:	4299      	cmp	r1, r3
 8006e6a:	d11c      	bne.n	8006ea6 <vTaskPriorityDisinheritAfterTimeout+0xce>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006e6c:	693b      	ldr	r3, [r7, #16]
 8006e6e:	3304      	adds	r3, #4
 8006e70:	0018      	movs	r0, r3
 8006e72:	f7fe fd68 	bl	8005946 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8006e76:	693b      	ldr	r3, [r7, #16]
 8006e78:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006e7a:	4b0f      	ldr	r3, [pc, #60]	@ (8006eb8 <vTaskPriorityDisinheritAfterTimeout+0xe0>)
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	429a      	cmp	r2, r3
 8006e80:	d903      	bls.n	8006e8a <vTaskPriorityDisinheritAfterTimeout+0xb2>
 8006e82:	693b      	ldr	r3, [r7, #16]
 8006e84:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006e86:	4b0c      	ldr	r3, [pc, #48]	@ (8006eb8 <vTaskPriorityDisinheritAfterTimeout+0xe0>)
 8006e88:	601a      	str	r2, [r3, #0]
 8006e8a:	693b      	ldr	r3, [r7, #16]
 8006e8c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006e8e:	0013      	movs	r3, r2
 8006e90:	009b      	lsls	r3, r3, #2
 8006e92:	189b      	adds	r3, r3, r2
 8006e94:	009b      	lsls	r3, r3, #2
 8006e96:	4a07      	ldr	r2, [pc, #28]	@ (8006eb4 <vTaskPriorityDisinheritAfterTimeout+0xdc>)
 8006e98:	189a      	adds	r2, r3, r2
 8006e9a:	693b      	ldr	r3, [r7, #16]
 8006e9c:	3304      	adds	r3, #4
 8006e9e:	0019      	movs	r1, r3
 8006ea0:	0010      	movs	r0, r2
 8006ea2:	f7fe fcf8 	bl	8005896 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006ea6:	46c0      	nop			@ (mov r8, r8)
 8006ea8:	46bd      	mov	sp, r7
 8006eaa:	b006      	add	sp, #24
 8006eac:	bd80      	pop	{r7, pc}
 8006eae:	46c0      	nop			@ (mov r8, r8)
 8006eb0:	200003fc 	.word	0x200003fc
 8006eb4:	20000400 	.word	0x20000400
 8006eb8:	20000504 	.word	0x20000504

08006ebc <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8006ebc:	b580      	push	{r7, lr}
 8006ebe:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8006ec0:	4b06      	ldr	r3, [pc, #24]	@ (8006edc <pvTaskIncrementMutexHeldCount+0x20>)
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d004      	beq.n	8006ed2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8006ec8:	4b04      	ldr	r3, [pc, #16]	@ (8006edc <pvTaskIncrementMutexHeldCount+0x20>)
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006ece:	3201      	adds	r2, #1
 8006ed0:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 8006ed2:	4b02      	ldr	r3, [pc, #8]	@ (8006edc <pvTaskIncrementMutexHeldCount+0x20>)
 8006ed4:	681b      	ldr	r3, [r3, #0]
	}
 8006ed6:	0018      	movs	r0, r3
 8006ed8:	46bd      	mov	sp, r7
 8006eda:	bd80      	pop	{r7, pc}
 8006edc:	200003fc 	.word	0x200003fc

08006ee0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006ee0:	b580      	push	{r7, lr}
 8006ee2:	b084      	sub	sp, #16
 8006ee4:	af00      	add	r7, sp, #0
 8006ee6:	6078      	str	r0, [r7, #4]
 8006ee8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006eea:	4b21      	ldr	r3, [pc, #132]	@ (8006f70 <prvAddCurrentTaskToDelayedList+0x90>)
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006ef0:	4b20      	ldr	r3, [pc, #128]	@ (8006f74 <prvAddCurrentTaskToDelayedList+0x94>)
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	3304      	adds	r3, #4
 8006ef6:	0018      	movs	r0, r3
 8006ef8:	f7fe fd25 	bl	8005946 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	3301      	adds	r3, #1
 8006f00:	d10b      	bne.n	8006f1a <prvAddCurrentTaskToDelayedList+0x3a>
 8006f02:	683b      	ldr	r3, [r7, #0]
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d008      	beq.n	8006f1a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006f08:	4b1a      	ldr	r3, [pc, #104]	@ (8006f74 <prvAddCurrentTaskToDelayedList+0x94>)
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	1d1a      	adds	r2, r3, #4
 8006f0e:	4b1a      	ldr	r3, [pc, #104]	@ (8006f78 <prvAddCurrentTaskToDelayedList+0x98>)
 8006f10:	0011      	movs	r1, r2
 8006f12:	0018      	movs	r0, r3
 8006f14:	f7fe fcbf 	bl	8005896 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006f18:	e026      	b.n	8006f68 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006f1a:	68fa      	ldr	r2, [r7, #12]
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	18d3      	adds	r3, r2, r3
 8006f20:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006f22:	4b14      	ldr	r3, [pc, #80]	@ (8006f74 <prvAddCurrentTaskToDelayedList+0x94>)
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	68ba      	ldr	r2, [r7, #8]
 8006f28:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006f2a:	68ba      	ldr	r2, [r7, #8]
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	429a      	cmp	r2, r3
 8006f30:	d209      	bcs.n	8006f46 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006f32:	4b12      	ldr	r3, [pc, #72]	@ (8006f7c <prvAddCurrentTaskToDelayedList+0x9c>)
 8006f34:	681a      	ldr	r2, [r3, #0]
 8006f36:	4b0f      	ldr	r3, [pc, #60]	@ (8006f74 <prvAddCurrentTaskToDelayedList+0x94>)
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	3304      	adds	r3, #4
 8006f3c:	0019      	movs	r1, r3
 8006f3e:	0010      	movs	r0, r2
 8006f40:	f7fe fccb 	bl	80058da <vListInsert>
}
 8006f44:	e010      	b.n	8006f68 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006f46:	4b0e      	ldr	r3, [pc, #56]	@ (8006f80 <prvAddCurrentTaskToDelayedList+0xa0>)
 8006f48:	681a      	ldr	r2, [r3, #0]
 8006f4a:	4b0a      	ldr	r3, [pc, #40]	@ (8006f74 <prvAddCurrentTaskToDelayedList+0x94>)
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	3304      	adds	r3, #4
 8006f50:	0019      	movs	r1, r3
 8006f52:	0010      	movs	r0, r2
 8006f54:	f7fe fcc1 	bl	80058da <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006f58:	4b0a      	ldr	r3, [pc, #40]	@ (8006f84 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	68ba      	ldr	r2, [r7, #8]
 8006f5e:	429a      	cmp	r2, r3
 8006f60:	d202      	bcs.n	8006f68 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006f62:	4b08      	ldr	r3, [pc, #32]	@ (8006f84 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006f64:	68ba      	ldr	r2, [r7, #8]
 8006f66:	601a      	str	r2, [r3, #0]
}
 8006f68:	46c0      	nop			@ (mov r8, r8)
 8006f6a:	46bd      	mov	sp, r7
 8006f6c:	b004      	add	sp, #16
 8006f6e:	bd80      	pop	{r7, pc}
 8006f70:	20000500 	.word	0x20000500
 8006f74:	200003fc 	.word	0x200003fc
 8006f78:	200004e8 	.word	0x200004e8
 8006f7c:	200004b8 	.word	0x200004b8
 8006f80:	200004b4 	.word	0x200004b4
 8006f84:	2000051c 	.word	0x2000051c

08006f88 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006f88:	b580      	push	{r7, lr}
 8006f8a:	b084      	sub	sp, #16
 8006f8c:	af00      	add	r7, sp, #0
 8006f8e:	60f8      	str	r0, [r7, #12]
 8006f90:	60b9      	str	r1, [r7, #8]
 8006f92:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	3b04      	subs	r3, #4
 8006f98:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	2280      	movs	r2, #128	@ 0x80
 8006f9e:	0452      	lsls	r2, r2, #17
 8006fa0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	3b04      	subs	r3, #4
 8006fa6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 8006fa8:	68ba      	ldr	r2, [r7, #8]
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	3b04      	subs	r3, #4
 8006fb2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006fb4:	4a08      	ldr	r2, [pc, #32]	@ (8006fd8 <pxPortInitialiseStack+0x50>)
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	3b14      	subs	r3, #20
 8006fbe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006fc0:	687a      	ldr	r2, [r7, #4]
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	3b20      	subs	r3, #32
 8006fca:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006fcc:	68fb      	ldr	r3, [r7, #12]
}
 8006fce:	0018      	movs	r0, r3
 8006fd0:	46bd      	mov	sp, r7
 8006fd2:	b004      	add	sp, #16
 8006fd4:	bd80      	pop	{r7, pc}
 8006fd6:	46c0      	nop			@ (mov r8, r8)
 8006fd8:	08006fdd 	.word	0x08006fdd

08006fdc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006fdc:	b580      	push	{r7, lr}
 8006fde:	b082      	sub	sp, #8
 8006fe0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8006fe2:	2300      	movs	r3, #0
 8006fe4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006fe6:	4b08      	ldr	r3, [pc, #32]	@ (8007008 <prvTaskExitError+0x2c>)
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	3301      	adds	r3, #1
 8006fec:	d002      	beq.n	8006ff4 <prvTaskExitError+0x18>
 8006fee:	b672      	cpsid	i
 8006ff0:	46c0      	nop			@ (mov r8, r8)
 8006ff2:	e7fd      	b.n	8006ff0 <prvTaskExitError+0x14>
	portDISABLE_INTERRUPTS();
 8006ff4:	b672      	cpsid	i
	while( ulDummy == 0 )
 8006ff6:	46c0      	nop			@ (mov r8, r8)
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d0fc      	beq.n	8006ff8 <prvTaskExitError+0x1c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006ffe:	46c0      	nop			@ (mov r8, r8)
 8007000:	46c0      	nop			@ (mov r8, r8)
 8007002:	46bd      	mov	sp, r7
 8007004:	b002      	add	sp, #8
 8007006:	bd80      	pop	{r7, pc}
 8007008:	200001b4 	.word	0x200001b4

0800700c <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
 800700c:	b580      	push	{r7, lr}
 800700e:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
 8007010:	46c0      	nop			@ (mov r8, r8)
 8007012:	46bd      	mov	sp, r7
 8007014:	bd80      	pop	{r7, pc}
	...

08007020 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 8007020:	4a0b      	ldr	r2, [pc, #44]	@ (8007050 <pxCurrentTCBConst2>)
 8007022:	6813      	ldr	r3, [r2, #0]
 8007024:	6818      	ldr	r0, [r3, #0]
 8007026:	3020      	adds	r0, #32
 8007028:	f380 8809 	msr	PSP, r0
 800702c:	2002      	movs	r0, #2
 800702e:	f380 8814 	msr	CONTROL, r0
 8007032:	f3bf 8f6f 	isb	sy
 8007036:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 8007038:	46ae      	mov	lr, r5
 800703a:	bc08      	pop	{r3}
 800703c:	bc04      	pop	{r2}
 800703e:	b662      	cpsie	i
 8007040:	4718      	bx	r3
 8007042:	46c0      	nop			@ (mov r8, r8)
 8007044:	46c0      	nop			@ (mov r8, r8)
 8007046:	46c0      	nop			@ (mov r8, r8)
 8007048:	46c0      	nop			@ (mov r8, r8)
 800704a:	46c0      	nop			@ (mov r8, r8)
 800704c:	46c0      	nop			@ (mov r8, r8)
 800704e:	46c0      	nop			@ (mov r8, r8)

08007050 <pxCurrentTCBConst2>:
 8007050:	200003fc 	.word	0x200003fc
	"	bx   r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
 8007054:	46c0      	nop			@ (mov r8, r8)
 8007056:	46c0      	nop			@ (mov r8, r8)

08007058 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007058:	b580      	push	{r7, lr}
 800705a:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priority as the kernel. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800705c:	4b0e      	ldr	r3, [pc, #56]	@ (8007098 <xPortStartScheduler+0x40>)
 800705e:	681a      	ldr	r2, [r3, #0]
 8007060:	4b0d      	ldr	r3, [pc, #52]	@ (8007098 <xPortStartScheduler+0x40>)
 8007062:	21ff      	movs	r1, #255	@ 0xff
 8007064:	0409      	lsls	r1, r1, #16
 8007066:	430a      	orrs	r2, r1
 8007068:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800706a:	4b0b      	ldr	r3, [pc, #44]	@ (8007098 <xPortStartScheduler+0x40>)
 800706c:	681a      	ldr	r2, [r3, #0]
 800706e:	4b0a      	ldr	r3, [pc, #40]	@ (8007098 <xPortStartScheduler+0x40>)
 8007070:	21ff      	movs	r1, #255	@ 0xff
 8007072:	0609      	lsls	r1, r1, #24
 8007074:	430a      	orrs	r2, r1
 8007076:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007078:	f000 f898 	bl	80071ac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800707c:	4b07      	ldr	r3, [pc, #28]	@ (800709c <xPortStartScheduler+0x44>)
 800707e:	2200      	movs	r2, #0
 8007080:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
 8007082:	f7ff ffcd 	bl	8007020 <vPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007086:	f7ff fbc7 	bl	8006818 <vTaskSwitchContext>
	prvTaskExitError();
 800708a:	f7ff ffa7 	bl	8006fdc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800708e:	2300      	movs	r3, #0
}
 8007090:	0018      	movs	r0, r3
 8007092:	46bd      	mov	sp, r7
 8007094:	bd80      	pop	{r7, pc}
 8007096:	46c0      	nop			@ (mov r8, r8)
 8007098:	e000ed20 	.word	0xe000ed20
 800709c:	200001b4 	.word	0x200001b4

080070a0 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 80070a0:	b580      	push	{r7, lr}
 80070a2:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80070a4:	4b05      	ldr	r3, [pc, #20]	@ (80070bc <vPortYield+0x1c>)
 80070a6:	2280      	movs	r2, #128	@ 0x80
 80070a8:	0552      	lsls	r2, r2, #21
 80070aa:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 80070ac:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 80070b0:	f3bf 8f6f 	isb	sy
}
 80070b4:	46c0      	nop			@ (mov r8, r8)
 80070b6:	46bd      	mov	sp, r7
 80070b8:	bd80      	pop	{r7, pc}
 80070ba:	46c0      	nop			@ (mov r8, r8)
 80070bc:	e000ed04 	.word	0xe000ed04

080070c0 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80070c0:	b580      	push	{r7, lr}
 80070c2:	af00      	add	r7, sp, #0
	portDISABLE_INTERRUPTS();
 80070c4:	b672      	cpsid	i
	uxCriticalNesting++;
 80070c6:	4b06      	ldr	r3, [pc, #24]	@ (80070e0 <vPortEnterCritical+0x20>)
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	1c5a      	adds	r2, r3, #1
 80070cc:	4b04      	ldr	r3, [pc, #16]	@ (80070e0 <vPortEnterCritical+0x20>)
 80070ce:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
 80070d0:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 80070d4:	f3bf 8f6f 	isb	sy
}
 80070d8:	46c0      	nop			@ (mov r8, r8)
 80070da:	46bd      	mov	sp, r7
 80070dc:	bd80      	pop	{r7, pc}
 80070de:	46c0      	nop			@ (mov r8, r8)
 80070e0:	200001b4 	.word	0x200001b4

080070e4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80070e4:	b580      	push	{r7, lr}
 80070e6:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80070e8:	4b09      	ldr	r3, [pc, #36]	@ (8007110 <vPortExitCritical+0x2c>)
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d102      	bne.n	80070f6 <vPortExitCritical+0x12>
 80070f0:	b672      	cpsid	i
 80070f2:	46c0      	nop			@ (mov r8, r8)
 80070f4:	e7fd      	b.n	80070f2 <vPortExitCritical+0xe>
	uxCriticalNesting--;
 80070f6:	4b06      	ldr	r3, [pc, #24]	@ (8007110 <vPortExitCritical+0x2c>)
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	1e5a      	subs	r2, r3, #1
 80070fc:	4b04      	ldr	r3, [pc, #16]	@ (8007110 <vPortExitCritical+0x2c>)
 80070fe:	601a      	str	r2, [r3, #0]
	if( uxCriticalNesting == 0 )
 8007100:	4b03      	ldr	r3, [pc, #12]	@ (8007110 <vPortExitCritical+0x2c>)
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	2b00      	cmp	r3, #0
 8007106:	d100      	bne.n	800710a <vPortExitCritical+0x26>
	{
		portENABLE_INTERRUPTS();
 8007108:	b662      	cpsie	i
	}
}
 800710a:	46c0      	nop			@ (mov r8, r8)
 800710c:	46bd      	mov	sp, r7
 800710e:	bd80      	pop	{r7, pc}
 8007110:	200001b4 	.word	0x200001b4

08007114 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
 8007114:	f3ef 8010 	mrs	r0, PRIMASK
 8007118:	b672      	cpsid	i
 800711a:	4770      	bx	lr
					" mrs r0, PRIMASK	\n"
					" cpsid i			\n"
					" bx lr				  "
					::: "memory"
				  );
}
 800711c:	46c0      	nop			@ (mov r8, r8)
 800711e:	0018      	movs	r0, r3

08007120 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
 8007120:	f380 8810 	msr	PRIMASK, r0
 8007124:	4770      	bx	lr
					" msr PRIMASK, r0	\n"
					" bx lr				  "
					::: "memory"
				  );
}
 8007126:	46c0      	nop			@ (mov r8, r8)
	...

08007130 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007130:	f3ef 8009 	mrs	r0, PSP
 8007134:	4b0e      	ldr	r3, [pc, #56]	@ (8007170 <pxCurrentTCBConst>)
 8007136:	681a      	ldr	r2, [r3, #0]
 8007138:	3820      	subs	r0, #32
 800713a:	6010      	str	r0, [r2, #0]
 800713c:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 800713e:	4644      	mov	r4, r8
 8007140:	464d      	mov	r5, r9
 8007142:	4656      	mov	r6, sl
 8007144:	465f      	mov	r7, fp
 8007146:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8007148:	b508      	push	{r3, lr}
 800714a:	b672      	cpsid	i
 800714c:	f7ff fb64 	bl	8006818 <vTaskSwitchContext>
 8007150:	b662      	cpsie	i
 8007152:	bc0c      	pop	{r2, r3}
 8007154:	6811      	ldr	r1, [r2, #0]
 8007156:	6808      	ldr	r0, [r1, #0]
 8007158:	3010      	adds	r0, #16
 800715a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800715c:	46a0      	mov	r8, r4
 800715e:	46a9      	mov	r9, r5
 8007160:	46b2      	mov	sl, r6
 8007162:	46bb      	mov	fp, r7
 8007164:	f380 8809 	msr	PSP, r0
 8007168:	3820      	subs	r0, #32
 800716a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800716c:	4718      	bx	r3
 800716e:	46c0      	nop			@ (mov r8, r8)

08007170 <pxCurrentTCBConst>:
 8007170:	200003fc 	.word	0x200003fc
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
 8007174:	46c0      	nop			@ (mov r8, r8)
 8007176:	46c0      	nop			@ (mov r8, r8)

08007178 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007178:	b580      	push	{r7, lr}
 800717a:	b082      	sub	sp, #8
 800717c:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 800717e:	f7ff ffc9 	bl	8007114 <ulSetInterruptMaskFromISR>
 8007182:	0003      	movs	r3, r0
 8007184:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007186:	f7ff fa97 	bl	80066b8 <xTaskIncrementTick>
 800718a:	1e03      	subs	r3, r0, #0
 800718c:	d003      	beq.n	8007196 <SysTick_Handler+0x1e>
		{
			/* Pend a context switch. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800718e:	4b06      	ldr	r3, [pc, #24]	@ (80071a8 <SysTick_Handler+0x30>)
 8007190:	2280      	movs	r2, #128	@ 0x80
 8007192:	0552      	lsls	r2, r2, #21
 8007194:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	0018      	movs	r0, r3
 800719a:	f7ff ffc1 	bl	8007120 <vClearInterruptMaskFromISR>
}
 800719e:	46c0      	nop			@ (mov r8, r8)
 80071a0:	46bd      	mov	sp, r7
 80071a2:	b002      	add	sp, #8
 80071a4:	bd80      	pop	{r7, pc}
 80071a6:	46c0      	nop			@ (mov r8, r8)
 80071a8:	e000ed04 	.word	0xe000ed04

080071ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80071ac:	b580      	push	{r7, lr}
 80071ae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR;
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and reset the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80071b0:	4b0b      	ldr	r3, [pc, #44]	@ (80071e0 <vPortSetupTimerInterrupt+0x34>)
 80071b2:	2200      	movs	r2, #0
 80071b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80071b6:	4b0b      	ldr	r3, [pc, #44]	@ (80071e4 <vPortSetupTimerInterrupt+0x38>)
 80071b8:	2200      	movs	r2, #0
 80071ba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80071bc:	4b0a      	ldr	r3, [pc, #40]	@ (80071e8 <vPortSetupTimerInterrupt+0x3c>)
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	22fa      	movs	r2, #250	@ 0xfa
 80071c2:	0091      	lsls	r1, r2, #2
 80071c4:	0018      	movs	r0, r3
 80071c6:	f7f8 ffb1 	bl	800012c <__udivsi3>
 80071ca:	0003      	movs	r3, r0
 80071cc:	001a      	movs	r2, r3
 80071ce:	4b07      	ldr	r3, [pc, #28]	@ (80071ec <vPortSetupTimerInterrupt+0x40>)
 80071d0:	3a01      	subs	r2, #1
 80071d2:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT;
 80071d4:	4b02      	ldr	r3, [pc, #8]	@ (80071e0 <vPortSetupTimerInterrupt+0x34>)
 80071d6:	2207      	movs	r2, #7
 80071d8:	601a      	str	r2, [r3, #0]
}
 80071da:	46c0      	nop			@ (mov r8, r8)
 80071dc:	46bd      	mov	sp, r7
 80071de:	bd80      	pop	{r7, pc}
 80071e0:	e000e010 	.word	0xe000e010
 80071e4:	e000e018 	.word	0xe000e018
 80071e8:	200001a8 	.word	0x200001a8
 80071ec:	e000e014 	.word	0xe000e014

080071f0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80071f0:	b580      	push	{r7, lr}
 80071f2:	b086      	sub	sp, #24
 80071f4:	af00      	add	r7, sp, #0
 80071f6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80071f8:	2300      	movs	r3, #0
 80071fa:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 80071fc:	f7ff f9c4 	bl	8006588 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007200:	4b4d      	ldr	r3, [pc, #308]	@ (8007338 <pvPortMalloc+0x148>)
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	2b00      	cmp	r3, #0
 8007206:	d101      	bne.n	800720c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007208:	f000 f8f2 	bl	80073f0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800720c:	4b4b      	ldr	r3, [pc, #300]	@ (800733c <pvPortMalloc+0x14c>)
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	687a      	ldr	r2, [r7, #4]
 8007212:	4013      	ands	r3, r2
 8007214:	d000      	beq.n	8007218 <pvPortMalloc+0x28>
 8007216:	e080      	b.n	800731a <pvPortMalloc+0x12a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	2b00      	cmp	r3, #0
 800721c:	d013      	beq.n	8007246 <pvPortMalloc+0x56>
			{
				xWantedSize += xHeapStructSize;
 800721e:	2208      	movs	r2, #8
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	189b      	adds	r3, r3, r2
 8007224:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	2207      	movs	r2, #7
 800722a:	4013      	ands	r3, r2
 800722c:	d00b      	beq.n	8007246 <pvPortMalloc+0x56>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	2207      	movs	r2, #7
 8007232:	4393      	bics	r3, r2
 8007234:	3308      	adds	r3, #8
 8007236:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	2207      	movs	r2, #7
 800723c:	4013      	ands	r3, r2
 800723e:	d002      	beq.n	8007246 <pvPortMalloc+0x56>
 8007240:	b672      	cpsid	i
 8007242:	46c0      	nop			@ (mov r8, r8)
 8007244:	e7fd      	b.n	8007242 <pvPortMalloc+0x52>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	2b00      	cmp	r3, #0
 800724a:	d066      	beq.n	800731a <pvPortMalloc+0x12a>
 800724c:	4b3c      	ldr	r3, [pc, #240]	@ (8007340 <pvPortMalloc+0x150>)
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	687a      	ldr	r2, [r7, #4]
 8007252:	429a      	cmp	r2, r3
 8007254:	d861      	bhi.n	800731a <pvPortMalloc+0x12a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007256:	4b3b      	ldr	r3, [pc, #236]	@ (8007344 <pvPortMalloc+0x154>)
 8007258:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 800725a:	4b3a      	ldr	r3, [pc, #232]	@ (8007344 <pvPortMalloc+0x154>)
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007260:	e004      	b.n	800726c <pvPortMalloc+0x7c>
				{
					pxPreviousBlock = pxBlock;
 8007262:	697b      	ldr	r3, [r7, #20]
 8007264:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007266:	697b      	ldr	r3, [r7, #20]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800726c:	697b      	ldr	r3, [r7, #20]
 800726e:	685b      	ldr	r3, [r3, #4]
 8007270:	687a      	ldr	r2, [r7, #4]
 8007272:	429a      	cmp	r2, r3
 8007274:	d903      	bls.n	800727e <pvPortMalloc+0x8e>
 8007276:	697b      	ldr	r3, [r7, #20]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	2b00      	cmp	r3, #0
 800727c:	d1f1      	bne.n	8007262 <pvPortMalloc+0x72>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800727e:	4b2e      	ldr	r3, [pc, #184]	@ (8007338 <pvPortMalloc+0x148>)
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	697a      	ldr	r2, [r7, #20]
 8007284:	429a      	cmp	r2, r3
 8007286:	d048      	beq.n	800731a <pvPortMalloc+0x12a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007288:	693b      	ldr	r3, [r7, #16]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	2208      	movs	r2, #8
 800728e:	189b      	adds	r3, r3, r2
 8007290:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007292:	697b      	ldr	r3, [r7, #20]
 8007294:	681a      	ldr	r2, [r3, #0]
 8007296:	693b      	ldr	r3, [r7, #16]
 8007298:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800729a:	697b      	ldr	r3, [r7, #20]
 800729c:	685a      	ldr	r2, [r3, #4]
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	1ad2      	subs	r2, r2, r3
 80072a2:	2308      	movs	r3, #8
 80072a4:	005b      	lsls	r3, r3, #1
 80072a6:	429a      	cmp	r2, r3
 80072a8:	d917      	bls.n	80072da <pvPortMalloc+0xea>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80072aa:	697a      	ldr	r2, [r7, #20]
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	18d3      	adds	r3, r2, r3
 80072b0:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80072b2:	68bb      	ldr	r3, [r7, #8]
 80072b4:	2207      	movs	r2, #7
 80072b6:	4013      	ands	r3, r2
 80072b8:	d002      	beq.n	80072c0 <pvPortMalloc+0xd0>
 80072ba:	b672      	cpsid	i
 80072bc:	46c0      	nop			@ (mov r8, r8)
 80072be:	e7fd      	b.n	80072bc <pvPortMalloc+0xcc>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80072c0:	697b      	ldr	r3, [r7, #20]
 80072c2:	685a      	ldr	r2, [r3, #4]
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	1ad2      	subs	r2, r2, r3
 80072c8:	68bb      	ldr	r3, [r7, #8]
 80072ca:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80072cc:	697b      	ldr	r3, [r7, #20]
 80072ce:	687a      	ldr	r2, [r7, #4]
 80072d0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80072d2:	68bb      	ldr	r3, [r7, #8]
 80072d4:	0018      	movs	r0, r3
 80072d6:	f000 f8eb 	bl	80074b0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80072da:	4b19      	ldr	r3, [pc, #100]	@ (8007340 <pvPortMalloc+0x150>)
 80072dc:	681a      	ldr	r2, [r3, #0]
 80072de:	697b      	ldr	r3, [r7, #20]
 80072e0:	685b      	ldr	r3, [r3, #4]
 80072e2:	1ad2      	subs	r2, r2, r3
 80072e4:	4b16      	ldr	r3, [pc, #88]	@ (8007340 <pvPortMalloc+0x150>)
 80072e6:	601a      	str	r2, [r3, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80072e8:	4b15      	ldr	r3, [pc, #84]	@ (8007340 <pvPortMalloc+0x150>)
 80072ea:	681a      	ldr	r2, [r3, #0]
 80072ec:	4b16      	ldr	r3, [pc, #88]	@ (8007348 <pvPortMalloc+0x158>)
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	429a      	cmp	r2, r3
 80072f2:	d203      	bcs.n	80072fc <pvPortMalloc+0x10c>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80072f4:	4b12      	ldr	r3, [pc, #72]	@ (8007340 <pvPortMalloc+0x150>)
 80072f6:	681a      	ldr	r2, [r3, #0]
 80072f8:	4b13      	ldr	r3, [pc, #76]	@ (8007348 <pvPortMalloc+0x158>)
 80072fa:	601a      	str	r2, [r3, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80072fc:	697b      	ldr	r3, [r7, #20]
 80072fe:	685a      	ldr	r2, [r3, #4]
 8007300:	4b0e      	ldr	r3, [pc, #56]	@ (800733c <pvPortMalloc+0x14c>)
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	431a      	orrs	r2, r3
 8007306:	697b      	ldr	r3, [r7, #20]
 8007308:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800730a:	697b      	ldr	r3, [r7, #20]
 800730c:	2200      	movs	r2, #0
 800730e:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8007310:	4b0e      	ldr	r3, [pc, #56]	@ (800734c <pvPortMalloc+0x15c>)
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	1c5a      	adds	r2, r3, #1
 8007316:	4b0d      	ldr	r3, [pc, #52]	@ (800734c <pvPortMalloc+0x15c>)
 8007318:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800731a:	f7ff f941 	bl	80065a0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	2207      	movs	r2, #7
 8007322:	4013      	ands	r3, r2
 8007324:	d002      	beq.n	800732c <pvPortMalloc+0x13c>
 8007326:	b672      	cpsid	i
 8007328:	46c0      	nop			@ (mov r8, r8)
 800732a:	e7fd      	b.n	8007328 <pvPortMalloc+0x138>
	return pvReturn;
 800732c:	68fb      	ldr	r3, [r7, #12]
}
 800732e:	0018      	movs	r0, r3
 8007330:	46bd      	mov	sp, r7
 8007332:	b006      	add	sp, #24
 8007334:	bd80      	pop	{r7, pc}
 8007336:	46c0      	nop			@ (mov r8, r8)
 8007338:	20001130 	.word	0x20001130
 800733c:	20001144 	.word	0x20001144
 8007340:	20001134 	.word	0x20001134
 8007344:	20001128 	.word	0x20001128
 8007348:	20001138 	.word	0x20001138
 800734c:	2000113c 	.word	0x2000113c

08007350 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007350:	b580      	push	{r7, lr}
 8007352:	b084      	sub	sp, #16
 8007354:	af00      	add	r7, sp, #0
 8007356:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	2b00      	cmp	r3, #0
 8007360:	d03c      	beq.n	80073dc <vPortFree+0x8c>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007362:	2308      	movs	r3, #8
 8007364:	425b      	negs	r3, r3
 8007366:	68fa      	ldr	r2, [r7, #12]
 8007368:	18d3      	adds	r3, r2, r3
 800736a:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007370:	68bb      	ldr	r3, [r7, #8]
 8007372:	685a      	ldr	r2, [r3, #4]
 8007374:	4b1b      	ldr	r3, [pc, #108]	@ (80073e4 <vPortFree+0x94>)
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	4013      	ands	r3, r2
 800737a:	d102      	bne.n	8007382 <vPortFree+0x32>
 800737c:	b672      	cpsid	i
 800737e:	46c0      	nop			@ (mov r8, r8)
 8007380:	e7fd      	b.n	800737e <vPortFree+0x2e>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007382:	68bb      	ldr	r3, [r7, #8]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	2b00      	cmp	r3, #0
 8007388:	d002      	beq.n	8007390 <vPortFree+0x40>
 800738a:	b672      	cpsid	i
 800738c:	46c0      	nop			@ (mov r8, r8)
 800738e:	e7fd      	b.n	800738c <vPortFree+0x3c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007390:	68bb      	ldr	r3, [r7, #8]
 8007392:	685a      	ldr	r2, [r3, #4]
 8007394:	4b13      	ldr	r3, [pc, #76]	@ (80073e4 <vPortFree+0x94>)
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	4013      	ands	r3, r2
 800739a:	d01f      	beq.n	80073dc <vPortFree+0x8c>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800739c:	68bb      	ldr	r3, [r7, #8]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d11b      	bne.n	80073dc <vPortFree+0x8c>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80073a4:	68bb      	ldr	r3, [r7, #8]
 80073a6:	685a      	ldr	r2, [r3, #4]
 80073a8:	4b0e      	ldr	r3, [pc, #56]	@ (80073e4 <vPortFree+0x94>)
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	43db      	mvns	r3, r3
 80073ae:	401a      	ands	r2, r3
 80073b0:	68bb      	ldr	r3, [r7, #8]
 80073b2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80073b4:	f7ff f8e8 	bl	8006588 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80073b8:	68bb      	ldr	r3, [r7, #8]
 80073ba:	685a      	ldr	r2, [r3, #4]
 80073bc:	4b0a      	ldr	r3, [pc, #40]	@ (80073e8 <vPortFree+0x98>)
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	18d2      	adds	r2, r2, r3
 80073c2:	4b09      	ldr	r3, [pc, #36]	@ (80073e8 <vPortFree+0x98>)
 80073c4:	601a      	str	r2, [r3, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80073c6:	68bb      	ldr	r3, [r7, #8]
 80073c8:	0018      	movs	r0, r3
 80073ca:	f000 f871 	bl	80074b0 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80073ce:	4b07      	ldr	r3, [pc, #28]	@ (80073ec <vPortFree+0x9c>)
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	1c5a      	adds	r2, r3, #1
 80073d4:	4b05      	ldr	r3, [pc, #20]	@ (80073ec <vPortFree+0x9c>)
 80073d6:	601a      	str	r2, [r3, #0]
				}
				( void ) xTaskResumeAll();
 80073d8:	f7ff f8e2 	bl	80065a0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80073dc:	46c0      	nop			@ (mov r8, r8)
 80073de:	46bd      	mov	sp, r7
 80073e0:	b004      	add	sp, #16
 80073e2:	bd80      	pop	{r7, pc}
 80073e4:	20001144 	.word	0x20001144
 80073e8:	20001134 	.word	0x20001134
 80073ec:	20001140 	.word	0x20001140

080073f0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80073f0:	b580      	push	{r7, lr}
 80073f2:	b084      	sub	sp, #16
 80073f4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80073f6:	23c0      	movs	r3, #192	@ 0xc0
 80073f8:	011b      	lsls	r3, r3, #4
 80073fa:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80073fc:	4b26      	ldr	r3, [pc, #152]	@ (8007498 <prvHeapInit+0xa8>)
 80073fe:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	2207      	movs	r2, #7
 8007404:	4013      	ands	r3, r2
 8007406:	d00c      	beq.n	8007422 <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	3307      	adds	r3, #7
 800740c:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	2207      	movs	r2, #7
 8007412:	4393      	bics	r3, r2
 8007414:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007416:	68ba      	ldr	r2, [r7, #8]
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	1ad2      	subs	r2, r2, r3
 800741c:	4b1e      	ldr	r3, [pc, #120]	@ (8007498 <prvHeapInit+0xa8>)
 800741e:	18d3      	adds	r3, r2, r3
 8007420:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007426:	4b1d      	ldr	r3, [pc, #116]	@ (800749c <prvHeapInit+0xac>)
 8007428:	687a      	ldr	r2, [r7, #4]
 800742a:	601a      	str	r2, [r3, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800742c:	4b1b      	ldr	r3, [pc, #108]	@ (800749c <prvHeapInit+0xac>)
 800742e:	2200      	movs	r2, #0
 8007430:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	68ba      	ldr	r2, [r7, #8]
 8007436:	18d3      	adds	r3, r2, r3
 8007438:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800743a:	2208      	movs	r2, #8
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	1a9b      	subs	r3, r3, r2
 8007440:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	2207      	movs	r2, #7
 8007446:	4393      	bics	r3, r2
 8007448:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800744a:	68fa      	ldr	r2, [r7, #12]
 800744c:	4b14      	ldr	r3, [pc, #80]	@ (80074a0 <prvHeapInit+0xb0>)
 800744e:	601a      	str	r2, [r3, #0]
	pxEnd->xBlockSize = 0;
 8007450:	4b13      	ldr	r3, [pc, #76]	@ (80074a0 <prvHeapInit+0xb0>)
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	2200      	movs	r2, #0
 8007456:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007458:	4b11      	ldr	r3, [pc, #68]	@ (80074a0 <prvHeapInit+0xb0>)
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	2200      	movs	r2, #0
 800745e:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007464:	683b      	ldr	r3, [r7, #0]
 8007466:	68fa      	ldr	r2, [r7, #12]
 8007468:	1ad2      	subs	r2, r2, r3
 800746a:	683b      	ldr	r3, [r7, #0]
 800746c:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800746e:	4b0c      	ldr	r3, [pc, #48]	@ (80074a0 <prvHeapInit+0xb0>)
 8007470:	681a      	ldr	r2, [r3, #0]
 8007472:	683b      	ldr	r3, [r7, #0]
 8007474:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007476:	683b      	ldr	r3, [r7, #0]
 8007478:	685a      	ldr	r2, [r3, #4]
 800747a:	4b0a      	ldr	r3, [pc, #40]	@ (80074a4 <prvHeapInit+0xb4>)
 800747c:	601a      	str	r2, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800747e:	683b      	ldr	r3, [r7, #0]
 8007480:	685a      	ldr	r2, [r3, #4]
 8007482:	4b09      	ldr	r3, [pc, #36]	@ (80074a8 <prvHeapInit+0xb8>)
 8007484:	601a      	str	r2, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007486:	4b09      	ldr	r3, [pc, #36]	@ (80074ac <prvHeapInit+0xbc>)
 8007488:	2280      	movs	r2, #128	@ 0x80
 800748a:	0612      	lsls	r2, r2, #24
 800748c:	601a      	str	r2, [r3, #0]
}
 800748e:	46c0      	nop			@ (mov r8, r8)
 8007490:	46bd      	mov	sp, r7
 8007492:	b004      	add	sp, #16
 8007494:	bd80      	pop	{r7, pc}
 8007496:	46c0      	nop			@ (mov r8, r8)
 8007498:	20000528 	.word	0x20000528
 800749c:	20001128 	.word	0x20001128
 80074a0:	20001130 	.word	0x20001130
 80074a4:	20001138 	.word	0x20001138
 80074a8:	20001134 	.word	0x20001134
 80074ac:	20001144 	.word	0x20001144

080074b0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80074b0:	b580      	push	{r7, lr}
 80074b2:	b084      	sub	sp, #16
 80074b4:	af00      	add	r7, sp, #0
 80074b6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80074b8:	4b27      	ldr	r3, [pc, #156]	@ (8007558 <prvInsertBlockIntoFreeList+0xa8>)
 80074ba:	60fb      	str	r3, [r7, #12]
 80074bc:	e002      	b.n	80074c4 <prvInsertBlockIntoFreeList+0x14>
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	60fb      	str	r3, [r7, #12]
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	687a      	ldr	r2, [r7, #4]
 80074ca:	429a      	cmp	r2, r3
 80074cc:	d8f7      	bhi.n	80074be <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	685b      	ldr	r3, [r3, #4]
 80074d6:	68ba      	ldr	r2, [r7, #8]
 80074d8:	18d3      	adds	r3, r2, r3
 80074da:	687a      	ldr	r2, [r7, #4]
 80074dc:	429a      	cmp	r2, r3
 80074de:	d108      	bne.n	80074f2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	685a      	ldr	r2, [r3, #4]
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	685b      	ldr	r3, [r3, #4]
 80074e8:	18d2      	adds	r2, r2, r3
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	685b      	ldr	r3, [r3, #4]
 80074fa:	68ba      	ldr	r2, [r7, #8]
 80074fc:	18d2      	adds	r2, r2, r3
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	429a      	cmp	r2, r3
 8007504:	d118      	bne.n	8007538 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	681a      	ldr	r2, [r3, #0]
 800750a:	4b14      	ldr	r3, [pc, #80]	@ (800755c <prvInsertBlockIntoFreeList+0xac>)
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	429a      	cmp	r2, r3
 8007510:	d00d      	beq.n	800752e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	685a      	ldr	r2, [r3, #4]
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	685b      	ldr	r3, [r3, #4]
 800751c:	18d2      	adds	r2, r2, r3
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	681a      	ldr	r2, [r3, #0]
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	601a      	str	r2, [r3, #0]
 800752c:	e008      	b.n	8007540 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800752e:	4b0b      	ldr	r3, [pc, #44]	@ (800755c <prvInsertBlockIntoFreeList+0xac>)
 8007530:	681a      	ldr	r2, [r3, #0]
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	601a      	str	r2, [r3, #0]
 8007536:	e003      	b.n	8007540 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	681a      	ldr	r2, [r3, #0]
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007540:	68fa      	ldr	r2, [r7, #12]
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	429a      	cmp	r2, r3
 8007546:	d002      	beq.n	800754e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	687a      	ldr	r2, [r7, #4]
 800754c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800754e:	46c0      	nop			@ (mov r8, r8)
 8007550:	46bd      	mov	sp, r7
 8007552:	b004      	add	sp, #16
 8007554:	bd80      	pop	{r7, pc}
 8007556:	46c0      	nop			@ (mov r8, r8)
 8007558:	20001128 	.word	0x20001128
 800755c:	20001130 	.word	0x20001130

08007560 <siprintf>:
 8007560:	b40e      	push	{r1, r2, r3}
 8007562:	b510      	push	{r4, lr}
 8007564:	2400      	movs	r4, #0
 8007566:	490c      	ldr	r1, [pc, #48]	@ (8007598 <siprintf+0x38>)
 8007568:	b09d      	sub	sp, #116	@ 0x74
 800756a:	ab1f      	add	r3, sp, #124	@ 0x7c
 800756c:	9002      	str	r0, [sp, #8]
 800756e:	9006      	str	r0, [sp, #24]
 8007570:	9107      	str	r1, [sp, #28]
 8007572:	9104      	str	r1, [sp, #16]
 8007574:	4809      	ldr	r0, [pc, #36]	@ (800759c <siprintf+0x3c>)
 8007576:	490a      	ldr	r1, [pc, #40]	@ (80075a0 <siprintf+0x40>)
 8007578:	cb04      	ldmia	r3!, {r2}
 800757a:	9105      	str	r1, [sp, #20]
 800757c:	6800      	ldr	r0, [r0, #0]
 800757e:	a902      	add	r1, sp, #8
 8007580:	9301      	str	r3, [sp, #4]
 8007582:	941b      	str	r4, [sp, #108]	@ 0x6c
 8007584:	f000 fa12 	bl	80079ac <_svfiprintf_r>
 8007588:	9b02      	ldr	r3, [sp, #8]
 800758a:	701c      	strb	r4, [r3, #0]
 800758c:	b01d      	add	sp, #116	@ 0x74
 800758e:	bc10      	pop	{r4}
 8007590:	bc08      	pop	{r3}
 8007592:	b003      	add	sp, #12
 8007594:	4718      	bx	r3
 8007596:	46c0      	nop			@ (mov r8, r8)
 8007598:	7fffffff 	.word	0x7fffffff
 800759c:	200001b8 	.word	0x200001b8
 80075a0:	ffff0208 	.word	0xffff0208

080075a4 <memset>:
 80075a4:	0003      	movs	r3, r0
 80075a6:	1882      	adds	r2, r0, r2
 80075a8:	4293      	cmp	r3, r2
 80075aa:	d100      	bne.n	80075ae <memset+0xa>
 80075ac:	4770      	bx	lr
 80075ae:	7019      	strb	r1, [r3, #0]
 80075b0:	3301      	adds	r3, #1
 80075b2:	e7f9      	b.n	80075a8 <memset+0x4>

080075b4 <_reclaim_reent>:
 80075b4:	4b33      	ldr	r3, [pc, #204]	@ (8007684 <_reclaim_reent+0xd0>)
 80075b6:	b570      	push	{r4, r5, r6, lr}
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	0004      	movs	r4, r0
 80075bc:	4283      	cmp	r3, r0
 80075be:	d05f      	beq.n	8007680 <_reclaim_reent+0xcc>
 80075c0:	69c3      	ldr	r3, [r0, #28]
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d027      	beq.n	8007616 <_reclaim_reent+0x62>
 80075c6:	68db      	ldr	r3, [r3, #12]
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d00d      	beq.n	80075e8 <_reclaim_reent+0x34>
 80075cc:	2500      	movs	r5, #0
 80075ce:	69e3      	ldr	r3, [r4, #28]
 80075d0:	68db      	ldr	r3, [r3, #12]
 80075d2:	5959      	ldr	r1, [r3, r5]
 80075d4:	2900      	cmp	r1, #0
 80075d6:	d118      	bne.n	800760a <_reclaim_reent+0x56>
 80075d8:	3504      	adds	r5, #4
 80075da:	2d80      	cmp	r5, #128	@ 0x80
 80075dc:	d1f7      	bne.n	80075ce <_reclaim_reent+0x1a>
 80075de:	69e3      	ldr	r3, [r4, #28]
 80075e0:	0020      	movs	r0, r4
 80075e2:	68d9      	ldr	r1, [r3, #12]
 80075e4:	f000 f886 	bl	80076f4 <_free_r>
 80075e8:	69e3      	ldr	r3, [r4, #28]
 80075ea:	6819      	ldr	r1, [r3, #0]
 80075ec:	2900      	cmp	r1, #0
 80075ee:	d002      	beq.n	80075f6 <_reclaim_reent+0x42>
 80075f0:	0020      	movs	r0, r4
 80075f2:	f000 f87f 	bl	80076f4 <_free_r>
 80075f6:	69e3      	ldr	r3, [r4, #28]
 80075f8:	689d      	ldr	r5, [r3, #8]
 80075fa:	2d00      	cmp	r5, #0
 80075fc:	d00b      	beq.n	8007616 <_reclaim_reent+0x62>
 80075fe:	0029      	movs	r1, r5
 8007600:	0020      	movs	r0, r4
 8007602:	682d      	ldr	r5, [r5, #0]
 8007604:	f000 f876 	bl	80076f4 <_free_r>
 8007608:	e7f7      	b.n	80075fa <_reclaim_reent+0x46>
 800760a:	680e      	ldr	r6, [r1, #0]
 800760c:	0020      	movs	r0, r4
 800760e:	f000 f871 	bl	80076f4 <_free_r>
 8007612:	0031      	movs	r1, r6
 8007614:	e7de      	b.n	80075d4 <_reclaim_reent+0x20>
 8007616:	6961      	ldr	r1, [r4, #20]
 8007618:	2900      	cmp	r1, #0
 800761a:	d002      	beq.n	8007622 <_reclaim_reent+0x6e>
 800761c:	0020      	movs	r0, r4
 800761e:	f000 f869 	bl	80076f4 <_free_r>
 8007622:	69e1      	ldr	r1, [r4, #28]
 8007624:	2900      	cmp	r1, #0
 8007626:	d002      	beq.n	800762e <_reclaim_reent+0x7a>
 8007628:	0020      	movs	r0, r4
 800762a:	f000 f863 	bl	80076f4 <_free_r>
 800762e:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8007630:	2900      	cmp	r1, #0
 8007632:	d002      	beq.n	800763a <_reclaim_reent+0x86>
 8007634:	0020      	movs	r0, r4
 8007636:	f000 f85d 	bl	80076f4 <_free_r>
 800763a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800763c:	2900      	cmp	r1, #0
 800763e:	d002      	beq.n	8007646 <_reclaim_reent+0x92>
 8007640:	0020      	movs	r0, r4
 8007642:	f000 f857 	bl	80076f4 <_free_r>
 8007646:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8007648:	2900      	cmp	r1, #0
 800764a:	d002      	beq.n	8007652 <_reclaim_reent+0x9e>
 800764c:	0020      	movs	r0, r4
 800764e:	f000 f851 	bl	80076f4 <_free_r>
 8007652:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8007654:	2900      	cmp	r1, #0
 8007656:	d002      	beq.n	800765e <_reclaim_reent+0xaa>
 8007658:	0020      	movs	r0, r4
 800765a:	f000 f84b 	bl	80076f4 <_free_r>
 800765e:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8007660:	2900      	cmp	r1, #0
 8007662:	d002      	beq.n	800766a <_reclaim_reent+0xb6>
 8007664:	0020      	movs	r0, r4
 8007666:	f000 f845 	bl	80076f4 <_free_r>
 800766a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800766c:	2900      	cmp	r1, #0
 800766e:	d002      	beq.n	8007676 <_reclaim_reent+0xc2>
 8007670:	0020      	movs	r0, r4
 8007672:	f000 f83f 	bl	80076f4 <_free_r>
 8007676:	6a23      	ldr	r3, [r4, #32]
 8007678:	2b00      	cmp	r3, #0
 800767a:	d001      	beq.n	8007680 <_reclaim_reent+0xcc>
 800767c:	0020      	movs	r0, r4
 800767e:	4798      	blx	r3
 8007680:	bd70      	pop	{r4, r5, r6, pc}
 8007682:	46c0      	nop			@ (mov r8, r8)
 8007684:	200001b8 	.word	0x200001b8

08007688 <__errno>:
 8007688:	4b01      	ldr	r3, [pc, #4]	@ (8007690 <__errno+0x8>)
 800768a:	6818      	ldr	r0, [r3, #0]
 800768c:	4770      	bx	lr
 800768e:	46c0      	nop			@ (mov r8, r8)
 8007690:	200001b8 	.word	0x200001b8

08007694 <__libc_init_array>:
 8007694:	b570      	push	{r4, r5, r6, lr}
 8007696:	2600      	movs	r6, #0
 8007698:	4c0c      	ldr	r4, [pc, #48]	@ (80076cc <__libc_init_array+0x38>)
 800769a:	4d0d      	ldr	r5, [pc, #52]	@ (80076d0 <__libc_init_array+0x3c>)
 800769c:	1b64      	subs	r4, r4, r5
 800769e:	10a4      	asrs	r4, r4, #2
 80076a0:	42a6      	cmp	r6, r4
 80076a2:	d109      	bne.n	80076b8 <__libc_init_array+0x24>
 80076a4:	2600      	movs	r6, #0
 80076a6:	f000 fc63 	bl	8007f70 <_init>
 80076aa:	4c0a      	ldr	r4, [pc, #40]	@ (80076d4 <__libc_init_array+0x40>)
 80076ac:	4d0a      	ldr	r5, [pc, #40]	@ (80076d8 <__libc_init_array+0x44>)
 80076ae:	1b64      	subs	r4, r4, r5
 80076b0:	10a4      	asrs	r4, r4, #2
 80076b2:	42a6      	cmp	r6, r4
 80076b4:	d105      	bne.n	80076c2 <__libc_init_array+0x2e>
 80076b6:	bd70      	pop	{r4, r5, r6, pc}
 80076b8:	00b3      	lsls	r3, r6, #2
 80076ba:	58eb      	ldr	r3, [r5, r3]
 80076bc:	4798      	blx	r3
 80076be:	3601      	adds	r6, #1
 80076c0:	e7ee      	b.n	80076a0 <__libc_init_array+0xc>
 80076c2:	00b3      	lsls	r3, r6, #2
 80076c4:	58eb      	ldr	r3, [r5, r3]
 80076c6:	4798      	blx	r3
 80076c8:	3601      	adds	r6, #1
 80076ca:	e7f2      	b.n	80076b2 <__libc_init_array+0x1e>
 80076cc:	080080e8 	.word	0x080080e8
 80076d0:	080080e8 	.word	0x080080e8
 80076d4:	080080ec 	.word	0x080080ec
 80076d8:	080080e8 	.word	0x080080e8

080076dc <__retarget_lock_acquire_recursive>:
 80076dc:	4770      	bx	lr

080076de <__retarget_lock_release_recursive>:
 80076de:	4770      	bx	lr

080076e0 <memcpy>:
 80076e0:	2300      	movs	r3, #0
 80076e2:	b510      	push	{r4, lr}
 80076e4:	429a      	cmp	r2, r3
 80076e6:	d100      	bne.n	80076ea <memcpy+0xa>
 80076e8:	bd10      	pop	{r4, pc}
 80076ea:	5ccc      	ldrb	r4, [r1, r3]
 80076ec:	54c4      	strb	r4, [r0, r3]
 80076ee:	3301      	adds	r3, #1
 80076f0:	e7f8      	b.n	80076e4 <memcpy+0x4>
	...

080076f4 <_free_r>:
 80076f4:	b570      	push	{r4, r5, r6, lr}
 80076f6:	0005      	movs	r5, r0
 80076f8:	1e0c      	subs	r4, r1, #0
 80076fa:	d010      	beq.n	800771e <_free_r+0x2a>
 80076fc:	3c04      	subs	r4, #4
 80076fe:	6823      	ldr	r3, [r4, #0]
 8007700:	2b00      	cmp	r3, #0
 8007702:	da00      	bge.n	8007706 <_free_r+0x12>
 8007704:	18e4      	adds	r4, r4, r3
 8007706:	0028      	movs	r0, r5
 8007708:	f000 f8e0 	bl	80078cc <__malloc_lock>
 800770c:	4a1d      	ldr	r2, [pc, #116]	@ (8007784 <_free_r+0x90>)
 800770e:	6813      	ldr	r3, [r2, #0]
 8007710:	2b00      	cmp	r3, #0
 8007712:	d105      	bne.n	8007720 <_free_r+0x2c>
 8007714:	6063      	str	r3, [r4, #4]
 8007716:	6014      	str	r4, [r2, #0]
 8007718:	0028      	movs	r0, r5
 800771a:	f000 f8df 	bl	80078dc <__malloc_unlock>
 800771e:	bd70      	pop	{r4, r5, r6, pc}
 8007720:	42a3      	cmp	r3, r4
 8007722:	d908      	bls.n	8007736 <_free_r+0x42>
 8007724:	6820      	ldr	r0, [r4, #0]
 8007726:	1821      	adds	r1, r4, r0
 8007728:	428b      	cmp	r3, r1
 800772a:	d1f3      	bne.n	8007714 <_free_r+0x20>
 800772c:	6819      	ldr	r1, [r3, #0]
 800772e:	685b      	ldr	r3, [r3, #4]
 8007730:	1809      	adds	r1, r1, r0
 8007732:	6021      	str	r1, [r4, #0]
 8007734:	e7ee      	b.n	8007714 <_free_r+0x20>
 8007736:	001a      	movs	r2, r3
 8007738:	685b      	ldr	r3, [r3, #4]
 800773a:	2b00      	cmp	r3, #0
 800773c:	d001      	beq.n	8007742 <_free_r+0x4e>
 800773e:	42a3      	cmp	r3, r4
 8007740:	d9f9      	bls.n	8007736 <_free_r+0x42>
 8007742:	6811      	ldr	r1, [r2, #0]
 8007744:	1850      	adds	r0, r2, r1
 8007746:	42a0      	cmp	r0, r4
 8007748:	d10b      	bne.n	8007762 <_free_r+0x6e>
 800774a:	6820      	ldr	r0, [r4, #0]
 800774c:	1809      	adds	r1, r1, r0
 800774e:	1850      	adds	r0, r2, r1
 8007750:	6011      	str	r1, [r2, #0]
 8007752:	4283      	cmp	r3, r0
 8007754:	d1e0      	bne.n	8007718 <_free_r+0x24>
 8007756:	6818      	ldr	r0, [r3, #0]
 8007758:	685b      	ldr	r3, [r3, #4]
 800775a:	1841      	adds	r1, r0, r1
 800775c:	6011      	str	r1, [r2, #0]
 800775e:	6053      	str	r3, [r2, #4]
 8007760:	e7da      	b.n	8007718 <_free_r+0x24>
 8007762:	42a0      	cmp	r0, r4
 8007764:	d902      	bls.n	800776c <_free_r+0x78>
 8007766:	230c      	movs	r3, #12
 8007768:	602b      	str	r3, [r5, #0]
 800776a:	e7d5      	b.n	8007718 <_free_r+0x24>
 800776c:	6820      	ldr	r0, [r4, #0]
 800776e:	1821      	adds	r1, r4, r0
 8007770:	428b      	cmp	r3, r1
 8007772:	d103      	bne.n	800777c <_free_r+0x88>
 8007774:	6819      	ldr	r1, [r3, #0]
 8007776:	685b      	ldr	r3, [r3, #4]
 8007778:	1809      	adds	r1, r1, r0
 800777a:	6021      	str	r1, [r4, #0]
 800777c:	6063      	str	r3, [r4, #4]
 800777e:	6054      	str	r4, [r2, #4]
 8007780:	e7ca      	b.n	8007718 <_free_r+0x24>
 8007782:	46c0      	nop			@ (mov r8, r8)
 8007784:	2000128c 	.word	0x2000128c

08007788 <sbrk_aligned>:
 8007788:	b570      	push	{r4, r5, r6, lr}
 800778a:	4e0f      	ldr	r6, [pc, #60]	@ (80077c8 <sbrk_aligned+0x40>)
 800778c:	000d      	movs	r5, r1
 800778e:	6831      	ldr	r1, [r6, #0]
 8007790:	0004      	movs	r4, r0
 8007792:	2900      	cmp	r1, #0
 8007794:	d102      	bne.n	800779c <sbrk_aligned+0x14>
 8007796:	f000 fb95 	bl	8007ec4 <_sbrk_r>
 800779a:	6030      	str	r0, [r6, #0]
 800779c:	0029      	movs	r1, r5
 800779e:	0020      	movs	r0, r4
 80077a0:	f000 fb90 	bl	8007ec4 <_sbrk_r>
 80077a4:	1c43      	adds	r3, r0, #1
 80077a6:	d103      	bne.n	80077b0 <sbrk_aligned+0x28>
 80077a8:	2501      	movs	r5, #1
 80077aa:	426d      	negs	r5, r5
 80077ac:	0028      	movs	r0, r5
 80077ae:	bd70      	pop	{r4, r5, r6, pc}
 80077b0:	2303      	movs	r3, #3
 80077b2:	1cc5      	adds	r5, r0, #3
 80077b4:	439d      	bics	r5, r3
 80077b6:	42a8      	cmp	r0, r5
 80077b8:	d0f8      	beq.n	80077ac <sbrk_aligned+0x24>
 80077ba:	1a29      	subs	r1, r5, r0
 80077bc:	0020      	movs	r0, r4
 80077be:	f000 fb81 	bl	8007ec4 <_sbrk_r>
 80077c2:	3001      	adds	r0, #1
 80077c4:	d1f2      	bne.n	80077ac <sbrk_aligned+0x24>
 80077c6:	e7ef      	b.n	80077a8 <sbrk_aligned+0x20>
 80077c8:	20001288 	.word	0x20001288

080077cc <_malloc_r>:
 80077cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80077ce:	2203      	movs	r2, #3
 80077d0:	1ccb      	adds	r3, r1, #3
 80077d2:	4393      	bics	r3, r2
 80077d4:	3308      	adds	r3, #8
 80077d6:	0005      	movs	r5, r0
 80077d8:	001f      	movs	r7, r3
 80077da:	2b0c      	cmp	r3, #12
 80077dc:	d234      	bcs.n	8007848 <_malloc_r+0x7c>
 80077de:	270c      	movs	r7, #12
 80077e0:	42b9      	cmp	r1, r7
 80077e2:	d833      	bhi.n	800784c <_malloc_r+0x80>
 80077e4:	0028      	movs	r0, r5
 80077e6:	f000 f871 	bl	80078cc <__malloc_lock>
 80077ea:	4e37      	ldr	r6, [pc, #220]	@ (80078c8 <_malloc_r+0xfc>)
 80077ec:	6833      	ldr	r3, [r6, #0]
 80077ee:	001c      	movs	r4, r3
 80077f0:	2c00      	cmp	r4, #0
 80077f2:	d12f      	bne.n	8007854 <_malloc_r+0x88>
 80077f4:	0039      	movs	r1, r7
 80077f6:	0028      	movs	r0, r5
 80077f8:	f7ff ffc6 	bl	8007788 <sbrk_aligned>
 80077fc:	0004      	movs	r4, r0
 80077fe:	1c43      	adds	r3, r0, #1
 8007800:	d15f      	bne.n	80078c2 <_malloc_r+0xf6>
 8007802:	6834      	ldr	r4, [r6, #0]
 8007804:	9400      	str	r4, [sp, #0]
 8007806:	9b00      	ldr	r3, [sp, #0]
 8007808:	2b00      	cmp	r3, #0
 800780a:	d14a      	bne.n	80078a2 <_malloc_r+0xd6>
 800780c:	2c00      	cmp	r4, #0
 800780e:	d052      	beq.n	80078b6 <_malloc_r+0xea>
 8007810:	6823      	ldr	r3, [r4, #0]
 8007812:	0028      	movs	r0, r5
 8007814:	18e3      	adds	r3, r4, r3
 8007816:	9900      	ldr	r1, [sp, #0]
 8007818:	9301      	str	r3, [sp, #4]
 800781a:	f000 fb53 	bl	8007ec4 <_sbrk_r>
 800781e:	9b01      	ldr	r3, [sp, #4]
 8007820:	4283      	cmp	r3, r0
 8007822:	d148      	bne.n	80078b6 <_malloc_r+0xea>
 8007824:	6823      	ldr	r3, [r4, #0]
 8007826:	0028      	movs	r0, r5
 8007828:	1aff      	subs	r7, r7, r3
 800782a:	0039      	movs	r1, r7
 800782c:	f7ff ffac 	bl	8007788 <sbrk_aligned>
 8007830:	3001      	adds	r0, #1
 8007832:	d040      	beq.n	80078b6 <_malloc_r+0xea>
 8007834:	6823      	ldr	r3, [r4, #0]
 8007836:	19db      	adds	r3, r3, r7
 8007838:	6023      	str	r3, [r4, #0]
 800783a:	6833      	ldr	r3, [r6, #0]
 800783c:	685a      	ldr	r2, [r3, #4]
 800783e:	2a00      	cmp	r2, #0
 8007840:	d133      	bne.n	80078aa <_malloc_r+0xde>
 8007842:	9b00      	ldr	r3, [sp, #0]
 8007844:	6033      	str	r3, [r6, #0]
 8007846:	e019      	b.n	800787c <_malloc_r+0xb0>
 8007848:	2b00      	cmp	r3, #0
 800784a:	dac9      	bge.n	80077e0 <_malloc_r+0x14>
 800784c:	230c      	movs	r3, #12
 800784e:	602b      	str	r3, [r5, #0]
 8007850:	2000      	movs	r0, #0
 8007852:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007854:	6821      	ldr	r1, [r4, #0]
 8007856:	1bc9      	subs	r1, r1, r7
 8007858:	d420      	bmi.n	800789c <_malloc_r+0xd0>
 800785a:	290b      	cmp	r1, #11
 800785c:	d90a      	bls.n	8007874 <_malloc_r+0xa8>
 800785e:	19e2      	adds	r2, r4, r7
 8007860:	6027      	str	r7, [r4, #0]
 8007862:	42a3      	cmp	r3, r4
 8007864:	d104      	bne.n	8007870 <_malloc_r+0xa4>
 8007866:	6032      	str	r2, [r6, #0]
 8007868:	6863      	ldr	r3, [r4, #4]
 800786a:	6011      	str	r1, [r2, #0]
 800786c:	6053      	str	r3, [r2, #4]
 800786e:	e005      	b.n	800787c <_malloc_r+0xb0>
 8007870:	605a      	str	r2, [r3, #4]
 8007872:	e7f9      	b.n	8007868 <_malloc_r+0x9c>
 8007874:	6862      	ldr	r2, [r4, #4]
 8007876:	42a3      	cmp	r3, r4
 8007878:	d10e      	bne.n	8007898 <_malloc_r+0xcc>
 800787a:	6032      	str	r2, [r6, #0]
 800787c:	0028      	movs	r0, r5
 800787e:	f000 f82d 	bl	80078dc <__malloc_unlock>
 8007882:	0020      	movs	r0, r4
 8007884:	2207      	movs	r2, #7
 8007886:	300b      	adds	r0, #11
 8007888:	1d23      	adds	r3, r4, #4
 800788a:	4390      	bics	r0, r2
 800788c:	1ac2      	subs	r2, r0, r3
 800788e:	4298      	cmp	r0, r3
 8007890:	d0df      	beq.n	8007852 <_malloc_r+0x86>
 8007892:	1a1b      	subs	r3, r3, r0
 8007894:	50a3      	str	r3, [r4, r2]
 8007896:	e7dc      	b.n	8007852 <_malloc_r+0x86>
 8007898:	605a      	str	r2, [r3, #4]
 800789a:	e7ef      	b.n	800787c <_malloc_r+0xb0>
 800789c:	0023      	movs	r3, r4
 800789e:	6864      	ldr	r4, [r4, #4]
 80078a0:	e7a6      	b.n	80077f0 <_malloc_r+0x24>
 80078a2:	9c00      	ldr	r4, [sp, #0]
 80078a4:	6863      	ldr	r3, [r4, #4]
 80078a6:	9300      	str	r3, [sp, #0]
 80078a8:	e7ad      	b.n	8007806 <_malloc_r+0x3a>
 80078aa:	001a      	movs	r2, r3
 80078ac:	685b      	ldr	r3, [r3, #4]
 80078ae:	42a3      	cmp	r3, r4
 80078b0:	d1fb      	bne.n	80078aa <_malloc_r+0xde>
 80078b2:	2300      	movs	r3, #0
 80078b4:	e7da      	b.n	800786c <_malloc_r+0xa0>
 80078b6:	230c      	movs	r3, #12
 80078b8:	0028      	movs	r0, r5
 80078ba:	602b      	str	r3, [r5, #0]
 80078bc:	f000 f80e 	bl	80078dc <__malloc_unlock>
 80078c0:	e7c6      	b.n	8007850 <_malloc_r+0x84>
 80078c2:	6007      	str	r7, [r0, #0]
 80078c4:	e7da      	b.n	800787c <_malloc_r+0xb0>
 80078c6:	46c0      	nop			@ (mov r8, r8)
 80078c8:	2000128c 	.word	0x2000128c

080078cc <__malloc_lock>:
 80078cc:	b510      	push	{r4, lr}
 80078ce:	4802      	ldr	r0, [pc, #8]	@ (80078d8 <__malloc_lock+0xc>)
 80078d0:	f7ff ff04 	bl	80076dc <__retarget_lock_acquire_recursive>
 80078d4:	bd10      	pop	{r4, pc}
 80078d6:	46c0      	nop			@ (mov r8, r8)
 80078d8:	20001284 	.word	0x20001284

080078dc <__malloc_unlock>:
 80078dc:	b510      	push	{r4, lr}
 80078de:	4802      	ldr	r0, [pc, #8]	@ (80078e8 <__malloc_unlock+0xc>)
 80078e0:	f7ff fefd 	bl	80076de <__retarget_lock_release_recursive>
 80078e4:	bd10      	pop	{r4, pc}
 80078e6:	46c0      	nop			@ (mov r8, r8)
 80078e8:	20001284 	.word	0x20001284

080078ec <__ssputs_r>:
 80078ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80078ee:	688e      	ldr	r6, [r1, #8]
 80078f0:	b085      	sub	sp, #20
 80078f2:	001f      	movs	r7, r3
 80078f4:	000c      	movs	r4, r1
 80078f6:	680b      	ldr	r3, [r1, #0]
 80078f8:	9002      	str	r0, [sp, #8]
 80078fa:	9203      	str	r2, [sp, #12]
 80078fc:	42be      	cmp	r6, r7
 80078fe:	d830      	bhi.n	8007962 <__ssputs_r+0x76>
 8007900:	210c      	movs	r1, #12
 8007902:	5e62      	ldrsh	r2, [r4, r1]
 8007904:	2190      	movs	r1, #144	@ 0x90
 8007906:	00c9      	lsls	r1, r1, #3
 8007908:	420a      	tst	r2, r1
 800790a:	d028      	beq.n	800795e <__ssputs_r+0x72>
 800790c:	2003      	movs	r0, #3
 800790e:	6921      	ldr	r1, [r4, #16]
 8007910:	1a5b      	subs	r3, r3, r1
 8007912:	9301      	str	r3, [sp, #4]
 8007914:	6963      	ldr	r3, [r4, #20]
 8007916:	4343      	muls	r3, r0
 8007918:	9801      	ldr	r0, [sp, #4]
 800791a:	0fdd      	lsrs	r5, r3, #31
 800791c:	18ed      	adds	r5, r5, r3
 800791e:	1c7b      	adds	r3, r7, #1
 8007920:	181b      	adds	r3, r3, r0
 8007922:	106d      	asrs	r5, r5, #1
 8007924:	42ab      	cmp	r3, r5
 8007926:	d900      	bls.n	800792a <__ssputs_r+0x3e>
 8007928:	001d      	movs	r5, r3
 800792a:	0552      	lsls	r2, r2, #21
 800792c:	d528      	bpl.n	8007980 <__ssputs_r+0x94>
 800792e:	0029      	movs	r1, r5
 8007930:	9802      	ldr	r0, [sp, #8]
 8007932:	f7ff ff4b 	bl	80077cc <_malloc_r>
 8007936:	1e06      	subs	r6, r0, #0
 8007938:	d02c      	beq.n	8007994 <__ssputs_r+0xa8>
 800793a:	9a01      	ldr	r2, [sp, #4]
 800793c:	6921      	ldr	r1, [r4, #16]
 800793e:	f7ff fecf 	bl	80076e0 <memcpy>
 8007942:	89a2      	ldrh	r2, [r4, #12]
 8007944:	4b18      	ldr	r3, [pc, #96]	@ (80079a8 <__ssputs_r+0xbc>)
 8007946:	401a      	ands	r2, r3
 8007948:	2380      	movs	r3, #128	@ 0x80
 800794a:	4313      	orrs	r3, r2
 800794c:	81a3      	strh	r3, [r4, #12]
 800794e:	9b01      	ldr	r3, [sp, #4]
 8007950:	6126      	str	r6, [r4, #16]
 8007952:	18f6      	adds	r6, r6, r3
 8007954:	6026      	str	r6, [r4, #0]
 8007956:	003e      	movs	r6, r7
 8007958:	6165      	str	r5, [r4, #20]
 800795a:	1aed      	subs	r5, r5, r3
 800795c:	60a5      	str	r5, [r4, #8]
 800795e:	42be      	cmp	r6, r7
 8007960:	d900      	bls.n	8007964 <__ssputs_r+0x78>
 8007962:	003e      	movs	r6, r7
 8007964:	0032      	movs	r2, r6
 8007966:	9903      	ldr	r1, [sp, #12]
 8007968:	6820      	ldr	r0, [r4, #0]
 800796a:	f000 fa99 	bl	8007ea0 <memmove>
 800796e:	2000      	movs	r0, #0
 8007970:	68a3      	ldr	r3, [r4, #8]
 8007972:	1b9b      	subs	r3, r3, r6
 8007974:	60a3      	str	r3, [r4, #8]
 8007976:	6823      	ldr	r3, [r4, #0]
 8007978:	199b      	adds	r3, r3, r6
 800797a:	6023      	str	r3, [r4, #0]
 800797c:	b005      	add	sp, #20
 800797e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007980:	002a      	movs	r2, r5
 8007982:	9802      	ldr	r0, [sp, #8]
 8007984:	f000 fabb 	bl	8007efe <_realloc_r>
 8007988:	1e06      	subs	r6, r0, #0
 800798a:	d1e0      	bne.n	800794e <__ssputs_r+0x62>
 800798c:	6921      	ldr	r1, [r4, #16]
 800798e:	9802      	ldr	r0, [sp, #8]
 8007990:	f7ff feb0 	bl	80076f4 <_free_r>
 8007994:	230c      	movs	r3, #12
 8007996:	2001      	movs	r0, #1
 8007998:	9a02      	ldr	r2, [sp, #8]
 800799a:	4240      	negs	r0, r0
 800799c:	6013      	str	r3, [r2, #0]
 800799e:	89a2      	ldrh	r2, [r4, #12]
 80079a0:	3334      	adds	r3, #52	@ 0x34
 80079a2:	4313      	orrs	r3, r2
 80079a4:	81a3      	strh	r3, [r4, #12]
 80079a6:	e7e9      	b.n	800797c <__ssputs_r+0x90>
 80079a8:	fffffb7f 	.word	0xfffffb7f

080079ac <_svfiprintf_r>:
 80079ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80079ae:	b0a1      	sub	sp, #132	@ 0x84
 80079b0:	9003      	str	r0, [sp, #12]
 80079b2:	001d      	movs	r5, r3
 80079b4:	898b      	ldrh	r3, [r1, #12]
 80079b6:	000f      	movs	r7, r1
 80079b8:	0016      	movs	r6, r2
 80079ba:	061b      	lsls	r3, r3, #24
 80079bc:	d511      	bpl.n	80079e2 <_svfiprintf_r+0x36>
 80079be:	690b      	ldr	r3, [r1, #16]
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d10e      	bne.n	80079e2 <_svfiprintf_r+0x36>
 80079c4:	2140      	movs	r1, #64	@ 0x40
 80079c6:	f7ff ff01 	bl	80077cc <_malloc_r>
 80079ca:	6038      	str	r0, [r7, #0]
 80079cc:	6138      	str	r0, [r7, #16]
 80079ce:	2800      	cmp	r0, #0
 80079d0:	d105      	bne.n	80079de <_svfiprintf_r+0x32>
 80079d2:	230c      	movs	r3, #12
 80079d4:	9a03      	ldr	r2, [sp, #12]
 80079d6:	6013      	str	r3, [r2, #0]
 80079d8:	2001      	movs	r0, #1
 80079da:	4240      	negs	r0, r0
 80079dc:	e0cf      	b.n	8007b7e <_svfiprintf_r+0x1d2>
 80079de:	2340      	movs	r3, #64	@ 0x40
 80079e0:	617b      	str	r3, [r7, #20]
 80079e2:	2300      	movs	r3, #0
 80079e4:	ac08      	add	r4, sp, #32
 80079e6:	6163      	str	r3, [r4, #20]
 80079e8:	3320      	adds	r3, #32
 80079ea:	7663      	strb	r3, [r4, #25]
 80079ec:	3310      	adds	r3, #16
 80079ee:	76a3      	strb	r3, [r4, #26]
 80079f0:	9507      	str	r5, [sp, #28]
 80079f2:	0035      	movs	r5, r6
 80079f4:	782b      	ldrb	r3, [r5, #0]
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d001      	beq.n	80079fe <_svfiprintf_r+0x52>
 80079fa:	2b25      	cmp	r3, #37	@ 0x25
 80079fc:	d148      	bne.n	8007a90 <_svfiprintf_r+0xe4>
 80079fe:	1bab      	subs	r3, r5, r6
 8007a00:	9305      	str	r3, [sp, #20]
 8007a02:	42b5      	cmp	r5, r6
 8007a04:	d00b      	beq.n	8007a1e <_svfiprintf_r+0x72>
 8007a06:	0032      	movs	r2, r6
 8007a08:	0039      	movs	r1, r7
 8007a0a:	9803      	ldr	r0, [sp, #12]
 8007a0c:	f7ff ff6e 	bl	80078ec <__ssputs_r>
 8007a10:	3001      	adds	r0, #1
 8007a12:	d100      	bne.n	8007a16 <_svfiprintf_r+0x6a>
 8007a14:	e0ae      	b.n	8007b74 <_svfiprintf_r+0x1c8>
 8007a16:	6963      	ldr	r3, [r4, #20]
 8007a18:	9a05      	ldr	r2, [sp, #20]
 8007a1a:	189b      	adds	r3, r3, r2
 8007a1c:	6163      	str	r3, [r4, #20]
 8007a1e:	782b      	ldrb	r3, [r5, #0]
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d100      	bne.n	8007a26 <_svfiprintf_r+0x7a>
 8007a24:	e0a6      	b.n	8007b74 <_svfiprintf_r+0x1c8>
 8007a26:	2201      	movs	r2, #1
 8007a28:	2300      	movs	r3, #0
 8007a2a:	4252      	negs	r2, r2
 8007a2c:	6062      	str	r2, [r4, #4]
 8007a2e:	a904      	add	r1, sp, #16
 8007a30:	3254      	adds	r2, #84	@ 0x54
 8007a32:	1852      	adds	r2, r2, r1
 8007a34:	1c6e      	adds	r6, r5, #1
 8007a36:	6023      	str	r3, [r4, #0]
 8007a38:	60e3      	str	r3, [r4, #12]
 8007a3a:	60a3      	str	r3, [r4, #8]
 8007a3c:	7013      	strb	r3, [r2, #0]
 8007a3e:	65a3      	str	r3, [r4, #88]	@ 0x58
 8007a40:	4b54      	ldr	r3, [pc, #336]	@ (8007b94 <_svfiprintf_r+0x1e8>)
 8007a42:	2205      	movs	r2, #5
 8007a44:	0018      	movs	r0, r3
 8007a46:	7831      	ldrb	r1, [r6, #0]
 8007a48:	9305      	str	r3, [sp, #20]
 8007a4a:	f000 fa4d 	bl	8007ee8 <memchr>
 8007a4e:	1c75      	adds	r5, r6, #1
 8007a50:	2800      	cmp	r0, #0
 8007a52:	d11f      	bne.n	8007a94 <_svfiprintf_r+0xe8>
 8007a54:	6822      	ldr	r2, [r4, #0]
 8007a56:	06d3      	lsls	r3, r2, #27
 8007a58:	d504      	bpl.n	8007a64 <_svfiprintf_r+0xb8>
 8007a5a:	2353      	movs	r3, #83	@ 0x53
 8007a5c:	a904      	add	r1, sp, #16
 8007a5e:	185b      	adds	r3, r3, r1
 8007a60:	2120      	movs	r1, #32
 8007a62:	7019      	strb	r1, [r3, #0]
 8007a64:	0713      	lsls	r3, r2, #28
 8007a66:	d504      	bpl.n	8007a72 <_svfiprintf_r+0xc6>
 8007a68:	2353      	movs	r3, #83	@ 0x53
 8007a6a:	a904      	add	r1, sp, #16
 8007a6c:	185b      	adds	r3, r3, r1
 8007a6e:	212b      	movs	r1, #43	@ 0x2b
 8007a70:	7019      	strb	r1, [r3, #0]
 8007a72:	7833      	ldrb	r3, [r6, #0]
 8007a74:	2b2a      	cmp	r3, #42	@ 0x2a
 8007a76:	d016      	beq.n	8007aa6 <_svfiprintf_r+0xfa>
 8007a78:	0035      	movs	r5, r6
 8007a7a:	2100      	movs	r1, #0
 8007a7c:	200a      	movs	r0, #10
 8007a7e:	68e3      	ldr	r3, [r4, #12]
 8007a80:	782a      	ldrb	r2, [r5, #0]
 8007a82:	1c6e      	adds	r6, r5, #1
 8007a84:	3a30      	subs	r2, #48	@ 0x30
 8007a86:	2a09      	cmp	r2, #9
 8007a88:	d950      	bls.n	8007b2c <_svfiprintf_r+0x180>
 8007a8a:	2900      	cmp	r1, #0
 8007a8c:	d111      	bne.n	8007ab2 <_svfiprintf_r+0x106>
 8007a8e:	e017      	b.n	8007ac0 <_svfiprintf_r+0x114>
 8007a90:	3501      	adds	r5, #1
 8007a92:	e7af      	b.n	80079f4 <_svfiprintf_r+0x48>
 8007a94:	9b05      	ldr	r3, [sp, #20]
 8007a96:	6822      	ldr	r2, [r4, #0]
 8007a98:	1ac0      	subs	r0, r0, r3
 8007a9a:	2301      	movs	r3, #1
 8007a9c:	4083      	lsls	r3, r0
 8007a9e:	4313      	orrs	r3, r2
 8007aa0:	002e      	movs	r6, r5
 8007aa2:	6023      	str	r3, [r4, #0]
 8007aa4:	e7cc      	b.n	8007a40 <_svfiprintf_r+0x94>
 8007aa6:	9b07      	ldr	r3, [sp, #28]
 8007aa8:	1d19      	adds	r1, r3, #4
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	9107      	str	r1, [sp, #28]
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	db01      	blt.n	8007ab6 <_svfiprintf_r+0x10a>
 8007ab2:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007ab4:	e004      	b.n	8007ac0 <_svfiprintf_r+0x114>
 8007ab6:	425b      	negs	r3, r3
 8007ab8:	60e3      	str	r3, [r4, #12]
 8007aba:	2302      	movs	r3, #2
 8007abc:	4313      	orrs	r3, r2
 8007abe:	6023      	str	r3, [r4, #0]
 8007ac0:	782b      	ldrb	r3, [r5, #0]
 8007ac2:	2b2e      	cmp	r3, #46	@ 0x2e
 8007ac4:	d10c      	bne.n	8007ae0 <_svfiprintf_r+0x134>
 8007ac6:	786b      	ldrb	r3, [r5, #1]
 8007ac8:	2b2a      	cmp	r3, #42	@ 0x2a
 8007aca:	d134      	bne.n	8007b36 <_svfiprintf_r+0x18a>
 8007acc:	9b07      	ldr	r3, [sp, #28]
 8007ace:	3502      	adds	r5, #2
 8007ad0:	1d1a      	adds	r2, r3, #4
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	9207      	str	r2, [sp, #28]
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	da01      	bge.n	8007ade <_svfiprintf_r+0x132>
 8007ada:	2301      	movs	r3, #1
 8007adc:	425b      	negs	r3, r3
 8007ade:	9309      	str	r3, [sp, #36]	@ 0x24
 8007ae0:	4e2d      	ldr	r6, [pc, #180]	@ (8007b98 <_svfiprintf_r+0x1ec>)
 8007ae2:	2203      	movs	r2, #3
 8007ae4:	0030      	movs	r0, r6
 8007ae6:	7829      	ldrb	r1, [r5, #0]
 8007ae8:	f000 f9fe 	bl	8007ee8 <memchr>
 8007aec:	2800      	cmp	r0, #0
 8007aee:	d006      	beq.n	8007afe <_svfiprintf_r+0x152>
 8007af0:	2340      	movs	r3, #64	@ 0x40
 8007af2:	1b80      	subs	r0, r0, r6
 8007af4:	4083      	lsls	r3, r0
 8007af6:	6822      	ldr	r2, [r4, #0]
 8007af8:	3501      	adds	r5, #1
 8007afa:	4313      	orrs	r3, r2
 8007afc:	6023      	str	r3, [r4, #0]
 8007afe:	7829      	ldrb	r1, [r5, #0]
 8007b00:	2206      	movs	r2, #6
 8007b02:	4826      	ldr	r0, [pc, #152]	@ (8007b9c <_svfiprintf_r+0x1f0>)
 8007b04:	1c6e      	adds	r6, r5, #1
 8007b06:	7621      	strb	r1, [r4, #24]
 8007b08:	f000 f9ee 	bl	8007ee8 <memchr>
 8007b0c:	2800      	cmp	r0, #0
 8007b0e:	d038      	beq.n	8007b82 <_svfiprintf_r+0x1d6>
 8007b10:	4b23      	ldr	r3, [pc, #140]	@ (8007ba0 <_svfiprintf_r+0x1f4>)
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d122      	bne.n	8007b5c <_svfiprintf_r+0x1b0>
 8007b16:	2207      	movs	r2, #7
 8007b18:	9b07      	ldr	r3, [sp, #28]
 8007b1a:	3307      	adds	r3, #7
 8007b1c:	4393      	bics	r3, r2
 8007b1e:	3308      	adds	r3, #8
 8007b20:	9307      	str	r3, [sp, #28]
 8007b22:	6963      	ldr	r3, [r4, #20]
 8007b24:	9a04      	ldr	r2, [sp, #16]
 8007b26:	189b      	adds	r3, r3, r2
 8007b28:	6163      	str	r3, [r4, #20]
 8007b2a:	e762      	b.n	80079f2 <_svfiprintf_r+0x46>
 8007b2c:	4343      	muls	r3, r0
 8007b2e:	0035      	movs	r5, r6
 8007b30:	2101      	movs	r1, #1
 8007b32:	189b      	adds	r3, r3, r2
 8007b34:	e7a4      	b.n	8007a80 <_svfiprintf_r+0xd4>
 8007b36:	2300      	movs	r3, #0
 8007b38:	200a      	movs	r0, #10
 8007b3a:	0019      	movs	r1, r3
 8007b3c:	3501      	adds	r5, #1
 8007b3e:	6063      	str	r3, [r4, #4]
 8007b40:	782a      	ldrb	r2, [r5, #0]
 8007b42:	1c6e      	adds	r6, r5, #1
 8007b44:	3a30      	subs	r2, #48	@ 0x30
 8007b46:	2a09      	cmp	r2, #9
 8007b48:	d903      	bls.n	8007b52 <_svfiprintf_r+0x1a6>
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d0c8      	beq.n	8007ae0 <_svfiprintf_r+0x134>
 8007b4e:	9109      	str	r1, [sp, #36]	@ 0x24
 8007b50:	e7c6      	b.n	8007ae0 <_svfiprintf_r+0x134>
 8007b52:	4341      	muls	r1, r0
 8007b54:	0035      	movs	r5, r6
 8007b56:	2301      	movs	r3, #1
 8007b58:	1889      	adds	r1, r1, r2
 8007b5a:	e7f1      	b.n	8007b40 <_svfiprintf_r+0x194>
 8007b5c:	aa07      	add	r2, sp, #28
 8007b5e:	9200      	str	r2, [sp, #0]
 8007b60:	0021      	movs	r1, r4
 8007b62:	003a      	movs	r2, r7
 8007b64:	4b0f      	ldr	r3, [pc, #60]	@ (8007ba4 <_svfiprintf_r+0x1f8>)
 8007b66:	9803      	ldr	r0, [sp, #12]
 8007b68:	e000      	b.n	8007b6c <_svfiprintf_r+0x1c0>
 8007b6a:	bf00      	nop
 8007b6c:	9004      	str	r0, [sp, #16]
 8007b6e:	9b04      	ldr	r3, [sp, #16]
 8007b70:	3301      	adds	r3, #1
 8007b72:	d1d6      	bne.n	8007b22 <_svfiprintf_r+0x176>
 8007b74:	89bb      	ldrh	r3, [r7, #12]
 8007b76:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8007b78:	065b      	lsls	r3, r3, #25
 8007b7a:	d500      	bpl.n	8007b7e <_svfiprintf_r+0x1d2>
 8007b7c:	e72c      	b.n	80079d8 <_svfiprintf_r+0x2c>
 8007b7e:	b021      	add	sp, #132	@ 0x84
 8007b80:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007b82:	aa07      	add	r2, sp, #28
 8007b84:	9200      	str	r2, [sp, #0]
 8007b86:	0021      	movs	r1, r4
 8007b88:	003a      	movs	r2, r7
 8007b8a:	4b06      	ldr	r3, [pc, #24]	@ (8007ba4 <_svfiprintf_r+0x1f8>)
 8007b8c:	9803      	ldr	r0, [sp, #12]
 8007b8e:	f000 f87b 	bl	8007c88 <_printf_i>
 8007b92:	e7eb      	b.n	8007b6c <_svfiprintf_r+0x1c0>
 8007b94:	080080ac 	.word	0x080080ac
 8007b98:	080080b2 	.word	0x080080b2
 8007b9c:	080080b6 	.word	0x080080b6
 8007ba0:	00000000 	.word	0x00000000
 8007ba4:	080078ed 	.word	0x080078ed

08007ba8 <_printf_common>:
 8007ba8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007baa:	0016      	movs	r6, r2
 8007bac:	9301      	str	r3, [sp, #4]
 8007bae:	688a      	ldr	r2, [r1, #8]
 8007bb0:	690b      	ldr	r3, [r1, #16]
 8007bb2:	000c      	movs	r4, r1
 8007bb4:	9000      	str	r0, [sp, #0]
 8007bb6:	4293      	cmp	r3, r2
 8007bb8:	da00      	bge.n	8007bbc <_printf_common+0x14>
 8007bba:	0013      	movs	r3, r2
 8007bbc:	0022      	movs	r2, r4
 8007bbe:	6033      	str	r3, [r6, #0]
 8007bc0:	3243      	adds	r2, #67	@ 0x43
 8007bc2:	7812      	ldrb	r2, [r2, #0]
 8007bc4:	2a00      	cmp	r2, #0
 8007bc6:	d001      	beq.n	8007bcc <_printf_common+0x24>
 8007bc8:	3301      	adds	r3, #1
 8007bca:	6033      	str	r3, [r6, #0]
 8007bcc:	6823      	ldr	r3, [r4, #0]
 8007bce:	069b      	lsls	r3, r3, #26
 8007bd0:	d502      	bpl.n	8007bd8 <_printf_common+0x30>
 8007bd2:	6833      	ldr	r3, [r6, #0]
 8007bd4:	3302      	adds	r3, #2
 8007bd6:	6033      	str	r3, [r6, #0]
 8007bd8:	6822      	ldr	r2, [r4, #0]
 8007bda:	2306      	movs	r3, #6
 8007bdc:	0015      	movs	r5, r2
 8007bde:	401d      	ands	r5, r3
 8007be0:	421a      	tst	r2, r3
 8007be2:	d027      	beq.n	8007c34 <_printf_common+0x8c>
 8007be4:	0023      	movs	r3, r4
 8007be6:	3343      	adds	r3, #67	@ 0x43
 8007be8:	781b      	ldrb	r3, [r3, #0]
 8007bea:	1e5a      	subs	r2, r3, #1
 8007bec:	4193      	sbcs	r3, r2
 8007bee:	6822      	ldr	r2, [r4, #0]
 8007bf0:	0692      	lsls	r2, r2, #26
 8007bf2:	d430      	bmi.n	8007c56 <_printf_common+0xae>
 8007bf4:	0022      	movs	r2, r4
 8007bf6:	9901      	ldr	r1, [sp, #4]
 8007bf8:	9800      	ldr	r0, [sp, #0]
 8007bfa:	9d08      	ldr	r5, [sp, #32]
 8007bfc:	3243      	adds	r2, #67	@ 0x43
 8007bfe:	47a8      	blx	r5
 8007c00:	3001      	adds	r0, #1
 8007c02:	d025      	beq.n	8007c50 <_printf_common+0xa8>
 8007c04:	2206      	movs	r2, #6
 8007c06:	6823      	ldr	r3, [r4, #0]
 8007c08:	2500      	movs	r5, #0
 8007c0a:	4013      	ands	r3, r2
 8007c0c:	2b04      	cmp	r3, #4
 8007c0e:	d105      	bne.n	8007c1c <_printf_common+0x74>
 8007c10:	6833      	ldr	r3, [r6, #0]
 8007c12:	68e5      	ldr	r5, [r4, #12]
 8007c14:	1aed      	subs	r5, r5, r3
 8007c16:	43eb      	mvns	r3, r5
 8007c18:	17db      	asrs	r3, r3, #31
 8007c1a:	401d      	ands	r5, r3
 8007c1c:	68a3      	ldr	r3, [r4, #8]
 8007c1e:	6922      	ldr	r2, [r4, #16]
 8007c20:	4293      	cmp	r3, r2
 8007c22:	dd01      	ble.n	8007c28 <_printf_common+0x80>
 8007c24:	1a9b      	subs	r3, r3, r2
 8007c26:	18ed      	adds	r5, r5, r3
 8007c28:	2600      	movs	r6, #0
 8007c2a:	42b5      	cmp	r5, r6
 8007c2c:	d120      	bne.n	8007c70 <_printf_common+0xc8>
 8007c2e:	2000      	movs	r0, #0
 8007c30:	e010      	b.n	8007c54 <_printf_common+0xac>
 8007c32:	3501      	adds	r5, #1
 8007c34:	68e3      	ldr	r3, [r4, #12]
 8007c36:	6832      	ldr	r2, [r6, #0]
 8007c38:	1a9b      	subs	r3, r3, r2
 8007c3a:	42ab      	cmp	r3, r5
 8007c3c:	ddd2      	ble.n	8007be4 <_printf_common+0x3c>
 8007c3e:	0022      	movs	r2, r4
 8007c40:	2301      	movs	r3, #1
 8007c42:	9901      	ldr	r1, [sp, #4]
 8007c44:	9800      	ldr	r0, [sp, #0]
 8007c46:	9f08      	ldr	r7, [sp, #32]
 8007c48:	3219      	adds	r2, #25
 8007c4a:	47b8      	blx	r7
 8007c4c:	3001      	adds	r0, #1
 8007c4e:	d1f0      	bne.n	8007c32 <_printf_common+0x8a>
 8007c50:	2001      	movs	r0, #1
 8007c52:	4240      	negs	r0, r0
 8007c54:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007c56:	2030      	movs	r0, #48	@ 0x30
 8007c58:	18e1      	adds	r1, r4, r3
 8007c5a:	3143      	adds	r1, #67	@ 0x43
 8007c5c:	7008      	strb	r0, [r1, #0]
 8007c5e:	0021      	movs	r1, r4
 8007c60:	1c5a      	adds	r2, r3, #1
 8007c62:	3145      	adds	r1, #69	@ 0x45
 8007c64:	7809      	ldrb	r1, [r1, #0]
 8007c66:	18a2      	adds	r2, r4, r2
 8007c68:	3243      	adds	r2, #67	@ 0x43
 8007c6a:	3302      	adds	r3, #2
 8007c6c:	7011      	strb	r1, [r2, #0]
 8007c6e:	e7c1      	b.n	8007bf4 <_printf_common+0x4c>
 8007c70:	0022      	movs	r2, r4
 8007c72:	2301      	movs	r3, #1
 8007c74:	9901      	ldr	r1, [sp, #4]
 8007c76:	9800      	ldr	r0, [sp, #0]
 8007c78:	9f08      	ldr	r7, [sp, #32]
 8007c7a:	321a      	adds	r2, #26
 8007c7c:	47b8      	blx	r7
 8007c7e:	3001      	adds	r0, #1
 8007c80:	d0e6      	beq.n	8007c50 <_printf_common+0xa8>
 8007c82:	3601      	adds	r6, #1
 8007c84:	e7d1      	b.n	8007c2a <_printf_common+0x82>
	...

08007c88 <_printf_i>:
 8007c88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007c8a:	b08b      	sub	sp, #44	@ 0x2c
 8007c8c:	9206      	str	r2, [sp, #24]
 8007c8e:	000a      	movs	r2, r1
 8007c90:	3243      	adds	r2, #67	@ 0x43
 8007c92:	9307      	str	r3, [sp, #28]
 8007c94:	9005      	str	r0, [sp, #20]
 8007c96:	9203      	str	r2, [sp, #12]
 8007c98:	7e0a      	ldrb	r2, [r1, #24]
 8007c9a:	000c      	movs	r4, r1
 8007c9c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007c9e:	2a78      	cmp	r2, #120	@ 0x78
 8007ca0:	d809      	bhi.n	8007cb6 <_printf_i+0x2e>
 8007ca2:	2a62      	cmp	r2, #98	@ 0x62
 8007ca4:	d80b      	bhi.n	8007cbe <_printf_i+0x36>
 8007ca6:	2a00      	cmp	r2, #0
 8007ca8:	d100      	bne.n	8007cac <_printf_i+0x24>
 8007caa:	e0ba      	b.n	8007e22 <_printf_i+0x19a>
 8007cac:	497a      	ldr	r1, [pc, #488]	@ (8007e98 <_printf_i+0x210>)
 8007cae:	9104      	str	r1, [sp, #16]
 8007cb0:	2a58      	cmp	r2, #88	@ 0x58
 8007cb2:	d100      	bne.n	8007cb6 <_printf_i+0x2e>
 8007cb4:	e08e      	b.n	8007dd4 <_printf_i+0x14c>
 8007cb6:	0025      	movs	r5, r4
 8007cb8:	3542      	adds	r5, #66	@ 0x42
 8007cba:	702a      	strb	r2, [r5, #0]
 8007cbc:	e022      	b.n	8007d04 <_printf_i+0x7c>
 8007cbe:	0010      	movs	r0, r2
 8007cc0:	3863      	subs	r0, #99	@ 0x63
 8007cc2:	2815      	cmp	r0, #21
 8007cc4:	d8f7      	bhi.n	8007cb6 <_printf_i+0x2e>
 8007cc6:	f7f8 fa27 	bl	8000118 <__gnu_thumb1_case_shi>
 8007cca:	0016      	.short	0x0016
 8007ccc:	fff6001f 	.word	0xfff6001f
 8007cd0:	fff6fff6 	.word	0xfff6fff6
 8007cd4:	001ffff6 	.word	0x001ffff6
 8007cd8:	fff6fff6 	.word	0xfff6fff6
 8007cdc:	fff6fff6 	.word	0xfff6fff6
 8007ce0:	0036009f 	.word	0x0036009f
 8007ce4:	fff6007e 	.word	0xfff6007e
 8007ce8:	00b0fff6 	.word	0x00b0fff6
 8007cec:	0036fff6 	.word	0x0036fff6
 8007cf0:	fff6fff6 	.word	0xfff6fff6
 8007cf4:	0082      	.short	0x0082
 8007cf6:	0025      	movs	r5, r4
 8007cf8:	681a      	ldr	r2, [r3, #0]
 8007cfa:	3542      	adds	r5, #66	@ 0x42
 8007cfc:	1d11      	adds	r1, r2, #4
 8007cfe:	6019      	str	r1, [r3, #0]
 8007d00:	6813      	ldr	r3, [r2, #0]
 8007d02:	702b      	strb	r3, [r5, #0]
 8007d04:	2301      	movs	r3, #1
 8007d06:	e09e      	b.n	8007e46 <_printf_i+0x1be>
 8007d08:	6818      	ldr	r0, [r3, #0]
 8007d0a:	6809      	ldr	r1, [r1, #0]
 8007d0c:	1d02      	adds	r2, r0, #4
 8007d0e:	060d      	lsls	r5, r1, #24
 8007d10:	d50b      	bpl.n	8007d2a <_printf_i+0xa2>
 8007d12:	6806      	ldr	r6, [r0, #0]
 8007d14:	601a      	str	r2, [r3, #0]
 8007d16:	2e00      	cmp	r6, #0
 8007d18:	da03      	bge.n	8007d22 <_printf_i+0x9a>
 8007d1a:	232d      	movs	r3, #45	@ 0x2d
 8007d1c:	9a03      	ldr	r2, [sp, #12]
 8007d1e:	4276      	negs	r6, r6
 8007d20:	7013      	strb	r3, [r2, #0]
 8007d22:	4b5d      	ldr	r3, [pc, #372]	@ (8007e98 <_printf_i+0x210>)
 8007d24:	270a      	movs	r7, #10
 8007d26:	9304      	str	r3, [sp, #16]
 8007d28:	e018      	b.n	8007d5c <_printf_i+0xd4>
 8007d2a:	6806      	ldr	r6, [r0, #0]
 8007d2c:	601a      	str	r2, [r3, #0]
 8007d2e:	0649      	lsls	r1, r1, #25
 8007d30:	d5f1      	bpl.n	8007d16 <_printf_i+0x8e>
 8007d32:	b236      	sxth	r6, r6
 8007d34:	e7ef      	b.n	8007d16 <_printf_i+0x8e>
 8007d36:	6808      	ldr	r0, [r1, #0]
 8007d38:	6819      	ldr	r1, [r3, #0]
 8007d3a:	c940      	ldmia	r1!, {r6}
 8007d3c:	0605      	lsls	r5, r0, #24
 8007d3e:	d402      	bmi.n	8007d46 <_printf_i+0xbe>
 8007d40:	0640      	lsls	r0, r0, #25
 8007d42:	d500      	bpl.n	8007d46 <_printf_i+0xbe>
 8007d44:	b2b6      	uxth	r6, r6
 8007d46:	6019      	str	r1, [r3, #0]
 8007d48:	4b53      	ldr	r3, [pc, #332]	@ (8007e98 <_printf_i+0x210>)
 8007d4a:	270a      	movs	r7, #10
 8007d4c:	9304      	str	r3, [sp, #16]
 8007d4e:	2a6f      	cmp	r2, #111	@ 0x6f
 8007d50:	d100      	bne.n	8007d54 <_printf_i+0xcc>
 8007d52:	3f02      	subs	r7, #2
 8007d54:	0023      	movs	r3, r4
 8007d56:	2200      	movs	r2, #0
 8007d58:	3343      	adds	r3, #67	@ 0x43
 8007d5a:	701a      	strb	r2, [r3, #0]
 8007d5c:	6863      	ldr	r3, [r4, #4]
 8007d5e:	60a3      	str	r3, [r4, #8]
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	db06      	blt.n	8007d72 <_printf_i+0xea>
 8007d64:	2104      	movs	r1, #4
 8007d66:	6822      	ldr	r2, [r4, #0]
 8007d68:	9d03      	ldr	r5, [sp, #12]
 8007d6a:	438a      	bics	r2, r1
 8007d6c:	6022      	str	r2, [r4, #0]
 8007d6e:	4333      	orrs	r3, r6
 8007d70:	d00c      	beq.n	8007d8c <_printf_i+0x104>
 8007d72:	9d03      	ldr	r5, [sp, #12]
 8007d74:	0030      	movs	r0, r6
 8007d76:	0039      	movs	r1, r7
 8007d78:	f7f8 fa5e 	bl	8000238 <__aeabi_uidivmod>
 8007d7c:	9b04      	ldr	r3, [sp, #16]
 8007d7e:	3d01      	subs	r5, #1
 8007d80:	5c5b      	ldrb	r3, [r3, r1]
 8007d82:	702b      	strb	r3, [r5, #0]
 8007d84:	0033      	movs	r3, r6
 8007d86:	0006      	movs	r6, r0
 8007d88:	429f      	cmp	r7, r3
 8007d8a:	d9f3      	bls.n	8007d74 <_printf_i+0xec>
 8007d8c:	2f08      	cmp	r7, #8
 8007d8e:	d109      	bne.n	8007da4 <_printf_i+0x11c>
 8007d90:	6823      	ldr	r3, [r4, #0]
 8007d92:	07db      	lsls	r3, r3, #31
 8007d94:	d506      	bpl.n	8007da4 <_printf_i+0x11c>
 8007d96:	6862      	ldr	r2, [r4, #4]
 8007d98:	6923      	ldr	r3, [r4, #16]
 8007d9a:	429a      	cmp	r2, r3
 8007d9c:	dc02      	bgt.n	8007da4 <_printf_i+0x11c>
 8007d9e:	2330      	movs	r3, #48	@ 0x30
 8007da0:	3d01      	subs	r5, #1
 8007da2:	702b      	strb	r3, [r5, #0]
 8007da4:	9b03      	ldr	r3, [sp, #12]
 8007da6:	1b5b      	subs	r3, r3, r5
 8007da8:	6123      	str	r3, [r4, #16]
 8007daa:	9b07      	ldr	r3, [sp, #28]
 8007dac:	0021      	movs	r1, r4
 8007dae:	9300      	str	r3, [sp, #0]
 8007db0:	9805      	ldr	r0, [sp, #20]
 8007db2:	9b06      	ldr	r3, [sp, #24]
 8007db4:	aa09      	add	r2, sp, #36	@ 0x24
 8007db6:	f7ff fef7 	bl	8007ba8 <_printf_common>
 8007dba:	3001      	adds	r0, #1
 8007dbc:	d148      	bne.n	8007e50 <_printf_i+0x1c8>
 8007dbe:	2001      	movs	r0, #1
 8007dc0:	4240      	negs	r0, r0
 8007dc2:	b00b      	add	sp, #44	@ 0x2c
 8007dc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007dc6:	2220      	movs	r2, #32
 8007dc8:	6809      	ldr	r1, [r1, #0]
 8007dca:	430a      	orrs	r2, r1
 8007dcc:	6022      	str	r2, [r4, #0]
 8007dce:	2278      	movs	r2, #120	@ 0x78
 8007dd0:	4932      	ldr	r1, [pc, #200]	@ (8007e9c <_printf_i+0x214>)
 8007dd2:	9104      	str	r1, [sp, #16]
 8007dd4:	0021      	movs	r1, r4
 8007dd6:	3145      	adds	r1, #69	@ 0x45
 8007dd8:	700a      	strb	r2, [r1, #0]
 8007dda:	6819      	ldr	r1, [r3, #0]
 8007ddc:	6822      	ldr	r2, [r4, #0]
 8007dde:	c940      	ldmia	r1!, {r6}
 8007de0:	0610      	lsls	r0, r2, #24
 8007de2:	d402      	bmi.n	8007dea <_printf_i+0x162>
 8007de4:	0650      	lsls	r0, r2, #25
 8007de6:	d500      	bpl.n	8007dea <_printf_i+0x162>
 8007de8:	b2b6      	uxth	r6, r6
 8007dea:	6019      	str	r1, [r3, #0]
 8007dec:	07d3      	lsls	r3, r2, #31
 8007dee:	d502      	bpl.n	8007df6 <_printf_i+0x16e>
 8007df0:	2320      	movs	r3, #32
 8007df2:	4313      	orrs	r3, r2
 8007df4:	6023      	str	r3, [r4, #0]
 8007df6:	2e00      	cmp	r6, #0
 8007df8:	d001      	beq.n	8007dfe <_printf_i+0x176>
 8007dfa:	2710      	movs	r7, #16
 8007dfc:	e7aa      	b.n	8007d54 <_printf_i+0xcc>
 8007dfe:	2220      	movs	r2, #32
 8007e00:	6823      	ldr	r3, [r4, #0]
 8007e02:	4393      	bics	r3, r2
 8007e04:	6023      	str	r3, [r4, #0]
 8007e06:	e7f8      	b.n	8007dfa <_printf_i+0x172>
 8007e08:	681a      	ldr	r2, [r3, #0]
 8007e0a:	680d      	ldr	r5, [r1, #0]
 8007e0c:	1d10      	adds	r0, r2, #4
 8007e0e:	6949      	ldr	r1, [r1, #20]
 8007e10:	6018      	str	r0, [r3, #0]
 8007e12:	6813      	ldr	r3, [r2, #0]
 8007e14:	062e      	lsls	r6, r5, #24
 8007e16:	d501      	bpl.n	8007e1c <_printf_i+0x194>
 8007e18:	6019      	str	r1, [r3, #0]
 8007e1a:	e002      	b.n	8007e22 <_printf_i+0x19a>
 8007e1c:	066d      	lsls	r5, r5, #25
 8007e1e:	d5fb      	bpl.n	8007e18 <_printf_i+0x190>
 8007e20:	8019      	strh	r1, [r3, #0]
 8007e22:	2300      	movs	r3, #0
 8007e24:	9d03      	ldr	r5, [sp, #12]
 8007e26:	6123      	str	r3, [r4, #16]
 8007e28:	e7bf      	b.n	8007daa <_printf_i+0x122>
 8007e2a:	681a      	ldr	r2, [r3, #0]
 8007e2c:	1d11      	adds	r1, r2, #4
 8007e2e:	6019      	str	r1, [r3, #0]
 8007e30:	6815      	ldr	r5, [r2, #0]
 8007e32:	2100      	movs	r1, #0
 8007e34:	0028      	movs	r0, r5
 8007e36:	6862      	ldr	r2, [r4, #4]
 8007e38:	f000 f856 	bl	8007ee8 <memchr>
 8007e3c:	2800      	cmp	r0, #0
 8007e3e:	d001      	beq.n	8007e44 <_printf_i+0x1bc>
 8007e40:	1b40      	subs	r0, r0, r5
 8007e42:	6060      	str	r0, [r4, #4]
 8007e44:	6863      	ldr	r3, [r4, #4]
 8007e46:	6123      	str	r3, [r4, #16]
 8007e48:	2300      	movs	r3, #0
 8007e4a:	9a03      	ldr	r2, [sp, #12]
 8007e4c:	7013      	strb	r3, [r2, #0]
 8007e4e:	e7ac      	b.n	8007daa <_printf_i+0x122>
 8007e50:	002a      	movs	r2, r5
 8007e52:	6923      	ldr	r3, [r4, #16]
 8007e54:	9906      	ldr	r1, [sp, #24]
 8007e56:	9805      	ldr	r0, [sp, #20]
 8007e58:	9d07      	ldr	r5, [sp, #28]
 8007e5a:	47a8      	blx	r5
 8007e5c:	3001      	adds	r0, #1
 8007e5e:	d0ae      	beq.n	8007dbe <_printf_i+0x136>
 8007e60:	6823      	ldr	r3, [r4, #0]
 8007e62:	079b      	lsls	r3, r3, #30
 8007e64:	d415      	bmi.n	8007e92 <_printf_i+0x20a>
 8007e66:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007e68:	68e0      	ldr	r0, [r4, #12]
 8007e6a:	4298      	cmp	r0, r3
 8007e6c:	daa9      	bge.n	8007dc2 <_printf_i+0x13a>
 8007e6e:	0018      	movs	r0, r3
 8007e70:	e7a7      	b.n	8007dc2 <_printf_i+0x13a>
 8007e72:	0022      	movs	r2, r4
 8007e74:	2301      	movs	r3, #1
 8007e76:	9906      	ldr	r1, [sp, #24]
 8007e78:	9805      	ldr	r0, [sp, #20]
 8007e7a:	9e07      	ldr	r6, [sp, #28]
 8007e7c:	3219      	adds	r2, #25
 8007e7e:	47b0      	blx	r6
 8007e80:	3001      	adds	r0, #1
 8007e82:	d09c      	beq.n	8007dbe <_printf_i+0x136>
 8007e84:	3501      	adds	r5, #1
 8007e86:	68e3      	ldr	r3, [r4, #12]
 8007e88:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007e8a:	1a9b      	subs	r3, r3, r2
 8007e8c:	42ab      	cmp	r3, r5
 8007e8e:	dcf0      	bgt.n	8007e72 <_printf_i+0x1ea>
 8007e90:	e7e9      	b.n	8007e66 <_printf_i+0x1de>
 8007e92:	2500      	movs	r5, #0
 8007e94:	e7f7      	b.n	8007e86 <_printf_i+0x1fe>
 8007e96:	46c0      	nop			@ (mov r8, r8)
 8007e98:	080080bd 	.word	0x080080bd
 8007e9c:	080080ce 	.word	0x080080ce

08007ea0 <memmove>:
 8007ea0:	b510      	push	{r4, lr}
 8007ea2:	4288      	cmp	r0, r1
 8007ea4:	d902      	bls.n	8007eac <memmove+0xc>
 8007ea6:	188b      	adds	r3, r1, r2
 8007ea8:	4298      	cmp	r0, r3
 8007eaa:	d308      	bcc.n	8007ebe <memmove+0x1e>
 8007eac:	2300      	movs	r3, #0
 8007eae:	429a      	cmp	r2, r3
 8007eb0:	d007      	beq.n	8007ec2 <memmove+0x22>
 8007eb2:	5ccc      	ldrb	r4, [r1, r3]
 8007eb4:	54c4      	strb	r4, [r0, r3]
 8007eb6:	3301      	adds	r3, #1
 8007eb8:	e7f9      	b.n	8007eae <memmove+0xe>
 8007eba:	5c8b      	ldrb	r3, [r1, r2]
 8007ebc:	5483      	strb	r3, [r0, r2]
 8007ebe:	3a01      	subs	r2, #1
 8007ec0:	d2fb      	bcs.n	8007eba <memmove+0x1a>
 8007ec2:	bd10      	pop	{r4, pc}

08007ec4 <_sbrk_r>:
 8007ec4:	2300      	movs	r3, #0
 8007ec6:	b570      	push	{r4, r5, r6, lr}
 8007ec8:	4d06      	ldr	r5, [pc, #24]	@ (8007ee4 <_sbrk_r+0x20>)
 8007eca:	0004      	movs	r4, r0
 8007ecc:	0008      	movs	r0, r1
 8007ece:	602b      	str	r3, [r5, #0]
 8007ed0:	f7f9 f9e4 	bl	800129c <_sbrk>
 8007ed4:	1c43      	adds	r3, r0, #1
 8007ed6:	d103      	bne.n	8007ee0 <_sbrk_r+0x1c>
 8007ed8:	682b      	ldr	r3, [r5, #0]
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d000      	beq.n	8007ee0 <_sbrk_r+0x1c>
 8007ede:	6023      	str	r3, [r4, #0]
 8007ee0:	bd70      	pop	{r4, r5, r6, pc}
 8007ee2:	46c0      	nop			@ (mov r8, r8)
 8007ee4:	20001280 	.word	0x20001280

08007ee8 <memchr>:
 8007ee8:	b2c9      	uxtb	r1, r1
 8007eea:	1882      	adds	r2, r0, r2
 8007eec:	4290      	cmp	r0, r2
 8007eee:	d101      	bne.n	8007ef4 <memchr+0xc>
 8007ef0:	2000      	movs	r0, #0
 8007ef2:	4770      	bx	lr
 8007ef4:	7803      	ldrb	r3, [r0, #0]
 8007ef6:	428b      	cmp	r3, r1
 8007ef8:	d0fb      	beq.n	8007ef2 <memchr+0xa>
 8007efa:	3001      	adds	r0, #1
 8007efc:	e7f6      	b.n	8007eec <memchr+0x4>

08007efe <_realloc_r>:
 8007efe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007f00:	0006      	movs	r6, r0
 8007f02:	000c      	movs	r4, r1
 8007f04:	0015      	movs	r5, r2
 8007f06:	2900      	cmp	r1, #0
 8007f08:	d105      	bne.n	8007f16 <_realloc_r+0x18>
 8007f0a:	0011      	movs	r1, r2
 8007f0c:	f7ff fc5e 	bl	80077cc <_malloc_r>
 8007f10:	0004      	movs	r4, r0
 8007f12:	0020      	movs	r0, r4
 8007f14:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007f16:	2a00      	cmp	r2, #0
 8007f18:	d103      	bne.n	8007f22 <_realloc_r+0x24>
 8007f1a:	f7ff fbeb 	bl	80076f4 <_free_r>
 8007f1e:	002c      	movs	r4, r5
 8007f20:	e7f7      	b.n	8007f12 <_realloc_r+0x14>
 8007f22:	f000 f81c 	bl	8007f5e <_malloc_usable_size_r>
 8007f26:	0007      	movs	r7, r0
 8007f28:	4285      	cmp	r5, r0
 8007f2a:	d802      	bhi.n	8007f32 <_realloc_r+0x34>
 8007f2c:	0843      	lsrs	r3, r0, #1
 8007f2e:	42ab      	cmp	r3, r5
 8007f30:	d3ef      	bcc.n	8007f12 <_realloc_r+0x14>
 8007f32:	0029      	movs	r1, r5
 8007f34:	0030      	movs	r0, r6
 8007f36:	f7ff fc49 	bl	80077cc <_malloc_r>
 8007f3a:	9001      	str	r0, [sp, #4]
 8007f3c:	2800      	cmp	r0, #0
 8007f3e:	d101      	bne.n	8007f44 <_realloc_r+0x46>
 8007f40:	9c01      	ldr	r4, [sp, #4]
 8007f42:	e7e6      	b.n	8007f12 <_realloc_r+0x14>
 8007f44:	002a      	movs	r2, r5
 8007f46:	42bd      	cmp	r5, r7
 8007f48:	d900      	bls.n	8007f4c <_realloc_r+0x4e>
 8007f4a:	003a      	movs	r2, r7
 8007f4c:	0021      	movs	r1, r4
 8007f4e:	9801      	ldr	r0, [sp, #4]
 8007f50:	f7ff fbc6 	bl	80076e0 <memcpy>
 8007f54:	0021      	movs	r1, r4
 8007f56:	0030      	movs	r0, r6
 8007f58:	f7ff fbcc 	bl	80076f4 <_free_r>
 8007f5c:	e7f0      	b.n	8007f40 <_realloc_r+0x42>

08007f5e <_malloc_usable_size_r>:
 8007f5e:	1f0b      	subs	r3, r1, #4
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	1f18      	subs	r0, r3, #4
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	da01      	bge.n	8007f6c <_malloc_usable_size_r+0xe>
 8007f68:	580b      	ldr	r3, [r1, r0]
 8007f6a:	18c0      	adds	r0, r0, r3
 8007f6c:	4770      	bx	lr
	...

08007f70 <_init>:
 8007f70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f72:	46c0      	nop			@ (mov r8, r8)
 8007f74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f76:	bc08      	pop	{r3}
 8007f78:	469e      	mov	lr, r3
 8007f7a:	4770      	bx	lr

08007f7c <_fini>:
 8007f7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f7e:	46c0      	nop			@ (mov r8, r8)
 8007f80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f82:	bc08      	pop	{r3}
 8007f84:	469e      	mov	lr, r3
 8007f86:	4770      	bx	lr
