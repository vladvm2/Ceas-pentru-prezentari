
test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006f94  080000c0  080000c0  000010c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000158  08007054  08007054  00008054  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080071ac  080071ac  0000920c  2**0
                  CONTENTS
  4 .ARM          00000008  080071ac  080071ac  000081ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080071b4  080071b4  0000920c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080071b4  080071b4  000081b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080071b8  080071b8  000081b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000020c  20000000  080071bc  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000107c  2000020c  080073c8  0000920c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001288  080073c8  00009288  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000920c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000164ea  00000000  00000000  00009234  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003425  00000000  00000000  0001f71e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001398  00000000  00000000  00022b48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f48  00000000  00000000  00023ee0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000398c  00000000  00000000  00024e28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001786a  00000000  00000000  000287b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a96c1  00000000  00000000  0004001e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e96df  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004af8  00000000  00000000  000e9724  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  000ee21c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000020c 	.word	0x2000020c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800703c 	.word	0x0800703c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000210 	.word	0x20000210
 8000104:	0800703c 	.word	0x0800703c

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	@ 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f8f0 	bl	8000414 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			@ (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__divsi3>:
 8000240:	4603      	mov	r3, r0
 8000242:	430b      	orrs	r3, r1
 8000244:	d47f      	bmi.n	8000346 <__divsi3+0x106>
 8000246:	2200      	movs	r2, #0
 8000248:	0843      	lsrs	r3, r0, #1
 800024a:	428b      	cmp	r3, r1
 800024c:	d374      	bcc.n	8000338 <__divsi3+0xf8>
 800024e:	0903      	lsrs	r3, r0, #4
 8000250:	428b      	cmp	r3, r1
 8000252:	d35f      	bcc.n	8000314 <__divsi3+0xd4>
 8000254:	0a03      	lsrs	r3, r0, #8
 8000256:	428b      	cmp	r3, r1
 8000258:	d344      	bcc.n	80002e4 <__divsi3+0xa4>
 800025a:	0b03      	lsrs	r3, r0, #12
 800025c:	428b      	cmp	r3, r1
 800025e:	d328      	bcc.n	80002b2 <__divsi3+0x72>
 8000260:	0c03      	lsrs	r3, r0, #16
 8000262:	428b      	cmp	r3, r1
 8000264:	d30d      	bcc.n	8000282 <__divsi3+0x42>
 8000266:	22ff      	movs	r2, #255	@ 0xff
 8000268:	0209      	lsls	r1, r1, #8
 800026a:	ba12      	rev	r2, r2
 800026c:	0c03      	lsrs	r3, r0, #16
 800026e:	428b      	cmp	r3, r1
 8000270:	d302      	bcc.n	8000278 <__divsi3+0x38>
 8000272:	1212      	asrs	r2, r2, #8
 8000274:	0209      	lsls	r1, r1, #8
 8000276:	d065      	beq.n	8000344 <__divsi3+0x104>
 8000278:	0b03      	lsrs	r3, r0, #12
 800027a:	428b      	cmp	r3, r1
 800027c:	d319      	bcc.n	80002b2 <__divsi3+0x72>
 800027e:	e000      	b.n	8000282 <__divsi3+0x42>
 8000280:	0a09      	lsrs	r1, r1, #8
 8000282:	0bc3      	lsrs	r3, r0, #15
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x4c>
 8000288:	03cb      	lsls	r3, r1, #15
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0b83      	lsrs	r3, r0, #14
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x58>
 8000294:	038b      	lsls	r3, r1, #14
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0b43      	lsrs	r3, r0, #13
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x64>
 80002a0:	034b      	lsls	r3, r1, #13
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0b03      	lsrs	r3, r0, #12
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x70>
 80002ac:	030b      	lsls	r3, r1, #12
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0ac3      	lsrs	r3, r0, #11
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x7c>
 80002b8:	02cb      	lsls	r3, r1, #11
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0a83      	lsrs	r3, r0, #10
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x88>
 80002c4:	028b      	lsls	r3, r1, #10
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0a43      	lsrs	r3, r0, #9
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x94>
 80002d0:	024b      	lsls	r3, r1, #9
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0a03      	lsrs	r3, r0, #8
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0xa0>
 80002dc:	020b      	lsls	r3, r1, #8
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	d2cd      	bcs.n	8000280 <__divsi3+0x40>
 80002e4:	09c3      	lsrs	r3, r0, #7
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xae>
 80002ea:	01cb      	lsls	r3, r1, #7
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	0983      	lsrs	r3, r0, #6
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xba>
 80002f6:	018b      	lsls	r3, r1, #6
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0943      	lsrs	r3, r0, #5
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xc6>
 8000302:	014b      	lsls	r3, r1, #5
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0903      	lsrs	r3, r0, #4
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xd2>
 800030e:	010b      	lsls	r3, r1, #4
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	08c3      	lsrs	r3, r0, #3
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xde>
 800031a:	00cb      	lsls	r3, r1, #3
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	0883      	lsrs	r3, r0, #2
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xea>
 8000326:	008b      	lsls	r3, r1, #2
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0843      	lsrs	r3, r0, #1
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xf6>
 8000332:	004b      	lsls	r3, r1, #1
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	1a41      	subs	r1, r0, r1
 800033a:	d200      	bcs.n	800033e <__divsi3+0xfe>
 800033c:	4601      	mov	r1, r0
 800033e:	4152      	adcs	r2, r2
 8000340:	4610      	mov	r0, r2
 8000342:	4770      	bx	lr
 8000344:	e05d      	b.n	8000402 <__divsi3+0x1c2>
 8000346:	0fca      	lsrs	r2, r1, #31
 8000348:	d000      	beq.n	800034c <__divsi3+0x10c>
 800034a:	4249      	negs	r1, r1
 800034c:	1003      	asrs	r3, r0, #32
 800034e:	d300      	bcc.n	8000352 <__divsi3+0x112>
 8000350:	4240      	negs	r0, r0
 8000352:	4053      	eors	r3, r2
 8000354:	2200      	movs	r2, #0
 8000356:	469c      	mov	ip, r3
 8000358:	0903      	lsrs	r3, r0, #4
 800035a:	428b      	cmp	r3, r1
 800035c:	d32d      	bcc.n	80003ba <__divsi3+0x17a>
 800035e:	0a03      	lsrs	r3, r0, #8
 8000360:	428b      	cmp	r3, r1
 8000362:	d312      	bcc.n	800038a <__divsi3+0x14a>
 8000364:	22fc      	movs	r2, #252	@ 0xfc
 8000366:	0189      	lsls	r1, r1, #6
 8000368:	ba12      	rev	r2, r2
 800036a:	0a03      	lsrs	r3, r0, #8
 800036c:	428b      	cmp	r3, r1
 800036e:	d30c      	bcc.n	800038a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	1192      	asrs	r2, r2, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d308      	bcc.n	800038a <__divsi3+0x14a>
 8000378:	0189      	lsls	r1, r1, #6
 800037a:	1192      	asrs	r2, r2, #6
 800037c:	428b      	cmp	r3, r1
 800037e:	d304      	bcc.n	800038a <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	d03a      	beq.n	80003fa <__divsi3+0x1ba>
 8000384:	1192      	asrs	r2, r2, #6
 8000386:	e000      	b.n	800038a <__divsi3+0x14a>
 8000388:	0989      	lsrs	r1, r1, #6
 800038a:	09c3      	lsrs	r3, r0, #7
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x154>
 8000390:	01cb      	lsls	r3, r1, #7
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	0983      	lsrs	r3, r0, #6
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x160>
 800039c:	018b      	lsls	r3, r1, #6
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0943      	lsrs	r3, r0, #5
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x16c>
 80003a8:	014b      	lsls	r3, r1, #5
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0903      	lsrs	r3, r0, #4
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x178>
 80003b4:	010b      	lsls	r3, r1, #4
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	08c3      	lsrs	r3, r0, #3
 80003bc:	428b      	cmp	r3, r1
 80003be:	d301      	bcc.n	80003c4 <__divsi3+0x184>
 80003c0:	00cb      	lsls	r3, r1, #3
 80003c2:	1ac0      	subs	r0, r0, r3
 80003c4:	4152      	adcs	r2, r2
 80003c6:	0883      	lsrs	r3, r0, #2
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x190>
 80003cc:	008b      	lsls	r3, r1, #2
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	d2d9      	bcs.n	8000388 <__divsi3+0x148>
 80003d4:	0843      	lsrs	r3, r0, #1
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d301      	bcc.n	80003de <__divsi3+0x19e>
 80003da:	004b      	lsls	r3, r1, #1
 80003dc:	1ac0      	subs	r0, r0, r3
 80003de:	4152      	adcs	r2, r2
 80003e0:	1a41      	subs	r1, r0, r1
 80003e2:	d200      	bcs.n	80003e6 <__divsi3+0x1a6>
 80003e4:	4601      	mov	r1, r0
 80003e6:	4663      	mov	r3, ip
 80003e8:	4152      	adcs	r2, r2
 80003ea:	105b      	asrs	r3, r3, #1
 80003ec:	4610      	mov	r0, r2
 80003ee:	d301      	bcc.n	80003f4 <__divsi3+0x1b4>
 80003f0:	4240      	negs	r0, r0
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d500      	bpl.n	80003f8 <__divsi3+0x1b8>
 80003f6:	4249      	negs	r1, r1
 80003f8:	4770      	bx	lr
 80003fa:	4663      	mov	r3, ip
 80003fc:	105b      	asrs	r3, r3, #1
 80003fe:	d300      	bcc.n	8000402 <__divsi3+0x1c2>
 8000400:	4240      	negs	r0, r0
 8000402:	b501      	push	{r0, lr}
 8000404:	2000      	movs	r0, #0
 8000406:	f000 f805 	bl	8000414 <__aeabi_idiv0>
 800040a:	bd02      	pop	{r1, pc}

0800040c <__aeabi_idivmod>:
 800040c:	2900      	cmp	r1, #0
 800040e:	d0f8      	beq.n	8000402 <__divsi3+0x1c2>
 8000410:	e716      	b.n	8000240 <__divsi3>
 8000412:	4770      	bx	lr

08000414 <__aeabi_idiv0>:
 8000414:	4770      	bx	lr
 8000416:	46c0      	nop			@ (mov r8, r8)

08000418 <__aeabi_uldivmod>:
 8000418:	2b00      	cmp	r3, #0
 800041a:	d111      	bne.n	8000440 <__aeabi_uldivmod+0x28>
 800041c:	2a00      	cmp	r2, #0
 800041e:	d10f      	bne.n	8000440 <__aeabi_uldivmod+0x28>
 8000420:	2900      	cmp	r1, #0
 8000422:	d100      	bne.n	8000426 <__aeabi_uldivmod+0xe>
 8000424:	2800      	cmp	r0, #0
 8000426:	d002      	beq.n	800042e <__aeabi_uldivmod+0x16>
 8000428:	2100      	movs	r1, #0
 800042a:	43c9      	mvns	r1, r1
 800042c:	0008      	movs	r0, r1
 800042e:	b407      	push	{r0, r1, r2}
 8000430:	4802      	ldr	r0, [pc, #8]	@ (800043c <__aeabi_uldivmod+0x24>)
 8000432:	a102      	add	r1, pc, #8	@ (adr r1, 800043c <__aeabi_uldivmod+0x24>)
 8000434:	1840      	adds	r0, r0, r1
 8000436:	9002      	str	r0, [sp, #8]
 8000438:	bd03      	pop	{r0, r1, pc}
 800043a:	46c0      	nop			@ (mov r8, r8)
 800043c:	ffffffd9 	.word	0xffffffd9
 8000440:	b403      	push	{r0, r1}
 8000442:	4668      	mov	r0, sp
 8000444:	b501      	push	{r0, lr}
 8000446:	9802      	ldr	r0, [sp, #8]
 8000448:	f000 f806 	bl	8000458 <__udivmoddi4>
 800044c:	9b01      	ldr	r3, [sp, #4]
 800044e:	469e      	mov	lr, r3
 8000450:	b002      	add	sp, #8
 8000452:	bc0c      	pop	{r2, r3}
 8000454:	4770      	bx	lr
 8000456:	46c0      	nop			@ (mov r8, r8)

08000458 <__udivmoddi4>:
 8000458:	b5f0      	push	{r4, r5, r6, r7, lr}
 800045a:	4657      	mov	r7, sl
 800045c:	464e      	mov	r6, r9
 800045e:	4645      	mov	r5, r8
 8000460:	46de      	mov	lr, fp
 8000462:	b5e0      	push	{r5, r6, r7, lr}
 8000464:	0004      	movs	r4, r0
 8000466:	000d      	movs	r5, r1
 8000468:	4692      	mov	sl, r2
 800046a:	4699      	mov	r9, r3
 800046c:	b083      	sub	sp, #12
 800046e:	428b      	cmp	r3, r1
 8000470:	d830      	bhi.n	80004d4 <__udivmoddi4+0x7c>
 8000472:	d02d      	beq.n	80004d0 <__udivmoddi4+0x78>
 8000474:	4649      	mov	r1, r9
 8000476:	4650      	mov	r0, sl
 8000478:	f000 f8ba 	bl	80005f0 <__clzdi2>
 800047c:	0029      	movs	r1, r5
 800047e:	0006      	movs	r6, r0
 8000480:	0020      	movs	r0, r4
 8000482:	f000 f8b5 	bl	80005f0 <__clzdi2>
 8000486:	1a33      	subs	r3, r6, r0
 8000488:	4698      	mov	r8, r3
 800048a:	3b20      	subs	r3, #32
 800048c:	d434      	bmi.n	80004f8 <__udivmoddi4+0xa0>
 800048e:	469b      	mov	fp, r3
 8000490:	4653      	mov	r3, sl
 8000492:	465a      	mov	r2, fp
 8000494:	4093      	lsls	r3, r2
 8000496:	4642      	mov	r2, r8
 8000498:	001f      	movs	r7, r3
 800049a:	4653      	mov	r3, sl
 800049c:	4093      	lsls	r3, r2
 800049e:	001e      	movs	r6, r3
 80004a0:	42af      	cmp	r7, r5
 80004a2:	d83b      	bhi.n	800051c <__udivmoddi4+0xc4>
 80004a4:	42af      	cmp	r7, r5
 80004a6:	d100      	bne.n	80004aa <__udivmoddi4+0x52>
 80004a8:	e079      	b.n	800059e <__udivmoddi4+0x146>
 80004aa:	465b      	mov	r3, fp
 80004ac:	1ba4      	subs	r4, r4, r6
 80004ae:	41bd      	sbcs	r5, r7
 80004b0:	2b00      	cmp	r3, #0
 80004b2:	da00      	bge.n	80004b6 <__udivmoddi4+0x5e>
 80004b4:	e076      	b.n	80005a4 <__udivmoddi4+0x14c>
 80004b6:	2200      	movs	r2, #0
 80004b8:	2300      	movs	r3, #0
 80004ba:	9200      	str	r2, [sp, #0]
 80004bc:	9301      	str	r3, [sp, #4]
 80004be:	2301      	movs	r3, #1
 80004c0:	465a      	mov	r2, fp
 80004c2:	4093      	lsls	r3, r2
 80004c4:	9301      	str	r3, [sp, #4]
 80004c6:	2301      	movs	r3, #1
 80004c8:	4642      	mov	r2, r8
 80004ca:	4093      	lsls	r3, r2
 80004cc:	9300      	str	r3, [sp, #0]
 80004ce:	e029      	b.n	8000524 <__udivmoddi4+0xcc>
 80004d0:	4282      	cmp	r2, r0
 80004d2:	d9cf      	bls.n	8000474 <__udivmoddi4+0x1c>
 80004d4:	2200      	movs	r2, #0
 80004d6:	2300      	movs	r3, #0
 80004d8:	9200      	str	r2, [sp, #0]
 80004da:	9301      	str	r3, [sp, #4]
 80004dc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80004de:	2b00      	cmp	r3, #0
 80004e0:	d001      	beq.n	80004e6 <__udivmoddi4+0x8e>
 80004e2:	601c      	str	r4, [r3, #0]
 80004e4:	605d      	str	r5, [r3, #4]
 80004e6:	9800      	ldr	r0, [sp, #0]
 80004e8:	9901      	ldr	r1, [sp, #4]
 80004ea:	b003      	add	sp, #12
 80004ec:	bcf0      	pop	{r4, r5, r6, r7}
 80004ee:	46bb      	mov	fp, r7
 80004f0:	46b2      	mov	sl, r6
 80004f2:	46a9      	mov	r9, r5
 80004f4:	46a0      	mov	r8, r4
 80004f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004f8:	4642      	mov	r2, r8
 80004fa:	469b      	mov	fp, r3
 80004fc:	2320      	movs	r3, #32
 80004fe:	1a9b      	subs	r3, r3, r2
 8000500:	4652      	mov	r2, sl
 8000502:	40da      	lsrs	r2, r3
 8000504:	4641      	mov	r1, r8
 8000506:	0013      	movs	r3, r2
 8000508:	464a      	mov	r2, r9
 800050a:	408a      	lsls	r2, r1
 800050c:	0017      	movs	r7, r2
 800050e:	4642      	mov	r2, r8
 8000510:	431f      	orrs	r7, r3
 8000512:	4653      	mov	r3, sl
 8000514:	4093      	lsls	r3, r2
 8000516:	001e      	movs	r6, r3
 8000518:	42af      	cmp	r7, r5
 800051a:	d9c3      	bls.n	80004a4 <__udivmoddi4+0x4c>
 800051c:	2200      	movs	r2, #0
 800051e:	2300      	movs	r3, #0
 8000520:	9200      	str	r2, [sp, #0]
 8000522:	9301      	str	r3, [sp, #4]
 8000524:	4643      	mov	r3, r8
 8000526:	2b00      	cmp	r3, #0
 8000528:	d0d8      	beq.n	80004dc <__udivmoddi4+0x84>
 800052a:	07fb      	lsls	r3, r7, #31
 800052c:	0872      	lsrs	r2, r6, #1
 800052e:	431a      	orrs	r2, r3
 8000530:	4646      	mov	r6, r8
 8000532:	087b      	lsrs	r3, r7, #1
 8000534:	e00e      	b.n	8000554 <__udivmoddi4+0xfc>
 8000536:	42ab      	cmp	r3, r5
 8000538:	d101      	bne.n	800053e <__udivmoddi4+0xe6>
 800053a:	42a2      	cmp	r2, r4
 800053c:	d80c      	bhi.n	8000558 <__udivmoddi4+0x100>
 800053e:	1aa4      	subs	r4, r4, r2
 8000540:	419d      	sbcs	r5, r3
 8000542:	2001      	movs	r0, #1
 8000544:	1924      	adds	r4, r4, r4
 8000546:	416d      	adcs	r5, r5
 8000548:	2100      	movs	r1, #0
 800054a:	3e01      	subs	r6, #1
 800054c:	1824      	adds	r4, r4, r0
 800054e:	414d      	adcs	r5, r1
 8000550:	2e00      	cmp	r6, #0
 8000552:	d006      	beq.n	8000562 <__udivmoddi4+0x10a>
 8000554:	42ab      	cmp	r3, r5
 8000556:	d9ee      	bls.n	8000536 <__udivmoddi4+0xde>
 8000558:	3e01      	subs	r6, #1
 800055a:	1924      	adds	r4, r4, r4
 800055c:	416d      	adcs	r5, r5
 800055e:	2e00      	cmp	r6, #0
 8000560:	d1f8      	bne.n	8000554 <__udivmoddi4+0xfc>
 8000562:	9800      	ldr	r0, [sp, #0]
 8000564:	9901      	ldr	r1, [sp, #4]
 8000566:	465b      	mov	r3, fp
 8000568:	1900      	adds	r0, r0, r4
 800056a:	4169      	adcs	r1, r5
 800056c:	2b00      	cmp	r3, #0
 800056e:	db24      	blt.n	80005ba <__udivmoddi4+0x162>
 8000570:	002b      	movs	r3, r5
 8000572:	465a      	mov	r2, fp
 8000574:	4644      	mov	r4, r8
 8000576:	40d3      	lsrs	r3, r2
 8000578:	002a      	movs	r2, r5
 800057a:	40e2      	lsrs	r2, r4
 800057c:	001c      	movs	r4, r3
 800057e:	465b      	mov	r3, fp
 8000580:	0015      	movs	r5, r2
 8000582:	2b00      	cmp	r3, #0
 8000584:	db2a      	blt.n	80005dc <__udivmoddi4+0x184>
 8000586:	0026      	movs	r6, r4
 8000588:	409e      	lsls	r6, r3
 800058a:	0033      	movs	r3, r6
 800058c:	0026      	movs	r6, r4
 800058e:	4647      	mov	r7, r8
 8000590:	40be      	lsls	r6, r7
 8000592:	0032      	movs	r2, r6
 8000594:	1a80      	subs	r0, r0, r2
 8000596:	4199      	sbcs	r1, r3
 8000598:	9000      	str	r0, [sp, #0]
 800059a:	9101      	str	r1, [sp, #4]
 800059c:	e79e      	b.n	80004dc <__udivmoddi4+0x84>
 800059e:	42a3      	cmp	r3, r4
 80005a0:	d8bc      	bhi.n	800051c <__udivmoddi4+0xc4>
 80005a2:	e782      	b.n	80004aa <__udivmoddi4+0x52>
 80005a4:	4642      	mov	r2, r8
 80005a6:	2320      	movs	r3, #32
 80005a8:	2100      	movs	r1, #0
 80005aa:	1a9b      	subs	r3, r3, r2
 80005ac:	2200      	movs	r2, #0
 80005ae:	9100      	str	r1, [sp, #0]
 80005b0:	9201      	str	r2, [sp, #4]
 80005b2:	2201      	movs	r2, #1
 80005b4:	40da      	lsrs	r2, r3
 80005b6:	9201      	str	r2, [sp, #4]
 80005b8:	e785      	b.n	80004c6 <__udivmoddi4+0x6e>
 80005ba:	4642      	mov	r2, r8
 80005bc:	2320      	movs	r3, #32
 80005be:	1a9b      	subs	r3, r3, r2
 80005c0:	002a      	movs	r2, r5
 80005c2:	4646      	mov	r6, r8
 80005c4:	409a      	lsls	r2, r3
 80005c6:	0023      	movs	r3, r4
 80005c8:	40f3      	lsrs	r3, r6
 80005ca:	4644      	mov	r4, r8
 80005cc:	4313      	orrs	r3, r2
 80005ce:	002a      	movs	r2, r5
 80005d0:	40e2      	lsrs	r2, r4
 80005d2:	001c      	movs	r4, r3
 80005d4:	465b      	mov	r3, fp
 80005d6:	0015      	movs	r5, r2
 80005d8:	2b00      	cmp	r3, #0
 80005da:	dad4      	bge.n	8000586 <__udivmoddi4+0x12e>
 80005dc:	4642      	mov	r2, r8
 80005de:	002f      	movs	r7, r5
 80005e0:	2320      	movs	r3, #32
 80005e2:	0026      	movs	r6, r4
 80005e4:	4097      	lsls	r7, r2
 80005e6:	1a9b      	subs	r3, r3, r2
 80005e8:	40de      	lsrs	r6, r3
 80005ea:	003b      	movs	r3, r7
 80005ec:	4333      	orrs	r3, r6
 80005ee:	e7cd      	b.n	800058c <__udivmoddi4+0x134>

080005f0 <__clzdi2>:
 80005f0:	b510      	push	{r4, lr}
 80005f2:	2900      	cmp	r1, #0
 80005f4:	d103      	bne.n	80005fe <__clzdi2+0xe>
 80005f6:	f000 f807 	bl	8000608 <__clzsi2>
 80005fa:	3020      	adds	r0, #32
 80005fc:	e002      	b.n	8000604 <__clzdi2+0x14>
 80005fe:	0008      	movs	r0, r1
 8000600:	f000 f802 	bl	8000608 <__clzsi2>
 8000604:	bd10      	pop	{r4, pc}
 8000606:	46c0      	nop			@ (mov r8, r8)

08000608 <__clzsi2>:
 8000608:	211c      	movs	r1, #28
 800060a:	2301      	movs	r3, #1
 800060c:	041b      	lsls	r3, r3, #16
 800060e:	4298      	cmp	r0, r3
 8000610:	d301      	bcc.n	8000616 <__clzsi2+0xe>
 8000612:	0c00      	lsrs	r0, r0, #16
 8000614:	3910      	subs	r1, #16
 8000616:	0a1b      	lsrs	r3, r3, #8
 8000618:	4298      	cmp	r0, r3
 800061a:	d301      	bcc.n	8000620 <__clzsi2+0x18>
 800061c:	0a00      	lsrs	r0, r0, #8
 800061e:	3908      	subs	r1, #8
 8000620:	091b      	lsrs	r3, r3, #4
 8000622:	4298      	cmp	r0, r3
 8000624:	d301      	bcc.n	800062a <__clzsi2+0x22>
 8000626:	0900      	lsrs	r0, r0, #4
 8000628:	3904      	subs	r1, #4
 800062a:	a202      	add	r2, pc, #8	@ (adr r2, 8000634 <__clzsi2+0x2c>)
 800062c:	5c10      	ldrb	r0, [r2, r0]
 800062e:	1840      	adds	r0, r0, r1
 8000630:	4770      	bx	lr
 8000632:	46c0      	nop			@ (mov r8, r8)
 8000634:	02020304 	.word	0x02020304
 8000638:	01010101 	.word	0x01010101
	...

08000644 <Display_Update>:
	// Next digit
	currentDigit = (currentDigit + 1) % 4;
}*/

void Display_Update(void)
{
 8000644:	b590      	push	{r4, r7, lr}
 8000646:	b083      	sub	sp, #12
 8000648:	af00      	add	r7, sp, #0
    for(int i=0; i<4; i++)
 800064a:	2300      	movs	r3, #0
 800064c:	607b      	str	r3, [r7, #4]
 800064e:	e00e      	b.n	800066e <Display_Update+0x2a>
        HAL_GPIO_WritePin(digitPorts[i], digitPins[i], GPIO_PIN_RESET);
 8000650:	4b2b      	ldr	r3, [pc, #172]	@ (8000700 <Display_Update+0xbc>)
 8000652:	687a      	ldr	r2, [r7, #4]
 8000654:	0092      	lsls	r2, r2, #2
 8000656:	58d0      	ldr	r0, [r2, r3]
 8000658:	4b2a      	ldr	r3, [pc, #168]	@ (8000704 <Display_Update+0xc0>)
 800065a:	687a      	ldr	r2, [r7, #4]
 800065c:	0052      	lsls	r2, r2, #1
 800065e:	5ad3      	ldrh	r3, [r2, r3]
 8000660:	2200      	movs	r2, #0
 8000662:	0019      	movs	r1, r3
 8000664:	f001 fae4 	bl	8001c30 <HAL_GPIO_WritePin>
    for(int i=0; i<4; i++)
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	3301      	adds	r3, #1
 800066c:	607b      	str	r3, [r7, #4]
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	2b03      	cmp	r3, #3
 8000672:	dded      	ble.n	8000650 <Display_Update+0xc>
    HAL_GPIO_WritePin(digitPorts[currentDigit], digitPins[currentDigit], GPIO_PIN_SET);
 8000674:	4b24      	ldr	r3, [pc, #144]	@ (8000708 <Display_Update+0xc4>)
 8000676:	681a      	ldr	r2, [r3, #0]
 8000678:	4b21      	ldr	r3, [pc, #132]	@ (8000700 <Display_Update+0xbc>)
 800067a:	0092      	lsls	r2, r2, #2
 800067c:	58d0      	ldr	r0, [r2, r3]
 800067e:	4b22      	ldr	r3, [pc, #136]	@ (8000708 <Display_Update+0xc4>)
 8000680:	681a      	ldr	r2, [r3, #0]
 8000682:	4b20      	ldr	r3, [pc, #128]	@ (8000704 <Display_Update+0xc0>)
 8000684:	0052      	lsls	r2, r2, #1
 8000686:	5ad3      	ldrh	r3, [r2, r3]
 8000688:	2201      	movs	r2, #1
 800068a:	0019      	movs	r1, r3
 800068c:	f001 fad0 	bl	8001c30 <HAL_GPIO_WritePin>


    for(int i=0; i<8; i++)
 8000690:	2300      	movs	r3, #0
 8000692:	603b      	str	r3, [r7, #0]
 8000694:	e01c      	b.n	80006d0 <Display_Update+0x8c>
    {
        HAL_GPIO_WritePin(segmentPorts[i], segmentPins[i],
 8000696:	4b1d      	ldr	r3, [pc, #116]	@ (800070c <Display_Update+0xc8>)
 8000698:	683a      	ldr	r2, [r7, #0]
 800069a:	0092      	lsls	r2, r2, #2
 800069c:	58d0      	ldr	r0, [r2, r3]
 800069e:	4b1c      	ldr	r3, [pc, #112]	@ (8000710 <Display_Update+0xcc>)
 80006a0:	683a      	ldr	r2, [r7, #0]
 80006a2:	0052      	lsls	r2, r2, #1
 80006a4:	5ad4      	ldrh	r4, [r2, r3]
        		segmentMap[digits[currentDigit]][i] ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80006a6:	4b18      	ldr	r3, [pc, #96]	@ (8000708 <Display_Update+0xc4>)
 80006a8:	681a      	ldr	r2, [r3, #0]
 80006aa:	4b1a      	ldr	r3, [pc, #104]	@ (8000714 <Display_Update+0xd0>)
 80006ac:	0092      	lsls	r2, r2, #2
 80006ae:	58d2      	ldr	r2, [r2, r3]
 80006b0:	4b19      	ldr	r3, [pc, #100]	@ (8000718 <Display_Update+0xd4>)
 80006b2:	00d1      	lsls	r1, r2, #3
 80006b4:	683a      	ldr	r2, [r7, #0]
 80006b6:	188a      	adds	r2, r1, r2
 80006b8:	0092      	lsls	r2, r2, #2
 80006ba:	58d3      	ldr	r3, [r2, r3]
        HAL_GPIO_WritePin(segmentPorts[i], segmentPins[i],
 80006bc:	1e5a      	subs	r2, r3, #1
 80006be:	4193      	sbcs	r3, r2
 80006c0:	b2db      	uxtb	r3, r3
 80006c2:	001a      	movs	r2, r3
 80006c4:	0021      	movs	r1, r4
 80006c6:	f001 fab3 	bl	8001c30 <HAL_GPIO_WritePin>
    for(int i=0; i<8; i++)
 80006ca:	683b      	ldr	r3, [r7, #0]
 80006cc:	3301      	adds	r3, #1
 80006ce:	603b      	str	r3, [r7, #0]
 80006d0:	683b      	ldr	r3, [r7, #0]
 80006d2:	2b07      	cmp	r3, #7
 80006d4:	dddf      	ble.n	8000696 <Display_Update+0x52>
    }

    // Small delay for visibility
    osDelay(1);  // 2 ms is usually enough
 80006d6:	2001      	movs	r0, #1
 80006d8:	f004 ffb5 	bl	8005646 <osDelay>

    // Move to the next digit
    currentDigit = (currentDigit + 1) % 4;
 80006dc:	4b0a      	ldr	r3, [pc, #40]	@ (8000708 <Display_Update+0xc4>)
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	3301      	adds	r3, #1
 80006e2:	4a0e      	ldr	r2, [pc, #56]	@ (800071c <Display_Update+0xd8>)
 80006e4:	4013      	ands	r3, r2
 80006e6:	d504      	bpl.n	80006f2 <Display_Update+0xae>
 80006e8:	3b01      	subs	r3, #1
 80006ea:	2204      	movs	r2, #4
 80006ec:	4252      	negs	r2, r2
 80006ee:	4313      	orrs	r3, r2
 80006f0:	3301      	adds	r3, #1
 80006f2:	001a      	movs	r2, r3
 80006f4:	4b04      	ldr	r3, [pc, #16]	@ (8000708 <Display_Update+0xc4>)
 80006f6:	601a      	str	r2, [r3, #0]
}
 80006f8:	46c0      	nop			@ (mov r8, r8)
 80006fa:	46bd      	mov	sp, r7
 80006fc:	b003      	add	sp, #12
 80006fe:	bd90      	pop	{r4, r7, pc}
 8000700:	20000000 	.word	0x20000000
 8000704:	20000010 	.word	0x20000010
 8000708:	200001a8 	.word	0x200001a8
 800070c:	20000018 	.word	0x20000018
 8000710:	20000038 	.word	0x20000038
 8000714:	20000240 	.word	0x20000240
 8000718:	20000048 	.word	0x20000048
 800071c:	80000003 	.word	0x80000003

08000720 <UpdateDisplayFromTime>:


void UpdateDisplayFromTime(uint32_t elapsedTime)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b086      	sub	sp, #24
 8000724:	af00      	add	r7, sp, #0
 8000726:	6078      	str	r0, [r7, #4]
	// elapsedTime is in ms → convert to total seconds
	uint32_t totalSeconds = elapsedTime / 1000;
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	22fa      	movs	r2, #250	@ 0xfa
 800072c:	0091      	lsls	r1, r2, #2
 800072e:	0018      	movs	r0, r3
 8000730:	f7ff fcfc 	bl	800012c <__udivsi3>
 8000734:	0003      	movs	r3, r0
 8000736:	617b      	str	r3, [r7, #20]

	uint32_t minutes = totalSeconds / 60;
 8000738:	697b      	ldr	r3, [r7, #20]
 800073a:	213c      	movs	r1, #60	@ 0x3c
 800073c:	0018      	movs	r0, r3
 800073e:	f7ff fcf5 	bl	800012c <__udivsi3>
 8000742:	0003      	movs	r3, r0
 8000744:	613b      	str	r3, [r7, #16]
	uint32_t seconds = totalSeconds % 60;
 8000746:	697b      	ldr	r3, [r7, #20]
 8000748:	213c      	movs	r1, #60	@ 0x3c
 800074a:	0018      	movs	r0, r3
 800074c:	f7ff fd74 	bl	8000238 <__aeabi_uidivmod>
 8000750:	000b      	movs	r3, r1
 8000752:	60fb      	str	r3, [r7, #12]

	// Fill digits for MM:SS
	digits[0] = (minutes / 10) % 10; // tens of minutes
 8000754:	693b      	ldr	r3, [r7, #16]
 8000756:	210a      	movs	r1, #10
 8000758:	0018      	movs	r0, r3
 800075a:	f7ff fce7 	bl	800012c <__udivsi3>
 800075e:	0003      	movs	r3, r0
 8000760:	210a      	movs	r1, #10
 8000762:	0018      	movs	r0, r3
 8000764:	f7ff fd68 	bl	8000238 <__aeabi_uidivmod>
 8000768:	000b      	movs	r3, r1
 800076a:	001a      	movs	r2, r3
 800076c:	4b12      	ldr	r3, [pc, #72]	@ (80007b8 <UpdateDisplayFromTime+0x98>)
 800076e:	601a      	str	r2, [r3, #0]
	digits[1] = minutes % 10;        // ones of minutes
 8000770:	693b      	ldr	r3, [r7, #16]
 8000772:	210a      	movs	r1, #10
 8000774:	0018      	movs	r0, r3
 8000776:	f7ff fd5f 	bl	8000238 <__aeabi_uidivmod>
 800077a:	000b      	movs	r3, r1
 800077c:	001a      	movs	r2, r3
 800077e:	4b0e      	ldr	r3, [pc, #56]	@ (80007b8 <UpdateDisplayFromTime+0x98>)
 8000780:	605a      	str	r2, [r3, #4]
	digits[2] = (seconds / 10) % 10; // tens of seconds
 8000782:	68fb      	ldr	r3, [r7, #12]
 8000784:	210a      	movs	r1, #10
 8000786:	0018      	movs	r0, r3
 8000788:	f7ff fcd0 	bl	800012c <__udivsi3>
 800078c:	0003      	movs	r3, r0
 800078e:	210a      	movs	r1, #10
 8000790:	0018      	movs	r0, r3
 8000792:	f7ff fd51 	bl	8000238 <__aeabi_uidivmod>
 8000796:	000b      	movs	r3, r1
 8000798:	001a      	movs	r2, r3
 800079a:	4b07      	ldr	r3, [pc, #28]	@ (80007b8 <UpdateDisplayFromTime+0x98>)
 800079c:	609a      	str	r2, [r3, #8]
	digits[3] = seconds % 10;        // ones of seconds
 800079e:	68fb      	ldr	r3, [r7, #12]
 80007a0:	210a      	movs	r1, #10
 80007a2:	0018      	movs	r0, r3
 80007a4:	f7ff fd48 	bl	8000238 <__aeabi_uidivmod>
 80007a8:	000b      	movs	r3, r1
 80007aa:	001a      	movs	r2, r3
 80007ac:	4b02      	ldr	r3, [pc, #8]	@ (80007b8 <UpdateDisplayFromTime+0x98>)
 80007ae:	60da      	str	r2, [r3, #12]
}
 80007b0:	46c0      	nop			@ (mov r8, r8)
 80007b2:	46bd      	mov	sp, r7
 80007b4:	b006      	add	sp, #24
 80007b6:	bd80      	pop	{r7, pc}
 80007b8:	20000240 	.word	0x20000240

080007bc <StartDefaultTask>:

void StartDefaultTask(void const * argument)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b082      	sub	sp, #8
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	6078      	str	r0, [r7, #4]
	for(;;)
	{
		osDelay(1);
 80007c4:	2001      	movs	r0, #1
 80007c6:	f004 ff3e 	bl	8005646 <osDelay>
 80007ca:	e7fb      	b.n	80007c4 <StartDefaultTask+0x8>

080007cc <StartTask01>:
	}
}

void StartTask01(void const * argument)
{
 80007cc:	b590      	push	{r4, r7, lr}
 80007ce:	b093      	sub	sp, #76	@ 0x4c
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]
	for(;;)
	{
		if (startFlag == 1)  // Start primit sau reluare
 80007d4:	4b3a      	ldr	r3, [pc, #232]	@ (80008c0 <StartTask01+0xf4>)
 80007d6:	781b      	ldrb	r3, [r3, #0]
 80007d8:	b2db      	uxtb	r3, r3
 80007da:	2b01      	cmp	r3, #1
 80007dc:	d10b      	bne.n	80007f6 <StartTask01+0x2a>
		{
			startTime = HAL_GetTick(); // momentul reluării
 80007de:	f000 fdb3 	bl	8001348 <HAL_GetTick>
 80007e2:	0002      	movs	r2, r0
 80007e4:	4b37      	ldr	r3, [pc, #220]	@ (80008c4 <StartTask01+0xf8>)
 80007e6:	601a      	str	r2, [r3, #0]
			lastRunTime = startTime;
 80007e8:	4b36      	ldr	r3, [pc, #216]	@ (80008c4 <StartTask01+0xf8>)
 80007ea:	681a      	ldr	r2, [r3, #0]
 80007ec:	4b36      	ldr	r3, [pc, #216]	@ (80008c8 <StartTask01+0xfc>)
 80007ee:	601a      	str	r2, [r3, #0]
			startFlag = 2; // semnal că timerul rulează
 80007f0:	4b33      	ldr	r3, [pc, #204]	@ (80008c0 <StartTask01+0xf4>)
 80007f2:	2202      	movs	r2, #2
 80007f4:	701a      	strb	r2, [r3, #0]
		}

		if (startFlag == 2)  // Timerul rulează
 80007f6:	4b32      	ldr	r3, [pc, #200]	@ (80008c0 <StartTask01+0xf4>)
 80007f8:	781b      	ldrb	r3, [r3, #0]
 80007fa:	b2db      	uxtb	r3, r3
 80007fc:	2b02      	cmp	r3, #2
 80007fe:	d12a      	bne.n	8000856 <StartTask01+0x8a>
		{
			uint32_t currentTime = HAL_GetTick();
 8000800:	f000 fda2 	bl	8001348 <HAL_GetTick>
 8000804:	0003      	movs	r3, r0
 8000806:	643b      	str	r3, [r7, #64]	@ 0x40
			if ((currentTime - lastRunTime) >= 500) // au trecut 500 ms
 8000808:	4b2f      	ldr	r3, [pc, #188]	@ (80008c8 <StartTask01+0xfc>)
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800080e:	1ad2      	subs	r2, r2, r3
 8000810:	23fa      	movs	r3, #250	@ 0xfa
 8000812:	005b      	lsls	r3, r3, #1
 8000814:	429a      	cmp	r2, r3
 8000816:	d34f      	bcc.n	80008b8 <StartTask01+0xec>
			{
				lastRunTime = currentTime;
 8000818:	4b2b      	ldr	r3, [pc, #172]	@ (80008c8 <StartTask01+0xfc>)
 800081a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800081c:	601a      	str	r2, [r3, #0]

				// Calculăm timpul total până acum
				totalTime = elapsedTime + (currentTime - startTime);
 800081e:	4b29      	ldr	r3, [pc, #164]	@ (80008c4 <StartTask01+0xf8>)
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8000824:	1ad2      	subs	r2, r2, r3
 8000826:	4b29      	ldr	r3, [pc, #164]	@ (80008cc <StartTask01+0x100>)
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	18d2      	adds	r2, r2, r3
 800082c:	4b28      	ldr	r3, [pc, #160]	@ (80008d0 <StartTask01+0x104>)
 800082e:	601a      	str	r2, [r3, #0]

				// Trimitem timpul prin UART
				char buffer[50];
				int len = sprintf(buffer, "Timp: %lu ms\r\n", totalTime);
 8000830:	4b27      	ldr	r3, [pc, #156]	@ (80008d0 <StartTask01+0x104>)
 8000832:	681a      	ldr	r2, [r3, #0]
 8000834:	4927      	ldr	r1, [pc, #156]	@ (80008d4 <StartTask01+0x108>)
 8000836:	2408      	movs	r4, #8
 8000838:	193b      	adds	r3, r7, r4
 800083a:	0018      	movs	r0, r3
 800083c:	f005 ff00 	bl	8006640 <siprintf>
 8000840:	0003      	movs	r3, r0
 8000842:	63fb      	str	r3, [r7, #60]	@ 0x3c
				HAL_UART_Transmit(&huart2, (uint8_t*)buffer, len, HAL_MAX_DELAY);
 8000844:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000846:	b29a      	uxth	r2, r3
 8000848:	2301      	movs	r3, #1
 800084a:	425b      	negs	r3, r3
 800084c:	1939      	adds	r1, r7, r4
 800084e:	4822      	ldr	r0, [pc, #136]	@ (80008d8 <StartTask01+0x10c>)
 8000850:	f002 fdd0 	bl	80033f4 <HAL_UART_Transmit>
 8000854:	e030      	b.n	80008b8 <StartTask01+0xec>

				// HAL_GPIO_TogglePin(GPIOA, LED_GREEN_Pin); // optional
			}
		}
		else if (startFlag == 3)  // Stop primit
 8000856:	4b1a      	ldr	r3, [pc, #104]	@ (80008c0 <StartTask01+0xf4>)
 8000858:	781b      	ldrb	r3, [r3, #0]
 800085a:	b2db      	uxtb	r3, r3
 800085c:	2b03      	cmp	r3, #3
 800085e:	d120      	bne.n	80008a2 <StartTask01+0xd6>
		{
			// Acumulăm timpul până la oprire
			elapsedTime += HAL_GetTick() - startTime;
 8000860:	f000 fd72 	bl	8001348 <HAL_GetTick>
 8000864:	0002      	movs	r2, r0
 8000866:	4b17      	ldr	r3, [pc, #92]	@ (80008c4 <StartTask01+0xf8>)
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	1ad2      	subs	r2, r2, r3
 800086c:	4b17      	ldr	r3, [pc, #92]	@ (80008cc <StartTask01+0x100>)
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	18d2      	adds	r2, r2, r3
 8000872:	4b16      	ldr	r3, [pc, #88]	@ (80008cc <StartTask01+0x100>)
 8000874:	601a      	str	r2, [r3, #0]
			startFlag = 0; // pauză
 8000876:	4b12      	ldr	r3, [pc, #72]	@ (80008c0 <StartTask01+0xf4>)
 8000878:	2200      	movs	r2, #0
 800087a:	701a      	strb	r2, [r3, #0]

			// Trimitem timpul total acumulat
			char buffer[50];
			int len = sprintf(buffer, "Timp total: %lu ms\r\n", elapsedTime);
 800087c:	4b13      	ldr	r3, [pc, #76]	@ (80008cc <StartTask01+0x100>)
 800087e:	681a      	ldr	r2, [r3, #0]
 8000880:	4916      	ldr	r1, [pc, #88]	@ (80008dc <StartTask01+0x110>)
 8000882:	2408      	movs	r4, #8
 8000884:	193b      	adds	r3, r7, r4
 8000886:	0018      	movs	r0, r3
 8000888:	f005 feda 	bl	8006640 <siprintf>
 800088c:	0003      	movs	r3, r0
 800088e:	647b      	str	r3, [r7, #68]	@ 0x44
			HAL_UART_Transmit(&huart2, (uint8_t*)buffer, len, HAL_MAX_DELAY);
 8000890:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000892:	b29a      	uxth	r2, r3
 8000894:	2301      	movs	r3, #1
 8000896:	425b      	negs	r3, r3
 8000898:	1939      	adds	r1, r7, r4
 800089a:	480f      	ldr	r0, [pc, #60]	@ (80008d8 <StartTask01+0x10c>)
 800089c:	f002 fdaa 	bl	80033f4 <HAL_UART_Transmit>
 80008a0:	e00a      	b.n	80008b8 <StartTask01+0xec>
		}
		else if (startFlag == 4)  // Reset primit
 80008a2:	4b07      	ldr	r3, [pc, #28]	@ (80008c0 <StartTask01+0xf4>)
 80008a4:	781b      	ldrb	r3, [r3, #0]
 80008a6:	b2db      	uxtb	r3, r3
 80008a8:	2b04      	cmp	r3, #4
 80008aa:	d105      	bne.n	80008b8 <StartTask01+0xec>
		{
			elapsedTime = 0;
 80008ac:	4b07      	ldr	r3, [pc, #28]	@ (80008cc <StartTask01+0x100>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	601a      	str	r2, [r3, #0]
			startFlag = 0; // reset complet
 80008b2:	4b03      	ldr	r3, [pc, #12]	@ (80008c0 <StartTask01+0xf4>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	701a      	strb	r2, [r3, #0]
		}

		osDelay(1);
 80008b8:	2001      	movs	r0, #1
 80008ba:	f004 fec4 	bl	8005646 <osDelay>
		if (startFlag == 1)  // Start primit sau reluare
 80008be:	e789      	b.n	80007d4 <StartTask01+0x8>
 80008c0:	20000228 	.word	0x20000228
 80008c4:	2000022c 	.word	0x2000022c
 80008c8:	20000234 	.word	0x20000234
 80008cc:	20000230 	.word	0x20000230
 80008d0:	20000238 	.word	0x20000238
 80008d4:	08007054 	.word	0x08007054
 80008d8:	20000300 	.word	0x20000300
 80008dc:	08007064 	.word	0x08007064

080008e0 <StartTask02>:
	}
}

void StartTask02(void const * argument)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b084      	sub	sp, #16
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
	// Recepție UART activă permanent
	HAL_UART_Receive_IT(&huart2, &rxData, 1);
 80008e8:	4911      	ldr	r1, [pc, #68]	@ (8000930 <StartTask02+0x50>)
 80008ea:	4b12      	ldr	r3, [pc, #72]	@ (8000934 <StartTask02+0x54>)
 80008ec:	2201      	movs	r2, #1
 80008ee:	0018      	movs	r0, r3
 80008f0:	f002 fe24 	bl	800353c <HAL_UART_Receive_IT>

	for (;;)
	{
	    uint32_t now = HAL_GetTick();
 80008f4:	f000 fd28 	bl	8001348 <HAL_GetTick>
 80008f8:	0003      	movs	r3, r0
 80008fa:	60fb      	str	r3, [r7, #12]

	    // Check if debug mode is active and less than 2 sec has passed
	    if(debugActive && (now - debugTimestamp < 2000))
 80008fc:	4b0e      	ldr	r3, [pc, #56]	@ (8000938 <StartTask02+0x58>)
 80008fe:	781b      	ldrb	r3, [r3, #0]
 8000900:	2b00      	cmp	r3, #0
 8000902:	d00a      	beq.n	800091a <StartTask02+0x3a>
 8000904:	4b0d      	ldr	r3, [pc, #52]	@ (800093c <StartTask02+0x5c>)
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	68fa      	ldr	r2, [r7, #12]
 800090a:	1ad2      	subs	r2, r2, r3
 800090c:	23fa      	movs	r3, #250	@ 0xfa
 800090e:	00db      	lsls	r3, r3, #3
 8000910:	429a      	cmp	r2, r3
 8000912:	d202      	bcs.n	800091a <StartTask02+0x3a>
	    {
	        // Do not update time, just refresh the debug display
	        Display_Update();
 8000914:	f7ff fe96 	bl	8000644 <Display_Update>
 8000918:	e009      	b.n	800092e <StartTask02+0x4e>
	    }
	    else
	    {
	        debugActive = 0;               // disable debug mode after 2 sec
 800091a:	4b07      	ldr	r3, [pc, #28]	@ (8000938 <StartTask02+0x58>)
 800091c:	2200      	movs	r2, #0
 800091e:	701a      	strb	r2, [r3, #0]
	        UpdateDisplayFromTime(totalTime); // normal time update
 8000920:	4b07      	ldr	r3, [pc, #28]	@ (8000940 <StartTask02+0x60>)
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	0018      	movs	r0, r3
 8000926:	f7ff fefb 	bl	8000720 <UpdateDisplayFromTime>
	        Display_Update();
 800092a:	f7ff fe8b 	bl	8000644 <Display_Update>
	{
 800092e:	e7e1      	b.n	80008f4 <StartTask02+0x14>
 8000930:	2000023c 	.word	0x2000023c
 8000934:	20000300 	.word	0x20000300
 8000938:	20000254 	.word	0x20000254
 800093c:	20000250 	.word	0x20000250
 8000940:	20000238 	.word	0x20000238

08000944 <HAL_UART_RxCpltCallback>:

}

// Callback UART
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000944:	b590      	push	{r4, r7, lr}
 8000946:	b087      	sub	sp, #28
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART2)
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	4a35      	ldr	r2, [pc, #212]	@ (8000a28 <HAL_UART_RxCpltCallback+0xe4>)
 8000952:	4293      	cmp	r3, r2
 8000954:	d163      	bne.n	8000a1e <HAL_UART_RxCpltCallback+0xda>
	{
		// Debug: trimitem caracterul primit înapoi
		HAL_UART_Transmit(&huart2, &rxData, 1, HAL_MAX_DELAY);
 8000956:	2301      	movs	r3, #1
 8000958:	425b      	negs	r3, r3
 800095a:	4934      	ldr	r1, [pc, #208]	@ (8000a2c <HAL_UART_RxCpltCallback+0xe8>)
 800095c:	4834      	ldr	r0, [pc, #208]	@ (8000a30 <HAL_UART_RxCpltCallback+0xec>)
 800095e:	2201      	movs	r2, #1
 8000960:	f002 fd48 	bl	80033f4 <HAL_UART_Transmit>

		if (rxData == 'S')  // Start
 8000964:	4b31      	ldr	r3, [pc, #196]	@ (8000a2c <HAL_UART_RxCpltCallback+0xe8>)
 8000966:	781b      	ldrb	r3, [r3, #0]
 8000968:	2b53      	cmp	r3, #83	@ 0x53
 800096a:	d10a      	bne.n	8000982 <HAL_UART_RxCpltCallback+0x3e>
		{
			HAL_GPIO_WritePin(GPIOA, LED_GREEN_Pin, GPIO_PIN_SET);
 800096c:	23a0      	movs	r3, #160	@ 0xa0
 800096e:	05db      	lsls	r3, r3, #23
 8000970:	2201      	movs	r2, #1
 8000972:	2120      	movs	r1, #32
 8000974:	0018      	movs	r0, r3
 8000976:	f001 f95b 	bl	8001c30 <HAL_GPIO_WritePin>
			startFlag = 1;
 800097a:	4b2e      	ldr	r3, [pc, #184]	@ (8000a34 <HAL_UART_RxCpltCallback+0xf0>)
 800097c:	2201      	movs	r2, #1
 800097e:	701a      	strb	r2, [r3, #0]
 8000980:	e047      	b.n	8000a12 <HAL_UART_RxCpltCallback+0xce>
		}
		else if (rxData == 'T') // Stop
 8000982:	4b2a      	ldr	r3, [pc, #168]	@ (8000a2c <HAL_UART_RxCpltCallback+0xe8>)
 8000984:	781b      	ldrb	r3, [r3, #0]
 8000986:	2b54      	cmp	r3, #84	@ 0x54
 8000988:	d10a      	bne.n	80009a0 <HAL_UART_RxCpltCallback+0x5c>
		{
			HAL_GPIO_WritePin(GPIOA, LED_GREEN_Pin, GPIO_PIN_RESET);
 800098a:	23a0      	movs	r3, #160	@ 0xa0
 800098c:	05db      	lsls	r3, r3, #23
 800098e:	2200      	movs	r2, #0
 8000990:	2120      	movs	r1, #32
 8000992:	0018      	movs	r0, r3
 8000994:	f001 f94c 	bl	8001c30 <HAL_GPIO_WritePin>
			startFlag = 3;
 8000998:	4b26      	ldr	r3, [pc, #152]	@ (8000a34 <HAL_UART_RxCpltCallback+0xf0>)
 800099a:	2203      	movs	r2, #3
 800099c:	701a      	strb	r2, [r3, #0]
 800099e:	e038      	b.n	8000a12 <HAL_UART_RxCpltCallback+0xce>
		}
		else if (rxData == 'R') // Reset (opțional)
 80009a0:	4b22      	ldr	r3, [pc, #136]	@ (8000a2c <HAL_UART_RxCpltCallback+0xe8>)
 80009a2:	781b      	ldrb	r3, [r3, #0]
 80009a4:	2b52      	cmp	r3, #82	@ 0x52
 80009a6:	d109      	bne.n	80009bc <HAL_UART_RxCpltCallback+0x78>
		{
			startFlag = 4; // va reseta timerul
 80009a8:	4b22      	ldr	r3, [pc, #136]	@ (8000a34 <HAL_UART_RxCpltCallback+0xf0>)
 80009aa:	2204      	movs	r2, #4
 80009ac:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_TogglePin(GPIOA, LED_GREEN_Pin);
 80009ae:	23a0      	movs	r3, #160	@ 0xa0
 80009b0:	05db      	lsls	r3, r3, #23
 80009b2:	2120      	movs	r1, #32
 80009b4:	0018      	movs	r0, r3
 80009b6:	f001 f958 	bl	8001c6a <HAL_GPIO_TogglePin>
 80009ba:	e02a      	b.n	8000a12 <HAL_UART_RxCpltCallback+0xce>
		}
		else if (rxData == 'Z') // Debug: afișăm cifra 1
 80009bc:	4b1b      	ldr	r3, [pc, #108]	@ (8000a2c <HAL_UART_RxCpltCallback+0xe8>)
 80009be:	781b      	ldrb	r3, [r3, #0]
 80009c0:	2b5a      	cmp	r3, #90	@ 0x5a
 80009c2:	d126      	bne.n	8000a12 <HAL_UART_RxCpltCallback+0xce>
		{
		    digits[0] = 10;
 80009c4:	4b1c      	ldr	r3, [pc, #112]	@ (8000a38 <HAL_UART_RxCpltCallback+0xf4>)
 80009c6:	220a      	movs	r2, #10
 80009c8:	601a      	str	r2, [r3, #0]
		    digits[1] = 10;
 80009ca:	4b1b      	ldr	r3, [pc, #108]	@ (8000a38 <HAL_UART_RxCpltCallback+0xf4>)
 80009cc:	220a      	movs	r2, #10
 80009ce:	605a      	str	r2, [r3, #4]
		    digits[2] = 10;
 80009d0:	4b19      	ldr	r3, [pc, #100]	@ (8000a38 <HAL_UART_RxCpltCallback+0xf4>)
 80009d2:	220a      	movs	r2, #10
 80009d4:	609a      	str	r2, [r3, #8]
		    digits[3] = 10;
 80009d6:	4b18      	ldr	r3, [pc, #96]	@ (8000a38 <HAL_UART_RxCpltCallback+0xf4>)
 80009d8:	220a      	movs	r2, #10
 80009da:	60da      	str	r2, [r3, #12]

		    debugActive = 1;                 // enable debug
 80009dc:	4b17      	ldr	r3, [pc, #92]	@ (8000a3c <HAL_UART_RxCpltCallback+0xf8>)
 80009de:	2201      	movs	r2, #1
 80009e0:	701a      	strb	r2, [r3, #0]
		    debugTimestamp = HAL_GetTick();  // store the current time
 80009e2:	f000 fcb1 	bl	8001348 <HAL_GetTick>
 80009e6:	0002      	movs	r2, r0
 80009e8:	4b15      	ldr	r3, [pc, #84]	@ (8000a40 <HAL_UART_RxCpltCallback+0xfc>)
 80009ea:	601a      	str	r2, [r3, #0]

		    char dbgMsg[] = "DEBUG: \r\n";
 80009ec:	240c      	movs	r4, #12
 80009ee:	193b      	adds	r3, r7, r4
 80009f0:	4a14      	ldr	r2, [pc, #80]	@ (8000a44 <HAL_UART_RxCpltCallback+0x100>)
 80009f2:	ca03      	ldmia	r2!, {r0, r1}
 80009f4:	c303      	stmia	r3!, {r0, r1}
 80009f6:	8812      	ldrh	r2, [r2, #0]
 80009f8:	801a      	strh	r2, [r3, #0]
		    HAL_UART_Transmit(&huart2, (uint8_t*)dbgMsg, strlen(dbgMsg), HAL_MAX_DELAY);
 80009fa:	193b      	adds	r3, r7, r4
 80009fc:	0018      	movs	r0, r3
 80009fe:	f7ff fb83 	bl	8000108 <strlen>
 8000a02:	0003      	movs	r3, r0
 8000a04:	b29a      	uxth	r2, r3
 8000a06:	2301      	movs	r3, #1
 8000a08:	425b      	negs	r3, r3
 8000a0a:	1939      	adds	r1, r7, r4
 8000a0c:	4808      	ldr	r0, [pc, #32]	@ (8000a30 <HAL_UART_RxCpltCallback+0xec>)
 8000a0e:	f002 fcf1 	bl	80033f4 <HAL_UART_Transmit>
		}


		// Re-armăm recepția
		HAL_UART_Receive_IT(&huart2, &rxData, 1);
 8000a12:	4906      	ldr	r1, [pc, #24]	@ (8000a2c <HAL_UART_RxCpltCallback+0xe8>)
 8000a14:	4b06      	ldr	r3, [pc, #24]	@ (8000a30 <HAL_UART_RxCpltCallback+0xec>)
 8000a16:	2201      	movs	r2, #1
 8000a18:	0018      	movs	r0, r3
 8000a1a:	f002 fd8f 	bl	800353c <HAL_UART_Receive_IT>
	}
}
 8000a1e:	46c0      	nop			@ (mov r8, r8)
 8000a20:	46bd      	mov	sp, r7
 8000a22:	b007      	add	sp, #28
 8000a24:	bd90      	pop	{r4, r7, pc}
 8000a26:	46c0      	nop			@ (mov r8, r8)
 8000a28:	40004400 	.word	0x40004400
 8000a2c:	2000023c 	.word	0x2000023c
 8000a30:	20000300 	.word	0x20000300
 8000a34:	20000228 	.word	0x20000228
 8000a38:	20000240 	.word	0x20000240
 8000a3c:	20000254 	.word	0x20000254
 8000a40:	20000250 	.word	0x20000250
 8000a44:	0800707c 	.word	0x0800707c

08000a48 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a48:	b5b0      	push	{r4, r5, r7, lr}
 8000a4a:	b090      	sub	sp, #64	@ 0x40
 8000a4c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a4e:	f000 fc49 	bl	80012e4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a52:	f000 f845 	bl	8000ae0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a56:	f000 f94d 	bl	8000cf4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000a5a:	f000 f92d 	bl	8000cb8 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000a5e:	f000 f8dd 	bl	8000c1c <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000a62:	f000 f885 	bl	8000b70 <MX_TIM2_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000a66:	252c      	movs	r5, #44	@ 0x2c
 8000a68:	197b      	adds	r3, r7, r5
 8000a6a:	4a17      	ldr	r2, [pc, #92]	@ (8000ac8 <main+0x80>)
 8000a6c:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000a6e:	c313      	stmia	r3!, {r0, r1, r4}
 8000a70:	ca03      	ldmia	r2!, {r0, r1}
 8000a72:	c303      	stmia	r3!, {r0, r1}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000a74:	197b      	adds	r3, r7, r5
 8000a76:	2100      	movs	r1, #0
 8000a78:	0018      	movs	r0, r3
 8000a7a:	f004 fdbc 	bl	80055f6 <osThreadCreate>
 8000a7e:	0002      	movs	r2, r0
 8000a80:	4b12      	ldr	r3, [pc, #72]	@ (8000acc <main+0x84>)
 8000a82:	601a      	str	r2, [r3, #0]

  /* definition and creation of myTask02 */
  osThreadDef(myTask02, StartTask02, osPriorityBelowNormal, 0, 128);
 8000a84:	2518      	movs	r5, #24
 8000a86:	197b      	adds	r3, r7, r5
 8000a88:	4a11      	ldr	r2, [pc, #68]	@ (8000ad0 <main+0x88>)
 8000a8a:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000a8c:	c313      	stmia	r3!, {r0, r1, r4}
 8000a8e:	ca03      	ldmia	r2!, {r0, r1}
 8000a90:	c303      	stmia	r3!, {r0, r1}
  myTask02Handle = osThreadCreate(osThread(myTask02), NULL);
 8000a92:	197b      	adds	r3, r7, r5
 8000a94:	2100      	movs	r1, #0
 8000a96:	0018      	movs	r0, r3
 8000a98:	f004 fdad 	bl	80055f6 <osThreadCreate>
 8000a9c:	0002      	movs	r2, r0
 8000a9e:	4b0d      	ldr	r3, [pc, #52]	@ (8000ad4 <main+0x8c>)
 8000aa0:	601a      	str	r2, [r3, #0]

  /* definition and creation of myTask01 */
  osThreadDef(myTask01, StartTask01, osPriorityRealtime, 0, 128);
 8000aa2:	1d3b      	adds	r3, r7, #4
 8000aa4:	4a0c      	ldr	r2, [pc, #48]	@ (8000ad8 <main+0x90>)
 8000aa6:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000aa8:	c313      	stmia	r3!, {r0, r1, r4}
 8000aaa:	ca03      	ldmia	r2!, {r0, r1}
 8000aac:	c303      	stmia	r3!, {r0, r1}
  myTask01Handle = osThreadCreate(osThread(myTask01), NULL);
 8000aae:	1d3b      	adds	r3, r7, #4
 8000ab0:	2100      	movs	r1, #0
 8000ab2:	0018      	movs	r0, r3
 8000ab4:	f004 fd9f 	bl	80055f6 <osThreadCreate>
 8000ab8:	0002      	movs	r2, r0
 8000aba:	4b08      	ldr	r3, [pc, #32]	@ (8000adc <main+0x94>)
 8000abc:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000abe:	f004 fd92 	bl	80055e6 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000ac2:	46c0      	nop			@ (mov r8, r8)
 8000ac4:	e7fd      	b.n	8000ac2 <main+0x7a>
 8000ac6:	46c0      	nop			@ (mov r8, r8)
 8000ac8:	08007094 	.word	0x08007094
 8000acc:	20000394 	.word	0x20000394
 8000ad0:	080070b4 	.word	0x080070b4
 8000ad4:	20000398 	.word	0x20000398
 8000ad8:	080070d4 	.word	0x080070d4
 8000adc:	2000039c 	.word	0x2000039c

08000ae0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ae0:	b590      	push	{r4, r7, lr}
 8000ae2:	b093      	sub	sp, #76	@ 0x4c
 8000ae4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ae6:	2410      	movs	r4, #16
 8000ae8:	193b      	adds	r3, r7, r4
 8000aea:	0018      	movs	r0, r3
 8000aec:	2338      	movs	r3, #56	@ 0x38
 8000aee:	001a      	movs	r2, r3
 8000af0:	2100      	movs	r1, #0
 8000af2:	f005 fdc5 	bl	8006680 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000af6:	003b      	movs	r3, r7
 8000af8:	0018      	movs	r0, r3
 8000afa:	2310      	movs	r3, #16
 8000afc:	001a      	movs	r2, r3
 8000afe:	2100      	movs	r1, #0
 8000b00:	f005 fdbe 	bl	8006680 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b04:	2380      	movs	r3, #128	@ 0x80
 8000b06:	009b      	lsls	r3, r3, #2
 8000b08:	0018      	movs	r0, r3
 8000b0a:	f001 f8c9 	bl	8001ca0 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b0e:	193b      	adds	r3, r7, r4
 8000b10:	2202      	movs	r2, #2
 8000b12:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b14:	193b      	adds	r3, r7, r4
 8000b16:	2280      	movs	r2, #128	@ 0x80
 8000b18:	0052      	lsls	r2, r2, #1
 8000b1a:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000b1c:	193b      	adds	r3, r7, r4
 8000b1e:	2200      	movs	r2, #0
 8000b20:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b22:	193b      	adds	r3, r7, r4
 8000b24:	2240      	movs	r2, #64	@ 0x40
 8000b26:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000b28:	193b      	adds	r3, r7, r4
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b2e:	193b      	adds	r3, r7, r4
 8000b30:	0018      	movs	r0, r3
 8000b32:	f001 f901 	bl	8001d38 <HAL_RCC_OscConfig>
 8000b36:	1e03      	subs	r3, r0, #0
 8000b38:	d001      	beq.n	8000b3e <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8000b3a:	f000 f9d7 	bl	8000eec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b3e:	003b      	movs	r3, r7
 8000b40:	2207      	movs	r2, #7
 8000b42:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000b44:	003b      	movs	r3, r7
 8000b46:	2200      	movs	r2, #0
 8000b48:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b4a:	003b      	movs	r3, r7
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b50:	003b      	movs	r3, r7
 8000b52:	2200      	movs	r2, #0
 8000b54:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000b56:	003b      	movs	r3, r7
 8000b58:	2100      	movs	r1, #0
 8000b5a:	0018      	movs	r0, r3
 8000b5c:	f001 fc06 	bl	800236c <HAL_RCC_ClockConfig>
 8000b60:	1e03      	subs	r3, r0, #0
 8000b62:	d001      	beq.n	8000b68 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8000b64:	f000 f9c2 	bl	8000eec <Error_Handler>
  }
}
 8000b68:	46c0      	nop			@ (mov r8, r8)
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	b013      	add	sp, #76	@ 0x4c
 8000b6e:	bd90      	pop	{r4, r7, pc}

08000b70 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b088      	sub	sp, #32
 8000b74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b76:	2310      	movs	r3, #16
 8000b78:	18fb      	adds	r3, r7, r3
 8000b7a:	0018      	movs	r0, r3
 8000b7c:	2310      	movs	r3, #16
 8000b7e:	001a      	movs	r2, r3
 8000b80:	2100      	movs	r1, #0
 8000b82:	f005 fd7d 	bl	8006680 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b86:	1d3b      	adds	r3, r7, #4
 8000b88:	0018      	movs	r0, r3
 8000b8a:	230c      	movs	r3, #12
 8000b8c:	001a      	movs	r2, r3
 8000b8e:	2100      	movs	r1, #0
 8000b90:	f005 fd76 	bl	8006680 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000b94:	4b1e      	ldr	r3, [pc, #120]	@ (8000c10 <MX_TIM2_Init+0xa0>)
 8000b96:	2280      	movs	r2, #128	@ 0x80
 8000b98:	05d2      	lsls	r2, r2, #23
 8000b9a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 16000-1;
 8000b9c:	4b1c      	ldr	r3, [pc, #112]	@ (8000c10 <MX_TIM2_Init+0xa0>)
 8000b9e:	4a1d      	ldr	r2, [pc, #116]	@ (8000c14 <MX_TIM2_Init+0xa4>)
 8000ba0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ba2:	4b1b      	ldr	r3, [pc, #108]	@ (8000c10 <MX_TIM2_Init+0xa0>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8000ba8:	4b19      	ldr	r3, [pc, #100]	@ (8000c10 <MX_TIM2_Init+0xa0>)
 8000baa:	4a1b      	ldr	r2, [pc, #108]	@ (8000c18 <MX_TIM2_Init+0xa8>)
 8000bac:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bae:	4b18      	ldr	r3, [pc, #96]	@ (8000c10 <MX_TIM2_Init+0xa0>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bb4:	4b16      	ldr	r3, [pc, #88]	@ (8000c10 <MX_TIM2_Init+0xa0>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000bba:	4b15      	ldr	r3, [pc, #84]	@ (8000c10 <MX_TIM2_Init+0xa0>)
 8000bbc:	0018      	movs	r0, r3
 8000bbe:	f001 ff61 	bl	8002a84 <HAL_TIM_Base_Init>
 8000bc2:	1e03      	subs	r3, r0, #0
 8000bc4:	d001      	beq.n	8000bca <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8000bc6:	f000 f991 	bl	8000eec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000bca:	2110      	movs	r1, #16
 8000bcc:	187b      	adds	r3, r7, r1
 8000bce:	2280      	movs	r2, #128	@ 0x80
 8000bd0:	0152      	lsls	r2, r2, #5
 8000bd2:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000bd4:	187a      	adds	r2, r7, r1
 8000bd6:	4b0e      	ldr	r3, [pc, #56]	@ (8000c10 <MX_TIM2_Init+0xa0>)
 8000bd8:	0011      	movs	r1, r2
 8000bda:	0018      	movs	r0, r3
 8000bdc:	f002 f90e 	bl	8002dfc <HAL_TIM_ConfigClockSource>
 8000be0:	1e03      	subs	r3, r0, #0
 8000be2:	d001      	beq.n	8000be8 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8000be4:	f000 f982 	bl	8000eec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000be8:	1d3b      	adds	r3, r7, #4
 8000bea:	2200      	movs	r2, #0
 8000bec:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bee:	1d3b      	adds	r3, r7, #4
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000bf4:	1d3a      	adds	r2, r7, #4
 8000bf6:	4b06      	ldr	r3, [pc, #24]	@ (8000c10 <MX_TIM2_Init+0xa0>)
 8000bf8:	0011      	movs	r1, r2
 8000bfa:	0018      	movs	r0, r3
 8000bfc:	f002 fb1e 	bl	800323c <HAL_TIMEx_MasterConfigSynchronization>
 8000c00:	1e03      	subs	r3, r0, #0
 8000c02:	d001      	beq.n	8000c08 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8000c04:	f000 f972 	bl	8000eec <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000c08:	46c0      	nop			@ (mov r8, r8)
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	b008      	add	sp, #32
 8000c0e:	bd80      	pop	{r7, pc}
 8000c10:	20000258 	.word	0x20000258
 8000c14:	00003e7f 	.word	0x00003e7f
 8000c18:	000003e7 	.word	0x000003e7

08000c1c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c20:	4b23      	ldr	r3, [pc, #140]	@ (8000cb0 <MX_USART2_UART_Init+0x94>)
 8000c22:	4a24      	ldr	r2, [pc, #144]	@ (8000cb4 <MX_USART2_UART_Init+0x98>)
 8000c24:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000c26:	4b22      	ldr	r3, [pc, #136]	@ (8000cb0 <MX_USART2_UART_Init+0x94>)
 8000c28:	2296      	movs	r2, #150	@ 0x96
 8000c2a:	0192      	lsls	r2, r2, #6
 8000c2c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c2e:	4b20      	ldr	r3, [pc, #128]	@ (8000cb0 <MX_USART2_UART_Init+0x94>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c34:	4b1e      	ldr	r3, [pc, #120]	@ (8000cb0 <MX_USART2_UART_Init+0x94>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c3a:	4b1d      	ldr	r3, [pc, #116]	@ (8000cb0 <MX_USART2_UART_Init+0x94>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c40:	4b1b      	ldr	r3, [pc, #108]	@ (8000cb0 <MX_USART2_UART_Init+0x94>)
 8000c42:	220c      	movs	r2, #12
 8000c44:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c46:	4b1a      	ldr	r3, [pc, #104]	@ (8000cb0 <MX_USART2_UART_Init+0x94>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c4c:	4b18      	ldr	r3, [pc, #96]	@ (8000cb0 <MX_USART2_UART_Init+0x94>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c52:	4b17      	ldr	r3, [pc, #92]	@ (8000cb0 <MX_USART2_UART_Init+0x94>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000c58:	4b15      	ldr	r3, [pc, #84]	@ (8000cb0 <MX_USART2_UART_Init+0x94>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c5e:	4b14      	ldr	r3, [pc, #80]	@ (8000cb0 <MX_USART2_UART_Init+0x94>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c64:	4b12      	ldr	r3, [pc, #72]	@ (8000cb0 <MX_USART2_UART_Init+0x94>)
 8000c66:	0018      	movs	r0, r3
 8000c68:	f002 fb6e 	bl	8003348 <HAL_UART_Init>
 8000c6c:	1e03      	subs	r3, r0, #0
 8000c6e:	d001      	beq.n	8000c74 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000c70:	f000 f93c 	bl	8000eec <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c74:	4b0e      	ldr	r3, [pc, #56]	@ (8000cb0 <MX_USART2_UART_Init+0x94>)
 8000c76:	2100      	movs	r1, #0
 8000c78:	0018      	movs	r0, r3
 8000c7a:	f004 fbbb 	bl	80053f4 <HAL_UARTEx_SetTxFifoThreshold>
 8000c7e:	1e03      	subs	r3, r0, #0
 8000c80:	d001      	beq.n	8000c86 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000c82:	f000 f933 	bl	8000eec <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c86:	4b0a      	ldr	r3, [pc, #40]	@ (8000cb0 <MX_USART2_UART_Init+0x94>)
 8000c88:	2100      	movs	r1, #0
 8000c8a:	0018      	movs	r0, r3
 8000c8c:	f004 fbf2 	bl	8005474 <HAL_UARTEx_SetRxFifoThreshold>
 8000c90:	1e03      	subs	r3, r0, #0
 8000c92:	d001      	beq.n	8000c98 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000c94:	f000 f92a 	bl	8000eec <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000c98:	4b05      	ldr	r3, [pc, #20]	@ (8000cb0 <MX_USART2_UART_Init+0x94>)
 8000c9a:	0018      	movs	r0, r3
 8000c9c:	f004 fb70 	bl	8005380 <HAL_UARTEx_DisableFifoMode>
 8000ca0:	1e03      	subs	r3, r0, #0
 8000ca2:	d001      	beq.n	8000ca8 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000ca4:	f000 f922 	bl	8000eec <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000ca8:	46c0      	nop			@ (mov r8, r8)
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bd80      	pop	{r7, pc}
 8000cae:	46c0      	nop			@ (mov r8, r8)
 8000cb0:	20000300 	.word	0x20000300
 8000cb4:	40004400 	.word	0x40004400

08000cb8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b082      	sub	sp, #8
 8000cbc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000cbe:	4b0c      	ldr	r3, [pc, #48]	@ (8000cf0 <MX_DMA_Init+0x38>)
 8000cc0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000cc2:	4b0b      	ldr	r3, [pc, #44]	@ (8000cf0 <MX_DMA_Init+0x38>)
 8000cc4:	2101      	movs	r1, #1
 8000cc6:	430a      	orrs	r2, r1
 8000cc8:	639a      	str	r2, [r3, #56]	@ 0x38
 8000cca:	4b09      	ldr	r3, [pc, #36]	@ (8000cf0 <MX_DMA_Init+0x38>)
 8000ccc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000cce:	2201      	movs	r2, #1
 8000cd0:	4013      	ands	r3, r2
 8000cd2:	607b      	str	r3, [r7, #4]
 8000cd4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 3, 0);
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	2103      	movs	r1, #3
 8000cda:	2009      	movs	r0, #9
 8000cdc:	f000 fbc6 	bl	800146c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000ce0:	2009      	movs	r0, #9
 8000ce2:	f000 fbd8 	bl	8001496 <HAL_NVIC_EnableIRQ>

}
 8000ce6:	46c0      	nop			@ (mov r8, r8)
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	b002      	add	sp, #8
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	46c0      	nop			@ (mov r8, r8)
 8000cf0:	40021000 	.word	0x40021000

08000cf4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000cf4:	b590      	push	{r4, r7, lr}
 8000cf6:	b08b      	sub	sp, #44	@ 0x2c
 8000cf8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cfa:	2414      	movs	r4, #20
 8000cfc:	193b      	adds	r3, r7, r4
 8000cfe:	0018      	movs	r0, r3
 8000d00:	2314      	movs	r3, #20
 8000d02:	001a      	movs	r2, r3
 8000d04:	2100      	movs	r1, #0
 8000d06:	f005 fcbb 	bl	8006680 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d0a:	4b67      	ldr	r3, [pc, #412]	@ (8000ea8 <MX_GPIO_Init+0x1b4>)
 8000d0c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000d0e:	4b66      	ldr	r3, [pc, #408]	@ (8000ea8 <MX_GPIO_Init+0x1b4>)
 8000d10:	2104      	movs	r1, #4
 8000d12:	430a      	orrs	r2, r1
 8000d14:	635a      	str	r2, [r3, #52]	@ 0x34
 8000d16:	4b64      	ldr	r3, [pc, #400]	@ (8000ea8 <MX_GPIO_Init+0x1b4>)
 8000d18:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000d1a:	2204      	movs	r2, #4
 8000d1c:	4013      	ands	r3, r2
 8000d1e:	613b      	str	r3, [r7, #16]
 8000d20:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000d22:	4b61      	ldr	r3, [pc, #388]	@ (8000ea8 <MX_GPIO_Init+0x1b4>)
 8000d24:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000d26:	4b60      	ldr	r3, [pc, #384]	@ (8000ea8 <MX_GPIO_Init+0x1b4>)
 8000d28:	2120      	movs	r1, #32
 8000d2a:	430a      	orrs	r2, r1
 8000d2c:	635a      	str	r2, [r3, #52]	@ 0x34
 8000d2e:	4b5e      	ldr	r3, [pc, #376]	@ (8000ea8 <MX_GPIO_Init+0x1b4>)
 8000d30:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000d32:	2220      	movs	r2, #32
 8000d34:	4013      	ands	r3, r2
 8000d36:	60fb      	str	r3, [r7, #12]
 8000d38:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d3a:	4b5b      	ldr	r3, [pc, #364]	@ (8000ea8 <MX_GPIO_Init+0x1b4>)
 8000d3c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000d3e:	4b5a      	ldr	r3, [pc, #360]	@ (8000ea8 <MX_GPIO_Init+0x1b4>)
 8000d40:	2101      	movs	r1, #1
 8000d42:	430a      	orrs	r2, r1
 8000d44:	635a      	str	r2, [r3, #52]	@ 0x34
 8000d46:	4b58      	ldr	r3, [pc, #352]	@ (8000ea8 <MX_GPIO_Init+0x1b4>)
 8000d48:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000d4a:	2201      	movs	r2, #1
 8000d4c:	4013      	ands	r3, r2
 8000d4e:	60bb      	str	r3, [r7, #8]
 8000d50:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d52:	4b55      	ldr	r3, [pc, #340]	@ (8000ea8 <MX_GPIO_Init+0x1b4>)
 8000d54:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000d56:	4b54      	ldr	r3, [pc, #336]	@ (8000ea8 <MX_GPIO_Init+0x1b4>)
 8000d58:	2102      	movs	r1, #2
 8000d5a:	430a      	orrs	r2, r1
 8000d5c:	635a      	str	r2, [r3, #52]	@ 0x34
 8000d5e:	4b52      	ldr	r3, [pc, #328]	@ (8000ea8 <MX_GPIO_Init+0x1b4>)
 8000d60:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000d62:	2202      	movs	r2, #2
 8000d64:	4013      	ands	r3, r2
 8000d66:	607b      	str	r3, [r7, #4]
 8000d68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d6a:	4b4f      	ldr	r3, [pc, #316]	@ (8000ea8 <MX_GPIO_Init+0x1b4>)
 8000d6c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000d6e:	4b4e      	ldr	r3, [pc, #312]	@ (8000ea8 <MX_GPIO_Init+0x1b4>)
 8000d70:	2108      	movs	r1, #8
 8000d72:	430a      	orrs	r2, r1
 8000d74:	635a      	str	r2, [r3, #52]	@ 0x34
 8000d76:	4b4c      	ldr	r3, [pc, #304]	@ (8000ea8 <MX_GPIO_Init+0x1b4>)
 8000d78:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000d7a:	2208      	movs	r2, #8
 8000d7c:	4013      	ands	r3, r2
 8000d7e:	603b      	str	r3, [r7, #0]
 8000d80:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Dig2_GPIO_Port, Dig2_Pin, GPIO_PIN_RESET);
 8000d82:	4b4a      	ldr	r3, [pc, #296]	@ (8000eac <MX_GPIO_Init+0x1b8>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	2102      	movs	r1, #2
 8000d88:	0018      	movs	r0, r3
 8000d8a:	f000 ff51 	bl	8001c30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Dig3_Pin|Dig4_Pin, GPIO_PIN_RESET);
 8000d8e:	4b48      	ldr	r3, [pc, #288]	@ (8000eb0 <MX_GPIO_Init+0x1bc>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	210c      	movs	r1, #12
 8000d94:	0018      	movs	r0, r3
 8000d96:	f000 ff4b 	bl	8001c30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, B_Pin|C_Pin|D_Pin|LED_GREEN_Pin
 8000d9a:	4946      	ldr	r1, [pc, #280]	@ (8000eb4 <MX_GPIO_Init+0x1c0>)
 8000d9c:	23a0      	movs	r3, #160	@ 0xa0
 8000d9e:	05db      	lsls	r3, r3, #23
 8000da0:	2200      	movs	r2, #0
 8000da2:	0018      	movs	r0, r3
 8000da4:	f000 ff44 	bl	8001c30 <HAL_GPIO_WritePin>
                          |DP_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, E_Pin|F_Pin|G_Pin|Dig1_Pin, GPIO_PIN_RESET);
 8000da8:	4943      	ldr	r1, [pc, #268]	@ (8000eb8 <MX_GPIO_Init+0x1c4>)
 8000daa:	4b44      	ldr	r3, [pc, #272]	@ (8000ebc <MX_GPIO_Init+0x1c8>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	0018      	movs	r0, r3
 8000db0:	f000 ff3e 	bl	8001c30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(A_GPIO_Port, A_Pin, GPIO_PIN_RESET);
 8000db4:	4b42      	ldr	r3, [pc, #264]	@ (8000ec0 <MX_GPIO_Init+0x1cc>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	2120      	movs	r1, #32
 8000dba:	0018      	movs	r0, r3
 8000dbc:	f000 ff38 	bl	8001c30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Dig2_Pin */
  GPIO_InitStruct.Pin = Dig2_Pin;
 8000dc0:	193b      	adds	r3, r7, r4
 8000dc2:	2202      	movs	r2, #2
 8000dc4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dc6:	193b      	adds	r3, r7, r4
 8000dc8:	2201      	movs	r2, #1
 8000dca:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dcc:	193b      	adds	r3, r7, r4
 8000dce:	2200      	movs	r2, #0
 8000dd0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dd2:	193b      	adds	r3, r7, r4
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(Dig2_GPIO_Port, &GPIO_InitStruct);
 8000dd8:	193b      	adds	r3, r7, r4
 8000dda:	4a34      	ldr	r2, [pc, #208]	@ (8000eac <MX_GPIO_Init+0x1b8>)
 8000ddc:	0019      	movs	r1, r3
 8000dde:	0010      	movs	r0, r2
 8000de0:	f000 fdc2 	bl	8001968 <HAL_GPIO_Init>

  /*Configure GPIO pins : Dig3_Pin Dig4_Pin */
  GPIO_InitStruct.Pin = Dig3_Pin|Dig4_Pin;
 8000de4:	193b      	adds	r3, r7, r4
 8000de6:	220c      	movs	r2, #12
 8000de8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dea:	193b      	adds	r3, r7, r4
 8000dec:	2201      	movs	r2, #1
 8000dee:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df0:	193b      	adds	r3, r7, r4
 8000df2:	2200      	movs	r2, #0
 8000df4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000df6:	193b      	adds	r3, r7, r4
 8000df8:	2200      	movs	r2, #0
 8000dfa:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dfc:	193b      	adds	r3, r7, r4
 8000dfe:	4a2c      	ldr	r2, [pc, #176]	@ (8000eb0 <MX_GPIO_Init+0x1bc>)
 8000e00:	0019      	movs	r1, r3
 8000e02:	0010      	movs	r0, r2
 8000e04:	f000 fdb0 	bl	8001968 <HAL_GPIO_Init>

  /*Configure GPIO pins : B_Pin C_Pin D_Pin DP_Pin */
  GPIO_InitStruct.Pin = B_Pin|C_Pin|D_Pin|DP_Pin;
 8000e08:	193b      	adds	r3, r7, r4
 8000e0a:	4a2e      	ldr	r2, [pc, #184]	@ (8000ec4 <MX_GPIO_Init+0x1d0>)
 8000e0c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e0e:	193b      	adds	r3, r7, r4
 8000e10:	2201      	movs	r2, #1
 8000e12:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e14:	193b      	adds	r3, r7, r4
 8000e16:	2200      	movs	r2, #0
 8000e18:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e1a:	193b      	adds	r3, r7, r4
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e20:	193a      	adds	r2, r7, r4
 8000e22:	23a0      	movs	r3, #160	@ 0xa0
 8000e24:	05db      	lsls	r3, r3, #23
 8000e26:	0011      	movs	r1, r2
 8000e28:	0018      	movs	r0, r3
 8000e2a:	f000 fd9d 	bl	8001968 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 8000e2e:	193b      	adds	r3, r7, r4
 8000e30:	2220      	movs	r2, #32
 8000e32:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e34:	193b      	adds	r3, r7, r4
 8000e36:	2201      	movs	r2, #1
 8000e38:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3a:	193b      	adds	r3, r7, r4
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e40:	193b      	adds	r3, r7, r4
 8000e42:	2202      	movs	r2, #2
 8000e44:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 8000e46:	193a      	adds	r2, r7, r4
 8000e48:	23a0      	movs	r3, #160	@ 0xa0
 8000e4a:	05db      	lsls	r3, r3, #23
 8000e4c:	0011      	movs	r1, r2
 8000e4e:	0018      	movs	r0, r3
 8000e50:	f000 fd8a 	bl	8001968 <HAL_GPIO_Init>

  /*Configure GPIO pins : E_Pin F_Pin G_Pin Dig1_Pin */
  GPIO_InitStruct.Pin = E_Pin|F_Pin|G_Pin|Dig1_Pin;
 8000e54:	193b      	adds	r3, r7, r4
 8000e56:	4a18      	ldr	r2, [pc, #96]	@ (8000eb8 <MX_GPIO_Init+0x1c4>)
 8000e58:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e5a:	193b      	adds	r3, r7, r4
 8000e5c:	2201      	movs	r2, #1
 8000e5e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e60:	193b      	adds	r3, r7, r4
 8000e62:	2200      	movs	r2, #0
 8000e64:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e66:	193b      	adds	r3, r7, r4
 8000e68:	2200      	movs	r2, #0
 8000e6a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e6c:	193b      	adds	r3, r7, r4
 8000e6e:	4a13      	ldr	r2, [pc, #76]	@ (8000ebc <MX_GPIO_Init+0x1c8>)
 8000e70:	0019      	movs	r1, r3
 8000e72:	0010      	movs	r0, r2
 8000e74:	f000 fd78 	bl	8001968 <HAL_GPIO_Init>

  /*Configure GPIO pin : A_Pin */
  GPIO_InitStruct.Pin = A_Pin;
 8000e78:	0021      	movs	r1, r4
 8000e7a:	187b      	adds	r3, r7, r1
 8000e7c:	2220      	movs	r2, #32
 8000e7e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e80:	187b      	adds	r3, r7, r1
 8000e82:	2201      	movs	r2, #1
 8000e84:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e86:	187b      	adds	r3, r7, r1
 8000e88:	2200      	movs	r2, #0
 8000e8a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e8c:	187b      	adds	r3, r7, r1
 8000e8e:	2200      	movs	r2, #0
 8000e90:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(A_GPIO_Port, &GPIO_InitStruct);
 8000e92:	187b      	adds	r3, r7, r1
 8000e94:	4a0a      	ldr	r2, [pc, #40]	@ (8000ec0 <MX_GPIO_Init+0x1cc>)
 8000e96:	0019      	movs	r1, r3
 8000e98:	0010      	movs	r0, r2
 8000e9a:	f000 fd65 	bl	8001968 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000e9e:	46c0      	nop			@ (mov r8, r8)
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	b00b      	add	sp, #44	@ 0x2c
 8000ea4:	bd90      	pop	{r4, r7, pc}
 8000ea6:	46c0      	nop			@ (mov r8, r8)
 8000ea8:	40021000 	.word	0x40021000
 8000eac:	50001400 	.word	0x50001400
 8000eb0:	50000800 	.word	0x50000800
 8000eb4:	00008033 	.word	0x00008033
 8000eb8:	00001882 	.word	0x00001882
 8000ebc:	50000400 	.word	0x50000400
 8000ec0:	50000c00 	.word	0x50000c00
 8000ec4:	00008013 	.word	0x00008013

08000ec8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b082      	sub	sp, #8
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	4a04      	ldr	r2, [pc, #16]	@ (8000ee8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000ed6:	4293      	cmp	r3, r2
 8000ed8:	d101      	bne.n	8000ede <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000eda:	f000 fa23 	bl	8001324 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000ede:	46c0      	nop			@ (mov r8, r8)
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	b002      	add	sp, #8
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	46c0      	nop			@ (mov r8, r8)
 8000ee8:	40012c00 	.word	0x40012c00

08000eec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ef0:	b672      	cpsid	i
}
 8000ef2:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ef4:	46c0      	nop			@ (mov r8, r8)
 8000ef6:	e7fd      	b.n	8000ef4 <Error_Handler+0x8>

08000ef8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b082      	sub	sp, #8
 8000efc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000efe:	4b12      	ldr	r3, [pc, #72]	@ (8000f48 <HAL_MspInit+0x50>)
 8000f00:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000f02:	4b11      	ldr	r3, [pc, #68]	@ (8000f48 <HAL_MspInit+0x50>)
 8000f04:	2101      	movs	r1, #1
 8000f06:	430a      	orrs	r2, r1
 8000f08:	641a      	str	r2, [r3, #64]	@ 0x40
 8000f0a:	4b0f      	ldr	r3, [pc, #60]	@ (8000f48 <HAL_MspInit+0x50>)
 8000f0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f0e:	2201      	movs	r2, #1
 8000f10:	4013      	ands	r3, r2
 8000f12:	607b      	str	r3, [r7, #4]
 8000f14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f16:	4b0c      	ldr	r3, [pc, #48]	@ (8000f48 <HAL_MspInit+0x50>)
 8000f18:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000f1a:	4b0b      	ldr	r3, [pc, #44]	@ (8000f48 <HAL_MspInit+0x50>)
 8000f1c:	2180      	movs	r1, #128	@ 0x80
 8000f1e:	0549      	lsls	r1, r1, #21
 8000f20:	430a      	orrs	r2, r1
 8000f22:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000f24:	4b08      	ldr	r3, [pc, #32]	@ (8000f48 <HAL_MspInit+0x50>)
 8000f26:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000f28:	2380      	movs	r3, #128	@ 0x80
 8000f2a:	055b      	lsls	r3, r3, #21
 8000f2c:	4013      	ands	r3, r2
 8000f2e:	603b      	str	r3, [r7, #0]
 8000f30:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 8000f32:	2302      	movs	r3, #2
 8000f34:	425b      	negs	r3, r3
 8000f36:	2200      	movs	r2, #0
 8000f38:	2103      	movs	r1, #3
 8000f3a:	0018      	movs	r0, r3
 8000f3c:	f000 fa96 	bl	800146c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f40:	46c0      	nop			@ (mov r8, r8)
 8000f42:	46bd      	mov	sp, r7
 8000f44:	b002      	add	sp, #8
 8000f46:	bd80      	pop	{r7, pc}
 8000f48:	40021000 	.word	0x40021000

08000f4c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b084      	sub	sp, #16
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681a      	ldr	r2, [r3, #0]
 8000f58:	2380      	movs	r3, #128	@ 0x80
 8000f5a:	05db      	lsls	r3, r3, #23
 8000f5c:	429a      	cmp	r2, r3
 8000f5e:	d136      	bne.n	8000fce <HAL_TIM_Base_MspInit+0x82>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000f60:	4b1d      	ldr	r3, [pc, #116]	@ (8000fd8 <HAL_TIM_Base_MspInit+0x8c>)
 8000f62:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000f64:	4b1c      	ldr	r3, [pc, #112]	@ (8000fd8 <HAL_TIM_Base_MspInit+0x8c>)
 8000f66:	2101      	movs	r1, #1
 8000f68:	430a      	orrs	r2, r1
 8000f6a:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000f6c:	4b1a      	ldr	r3, [pc, #104]	@ (8000fd8 <HAL_TIM_Base_MspInit+0x8c>)
 8000f6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000f70:	2201      	movs	r2, #1
 8000f72:	4013      	ands	r3, r2
 8000f74:	60fb      	str	r3, [r7, #12]
 8000f76:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 DMA Init */
    /* TIM2_UP Init */
    hdma_tim2_up.Instance = DMA1_Channel1;
 8000f78:	4b18      	ldr	r3, [pc, #96]	@ (8000fdc <HAL_TIM_Base_MspInit+0x90>)
 8000f7a:	4a19      	ldr	r2, [pc, #100]	@ (8000fe0 <HAL_TIM_Base_MspInit+0x94>)
 8000f7c:	601a      	str	r2, [r3, #0]
    hdma_tim2_up.Init.Request = DMA_REQUEST_TIM2_UP;
 8000f7e:	4b17      	ldr	r3, [pc, #92]	@ (8000fdc <HAL_TIM_Base_MspInit+0x90>)
 8000f80:	221f      	movs	r2, #31
 8000f82:	605a      	str	r2, [r3, #4]
    hdma_tim2_up.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000f84:	4b15      	ldr	r3, [pc, #84]	@ (8000fdc <HAL_TIM_Base_MspInit+0x90>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	609a      	str	r2, [r3, #8]
    hdma_tim2_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f8a:	4b14      	ldr	r3, [pc, #80]	@ (8000fdc <HAL_TIM_Base_MspInit+0x90>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	60da      	str	r2, [r3, #12]
    hdma_tim2_up.Init.MemInc = DMA_MINC_ENABLE;
 8000f90:	4b12      	ldr	r3, [pc, #72]	@ (8000fdc <HAL_TIM_Base_MspInit+0x90>)
 8000f92:	2280      	movs	r2, #128	@ 0x80
 8000f94:	611a      	str	r2, [r3, #16]
    hdma_tim2_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000f96:	4b11      	ldr	r3, [pc, #68]	@ (8000fdc <HAL_TIM_Base_MspInit+0x90>)
 8000f98:	2280      	movs	r2, #128	@ 0x80
 8000f9a:	0092      	lsls	r2, r2, #2
 8000f9c:	615a      	str	r2, [r3, #20]
    hdma_tim2_up.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000f9e:	4b0f      	ldr	r3, [pc, #60]	@ (8000fdc <HAL_TIM_Base_MspInit+0x90>)
 8000fa0:	2280      	movs	r2, #128	@ 0x80
 8000fa2:	0112      	lsls	r2, r2, #4
 8000fa4:	619a      	str	r2, [r3, #24]
    hdma_tim2_up.Init.Mode = DMA_NORMAL;
 8000fa6:	4b0d      	ldr	r3, [pc, #52]	@ (8000fdc <HAL_TIM_Base_MspInit+0x90>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	61da      	str	r2, [r3, #28]
    hdma_tim2_up.Init.Priority = DMA_PRIORITY_LOW;
 8000fac:	4b0b      	ldr	r3, [pc, #44]	@ (8000fdc <HAL_TIM_Base_MspInit+0x90>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim2_up) != HAL_OK)
 8000fb2:	4b0a      	ldr	r3, [pc, #40]	@ (8000fdc <HAL_TIM_Base_MspInit+0x90>)
 8000fb4:	0018      	movs	r0, r3
 8000fb6:	f000 fa7f 	bl	80014b8 <HAL_DMA_Init>
 8000fba:	1e03      	subs	r3, r0, #0
 8000fbc:	d001      	beq.n	8000fc2 <HAL_TIM_Base_MspInit+0x76>
    {
      Error_Handler();
 8000fbe:	f7ff ff95 	bl	8000eec <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim2_up);
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	4a05      	ldr	r2, [pc, #20]	@ (8000fdc <HAL_TIM_Base_MspInit+0x90>)
 8000fc6:	621a      	str	r2, [r3, #32]
 8000fc8:	4b04      	ldr	r3, [pc, #16]	@ (8000fdc <HAL_TIM_Base_MspInit+0x90>)
 8000fca:	687a      	ldr	r2, [r7, #4]
 8000fcc:	629a      	str	r2, [r3, #40]	@ 0x28

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8000fce:	46c0      	nop			@ (mov r8, r8)
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	b004      	add	sp, #16
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	46c0      	nop			@ (mov r8, r8)
 8000fd8:	40021000 	.word	0x40021000
 8000fdc:	200002a4 	.word	0x200002a4
 8000fe0:	40020008 	.word	0x40020008

08000fe4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000fe4:	b590      	push	{r4, r7, lr}
 8000fe6:	b097      	sub	sp, #92	@ 0x5c
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fec:	2344      	movs	r3, #68	@ 0x44
 8000fee:	18fb      	adds	r3, r7, r3
 8000ff0:	0018      	movs	r0, r3
 8000ff2:	2314      	movs	r3, #20
 8000ff4:	001a      	movs	r2, r3
 8000ff6:	2100      	movs	r1, #0
 8000ff8:	f005 fb42 	bl	8006680 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ffc:	2410      	movs	r4, #16
 8000ffe:	193b      	adds	r3, r7, r4
 8001000:	0018      	movs	r0, r3
 8001002:	2334      	movs	r3, #52	@ 0x34
 8001004:	001a      	movs	r2, r3
 8001006:	2100      	movs	r1, #0
 8001008:	f005 fb3a 	bl	8006680 <memset>
  if(huart->Instance==USART2)
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	4a26      	ldr	r2, [pc, #152]	@ (80010ac <HAL_UART_MspInit+0xc8>)
 8001012:	4293      	cmp	r3, r2
 8001014:	d146      	bne.n	80010a4 <HAL_UART_MspInit+0xc0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001016:	193b      	adds	r3, r7, r4
 8001018:	2202      	movs	r2, #2
 800101a:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800101c:	193b      	adds	r3, r7, r4
 800101e:	2200      	movs	r2, #0
 8001020:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001022:	193b      	adds	r3, r7, r4
 8001024:	0018      	movs	r0, r3
 8001026:	f001 fb75 	bl	8002714 <HAL_RCCEx_PeriphCLKConfig>
 800102a:	1e03      	subs	r3, r0, #0
 800102c:	d001      	beq.n	8001032 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800102e:	f7ff ff5d 	bl	8000eec <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001032:	4b1f      	ldr	r3, [pc, #124]	@ (80010b0 <HAL_UART_MspInit+0xcc>)
 8001034:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001036:	4b1e      	ldr	r3, [pc, #120]	@ (80010b0 <HAL_UART_MspInit+0xcc>)
 8001038:	2180      	movs	r1, #128	@ 0x80
 800103a:	0289      	lsls	r1, r1, #10
 800103c:	430a      	orrs	r2, r1
 800103e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001040:	4b1b      	ldr	r3, [pc, #108]	@ (80010b0 <HAL_UART_MspInit+0xcc>)
 8001042:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001044:	2380      	movs	r3, #128	@ 0x80
 8001046:	029b      	lsls	r3, r3, #10
 8001048:	4013      	ands	r3, r2
 800104a:	60fb      	str	r3, [r7, #12]
 800104c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800104e:	4b18      	ldr	r3, [pc, #96]	@ (80010b0 <HAL_UART_MspInit+0xcc>)
 8001050:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001052:	4b17      	ldr	r3, [pc, #92]	@ (80010b0 <HAL_UART_MspInit+0xcc>)
 8001054:	2101      	movs	r1, #1
 8001056:	430a      	orrs	r2, r1
 8001058:	635a      	str	r2, [r3, #52]	@ 0x34
 800105a:	4b15      	ldr	r3, [pc, #84]	@ (80010b0 <HAL_UART_MspInit+0xcc>)
 800105c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800105e:	2201      	movs	r2, #1
 8001060:	4013      	ands	r3, r2
 8001062:	60bb      	str	r3, [r7, #8]
 8001064:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 8001066:	2144      	movs	r1, #68	@ 0x44
 8001068:	187b      	adds	r3, r7, r1
 800106a:	220c      	movs	r2, #12
 800106c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800106e:	187b      	adds	r3, r7, r1
 8001070:	2202      	movs	r2, #2
 8001072:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001074:	187b      	adds	r3, r7, r1
 8001076:	2200      	movs	r2, #0
 8001078:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800107a:	187b      	adds	r3, r7, r1
 800107c:	2200      	movs	r2, #0
 800107e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8001080:	187b      	adds	r3, r7, r1
 8001082:	2201      	movs	r2, #1
 8001084:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001086:	187a      	adds	r2, r7, r1
 8001088:	23a0      	movs	r3, #160	@ 0xa0
 800108a:	05db      	lsls	r3, r3, #23
 800108c:	0011      	movs	r1, r2
 800108e:	0018      	movs	r0, r3
 8001090:	f000 fc6a 	bl	8001968 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 3, 0);
 8001094:	2200      	movs	r2, #0
 8001096:	2103      	movs	r1, #3
 8001098:	201c      	movs	r0, #28
 800109a:	f000 f9e7 	bl	800146c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800109e:	201c      	movs	r0, #28
 80010a0:	f000 f9f9 	bl	8001496 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 80010a4:	46c0      	nop			@ (mov r8, r8)
 80010a6:	46bd      	mov	sp, r7
 80010a8:	b017      	add	sp, #92	@ 0x5c
 80010aa:	bd90      	pop	{r4, r7, pc}
 80010ac:	40004400 	.word	0x40004400
 80010b0:	40021000 	.word	0x40021000

080010b4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010b4:	b5b0      	push	{r4, r5, r7, lr}
 80010b6:	b08c      	sub	sp, #48	@ 0x30
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80010bc:	232b      	movs	r3, #43	@ 0x2b
 80010be:	18fb      	adds	r3, r7, r3
 80010c0:	2200      	movs	r2, #0
 80010c2:	701a      	strb	r2, [r3, #0]

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80010c4:	4b38      	ldr	r3, [pc, #224]	@ (80011a8 <HAL_InitTick+0xf4>)
 80010c6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80010c8:	4b37      	ldr	r3, [pc, #220]	@ (80011a8 <HAL_InitTick+0xf4>)
 80010ca:	2180      	movs	r1, #128	@ 0x80
 80010cc:	0109      	lsls	r1, r1, #4
 80010ce:	430a      	orrs	r2, r1
 80010d0:	641a      	str	r2, [r3, #64]	@ 0x40
 80010d2:	4b35      	ldr	r3, [pc, #212]	@ (80011a8 <HAL_InitTick+0xf4>)
 80010d4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80010d6:	2380      	movs	r3, #128	@ 0x80
 80010d8:	011b      	lsls	r3, r3, #4
 80010da:	4013      	ands	r3, r2
 80010dc:	60bb      	str	r3, [r7, #8]
 80010de:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80010e0:	230c      	movs	r3, #12
 80010e2:	18fa      	adds	r2, r7, r3
 80010e4:	2410      	movs	r4, #16
 80010e6:	193b      	adds	r3, r7, r4
 80010e8:	0011      	movs	r1, r2
 80010ea:	0018      	movs	r0, r3
 80010ec:	f001 fae8 	bl	80026c0 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80010f0:	193b      	adds	r3, r7, r4
 80010f2:	68db      	ldr	r3, [r3, #12]
 80010f4:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Compute TIM1 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80010f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d104      	bne.n	8001106 <HAL_InitTick+0x52>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80010fc:	f001 faca 	bl	8002694 <HAL_RCC_GetPCLK1Freq>
 8001100:	0003      	movs	r3, r0
 8001102:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001104:	e004      	b.n	8001110 <HAL_InitTick+0x5c>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001106:	f001 fac5 	bl	8002694 <HAL_RCC_GetPCLK1Freq>
 800110a:	0003      	movs	r3, r0
 800110c:	005b      	lsls	r3, r3, #1
 800110e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001110:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001112:	4926      	ldr	r1, [pc, #152]	@ (80011ac <HAL_InitTick+0xf8>)
 8001114:	0018      	movs	r0, r3
 8001116:	f7ff f809 	bl	800012c <__udivsi3>
 800111a:	0003      	movs	r3, r0
 800111c:	3b01      	subs	r3, #1
 800111e:	623b      	str	r3, [r7, #32]

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001120:	4b23      	ldr	r3, [pc, #140]	@ (80011b0 <HAL_InitTick+0xfc>)
 8001122:	4a24      	ldr	r2, [pc, #144]	@ (80011b4 <HAL_InitTick+0x100>)
 8001124:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001126:	4b22      	ldr	r3, [pc, #136]	@ (80011b0 <HAL_InitTick+0xfc>)
 8001128:	4a23      	ldr	r2, [pc, #140]	@ (80011b8 <HAL_InitTick+0x104>)
 800112a:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800112c:	4b20      	ldr	r3, [pc, #128]	@ (80011b0 <HAL_InitTick+0xfc>)
 800112e:	6a3a      	ldr	r2, [r7, #32]
 8001130:	605a      	str	r2, [r3, #4]
  htim1.Init.ClockDivision = 0;
 8001132:	4b1f      	ldr	r3, [pc, #124]	@ (80011b0 <HAL_InitTick+0xfc>)
 8001134:	2200      	movs	r2, #0
 8001136:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001138:	4b1d      	ldr	r3, [pc, #116]	@ (80011b0 <HAL_InitTick+0xfc>)
 800113a:	2200      	movs	r2, #0
 800113c:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800113e:	4b1c      	ldr	r3, [pc, #112]	@ (80011b0 <HAL_InitTick+0xfc>)
 8001140:	2200      	movs	r2, #0
 8001142:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8001144:	252b      	movs	r5, #43	@ 0x2b
 8001146:	197c      	adds	r4, r7, r5
 8001148:	4b19      	ldr	r3, [pc, #100]	@ (80011b0 <HAL_InitTick+0xfc>)
 800114a:	0018      	movs	r0, r3
 800114c:	f001 fc9a 	bl	8002a84 <HAL_TIM_Base_Init>
 8001150:	0003      	movs	r3, r0
 8001152:	7023      	strb	r3, [r4, #0]
  if (status == HAL_OK)
 8001154:	197b      	adds	r3, r7, r5
 8001156:	781b      	ldrb	r3, [r3, #0]
 8001158:	2b00      	cmp	r3, #0
 800115a:	d11e      	bne.n	800119a <HAL_InitTick+0xe6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 800115c:	197c      	adds	r4, r7, r5
 800115e:	4b14      	ldr	r3, [pc, #80]	@ (80011b0 <HAL_InitTick+0xfc>)
 8001160:	0018      	movs	r0, r3
 8001162:	f001 fce7 	bl	8002b34 <HAL_TIM_Base_Start_IT>
 8001166:	0003      	movs	r3, r0
 8001168:	7023      	strb	r3, [r4, #0]
    if (status == HAL_OK)
 800116a:	197b      	adds	r3, r7, r5
 800116c:	781b      	ldrb	r3, [r3, #0]
 800116e:	2b00      	cmp	r3, #0
 8001170:	d113      	bne.n	800119a <HAL_InitTick+0xe6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn);
 8001172:	200d      	movs	r0, #13
 8001174:	f000 f98f 	bl	8001496 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	2b03      	cmp	r3, #3
 800117c:	d809      	bhi.n	8001192 <HAL_InitTick+0xde>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, TickPriority, 0U);
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	2200      	movs	r2, #0
 8001182:	0019      	movs	r1, r3
 8001184:	200d      	movs	r0, #13
 8001186:	f000 f971 	bl	800146c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800118a:	4b0c      	ldr	r3, [pc, #48]	@ (80011bc <HAL_InitTick+0x108>)
 800118c:	687a      	ldr	r2, [r7, #4]
 800118e:	601a      	str	r2, [r3, #0]
 8001190:	e003      	b.n	800119a <HAL_InitTick+0xe6>
      }
      else
      {
        status = HAL_ERROR;
 8001192:	232b      	movs	r3, #43	@ 0x2b
 8001194:	18fb      	adds	r3, r7, r3
 8001196:	2201      	movs	r2, #1
 8001198:	701a      	strb	r2, [r3, #0]
      }
    }
  }

 /* Return function status */
  return status;
 800119a:	232b      	movs	r3, #43	@ 0x2b
 800119c:	18fb      	adds	r3, r7, r3
 800119e:	781b      	ldrb	r3, [r3, #0]
}
 80011a0:	0018      	movs	r0, r3
 80011a2:	46bd      	mov	sp, r7
 80011a4:	b00c      	add	sp, #48	@ 0x30
 80011a6:	bdb0      	pop	{r4, r5, r7, pc}
 80011a8:	40021000 	.word	0x40021000
 80011ac:	000f4240 	.word	0x000f4240
 80011b0:	200003a0 	.word	0x200003a0
 80011b4:	40012c00 	.word	0x40012c00
 80011b8:	000003e7 	.word	0x000003e7
 80011bc:	200001b0 	.word	0x200001b0

080011c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80011c4:	46c0      	nop			@ (mov r8, r8)
 80011c6:	e7fd      	b.n	80011c4 <NMI_Handler+0x4>

080011c8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011cc:	46c0      	nop			@ (mov r8, r8)
 80011ce:	e7fd      	b.n	80011cc <HardFault_Handler+0x4>

080011d0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_up);
 80011d4:	4b03      	ldr	r3, [pc, #12]	@ (80011e4 <DMA1_Channel1_IRQHandler+0x14>)
 80011d6:	0018      	movs	r0, r3
 80011d8:	f000 fac4 	bl	8001764 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80011dc:	46c0      	nop			@ (mov r8, r8)
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	46c0      	nop			@ (mov r8, r8)
 80011e4:	200002a4 	.word	0x200002a4

080011e8 <TIM1_BRK_UP_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 break, update, trigger and commutation interrupts.
  */
void TIM1_BRK_UP_TRG_COM_IRQHandler(void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80011ec:	4b03      	ldr	r3, [pc, #12]	@ (80011fc <TIM1_BRK_UP_TRG_COM_IRQHandler+0x14>)
 80011ee:	0018      	movs	r0, r3
 80011f0:	f001 fcfc 	bl	8002bec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 1 */
}
 80011f4:	46c0      	nop			@ (mov r8, r8)
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	46c0      	nop			@ (mov r8, r8)
 80011fc:	200003a0 	.word	0x200003a0

08001200 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001204:	4b03      	ldr	r3, [pc, #12]	@ (8001214 <USART2_IRQHandler+0x14>)
 8001206:	0018      	movs	r0, r3
 8001208:	f002 f9f6 	bl	80035f8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800120c:	46c0      	nop			@ (mov r8, r8)
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}
 8001212:	46c0      	nop			@ (mov r8, r8)
 8001214:	20000300 	.word	0x20000300

08001218 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b086      	sub	sp, #24
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001220:	4a14      	ldr	r2, [pc, #80]	@ (8001274 <_sbrk+0x5c>)
 8001222:	4b15      	ldr	r3, [pc, #84]	@ (8001278 <_sbrk+0x60>)
 8001224:	1ad3      	subs	r3, r2, r3
 8001226:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001228:	697b      	ldr	r3, [r7, #20]
 800122a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800122c:	4b13      	ldr	r3, [pc, #76]	@ (800127c <_sbrk+0x64>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	2b00      	cmp	r3, #0
 8001232:	d102      	bne.n	800123a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001234:	4b11      	ldr	r3, [pc, #68]	@ (800127c <_sbrk+0x64>)
 8001236:	4a12      	ldr	r2, [pc, #72]	@ (8001280 <_sbrk+0x68>)
 8001238:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800123a:	4b10      	ldr	r3, [pc, #64]	@ (800127c <_sbrk+0x64>)
 800123c:	681a      	ldr	r2, [r3, #0]
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	18d3      	adds	r3, r2, r3
 8001242:	693a      	ldr	r2, [r7, #16]
 8001244:	429a      	cmp	r2, r3
 8001246:	d207      	bcs.n	8001258 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001248:	f005 fa82 	bl	8006750 <__errno>
 800124c:	0003      	movs	r3, r0
 800124e:	220c      	movs	r2, #12
 8001250:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001252:	2301      	movs	r3, #1
 8001254:	425b      	negs	r3, r3
 8001256:	e009      	b.n	800126c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001258:	4b08      	ldr	r3, [pc, #32]	@ (800127c <_sbrk+0x64>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800125e:	4b07      	ldr	r3, [pc, #28]	@ (800127c <_sbrk+0x64>)
 8001260:	681a      	ldr	r2, [r3, #0]
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	18d2      	adds	r2, r2, r3
 8001266:	4b05      	ldr	r3, [pc, #20]	@ (800127c <_sbrk+0x64>)
 8001268:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800126a:	68fb      	ldr	r3, [r7, #12]
}
 800126c:	0018      	movs	r0, r3
 800126e:	46bd      	mov	sp, r7
 8001270:	b006      	add	sp, #24
 8001272:	bd80      	pop	{r7, pc}
 8001274:	20009000 	.word	0x20009000
 8001278:	00000400 	.word	0x00000400
 800127c:	200003ec 	.word	0x200003ec
 8001280:	20001288 	.word	0x20001288

08001284 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001288:	46c0      	nop			@ (mov r8, r8)
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}
	...

08001290 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001290:	480d      	ldr	r0, [pc, #52]	@ (80012c8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001292:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001294:	f7ff fff6 	bl	8001284 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001298:	480c      	ldr	r0, [pc, #48]	@ (80012cc <LoopForever+0x6>)
  ldr r1, =_edata
 800129a:	490d      	ldr	r1, [pc, #52]	@ (80012d0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800129c:	4a0d      	ldr	r2, [pc, #52]	@ (80012d4 <LoopForever+0xe>)
  movs r3, #0
 800129e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012a0:	e002      	b.n	80012a8 <LoopCopyDataInit>

080012a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012a6:	3304      	adds	r3, #4

080012a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012ac:	d3f9      	bcc.n	80012a2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012ae:	4a0a      	ldr	r2, [pc, #40]	@ (80012d8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80012b0:	4c0a      	ldr	r4, [pc, #40]	@ (80012dc <LoopForever+0x16>)
  movs r3, #0
 80012b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012b4:	e001      	b.n	80012ba <LoopFillZerobss>

080012b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012b8:	3204      	adds	r2, #4

080012ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012bc:	d3fb      	bcc.n	80012b6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80012be:	f005 fa4d 	bl	800675c <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80012c2:	f7ff fbc1 	bl	8000a48 <main>

080012c6 <LoopForever>:

LoopForever:
  b LoopForever
 80012c6:	e7fe      	b.n	80012c6 <LoopForever>
  ldr   r0, =_estack
 80012c8:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 80012cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012d0:	2000020c 	.word	0x2000020c
  ldr r2, =_sidata
 80012d4:	080071bc 	.word	0x080071bc
  ldr r2, =_sbss
 80012d8:	2000020c 	.word	0x2000020c
  ldr r4, =_ebss
 80012dc:	20001288 	.word	0x20001288

080012e0 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80012e0:	e7fe      	b.n	80012e0 <ADC1_COMP_IRQHandler>
	...

080012e4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b082      	sub	sp, #8
 80012e8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80012ea:	1dfb      	adds	r3, r7, #7
 80012ec:	2200      	movs	r2, #0
 80012ee:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012f0:	4b0b      	ldr	r3, [pc, #44]	@ (8001320 <HAL_Init+0x3c>)
 80012f2:	681a      	ldr	r2, [r3, #0]
 80012f4:	4b0a      	ldr	r3, [pc, #40]	@ (8001320 <HAL_Init+0x3c>)
 80012f6:	2180      	movs	r1, #128	@ 0x80
 80012f8:	0049      	lsls	r1, r1, #1
 80012fa:	430a      	orrs	r2, r1
 80012fc:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80012fe:	2003      	movs	r0, #3
 8001300:	f7ff fed8 	bl	80010b4 <HAL_InitTick>
 8001304:	1e03      	subs	r3, r0, #0
 8001306:	d003      	beq.n	8001310 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8001308:	1dfb      	adds	r3, r7, #7
 800130a:	2201      	movs	r2, #1
 800130c:	701a      	strb	r2, [r3, #0]
 800130e:	e001      	b.n	8001314 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8001310:	f7ff fdf2 	bl	8000ef8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001314:	1dfb      	adds	r3, r7, #7
 8001316:	781b      	ldrb	r3, [r3, #0]
}
 8001318:	0018      	movs	r0, r3
 800131a:	46bd      	mov	sp, r7
 800131c:	b002      	add	sp, #8
 800131e:	bd80      	pop	{r7, pc}
 8001320:	40022000 	.word	0x40022000

08001324 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001328:	4b05      	ldr	r3, [pc, #20]	@ (8001340 <HAL_IncTick+0x1c>)
 800132a:	781b      	ldrb	r3, [r3, #0]
 800132c:	001a      	movs	r2, r3
 800132e:	4b05      	ldr	r3, [pc, #20]	@ (8001344 <HAL_IncTick+0x20>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	18d2      	adds	r2, r2, r3
 8001334:	4b03      	ldr	r3, [pc, #12]	@ (8001344 <HAL_IncTick+0x20>)
 8001336:	601a      	str	r2, [r3, #0]
}
 8001338:	46c0      	nop			@ (mov r8, r8)
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}
 800133e:	46c0      	nop			@ (mov r8, r8)
 8001340:	200001b4 	.word	0x200001b4
 8001344:	200003f0 	.word	0x200003f0

08001348 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	af00      	add	r7, sp, #0
  return uwTick;
 800134c:	4b02      	ldr	r3, [pc, #8]	@ (8001358 <HAL_GetTick+0x10>)
 800134e:	681b      	ldr	r3, [r3, #0]
}
 8001350:	0018      	movs	r0, r3
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}
 8001356:	46c0      	nop			@ (mov r8, r8)
 8001358:	200003f0 	.word	0x200003f0

0800135c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b082      	sub	sp, #8
 8001360:	af00      	add	r7, sp, #0
 8001362:	0002      	movs	r2, r0
 8001364:	1dfb      	adds	r3, r7, #7
 8001366:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001368:	1dfb      	adds	r3, r7, #7
 800136a:	781b      	ldrb	r3, [r3, #0]
 800136c:	2b7f      	cmp	r3, #127	@ 0x7f
 800136e:	d809      	bhi.n	8001384 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001370:	1dfb      	adds	r3, r7, #7
 8001372:	781b      	ldrb	r3, [r3, #0]
 8001374:	001a      	movs	r2, r3
 8001376:	231f      	movs	r3, #31
 8001378:	401a      	ands	r2, r3
 800137a:	4b04      	ldr	r3, [pc, #16]	@ (800138c <__NVIC_EnableIRQ+0x30>)
 800137c:	2101      	movs	r1, #1
 800137e:	4091      	lsls	r1, r2
 8001380:	000a      	movs	r2, r1
 8001382:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8001384:	46c0      	nop			@ (mov r8, r8)
 8001386:	46bd      	mov	sp, r7
 8001388:	b002      	add	sp, #8
 800138a:	bd80      	pop	{r7, pc}
 800138c:	e000e100 	.word	0xe000e100

08001390 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001390:	b590      	push	{r4, r7, lr}
 8001392:	b083      	sub	sp, #12
 8001394:	af00      	add	r7, sp, #0
 8001396:	0002      	movs	r2, r0
 8001398:	6039      	str	r1, [r7, #0]
 800139a:	1dfb      	adds	r3, r7, #7
 800139c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800139e:	1dfb      	adds	r3, r7, #7
 80013a0:	781b      	ldrb	r3, [r3, #0]
 80013a2:	2b7f      	cmp	r3, #127	@ 0x7f
 80013a4:	d828      	bhi.n	80013f8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80013a6:	4a2f      	ldr	r2, [pc, #188]	@ (8001464 <__NVIC_SetPriority+0xd4>)
 80013a8:	1dfb      	adds	r3, r7, #7
 80013aa:	781b      	ldrb	r3, [r3, #0]
 80013ac:	b25b      	sxtb	r3, r3
 80013ae:	089b      	lsrs	r3, r3, #2
 80013b0:	33c0      	adds	r3, #192	@ 0xc0
 80013b2:	009b      	lsls	r3, r3, #2
 80013b4:	589b      	ldr	r3, [r3, r2]
 80013b6:	1dfa      	adds	r2, r7, #7
 80013b8:	7812      	ldrb	r2, [r2, #0]
 80013ba:	0011      	movs	r1, r2
 80013bc:	2203      	movs	r2, #3
 80013be:	400a      	ands	r2, r1
 80013c0:	00d2      	lsls	r2, r2, #3
 80013c2:	21ff      	movs	r1, #255	@ 0xff
 80013c4:	4091      	lsls	r1, r2
 80013c6:	000a      	movs	r2, r1
 80013c8:	43d2      	mvns	r2, r2
 80013ca:	401a      	ands	r2, r3
 80013cc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	019b      	lsls	r3, r3, #6
 80013d2:	22ff      	movs	r2, #255	@ 0xff
 80013d4:	401a      	ands	r2, r3
 80013d6:	1dfb      	adds	r3, r7, #7
 80013d8:	781b      	ldrb	r3, [r3, #0]
 80013da:	0018      	movs	r0, r3
 80013dc:	2303      	movs	r3, #3
 80013de:	4003      	ands	r3, r0
 80013e0:	00db      	lsls	r3, r3, #3
 80013e2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80013e4:	481f      	ldr	r0, [pc, #124]	@ (8001464 <__NVIC_SetPriority+0xd4>)
 80013e6:	1dfb      	adds	r3, r7, #7
 80013e8:	781b      	ldrb	r3, [r3, #0]
 80013ea:	b25b      	sxtb	r3, r3
 80013ec:	089b      	lsrs	r3, r3, #2
 80013ee:	430a      	orrs	r2, r1
 80013f0:	33c0      	adds	r3, #192	@ 0xc0
 80013f2:	009b      	lsls	r3, r3, #2
 80013f4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80013f6:	e031      	b.n	800145c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80013f8:	4a1b      	ldr	r2, [pc, #108]	@ (8001468 <__NVIC_SetPriority+0xd8>)
 80013fa:	1dfb      	adds	r3, r7, #7
 80013fc:	781b      	ldrb	r3, [r3, #0]
 80013fe:	0019      	movs	r1, r3
 8001400:	230f      	movs	r3, #15
 8001402:	400b      	ands	r3, r1
 8001404:	3b08      	subs	r3, #8
 8001406:	089b      	lsrs	r3, r3, #2
 8001408:	3306      	adds	r3, #6
 800140a:	009b      	lsls	r3, r3, #2
 800140c:	18d3      	adds	r3, r2, r3
 800140e:	3304      	adds	r3, #4
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	1dfa      	adds	r2, r7, #7
 8001414:	7812      	ldrb	r2, [r2, #0]
 8001416:	0011      	movs	r1, r2
 8001418:	2203      	movs	r2, #3
 800141a:	400a      	ands	r2, r1
 800141c:	00d2      	lsls	r2, r2, #3
 800141e:	21ff      	movs	r1, #255	@ 0xff
 8001420:	4091      	lsls	r1, r2
 8001422:	000a      	movs	r2, r1
 8001424:	43d2      	mvns	r2, r2
 8001426:	401a      	ands	r2, r3
 8001428:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	019b      	lsls	r3, r3, #6
 800142e:	22ff      	movs	r2, #255	@ 0xff
 8001430:	401a      	ands	r2, r3
 8001432:	1dfb      	adds	r3, r7, #7
 8001434:	781b      	ldrb	r3, [r3, #0]
 8001436:	0018      	movs	r0, r3
 8001438:	2303      	movs	r3, #3
 800143a:	4003      	ands	r3, r0
 800143c:	00db      	lsls	r3, r3, #3
 800143e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001440:	4809      	ldr	r0, [pc, #36]	@ (8001468 <__NVIC_SetPriority+0xd8>)
 8001442:	1dfb      	adds	r3, r7, #7
 8001444:	781b      	ldrb	r3, [r3, #0]
 8001446:	001c      	movs	r4, r3
 8001448:	230f      	movs	r3, #15
 800144a:	4023      	ands	r3, r4
 800144c:	3b08      	subs	r3, #8
 800144e:	089b      	lsrs	r3, r3, #2
 8001450:	430a      	orrs	r2, r1
 8001452:	3306      	adds	r3, #6
 8001454:	009b      	lsls	r3, r3, #2
 8001456:	18c3      	adds	r3, r0, r3
 8001458:	3304      	adds	r3, #4
 800145a:	601a      	str	r2, [r3, #0]
}
 800145c:	46c0      	nop			@ (mov r8, r8)
 800145e:	46bd      	mov	sp, r7
 8001460:	b003      	add	sp, #12
 8001462:	bd90      	pop	{r4, r7, pc}
 8001464:	e000e100 	.word	0xe000e100
 8001468:	e000ed00 	.word	0xe000ed00

0800146c <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b084      	sub	sp, #16
 8001470:	af00      	add	r7, sp, #0
 8001472:	60b9      	str	r1, [r7, #8]
 8001474:	607a      	str	r2, [r7, #4]
 8001476:	210f      	movs	r1, #15
 8001478:	187b      	adds	r3, r7, r1
 800147a:	1c02      	adds	r2, r0, #0
 800147c:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 800147e:	68ba      	ldr	r2, [r7, #8]
 8001480:	187b      	adds	r3, r7, r1
 8001482:	781b      	ldrb	r3, [r3, #0]
 8001484:	b25b      	sxtb	r3, r3
 8001486:	0011      	movs	r1, r2
 8001488:	0018      	movs	r0, r3
 800148a:	f7ff ff81 	bl	8001390 <__NVIC_SetPriority>
}
 800148e:	46c0      	nop			@ (mov r8, r8)
 8001490:	46bd      	mov	sp, r7
 8001492:	b004      	add	sp, #16
 8001494:	bd80      	pop	{r7, pc}

08001496 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001496:	b580      	push	{r7, lr}
 8001498:	b082      	sub	sp, #8
 800149a:	af00      	add	r7, sp, #0
 800149c:	0002      	movs	r2, r0
 800149e:	1dfb      	adds	r3, r7, #7
 80014a0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014a2:	1dfb      	adds	r3, r7, #7
 80014a4:	781b      	ldrb	r3, [r3, #0]
 80014a6:	b25b      	sxtb	r3, r3
 80014a8:	0018      	movs	r0, r3
 80014aa:	f7ff ff57 	bl	800135c <__NVIC_EnableIRQ>
}
 80014ae:	46c0      	nop			@ (mov r8, r8)
 80014b0:	46bd      	mov	sp, r7
 80014b2:	b002      	add	sp, #8
 80014b4:	bd80      	pop	{r7, pc}
	...

080014b8 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b082      	sub	sp, #8
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d101      	bne.n	80014ca <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80014c6:	2301      	movs	r3, #1
 80014c8:	e077      	b.n	80015ba <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	4a3d      	ldr	r2, [pc, #244]	@ (80015c4 <HAL_DMA_Init+0x10c>)
 80014d0:	4694      	mov	ip, r2
 80014d2:	4463      	add	r3, ip
 80014d4:	2114      	movs	r1, #20
 80014d6:	0018      	movs	r0, r3
 80014d8:	f7fe fe28 	bl	800012c <__udivsi3>
 80014dc:	0003      	movs	r3, r0
 80014de:	009a      	lsls	r2, r3, #2
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	641a      	str	r2, [r3, #64]	@ 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	2225      	movs	r2, #37	@ 0x25
 80014e8:	2102      	movs	r1, #2
 80014ea:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	681a      	ldr	r2, [r3, #0]
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	4934      	ldr	r1, [pc, #208]	@ (80015c8 <HAL_DMA_Init+0x110>)
 80014f8:	400a      	ands	r2, r1
 80014fa:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	6819      	ldr	r1, [r3, #0]
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	689a      	ldr	r2, [r3, #8]
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	68db      	ldr	r3, [r3, #12]
 800150a:	431a      	orrs	r2, r3
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	691b      	ldr	r3, [r3, #16]
 8001510:	431a      	orrs	r2, r3
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	695b      	ldr	r3, [r3, #20]
 8001516:	431a      	orrs	r2, r3
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	699b      	ldr	r3, [r3, #24]
 800151c:	431a      	orrs	r2, r3
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	69db      	ldr	r3, [r3, #28]
 8001522:	431a      	orrs	r2, r3
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	6a1b      	ldr	r3, [r3, #32]
 8001528:	431a      	orrs	r2, r3
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	430a      	orrs	r2, r1
 8001530:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	0018      	movs	r0, r3
 8001536:	f000 f9c7 	bl	80018c8 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	689a      	ldr	r2, [r3, #8]
 800153e:	2380      	movs	r3, #128	@ 0x80
 8001540:	01db      	lsls	r3, r3, #7
 8001542:	429a      	cmp	r2, r3
 8001544:	d102      	bne.n	800154c <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	2200      	movs	r2, #0
 800154a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	685a      	ldr	r2, [r3, #4]
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001554:	213f      	movs	r1, #63	@ 0x3f
 8001556:	400a      	ands	r2, r1
 8001558:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800155e:	687a      	ldr	r2, [r7, #4]
 8001560:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8001562:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	685b      	ldr	r3, [r3, #4]
 8001568:	2b00      	cmp	r3, #0
 800156a:	d011      	beq.n	8001590 <HAL_DMA_Init+0xd8>
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	685b      	ldr	r3, [r3, #4]
 8001570:	2b04      	cmp	r3, #4
 8001572:	d80d      	bhi.n	8001590 <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	0018      	movs	r0, r3
 8001578:	f000 f9d2 	bl	8001920 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001580:	2200      	movs	r2, #0
 8001582:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001588:	687a      	ldr	r2, [r7, #4]
 800158a:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 800158c:	605a      	str	r2, [r3, #4]
 800158e:	e008      	b.n	80015a2 <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	2200      	movs	r2, #0
 8001594:	651a      	str	r2, [r3, #80]	@ 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	2200      	movs	r2, #0
 800159a:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	2200      	movs	r2, #0
 80015a0:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	2200      	movs	r2, #0
 80015a6:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	2225      	movs	r2, #37	@ 0x25
 80015ac:	2101      	movs	r1, #1
 80015ae:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	2224      	movs	r2, #36	@ 0x24
 80015b4:	2100      	movs	r1, #0
 80015b6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80015b8:	2300      	movs	r3, #0
}
 80015ba:	0018      	movs	r0, r3
 80015bc:	46bd      	mov	sp, r7
 80015be:	b002      	add	sp, #8
 80015c0:	bd80      	pop	{r7, pc}
 80015c2:	46c0      	nop			@ (mov r8, r8)
 80015c4:	bffdfff8 	.word	0xbffdfff8
 80015c8:	ffff800f 	.word	0xffff800f

080015cc <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b082      	sub	sp, #8
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d101      	bne.n	80015de <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 80015da:	2301      	movs	r3, #1
 80015dc:	e050      	b.n	8001680 <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	2225      	movs	r2, #37	@ 0x25
 80015e2:	5c9b      	ldrb	r3, [r3, r2]
 80015e4:	b2db      	uxtb	r3, r3
 80015e6:	2b02      	cmp	r3, #2
 80015e8:	d008      	beq.n	80015fc <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	2204      	movs	r2, #4
 80015ee:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	2224      	movs	r2, #36	@ 0x24
 80015f4:	2100      	movs	r1, #0
 80015f6:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80015f8:	2301      	movs	r3, #1
 80015fa:	e041      	b.n	8001680 <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	681a      	ldr	r2, [r3, #0]
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	210e      	movs	r1, #14
 8001608:	438a      	bics	r2, r1
 800160a:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001610:	681a      	ldr	r2, [r3, #0]
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001616:	491c      	ldr	r1, [pc, #112]	@ (8001688 <HAL_DMA_Abort+0xbc>)
 8001618:	400a      	ands	r2, r1
 800161a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	681a      	ldr	r2, [r3, #0]
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	2101      	movs	r1, #1
 8001628:	438a      	bics	r2, r1
 800162a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 800162c:	4b17      	ldr	r3, [pc, #92]	@ (800168c <HAL_DMA_Abort+0xc0>)
 800162e:	6859      	ldr	r1, [r3, #4]
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001634:	221c      	movs	r2, #28
 8001636:	4013      	ands	r3, r2
 8001638:	2201      	movs	r2, #1
 800163a:	409a      	lsls	r2, r3
 800163c:	4b13      	ldr	r3, [pc, #76]	@ (800168c <HAL_DMA_Abort+0xc0>)
 800163e:	430a      	orrs	r2, r1
 8001640:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001646:	687a      	ldr	r2, [r7, #4]
 8001648:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800164a:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001650:	2b00      	cmp	r3, #0
 8001652:	d00c      	beq.n	800166e <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001658:	681a      	ldr	r2, [r3, #0]
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800165e:	490a      	ldr	r1, [pc, #40]	@ (8001688 <HAL_DMA_Abort+0xbc>)
 8001660:	400a      	ands	r2, r1
 8001662:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001668:	687a      	ldr	r2, [r7, #4]
 800166a:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 800166c:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	2225      	movs	r2, #37	@ 0x25
 8001672:	2101      	movs	r1, #1
 8001674:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	2224      	movs	r2, #36	@ 0x24
 800167a:	2100      	movs	r1, #0
 800167c:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 800167e:	2300      	movs	r3, #0
}
 8001680:	0018      	movs	r0, r3
 8001682:	46bd      	mov	sp, r7
 8001684:	b002      	add	sp, #8
 8001686:	bd80      	pop	{r7, pc}
 8001688:	fffffeff 	.word	0xfffffeff
 800168c:	40020000 	.word	0x40020000

08001690 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b084      	sub	sp, #16
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001698:	210f      	movs	r1, #15
 800169a:	187b      	adds	r3, r7, r1
 800169c:	2200      	movs	r2, #0
 800169e:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	2225      	movs	r2, #37	@ 0x25
 80016a4:	5c9b      	ldrb	r3, [r3, r2]
 80016a6:	b2db      	uxtb	r3, r3
 80016a8:	2b02      	cmp	r3, #2
 80016aa:	d006      	beq.n	80016ba <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	2204      	movs	r2, #4
 80016b0:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80016b2:	187b      	adds	r3, r7, r1
 80016b4:	2201      	movs	r2, #1
 80016b6:	701a      	strb	r2, [r3, #0]
 80016b8:	e049      	b.n	800174e <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	681a      	ldr	r2, [r3, #0]
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	210e      	movs	r1, #14
 80016c6:	438a      	bics	r2, r1
 80016c8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	681a      	ldr	r2, [r3, #0]
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	2101      	movs	r1, #1
 80016d6:	438a      	bics	r2, r1
 80016d8:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016de:	681a      	ldr	r2, [r3, #0]
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016e4:	491d      	ldr	r1, [pc, #116]	@ (800175c <HAL_DMA_Abort_IT+0xcc>)
 80016e6:	400a      	ands	r2, r1
 80016e8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 80016ea:	4b1d      	ldr	r3, [pc, #116]	@ (8001760 <HAL_DMA_Abort_IT+0xd0>)
 80016ec:	6859      	ldr	r1, [r3, #4]
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016f2:	221c      	movs	r2, #28
 80016f4:	4013      	ands	r3, r2
 80016f6:	2201      	movs	r2, #1
 80016f8:	409a      	lsls	r2, r3
 80016fa:	4b19      	ldr	r3, [pc, #100]	@ (8001760 <HAL_DMA_Abort_IT+0xd0>)
 80016fc:	430a      	orrs	r2, r1
 80016fe:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001704:	687a      	ldr	r2, [r7, #4]
 8001706:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8001708:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800170e:	2b00      	cmp	r3, #0
 8001710:	d00c      	beq.n	800172c <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001716:	681a      	ldr	r2, [r3, #0]
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800171c:	490f      	ldr	r1, [pc, #60]	@ (800175c <HAL_DMA_Abort_IT+0xcc>)
 800171e:	400a      	ands	r2, r1
 8001720:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001726:	687a      	ldr	r2, [r7, #4]
 8001728:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 800172a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	2225      	movs	r2, #37	@ 0x25
 8001730:	2101      	movs	r1, #1
 8001732:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	2224      	movs	r2, #36	@ 0x24
 8001738:	2100      	movs	r1, #0
 800173a:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001740:	2b00      	cmp	r3, #0
 8001742:	d004      	beq.n	800174e <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001748:	687a      	ldr	r2, [r7, #4]
 800174a:	0010      	movs	r0, r2
 800174c:	4798      	blx	r3
    }
  }
  return status;
 800174e:	230f      	movs	r3, #15
 8001750:	18fb      	adds	r3, r7, r3
 8001752:	781b      	ldrb	r3, [r3, #0]
}
 8001754:	0018      	movs	r0, r3
 8001756:	46bd      	mov	sp, r7
 8001758:	b004      	add	sp, #16
 800175a:	bd80      	pop	{r7, pc}
 800175c:	fffffeff 	.word	0xfffffeff
 8001760:	40020000 	.word	0x40020000

08001764 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b084      	sub	sp, #16
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 800176c:	4b55      	ldr	r3, [pc, #340]	@ (80018c4 <HAL_DMA_IRQHandler+0x160>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800177e:	221c      	movs	r2, #28
 8001780:	4013      	ands	r3, r2
 8001782:	2204      	movs	r2, #4
 8001784:	409a      	lsls	r2, r3
 8001786:	0013      	movs	r3, r2
 8001788:	68fa      	ldr	r2, [r7, #12]
 800178a:	4013      	ands	r3, r2
 800178c:	d027      	beq.n	80017de <HAL_DMA_IRQHandler+0x7a>
 800178e:	68bb      	ldr	r3, [r7, #8]
 8001790:	2204      	movs	r2, #4
 8001792:	4013      	ands	r3, r2
 8001794:	d023      	beq.n	80017de <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	2220      	movs	r2, #32
 800179e:	4013      	ands	r3, r2
 80017a0:	d107      	bne.n	80017b2 <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	681a      	ldr	r2, [r3, #0]
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	2104      	movs	r1, #4
 80017ae:	438a      	bics	r2, r1
 80017b0:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 80017b2:	4b44      	ldr	r3, [pc, #272]	@ (80018c4 <HAL_DMA_IRQHandler+0x160>)
 80017b4:	6859      	ldr	r1, [r3, #4]
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017ba:	221c      	movs	r2, #28
 80017bc:	4013      	ands	r3, r2
 80017be:	2204      	movs	r2, #4
 80017c0:	409a      	lsls	r2, r3
 80017c2:	4b40      	ldr	r3, [pc, #256]	@ (80018c4 <HAL_DMA_IRQHandler+0x160>)
 80017c4:	430a      	orrs	r2, r1
 80017c6:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d100      	bne.n	80017d2 <HAL_DMA_IRQHandler+0x6e>
 80017d0:	e073      	b.n	80018ba <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017d6:	687a      	ldr	r2, [r7, #4]
 80017d8:	0010      	movs	r0, r2
 80017da:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 80017dc:	e06d      	b.n	80018ba <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017e2:	221c      	movs	r2, #28
 80017e4:	4013      	ands	r3, r2
 80017e6:	2202      	movs	r2, #2
 80017e8:	409a      	lsls	r2, r3
 80017ea:	0013      	movs	r3, r2
 80017ec:	68fa      	ldr	r2, [r7, #12]
 80017ee:	4013      	ands	r3, r2
 80017f0:	d02e      	beq.n	8001850 <HAL_DMA_IRQHandler+0xec>
 80017f2:	68bb      	ldr	r3, [r7, #8]
 80017f4:	2202      	movs	r2, #2
 80017f6:	4013      	ands	r3, r2
 80017f8:	d02a      	beq.n	8001850 <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	2220      	movs	r2, #32
 8001802:	4013      	ands	r3, r2
 8001804:	d10b      	bne.n	800181e <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	681a      	ldr	r2, [r3, #0]
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	210a      	movs	r1, #10
 8001812:	438a      	bics	r2, r1
 8001814:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	2225      	movs	r2, #37	@ 0x25
 800181a:	2101      	movs	r1, #1
 800181c:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 800181e:	4b29      	ldr	r3, [pc, #164]	@ (80018c4 <HAL_DMA_IRQHandler+0x160>)
 8001820:	6859      	ldr	r1, [r3, #4]
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001826:	221c      	movs	r2, #28
 8001828:	4013      	ands	r3, r2
 800182a:	2202      	movs	r2, #2
 800182c:	409a      	lsls	r2, r3
 800182e:	4b25      	ldr	r3, [pc, #148]	@ (80018c4 <HAL_DMA_IRQHandler+0x160>)
 8001830:	430a      	orrs	r2, r1
 8001832:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	2224      	movs	r2, #36	@ 0x24
 8001838:	2100      	movs	r1, #0
 800183a:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001840:	2b00      	cmp	r3, #0
 8001842:	d03a      	beq.n	80018ba <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001848:	687a      	ldr	r2, [r7, #4]
 800184a:	0010      	movs	r0, r2
 800184c:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 800184e:	e034      	b.n	80018ba <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001854:	221c      	movs	r2, #28
 8001856:	4013      	ands	r3, r2
 8001858:	2208      	movs	r2, #8
 800185a:	409a      	lsls	r2, r3
 800185c:	0013      	movs	r3, r2
 800185e:	68fa      	ldr	r2, [r7, #12]
 8001860:	4013      	ands	r3, r2
 8001862:	d02b      	beq.n	80018bc <HAL_DMA_IRQHandler+0x158>
 8001864:	68bb      	ldr	r3, [r7, #8]
 8001866:	2208      	movs	r2, #8
 8001868:	4013      	ands	r3, r2
 800186a:	d027      	beq.n	80018bc <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	681a      	ldr	r2, [r3, #0]
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	210e      	movs	r1, #14
 8001878:	438a      	bics	r2, r1
 800187a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 800187c:	4b11      	ldr	r3, [pc, #68]	@ (80018c4 <HAL_DMA_IRQHandler+0x160>)
 800187e:	6859      	ldr	r1, [r3, #4]
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001884:	221c      	movs	r2, #28
 8001886:	4013      	ands	r3, r2
 8001888:	2201      	movs	r2, #1
 800188a:	409a      	lsls	r2, r3
 800188c:	4b0d      	ldr	r3, [pc, #52]	@ (80018c4 <HAL_DMA_IRQHandler+0x160>)
 800188e:	430a      	orrs	r2, r1
 8001890:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	2201      	movs	r2, #1
 8001896:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	2225      	movs	r2, #37	@ 0x25
 800189c:	2101      	movs	r1, #1
 800189e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	2224      	movs	r2, #36	@ 0x24
 80018a4:	2100      	movs	r1, #0
 80018a6:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d005      	beq.n	80018bc <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80018b4:	687a      	ldr	r2, [r7, #4]
 80018b6:	0010      	movs	r0, r2
 80018b8:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80018ba:	46c0      	nop			@ (mov r8, r8)
 80018bc:	46c0      	nop			@ (mov r8, r8)
}
 80018be:	46bd      	mov	sp, r7
 80018c0:	b004      	add	sp, #16
 80018c2:	bd80      	pop	{r7, pc}
 80018c4:	40020000 	.word	0x40020000

080018c8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b084      	sub	sp, #16
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018d4:	089b      	lsrs	r3, r3, #2
 80018d6:	4a10      	ldr	r2, [pc, #64]	@ (8001918 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 80018d8:	4694      	mov	ip, r2
 80018da:	4463      	add	r3, ip
 80018dc:	009b      	lsls	r3, r3, #2
 80018de:	001a      	movs	r2, r3
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	001a      	movs	r2, r3
 80018ea:	23ff      	movs	r3, #255	@ 0xff
 80018ec:	4013      	ands	r3, r2
 80018ee:	3b08      	subs	r3, #8
 80018f0:	2114      	movs	r1, #20
 80018f2:	0018      	movs	r0, r3
 80018f4:	f7fe fc1a 	bl	800012c <__udivsi3>
 80018f8:	0003      	movs	r3, r0
 80018fa:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	4a07      	ldr	r2, [pc, #28]	@ (800191c <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8001900:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	221f      	movs	r2, #31
 8001906:	4013      	ands	r3, r2
 8001908:	2201      	movs	r2, #1
 800190a:	409a      	lsls	r2, r3
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	64da      	str	r2, [r3, #76]	@ 0x4c
}
 8001910:	46c0      	nop			@ (mov r8, r8)
 8001912:	46bd      	mov	sp, r7
 8001914:	b004      	add	sp, #16
 8001916:	bd80      	pop	{r7, pc}
 8001918:	10008200 	.word	0x10008200
 800191c:	40020880 	.word	0x40020880

08001920 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b084      	sub	sp, #16
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	223f      	movs	r2, #63	@ 0x3f
 800192e:	4013      	ands	r3, r2
 8001930:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	4a0a      	ldr	r2, [pc, #40]	@ (8001960 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8001936:	4694      	mov	ip, r2
 8001938:	4463      	add	r3, ip
 800193a:	009b      	lsls	r3, r3, #2
 800193c:	001a      	movs	r2, r3
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	651a      	str	r2, [r3, #80]	@ 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	4a07      	ldr	r2, [pc, #28]	@ (8001964 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8001946:	655a      	str	r2, [r3, #84]	@ 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	3b01      	subs	r3, #1
 800194c:	2203      	movs	r2, #3
 800194e:	4013      	ands	r3, r2
 8001950:	2201      	movs	r2, #1
 8001952:	409a      	lsls	r2, r3
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	659a      	str	r2, [r3, #88]	@ 0x58
}
 8001958:	46c0      	nop			@ (mov r8, r8)
 800195a:	46bd      	mov	sp, r7
 800195c:	b004      	add	sp, #16
 800195e:	bd80      	pop	{r7, pc}
 8001960:	1000823f 	.word	0x1000823f
 8001964:	40020940 	.word	0x40020940

08001968 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b086      	sub	sp, #24
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
 8001970:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001972:	2300      	movs	r3, #0
 8001974:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001976:	e147      	b.n	8001c08 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	2101      	movs	r1, #1
 800197e:	697a      	ldr	r2, [r7, #20]
 8001980:	4091      	lsls	r1, r2
 8001982:	000a      	movs	r2, r1
 8001984:	4013      	ands	r3, r2
 8001986:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	2b00      	cmp	r3, #0
 800198c:	d100      	bne.n	8001990 <HAL_GPIO_Init+0x28>
 800198e:	e138      	b.n	8001c02 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	685b      	ldr	r3, [r3, #4]
 8001994:	2203      	movs	r2, #3
 8001996:	4013      	ands	r3, r2
 8001998:	2b01      	cmp	r3, #1
 800199a:	d005      	beq.n	80019a8 <HAL_GPIO_Init+0x40>
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	685b      	ldr	r3, [r3, #4]
 80019a0:	2203      	movs	r2, #3
 80019a2:	4013      	ands	r3, r2
 80019a4:	2b02      	cmp	r3, #2
 80019a6:	d130      	bne.n	8001a0a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	689b      	ldr	r3, [r3, #8]
 80019ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80019ae:	697b      	ldr	r3, [r7, #20]
 80019b0:	005b      	lsls	r3, r3, #1
 80019b2:	2203      	movs	r2, #3
 80019b4:	409a      	lsls	r2, r3
 80019b6:	0013      	movs	r3, r2
 80019b8:	43da      	mvns	r2, r3
 80019ba:	693b      	ldr	r3, [r7, #16]
 80019bc:	4013      	ands	r3, r2
 80019be:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	68da      	ldr	r2, [r3, #12]
 80019c4:	697b      	ldr	r3, [r7, #20]
 80019c6:	005b      	lsls	r3, r3, #1
 80019c8:	409a      	lsls	r2, r3
 80019ca:	0013      	movs	r3, r2
 80019cc:	693a      	ldr	r2, [r7, #16]
 80019ce:	4313      	orrs	r3, r2
 80019d0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	693a      	ldr	r2, [r7, #16]
 80019d6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	685b      	ldr	r3, [r3, #4]
 80019dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80019de:	2201      	movs	r2, #1
 80019e0:	697b      	ldr	r3, [r7, #20]
 80019e2:	409a      	lsls	r2, r3
 80019e4:	0013      	movs	r3, r2
 80019e6:	43da      	mvns	r2, r3
 80019e8:	693b      	ldr	r3, [r7, #16]
 80019ea:	4013      	ands	r3, r2
 80019ec:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80019ee:	683b      	ldr	r3, [r7, #0]
 80019f0:	685b      	ldr	r3, [r3, #4]
 80019f2:	091b      	lsrs	r3, r3, #4
 80019f4:	2201      	movs	r2, #1
 80019f6:	401a      	ands	r2, r3
 80019f8:	697b      	ldr	r3, [r7, #20]
 80019fa:	409a      	lsls	r2, r3
 80019fc:	0013      	movs	r3, r2
 80019fe:	693a      	ldr	r2, [r7, #16]
 8001a00:	4313      	orrs	r3, r2
 8001a02:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	693a      	ldr	r2, [r7, #16]
 8001a08:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	685b      	ldr	r3, [r3, #4]
 8001a0e:	2203      	movs	r2, #3
 8001a10:	4013      	ands	r3, r2
 8001a12:	2b03      	cmp	r3, #3
 8001a14:	d017      	beq.n	8001a46 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	68db      	ldr	r3, [r3, #12]
 8001a1a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001a1c:	697b      	ldr	r3, [r7, #20]
 8001a1e:	005b      	lsls	r3, r3, #1
 8001a20:	2203      	movs	r2, #3
 8001a22:	409a      	lsls	r2, r3
 8001a24:	0013      	movs	r3, r2
 8001a26:	43da      	mvns	r2, r3
 8001a28:	693b      	ldr	r3, [r7, #16]
 8001a2a:	4013      	ands	r3, r2
 8001a2c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	689a      	ldr	r2, [r3, #8]
 8001a32:	697b      	ldr	r3, [r7, #20]
 8001a34:	005b      	lsls	r3, r3, #1
 8001a36:	409a      	lsls	r2, r3
 8001a38:	0013      	movs	r3, r2
 8001a3a:	693a      	ldr	r2, [r7, #16]
 8001a3c:	4313      	orrs	r3, r2
 8001a3e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	693a      	ldr	r2, [r7, #16]
 8001a44:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	685b      	ldr	r3, [r3, #4]
 8001a4a:	2203      	movs	r2, #3
 8001a4c:	4013      	ands	r3, r2
 8001a4e:	2b02      	cmp	r3, #2
 8001a50:	d123      	bne.n	8001a9a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001a52:	697b      	ldr	r3, [r7, #20]
 8001a54:	08da      	lsrs	r2, r3, #3
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	3208      	adds	r2, #8
 8001a5a:	0092      	lsls	r2, r2, #2
 8001a5c:	58d3      	ldr	r3, [r2, r3]
 8001a5e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001a60:	697b      	ldr	r3, [r7, #20]
 8001a62:	2207      	movs	r2, #7
 8001a64:	4013      	ands	r3, r2
 8001a66:	009b      	lsls	r3, r3, #2
 8001a68:	220f      	movs	r2, #15
 8001a6a:	409a      	lsls	r2, r3
 8001a6c:	0013      	movs	r3, r2
 8001a6e:	43da      	mvns	r2, r3
 8001a70:	693b      	ldr	r3, [r7, #16]
 8001a72:	4013      	ands	r3, r2
 8001a74:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	691a      	ldr	r2, [r3, #16]
 8001a7a:	697b      	ldr	r3, [r7, #20]
 8001a7c:	2107      	movs	r1, #7
 8001a7e:	400b      	ands	r3, r1
 8001a80:	009b      	lsls	r3, r3, #2
 8001a82:	409a      	lsls	r2, r3
 8001a84:	0013      	movs	r3, r2
 8001a86:	693a      	ldr	r2, [r7, #16]
 8001a88:	4313      	orrs	r3, r2
 8001a8a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001a8c:	697b      	ldr	r3, [r7, #20]
 8001a8e:	08da      	lsrs	r2, r3, #3
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	3208      	adds	r2, #8
 8001a94:	0092      	lsls	r2, r2, #2
 8001a96:	6939      	ldr	r1, [r7, #16]
 8001a98:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001aa0:	697b      	ldr	r3, [r7, #20]
 8001aa2:	005b      	lsls	r3, r3, #1
 8001aa4:	2203      	movs	r2, #3
 8001aa6:	409a      	lsls	r2, r3
 8001aa8:	0013      	movs	r3, r2
 8001aaa:	43da      	mvns	r2, r3
 8001aac:	693b      	ldr	r3, [r7, #16]
 8001aae:	4013      	ands	r3, r2
 8001ab0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	685b      	ldr	r3, [r3, #4]
 8001ab6:	2203      	movs	r2, #3
 8001ab8:	401a      	ands	r2, r3
 8001aba:	697b      	ldr	r3, [r7, #20]
 8001abc:	005b      	lsls	r3, r3, #1
 8001abe:	409a      	lsls	r2, r3
 8001ac0:	0013      	movs	r3, r2
 8001ac2:	693a      	ldr	r2, [r7, #16]
 8001ac4:	4313      	orrs	r3, r2
 8001ac6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	693a      	ldr	r2, [r7, #16]
 8001acc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	685a      	ldr	r2, [r3, #4]
 8001ad2:	23c0      	movs	r3, #192	@ 0xc0
 8001ad4:	029b      	lsls	r3, r3, #10
 8001ad6:	4013      	ands	r3, r2
 8001ad8:	d100      	bne.n	8001adc <HAL_GPIO_Init+0x174>
 8001ada:	e092      	b.n	8001c02 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8001adc:	4a50      	ldr	r2, [pc, #320]	@ (8001c20 <HAL_GPIO_Init+0x2b8>)
 8001ade:	697b      	ldr	r3, [r7, #20]
 8001ae0:	089b      	lsrs	r3, r3, #2
 8001ae2:	3318      	adds	r3, #24
 8001ae4:	009b      	lsls	r3, r3, #2
 8001ae6:	589b      	ldr	r3, [r3, r2]
 8001ae8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8001aea:	697b      	ldr	r3, [r7, #20]
 8001aec:	2203      	movs	r2, #3
 8001aee:	4013      	ands	r3, r2
 8001af0:	00db      	lsls	r3, r3, #3
 8001af2:	220f      	movs	r2, #15
 8001af4:	409a      	lsls	r2, r3
 8001af6:	0013      	movs	r3, r2
 8001af8:	43da      	mvns	r2, r3
 8001afa:	693b      	ldr	r3, [r7, #16]
 8001afc:	4013      	ands	r3, r2
 8001afe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8001b00:	687a      	ldr	r2, [r7, #4]
 8001b02:	23a0      	movs	r3, #160	@ 0xa0
 8001b04:	05db      	lsls	r3, r3, #23
 8001b06:	429a      	cmp	r2, r3
 8001b08:	d013      	beq.n	8001b32 <HAL_GPIO_Init+0x1ca>
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	4a45      	ldr	r2, [pc, #276]	@ (8001c24 <HAL_GPIO_Init+0x2bc>)
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	d00d      	beq.n	8001b2e <HAL_GPIO_Init+0x1c6>
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	4a44      	ldr	r2, [pc, #272]	@ (8001c28 <HAL_GPIO_Init+0x2c0>)
 8001b16:	4293      	cmp	r3, r2
 8001b18:	d007      	beq.n	8001b2a <HAL_GPIO_Init+0x1c2>
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	4a43      	ldr	r2, [pc, #268]	@ (8001c2c <HAL_GPIO_Init+0x2c4>)
 8001b1e:	4293      	cmp	r3, r2
 8001b20:	d101      	bne.n	8001b26 <HAL_GPIO_Init+0x1be>
 8001b22:	2303      	movs	r3, #3
 8001b24:	e006      	b.n	8001b34 <HAL_GPIO_Init+0x1cc>
 8001b26:	2305      	movs	r3, #5
 8001b28:	e004      	b.n	8001b34 <HAL_GPIO_Init+0x1cc>
 8001b2a:	2302      	movs	r3, #2
 8001b2c:	e002      	b.n	8001b34 <HAL_GPIO_Init+0x1cc>
 8001b2e:	2301      	movs	r3, #1
 8001b30:	e000      	b.n	8001b34 <HAL_GPIO_Init+0x1cc>
 8001b32:	2300      	movs	r3, #0
 8001b34:	697a      	ldr	r2, [r7, #20]
 8001b36:	2103      	movs	r1, #3
 8001b38:	400a      	ands	r2, r1
 8001b3a:	00d2      	lsls	r2, r2, #3
 8001b3c:	4093      	lsls	r3, r2
 8001b3e:	693a      	ldr	r2, [r7, #16]
 8001b40:	4313      	orrs	r3, r2
 8001b42:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8001b44:	4936      	ldr	r1, [pc, #216]	@ (8001c20 <HAL_GPIO_Init+0x2b8>)
 8001b46:	697b      	ldr	r3, [r7, #20]
 8001b48:	089b      	lsrs	r3, r3, #2
 8001b4a:	3318      	adds	r3, #24
 8001b4c:	009b      	lsls	r3, r3, #2
 8001b4e:	693a      	ldr	r2, [r7, #16]
 8001b50:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001b52:	4b33      	ldr	r3, [pc, #204]	@ (8001c20 <HAL_GPIO_Init+0x2b8>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	43da      	mvns	r2, r3
 8001b5c:	693b      	ldr	r3, [r7, #16]
 8001b5e:	4013      	ands	r3, r2
 8001b60:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	685a      	ldr	r2, [r3, #4]
 8001b66:	2380      	movs	r3, #128	@ 0x80
 8001b68:	035b      	lsls	r3, r3, #13
 8001b6a:	4013      	ands	r3, r2
 8001b6c:	d003      	beq.n	8001b76 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8001b6e:	693a      	ldr	r2, [r7, #16]
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	4313      	orrs	r3, r2
 8001b74:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001b76:	4b2a      	ldr	r3, [pc, #168]	@ (8001c20 <HAL_GPIO_Init+0x2b8>)
 8001b78:	693a      	ldr	r2, [r7, #16]
 8001b7a:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8001b7c:	4b28      	ldr	r3, [pc, #160]	@ (8001c20 <HAL_GPIO_Init+0x2b8>)
 8001b7e:	685b      	ldr	r3, [r3, #4]
 8001b80:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	43da      	mvns	r2, r3
 8001b86:	693b      	ldr	r3, [r7, #16]
 8001b88:	4013      	ands	r3, r2
 8001b8a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	685a      	ldr	r2, [r3, #4]
 8001b90:	2380      	movs	r3, #128	@ 0x80
 8001b92:	039b      	lsls	r3, r3, #14
 8001b94:	4013      	ands	r3, r2
 8001b96:	d003      	beq.n	8001ba0 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8001b98:	693a      	ldr	r2, [r7, #16]
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	4313      	orrs	r3, r2
 8001b9e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001ba0:	4b1f      	ldr	r3, [pc, #124]	@ (8001c20 <HAL_GPIO_Init+0x2b8>)
 8001ba2:	693a      	ldr	r2, [r7, #16]
 8001ba4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001ba6:	4a1e      	ldr	r2, [pc, #120]	@ (8001c20 <HAL_GPIO_Init+0x2b8>)
 8001ba8:	2384      	movs	r3, #132	@ 0x84
 8001baa:	58d3      	ldr	r3, [r2, r3]
 8001bac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	43da      	mvns	r2, r3
 8001bb2:	693b      	ldr	r3, [r7, #16]
 8001bb4:	4013      	ands	r3, r2
 8001bb6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	685a      	ldr	r2, [r3, #4]
 8001bbc:	2380      	movs	r3, #128	@ 0x80
 8001bbe:	029b      	lsls	r3, r3, #10
 8001bc0:	4013      	ands	r3, r2
 8001bc2:	d003      	beq.n	8001bcc <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8001bc4:	693a      	ldr	r2, [r7, #16]
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	4313      	orrs	r3, r2
 8001bca:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001bcc:	4914      	ldr	r1, [pc, #80]	@ (8001c20 <HAL_GPIO_Init+0x2b8>)
 8001bce:	2284      	movs	r2, #132	@ 0x84
 8001bd0:	693b      	ldr	r3, [r7, #16]
 8001bd2:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8001bd4:	4a12      	ldr	r2, [pc, #72]	@ (8001c20 <HAL_GPIO_Init+0x2b8>)
 8001bd6:	2380      	movs	r3, #128	@ 0x80
 8001bd8:	58d3      	ldr	r3, [r2, r3]
 8001bda:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	43da      	mvns	r2, r3
 8001be0:	693b      	ldr	r3, [r7, #16]
 8001be2:	4013      	ands	r3, r2
 8001be4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	685a      	ldr	r2, [r3, #4]
 8001bea:	2380      	movs	r3, #128	@ 0x80
 8001bec:	025b      	lsls	r3, r3, #9
 8001bee:	4013      	ands	r3, r2
 8001bf0:	d003      	beq.n	8001bfa <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8001bf2:	693a      	ldr	r2, [r7, #16]
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	4313      	orrs	r3, r2
 8001bf8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001bfa:	4909      	ldr	r1, [pc, #36]	@ (8001c20 <HAL_GPIO_Init+0x2b8>)
 8001bfc:	2280      	movs	r2, #128	@ 0x80
 8001bfe:	693b      	ldr	r3, [r7, #16]
 8001c00:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8001c02:	697b      	ldr	r3, [r7, #20]
 8001c04:	3301      	adds	r3, #1
 8001c06:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	681a      	ldr	r2, [r3, #0]
 8001c0c:	697b      	ldr	r3, [r7, #20]
 8001c0e:	40da      	lsrs	r2, r3
 8001c10:	1e13      	subs	r3, r2, #0
 8001c12:	d000      	beq.n	8001c16 <HAL_GPIO_Init+0x2ae>
 8001c14:	e6b0      	b.n	8001978 <HAL_GPIO_Init+0x10>
  }
}
 8001c16:	46c0      	nop			@ (mov r8, r8)
 8001c18:	46c0      	nop			@ (mov r8, r8)
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	b006      	add	sp, #24
 8001c1e:	bd80      	pop	{r7, pc}
 8001c20:	40021800 	.word	0x40021800
 8001c24:	50000400 	.word	0x50000400
 8001c28:	50000800 	.word	0x50000800
 8001c2c:	50000c00 	.word	0x50000c00

08001c30 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b082      	sub	sp, #8
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
 8001c38:	0008      	movs	r0, r1
 8001c3a:	0011      	movs	r1, r2
 8001c3c:	1cbb      	adds	r3, r7, #2
 8001c3e:	1c02      	adds	r2, r0, #0
 8001c40:	801a      	strh	r2, [r3, #0]
 8001c42:	1c7b      	adds	r3, r7, #1
 8001c44:	1c0a      	adds	r2, r1, #0
 8001c46:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001c48:	1c7b      	adds	r3, r7, #1
 8001c4a:	781b      	ldrb	r3, [r3, #0]
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d004      	beq.n	8001c5a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001c50:	1cbb      	adds	r3, r7, #2
 8001c52:	881a      	ldrh	r2, [r3, #0]
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001c58:	e003      	b.n	8001c62 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001c5a:	1cbb      	adds	r3, r7, #2
 8001c5c:	881a      	ldrh	r2, [r3, #0]
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001c62:	46c0      	nop			@ (mov r8, r8)
 8001c64:	46bd      	mov	sp, r7
 8001c66:	b002      	add	sp, #8
 8001c68:	bd80      	pop	{r7, pc}

08001c6a <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001c6a:	b580      	push	{r7, lr}
 8001c6c:	b084      	sub	sp, #16
 8001c6e:	af00      	add	r7, sp, #0
 8001c70:	6078      	str	r0, [r7, #4]
 8001c72:	000a      	movs	r2, r1
 8001c74:	1cbb      	adds	r3, r7, #2
 8001c76:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	695b      	ldr	r3, [r3, #20]
 8001c7c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001c7e:	1cbb      	adds	r3, r7, #2
 8001c80:	881b      	ldrh	r3, [r3, #0]
 8001c82:	68fa      	ldr	r2, [r7, #12]
 8001c84:	4013      	ands	r3, r2
 8001c86:	041a      	lsls	r2, r3, #16
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	43db      	mvns	r3, r3
 8001c8c:	1cb9      	adds	r1, r7, #2
 8001c8e:	8809      	ldrh	r1, [r1, #0]
 8001c90:	400b      	ands	r3, r1
 8001c92:	431a      	orrs	r2, r3
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	619a      	str	r2, [r3, #24]
}
 8001c98:	46c0      	nop			@ (mov r8, r8)
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	b004      	add	sp, #16
 8001c9e:	bd80      	pop	{r7, pc}

08001ca0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b084      	sub	sp, #16
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001ca8:	4b19      	ldr	r3, [pc, #100]	@ (8001d10 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4a19      	ldr	r2, [pc, #100]	@ (8001d14 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8001cae:	4013      	ands	r3, r2
 8001cb0:	0019      	movs	r1, r3
 8001cb2:	4b17      	ldr	r3, [pc, #92]	@ (8001d10 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001cb4:	687a      	ldr	r2, [r7, #4]
 8001cb6:	430a      	orrs	r2, r1
 8001cb8:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001cba:	687a      	ldr	r2, [r7, #4]
 8001cbc:	2380      	movs	r3, #128	@ 0x80
 8001cbe:	009b      	lsls	r3, r3, #2
 8001cc0:	429a      	cmp	r2, r3
 8001cc2:	d11f      	bne.n	8001d04 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8001cc4:	4b14      	ldr	r3, [pc, #80]	@ (8001d18 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8001cc6:	681a      	ldr	r2, [r3, #0]
 8001cc8:	0013      	movs	r3, r2
 8001cca:	005b      	lsls	r3, r3, #1
 8001ccc:	189b      	adds	r3, r3, r2
 8001cce:	005b      	lsls	r3, r3, #1
 8001cd0:	4912      	ldr	r1, [pc, #72]	@ (8001d1c <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8001cd2:	0018      	movs	r0, r3
 8001cd4:	f7fe fa2a 	bl	800012c <__udivsi3>
 8001cd8:	0003      	movs	r3, r0
 8001cda:	3301      	adds	r3, #1
 8001cdc:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001cde:	e008      	b.n	8001cf2 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d003      	beq.n	8001cee <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	3b01      	subs	r3, #1
 8001cea:	60fb      	str	r3, [r7, #12]
 8001cec:	e001      	b.n	8001cf2 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8001cee:	2303      	movs	r3, #3
 8001cf0:	e009      	b.n	8001d06 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001cf2:	4b07      	ldr	r3, [pc, #28]	@ (8001d10 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001cf4:	695a      	ldr	r2, [r3, #20]
 8001cf6:	2380      	movs	r3, #128	@ 0x80
 8001cf8:	00db      	lsls	r3, r3, #3
 8001cfa:	401a      	ands	r2, r3
 8001cfc:	2380      	movs	r3, #128	@ 0x80
 8001cfe:	00db      	lsls	r3, r3, #3
 8001d00:	429a      	cmp	r2, r3
 8001d02:	d0ed      	beq.n	8001ce0 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8001d04:	2300      	movs	r3, #0
}
 8001d06:	0018      	movs	r0, r3
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	b004      	add	sp, #16
 8001d0c:	bd80      	pop	{r7, pc}
 8001d0e:	46c0      	nop			@ (mov r8, r8)
 8001d10:	40007000 	.word	0x40007000
 8001d14:	fffff9ff 	.word	0xfffff9ff
 8001d18:	200001ac 	.word	0x200001ac
 8001d1c:	000f4240 	.word	0x000f4240

08001d20 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8001d24:	4b03      	ldr	r3, [pc, #12]	@ (8001d34 <LL_RCC_GetAPB1Prescaler+0x14>)
 8001d26:	689a      	ldr	r2, [r3, #8]
 8001d28:	23e0      	movs	r3, #224	@ 0xe0
 8001d2a:	01db      	lsls	r3, r3, #7
 8001d2c:	4013      	ands	r3, r2
}
 8001d2e:	0018      	movs	r0, r3
 8001d30:	46bd      	mov	sp, r7
 8001d32:	bd80      	pop	{r7, pc}
 8001d34:	40021000 	.word	0x40021000

08001d38 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b088      	sub	sp, #32
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d101      	bne.n	8001d4a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d46:	2301      	movs	r3, #1
 8001d48:	e2fe      	b.n	8002348 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	2201      	movs	r2, #1
 8001d50:	4013      	ands	r3, r2
 8001d52:	d100      	bne.n	8001d56 <HAL_RCC_OscConfig+0x1e>
 8001d54:	e07c      	b.n	8001e50 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d56:	4bc3      	ldr	r3, [pc, #780]	@ (8002064 <HAL_RCC_OscConfig+0x32c>)
 8001d58:	689b      	ldr	r3, [r3, #8]
 8001d5a:	2238      	movs	r2, #56	@ 0x38
 8001d5c:	4013      	ands	r3, r2
 8001d5e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001d60:	4bc0      	ldr	r3, [pc, #768]	@ (8002064 <HAL_RCC_OscConfig+0x32c>)
 8001d62:	68db      	ldr	r3, [r3, #12]
 8001d64:	2203      	movs	r2, #3
 8001d66:	4013      	ands	r3, r2
 8001d68:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8001d6a:	69bb      	ldr	r3, [r7, #24]
 8001d6c:	2b10      	cmp	r3, #16
 8001d6e:	d102      	bne.n	8001d76 <HAL_RCC_OscConfig+0x3e>
 8001d70:	697b      	ldr	r3, [r7, #20]
 8001d72:	2b03      	cmp	r3, #3
 8001d74:	d002      	beq.n	8001d7c <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8001d76:	69bb      	ldr	r3, [r7, #24]
 8001d78:	2b08      	cmp	r3, #8
 8001d7a:	d10b      	bne.n	8001d94 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d7c:	4bb9      	ldr	r3, [pc, #740]	@ (8002064 <HAL_RCC_OscConfig+0x32c>)
 8001d7e:	681a      	ldr	r2, [r3, #0]
 8001d80:	2380      	movs	r3, #128	@ 0x80
 8001d82:	029b      	lsls	r3, r3, #10
 8001d84:	4013      	ands	r3, r2
 8001d86:	d062      	beq.n	8001e4e <HAL_RCC_OscConfig+0x116>
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	685b      	ldr	r3, [r3, #4]
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d15e      	bne.n	8001e4e <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8001d90:	2301      	movs	r3, #1
 8001d92:	e2d9      	b.n	8002348 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	685a      	ldr	r2, [r3, #4]
 8001d98:	2380      	movs	r3, #128	@ 0x80
 8001d9a:	025b      	lsls	r3, r3, #9
 8001d9c:	429a      	cmp	r2, r3
 8001d9e:	d107      	bne.n	8001db0 <HAL_RCC_OscConfig+0x78>
 8001da0:	4bb0      	ldr	r3, [pc, #704]	@ (8002064 <HAL_RCC_OscConfig+0x32c>)
 8001da2:	681a      	ldr	r2, [r3, #0]
 8001da4:	4baf      	ldr	r3, [pc, #700]	@ (8002064 <HAL_RCC_OscConfig+0x32c>)
 8001da6:	2180      	movs	r1, #128	@ 0x80
 8001da8:	0249      	lsls	r1, r1, #9
 8001daa:	430a      	orrs	r2, r1
 8001dac:	601a      	str	r2, [r3, #0]
 8001dae:	e020      	b.n	8001df2 <HAL_RCC_OscConfig+0xba>
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	685a      	ldr	r2, [r3, #4]
 8001db4:	23a0      	movs	r3, #160	@ 0xa0
 8001db6:	02db      	lsls	r3, r3, #11
 8001db8:	429a      	cmp	r2, r3
 8001dba:	d10e      	bne.n	8001dda <HAL_RCC_OscConfig+0xa2>
 8001dbc:	4ba9      	ldr	r3, [pc, #676]	@ (8002064 <HAL_RCC_OscConfig+0x32c>)
 8001dbe:	681a      	ldr	r2, [r3, #0]
 8001dc0:	4ba8      	ldr	r3, [pc, #672]	@ (8002064 <HAL_RCC_OscConfig+0x32c>)
 8001dc2:	2180      	movs	r1, #128	@ 0x80
 8001dc4:	02c9      	lsls	r1, r1, #11
 8001dc6:	430a      	orrs	r2, r1
 8001dc8:	601a      	str	r2, [r3, #0]
 8001dca:	4ba6      	ldr	r3, [pc, #664]	@ (8002064 <HAL_RCC_OscConfig+0x32c>)
 8001dcc:	681a      	ldr	r2, [r3, #0]
 8001dce:	4ba5      	ldr	r3, [pc, #660]	@ (8002064 <HAL_RCC_OscConfig+0x32c>)
 8001dd0:	2180      	movs	r1, #128	@ 0x80
 8001dd2:	0249      	lsls	r1, r1, #9
 8001dd4:	430a      	orrs	r2, r1
 8001dd6:	601a      	str	r2, [r3, #0]
 8001dd8:	e00b      	b.n	8001df2 <HAL_RCC_OscConfig+0xba>
 8001dda:	4ba2      	ldr	r3, [pc, #648]	@ (8002064 <HAL_RCC_OscConfig+0x32c>)
 8001ddc:	681a      	ldr	r2, [r3, #0]
 8001dde:	4ba1      	ldr	r3, [pc, #644]	@ (8002064 <HAL_RCC_OscConfig+0x32c>)
 8001de0:	49a1      	ldr	r1, [pc, #644]	@ (8002068 <HAL_RCC_OscConfig+0x330>)
 8001de2:	400a      	ands	r2, r1
 8001de4:	601a      	str	r2, [r3, #0]
 8001de6:	4b9f      	ldr	r3, [pc, #636]	@ (8002064 <HAL_RCC_OscConfig+0x32c>)
 8001de8:	681a      	ldr	r2, [r3, #0]
 8001dea:	4b9e      	ldr	r3, [pc, #632]	@ (8002064 <HAL_RCC_OscConfig+0x32c>)
 8001dec:	499f      	ldr	r1, [pc, #636]	@ (800206c <HAL_RCC_OscConfig+0x334>)
 8001dee:	400a      	ands	r2, r1
 8001df0:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	685b      	ldr	r3, [r3, #4]
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d014      	beq.n	8001e24 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dfa:	f7ff faa5 	bl	8001348 <HAL_GetTick>
 8001dfe:	0003      	movs	r3, r0
 8001e00:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e02:	e008      	b.n	8001e16 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e04:	f7ff faa0 	bl	8001348 <HAL_GetTick>
 8001e08:	0002      	movs	r2, r0
 8001e0a:	693b      	ldr	r3, [r7, #16]
 8001e0c:	1ad3      	subs	r3, r2, r3
 8001e0e:	2b64      	cmp	r3, #100	@ 0x64
 8001e10:	d901      	bls.n	8001e16 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8001e12:	2303      	movs	r3, #3
 8001e14:	e298      	b.n	8002348 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e16:	4b93      	ldr	r3, [pc, #588]	@ (8002064 <HAL_RCC_OscConfig+0x32c>)
 8001e18:	681a      	ldr	r2, [r3, #0]
 8001e1a:	2380      	movs	r3, #128	@ 0x80
 8001e1c:	029b      	lsls	r3, r3, #10
 8001e1e:	4013      	ands	r3, r2
 8001e20:	d0f0      	beq.n	8001e04 <HAL_RCC_OscConfig+0xcc>
 8001e22:	e015      	b.n	8001e50 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e24:	f7ff fa90 	bl	8001348 <HAL_GetTick>
 8001e28:	0003      	movs	r3, r0
 8001e2a:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001e2c:	e008      	b.n	8001e40 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e2e:	f7ff fa8b 	bl	8001348 <HAL_GetTick>
 8001e32:	0002      	movs	r2, r0
 8001e34:	693b      	ldr	r3, [r7, #16]
 8001e36:	1ad3      	subs	r3, r2, r3
 8001e38:	2b64      	cmp	r3, #100	@ 0x64
 8001e3a:	d901      	bls.n	8001e40 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001e3c:	2303      	movs	r3, #3
 8001e3e:	e283      	b.n	8002348 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001e40:	4b88      	ldr	r3, [pc, #544]	@ (8002064 <HAL_RCC_OscConfig+0x32c>)
 8001e42:	681a      	ldr	r2, [r3, #0]
 8001e44:	2380      	movs	r3, #128	@ 0x80
 8001e46:	029b      	lsls	r3, r3, #10
 8001e48:	4013      	ands	r3, r2
 8001e4a:	d1f0      	bne.n	8001e2e <HAL_RCC_OscConfig+0xf6>
 8001e4c:	e000      	b.n	8001e50 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e4e:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	2202      	movs	r2, #2
 8001e56:	4013      	ands	r3, r2
 8001e58:	d100      	bne.n	8001e5c <HAL_RCC_OscConfig+0x124>
 8001e5a:	e099      	b.n	8001f90 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001e5c:	4b81      	ldr	r3, [pc, #516]	@ (8002064 <HAL_RCC_OscConfig+0x32c>)
 8001e5e:	689b      	ldr	r3, [r3, #8]
 8001e60:	2238      	movs	r2, #56	@ 0x38
 8001e62:	4013      	ands	r3, r2
 8001e64:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001e66:	4b7f      	ldr	r3, [pc, #508]	@ (8002064 <HAL_RCC_OscConfig+0x32c>)
 8001e68:	68db      	ldr	r3, [r3, #12]
 8001e6a:	2203      	movs	r2, #3
 8001e6c:	4013      	ands	r3, r2
 8001e6e:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8001e70:	69bb      	ldr	r3, [r7, #24]
 8001e72:	2b10      	cmp	r3, #16
 8001e74:	d102      	bne.n	8001e7c <HAL_RCC_OscConfig+0x144>
 8001e76:	697b      	ldr	r3, [r7, #20]
 8001e78:	2b02      	cmp	r3, #2
 8001e7a:	d002      	beq.n	8001e82 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8001e7c:	69bb      	ldr	r3, [r7, #24]
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d135      	bne.n	8001eee <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001e82:	4b78      	ldr	r3, [pc, #480]	@ (8002064 <HAL_RCC_OscConfig+0x32c>)
 8001e84:	681a      	ldr	r2, [r3, #0]
 8001e86:	2380      	movs	r3, #128	@ 0x80
 8001e88:	00db      	lsls	r3, r3, #3
 8001e8a:	4013      	ands	r3, r2
 8001e8c:	d005      	beq.n	8001e9a <HAL_RCC_OscConfig+0x162>
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	68db      	ldr	r3, [r3, #12]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d101      	bne.n	8001e9a <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8001e96:	2301      	movs	r3, #1
 8001e98:	e256      	b.n	8002348 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e9a:	4b72      	ldr	r3, [pc, #456]	@ (8002064 <HAL_RCC_OscConfig+0x32c>)
 8001e9c:	685b      	ldr	r3, [r3, #4]
 8001e9e:	4a74      	ldr	r2, [pc, #464]	@ (8002070 <HAL_RCC_OscConfig+0x338>)
 8001ea0:	4013      	ands	r3, r2
 8001ea2:	0019      	movs	r1, r3
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	695b      	ldr	r3, [r3, #20]
 8001ea8:	021a      	lsls	r2, r3, #8
 8001eaa:	4b6e      	ldr	r3, [pc, #440]	@ (8002064 <HAL_RCC_OscConfig+0x32c>)
 8001eac:	430a      	orrs	r2, r1
 8001eae:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001eb0:	69bb      	ldr	r3, [r7, #24]
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d112      	bne.n	8001edc <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001eb6:	4b6b      	ldr	r3, [pc, #428]	@ (8002064 <HAL_RCC_OscConfig+0x32c>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	4a6e      	ldr	r2, [pc, #440]	@ (8002074 <HAL_RCC_OscConfig+0x33c>)
 8001ebc:	4013      	ands	r3, r2
 8001ebe:	0019      	movs	r1, r3
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	691a      	ldr	r2, [r3, #16]
 8001ec4:	4b67      	ldr	r3, [pc, #412]	@ (8002064 <HAL_RCC_OscConfig+0x32c>)
 8001ec6:	430a      	orrs	r2, r1
 8001ec8:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8001eca:	4b66      	ldr	r3, [pc, #408]	@ (8002064 <HAL_RCC_OscConfig+0x32c>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	0adb      	lsrs	r3, r3, #11
 8001ed0:	2207      	movs	r2, #7
 8001ed2:	4013      	ands	r3, r2
 8001ed4:	4a68      	ldr	r2, [pc, #416]	@ (8002078 <HAL_RCC_OscConfig+0x340>)
 8001ed6:	40da      	lsrs	r2, r3
 8001ed8:	4b68      	ldr	r3, [pc, #416]	@ (800207c <HAL_RCC_OscConfig+0x344>)
 8001eda:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001edc:	4b68      	ldr	r3, [pc, #416]	@ (8002080 <HAL_RCC_OscConfig+0x348>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	0018      	movs	r0, r3
 8001ee2:	f7ff f8e7 	bl	80010b4 <HAL_InitTick>
 8001ee6:	1e03      	subs	r3, r0, #0
 8001ee8:	d051      	beq.n	8001f8e <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8001eea:	2301      	movs	r3, #1
 8001eec:	e22c      	b.n	8002348 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	68db      	ldr	r3, [r3, #12]
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d030      	beq.n	8001f58 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001ef6:	4b5b      	ldr	r3, [pc, #364]	@ (8002064 <HAL_RCC_OscConfig+0x32c>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	4a5e      	ldr	r2, [pc, #376]	@ (8002074 <HAL_RCC_OscConfig+0x33c>)
 8001efc:	4013      	ands	r3, r2
 8001efe:	0019      	movs	r1, r3
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	691a      	ldr	r2, [r3, #16]
 8001f04:	4b57      	ldr	r3, [pc, #348]	@ (8002064 <HAL_RCC_OscConfig+0x32c>)
 8001f06:	430a      	orrs	r2, r1
 8001f08:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8001f0a:	4b56      	ldr	r3, [pc, #344]	@ (8002064 <HAL_RCC_OscConfig+0x32c>)
 8001f0c:	681a      	ldr	r2, [r3, #0]
 8001f0e:	4b55      	ldr	r3, [pc, #340]	@ (8002064 <HAL_RCC_OscConfig+0x32c>)
 8001f10:	2180      	movs	r1, #128	@ 0x80
 8001f12:	0049      	lsls	r1, r1, #1
 8001f14:	430a      	orrs	r2, r1
 8001f16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f18:	f7ff fa16 	bl	8001348 <HAL_GetTick>
 8001f1c:	0003      	movs	r3, r0
 8001f1e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f20:	e008      	b.n	8001f34 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f22:	f7ff fa11 	bl	8001348 <HAL_GetTick>
 8001f26:	0002      	movs	r2, r0
 8001f28:	693b      	ldr	r3, [r7, #16]
 8001f2a:	1ad3      	subs	r3, r2, r3
 8001f2c:	2b02      	cmp	r3, #2
 8001f2e:	d901      	bls.n	8001f34 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8001f30:	2303      	movs	r3, #3
 8001f32:	e209      	b.n	8002348 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f34:	4b4b      	ldr	r3, [pc, #300]	@ (8002064 <HAL_RCC_OscConfig+0x32c>)
 8001f36:	681a      	ldr	r2, [r3, #0]
 8001f38:	2380      	movs	r3, #128	@ 0x80
 8001f3a:	00db      	lsls	r3, r3, #3
 8001f3c:	4013      	ands	r3, r2
 8001f3e:	d0f0      	beq.n	8001f22 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f40:	4b48      	ldr	r3, [pc, #288]	@ (8002064 <HAL_RCC_OscConfig+0x32c>)
 8001f42:	685b      	ldr	r3, [r3, #4]
 8001f44:	4a4a      	ldr	r2, [pc, #296]	@ (8002070 <HAL_RCC_OscConfig+0x338>)
 8001f46:	4013      	ands	r3, r2
 8001f48:	0019      	movs	r1, r3
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	695b      	ldr	r3, [r3, #20]
 8001f4e:	021a      	lsls	r2, r3, #8
 8001f50:	4b44      	ldr	r3, [pc, #272]	@ (8002064 <HAL_RCC_OscConfig+0x32c>)
 8001f52:	430a      	orrs	r2, r1
 8001f54:	605a      	str	r2, [r3, #4]
 8001f56:	e01b      	b.n	8001f90 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8001f58:	4b42      	ldr	r3, [pc, #264]	@ (8002064 <HAL_RCC_OscConfig+0x32c>)
 8001f5a:	681a      	ldr	r2, [r3, #0]
 8001f5c:	4b41      	ldr	r3, [pc, #260]	@ (8002064 <HAL_RCC_OscConfig+0x32c>)
 8001f5e:	4949      	ldr	r1, [pc, #292]	@ (8002084 <HAL_RCC_OscConfig+0x34c>)
 8001f60:	400a      	ands	r2, r1
 8001f62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f64:	f7ff f9f0 	bl	8001348 <HAL_GetTick>
 8001f68:	0003      	movs	r3, r0
 8001f6a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001f6c:	e008      	b.n	8001f80 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f6e:	f7ff f9eb 	bl	8001348 <HAL_GetTick>
 8001f72:	0002      	movs	r2, r0
 8001f74:	693b      	ldr	r3, [r7, #16]
 8001f76:	1ad3      	subs	r3, r2, r3
 8001f78:	2b02      	cmp	r3, #2
 8001f7a:	d901      	bls.n	8001f80 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8001f7c:	2303      	movs	r3, #3
 8001f7e:	e1e3      	b.n	8002348 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001f80:	4b38      	ldr	r3, [pc, #224]	@ (8002064 <HAL_RCC_OscConfig+0x32c>)
 8001f82:	681a      	ldr	r2, [r3, #0]
 8001f84:	2380      	movs	r3, #128	@ 0x80
 8001f86:	00db      	lsls	r3, r3, #3
 8001f88:	4013      	ands	r3, r2
 8001f8a:	d1f0      	bne.n	8001f6e <HAL_RCC_OscConfig+0x236>
 8001f8c:	e000      	b.n	8001f90 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001f8e:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	2208      	movs	r2, #8
 8001f96:	4013      	ands	r3, r2
 8001f98:	d047      	beq.n	800202a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001f9a:	4b32      	ldr	r3, [pc, #200]	@ (8002064 <HAL_RCC_OscConfig+0x32c>)
 8001f9c:	689b      	ldr	r3, [r3, #8]
 8001f9e:	2238      	movs	r2, #56	@ 0x38
 8001fa0:	4013      	ands	r3, r2
 8001fa2:	2b18      	cmp	r3, #24
 8001fa4:	d10a      	bne.n	8001fbc <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8001fa6:	4b2f      	ldr	r3, [pc, #188]	@ (8002064 <HAL_RCC_OscConfig+0x32c>)
 8001fa8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001faa:	2202      	movs	r2, #2
 8001fac:	4013      	ands	r3, r2
 8001fae:	d03c      	beq.n	800202a <HAL_RCC_OscConfig+0x2f2>
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	699b      	ldr	r3, [r3, #24]
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d138      	bne.n	800202a <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8001fb8:	2301      	movs	r3, #1
 8001fba:	e1c5      	b.n	8002348 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	699b      	ldr	r3, [r3, #24]
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d019      	beq.n	8001ff8 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8001fc4:	4b27      	ldr	r3, [pc, #156]	@ (8002064 <HAL_RCC_OscConfig+0x32c>)
 8001fc6:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001fc8:	4b26      	ldr	r3, [pc, #152]	@ (8002064 <HAL_RCC_OscConfig+0x32c>)
 8001fca:	2101      	movs	r1, #1
 8001fcc:	430a      	orrs	r2, r1
 8001fce:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fd0:	f7ff f9ba 	bl	8001348 <HAL_GetTick>
 8001fd4:	0003      	movs	r3, r0
 8001fd6:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001fd8:	e008      	b.n	8001fec <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001fda:	f7ff f9b5 	bl	8001348 <HAL_GetTick>
 8001fde:	0002      	movs	r2, r0
 8001fe0:	693b      	ldr	r3, [r7, #16]
 8001fe2:	1ad3      	subs	r3, r2, r3
 8001fe4:	2b02      	cmp	r3, #2
 8001fe6:	d901      	bls.n	8001fec <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8001fe8:	2303      	movs	r3, #3
 8001fea:	e1ad      	b.n	8002348 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001fec:	4b1d      	ldr	r3, [pc, #116]	@ (8002064 <HAL_RCC_OscConfig+0x32c>)
 8001fee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ff0:	2202      	movs	r2, #2
 8001ff2:	4013      	ands	r3, r2
 8001ff4:	d0f1      	beq.n	8001fda <HAL_RCC_OscConfig+0x2a2>
 8001ff6:	e018      	b.n	800202a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8001ff8:	4b1a      	ldr	r3, [pc, #104]	@ (8002064 <HAL_RCC_OscConfig+0x32c>)
 8001ffa:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001ffc:	4b19      	ldr	r3, [pc, #100]	@ (8002064 <HAL_RCC_OscConfig+0x32c>)
 8001ffe:	2101      	movs	r1, #1
 8002000:	438a      	bics	r2, r1
 8002002:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002004:	f7ff f9a0 	bl	8001348 <HAL_GetTick>
 8002008:	0003      	movs	r3, r0
 800200a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800200c:	e008      	b.n	8002020 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800200e:	f7ff f99b 	bl	8001348 <HAL_GetTick>
 8002012:	0002      	movs	r2, r0
 8002014:	693b      	ldr	r3, [r7, #16]
 8002016:	1ad3      	subs	r3, r2, r3
 8002018:	2b02      	cmp	r3, #2
 800201a:	d901      	bls.n	8002020 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 800201c:	2303      	movs	r3, #3
 800201e:	e193      	b.n	8002348 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002020:	4b10      	ldr	r3, [pc, #64]	@ (8002064 <HAL_RCC_OscConfig+0x32c>)
 8002022:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002024:	2202      	movs	r2, #2
 8002026:	4013      	ands	r3, r2
 8002028:	d1f1      	bne.n	800200e <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	2204      	movs	r2, #4
 8002030:	4013      	ands	r3, r2
 8002032:	d100      	bne.n	8002036 <HAL_RCC_OscConfig+0x2fe>
 8002034:	e0c6      	b.n	80021c4 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002036:	231f      	movs	r3, #31
 8002038:	18fb      	adds	r3, r7, r3
 800203a:	2200      	movs	r2, #0
 800203c:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800203e:	4b09      	ldr	r3, [pc, #36]	@ (8002064 <HAL_RCC_OscConfig+0x32c>)
 8002040:	689b      	ldr	r3, [r3, #8]
 8002042:	2238      	movs	r2, #56	@ 0x38
 8002044:	4013      	ands	r3, r2
 8002046:	2b20      	cmp	r3, #32
 8002048:	d11e      	bne.n	8002088 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 800204a:	4b06      	ldr	r3, [pc, #24]	@ (8002064 <HAL_RCC_OscConfig+0x32c>)
 800204c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800204e:	2202      	movs	r2, #2
 8002050:	4013      	ands	r3, r2
 8002052:	d100      	bne.n	8002056 <HAL_RCC_OscConfig+0x31e>
 8002054:	e0b6      	b.n	80021c4 <HAL_RCC_OscConfig+0x48c>
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	689b      	ldr	r3, [r3, #8]
 800205a:	2b00      	cmp	r3, #0
 800205c:	d000      	beq.n	8002060 <HAL_RCC_OscConfig+0x328>
 800205e:	e0b1      	b.n	80021c4 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8002060:	2301      	movs	r3, #1
 8002062:	e171      	b.n	8002348 <HAL_RCC_OscConfig+0x610>
 8002064:	40021000 	.word	0x40021000
 8002068:	fffeffff 	.word	0xfffeffff
 800206c:	fffbffff 	.word	0xfffbffff
 8002070:	ffff80ff 	.word	0xffff80ff
 8002074:	ffffc7ff 	.word	0xffffc7ff
 8002078:	00f42400 	.word	0x00f42400
 800207c:	200001ac 	.word	0x200001ac
 8002080:	200001b0 	.word	0x200001b0
 8002084:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002088:	4bb1      	ldr	r3, [pc, #708]	@ (8002350 <HAL_RCC_OscConfig+0x618>)
 800208a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800208c:	2380      	movs	r3, #128	@ 0x80
 800208e:	055b      	lsls	r3, r3, #21
 8002090:	4013      	ands	r3, r2
 8002092:	d101      	bne.n	8002098 <HAL_RCC_OscConfig+0x360>
 8002094:	2301      	movs	r3, #1
 8002096:	e000      	b.n	800209a <HAL_RCC_OscConfig+0x362>
 8002098:	2300      	movs	r3, #0
 800209a:	2b00      	cmp	r3, #0
 800209c:	d011      	beq.n	80020c2 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800209e:	4bac      	ldr	r3, [pc, #688]	@ (8002350 <HAL_RCC_OscConfig+0x618>)
 80020a0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80020a2:	4bab      	ldr	r3, [pc, #684]	@ (8002350 <HAL_RCC_OscConfig+0x618>)
 80020a4:	2180      	movs	r1, #128	@ 0x80
 80020a6:	0549      	lsls	r1, r1, #21
 80020a8:	430a      	orrs	r2, r1
 80020aa:	63da      	str	r2, [r3, #60]	@ 0x3c
 80020ac:	4ba8      	ldr	r3, [pc, #672]	@ (8002350 <HAL_RCC_OscConfig+0x618>)
 80020ae:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80020b0:	2380      	movs	r3, #128	@ 0x80
 80020b2:	055b      	lsls	r3, r3, #21
 80020b4:	4013      	ands	r3, r2
 80020b6:	60fb      	str	r3, [r7, #12]
 80020b8:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80020ba:	231f      	movs	r3, #31
 80020bc:	18fb      	adds	r3, r7, r3
 80020be:	2201      	movs	r2, #1
 80020c0:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80020c2:	4ba4      	ldr	r3, [pc, #656]	@ (8002354 <HAL_RCC_OscConfig+0x61c>)
 80020c4:	681a      	ldr	r2, [r3, #0]
 80020c6:	2380      	movs	r3, #128	@ 0x80
 80020c8:	005b      	lsls	r3, r3, #1
 80020ca:	4013      	ands	r3, r2
 80020cc:	d11a      	bne.n	8002104 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80020ce:	4ba1      	ldr	r3, [pc, #644]	@ (8002354 <HAL_RCC_OscConfig+0x61c>)
 80020d0:	681a      	ldr	r2, [r3, #0]
 80020d2:	4ba0      	ldr	r3, [pc, #640]	@ (8002354 <HAL_RCC_OscConfig+0x61c>)
 80020d4:	2180      	movs	r1, #128	@ 0x80
 80020d6:	0049      	lsls	r1, r1, #1
 80020d8:	430a      	orrs	r2, r1
 80020da:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80020dc:	f7ff f934 	bl	8001348 <HAL_GetTick>
 80020e0:	0003      	movs	r3, r0
 80020e2:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80020e4:	e008      	b.n	80020f8 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020e6:	f7ff f92f 	bl	8001348 <HAL_GetTick>
 80020ea:	0002      	movs	r2, r0
 80020ec:	693b      	ldr	r3, [r7, #16]
 80020ee:	1ad3      	subs	r3, r2, r3
 80020f0:	2b02      	cmp	r3, #2
 80020f2:	d901      	bls.n	80020f8 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 80020f4:	2303      	movs	r3, #3
 80020f6:	e127      	b.n	8002348 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80020f8:	4b96      	ldr	r3, [pc, #600]	@ (8002354 <HAL_RCC_OscConfig+0x61c>)
 80020fa:	681a      	ldr	r2, [r3, #0]
 80020fc:	2380      	movs	r3, #128	@ 0x80
 80020fe:	005b      	lsls	r3, r3, #1
 8002100:	4013      	ands	r3, r2
 8002102:	d0f0      	beq.n	80020e6 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	689b      	ldr	r3, [r3, #8]
 8002108:	2b01      	cmp	r3, #1
 800210a:	d106      	bne.n	800211a <HAL_RCC_OscConfig+0x3e2>
 800210c:	4b90      	ldr	r3, [pc, #576]	@ (8002350 <HAL_RCC_OscConfig+0x618>)
 800210e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002110:	4b8f      	ldr	r3, [pc, #572]	@ (8002350 <HAL_RCC_OscConfig+0x618>)
 8002112:	2101      	movs	r1, #1
 8002114:	430a      	orrs	r2, r1
 8002116:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002118:	e01c      	b.n	8002154 <HAL_RCC_OscConfig+0x41c>
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	689b      	ldr	r3, [r3, #8]
 800211e:	2b05      	cmp	r3, #5
 8002120:	d10c      	bne.n	800213c <HAL_RCC_OscConfig+0x404>
 8002122:	4b8b      	ldr	r3, [pc, #556]	@ (8002350 <HAL_RCC_OscConfig+0x618>)
 8002124:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002126:	4b8a      	ldr	r3, [pc, #552]	@ (8002350 <HAL_RCC_OscConfig+0x618>)
 8002128:	2104      	movs	r1, #4
 800212a:	430a      	orrs	r2, r1
 800212c:	65da      	str	r2, [r3, #92]	@ 0x5c
 800212e:	4b88      	ldr	r3, [pc, #544]	@ (8002350 <HAL_RCC_OscConfig+0x618>)
 8002130:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002132:	4b87      	ldr	r3, [pc, #540]	@ (8002350 <HAL_RCC_OscConfig+0x618>)
 8002134:	2101      	movs	r1, #1
 8002136:	430a      	orrs	r2, r1
 8002138:	65da      	str	r2, [r3, #92]	@ 0x5c
 800213a:	e00b      	b.n	8002154 <HAL_RCC_OscConfig+0x41c>
 800213c:	4b84      	ldr	r3, [pc, #528]	@ (8002350 <HAL_RCC_OscConfig+0x618>)
 800213e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002140:	4b83      	ldr	r3, [pc, #524]	@ (8002350 <HAL_RCC_OscConfig+0x618>)
 8002142:	2101      	movs	r1, #1
 8002144:	438a      	bics	r2, r1
 8002146:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002148:	4b81      	ldr	r3, [pc, #516]	@ (8002350 <HAL_RCC_OscConfig+0x618>)
 800214a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800214c:	4b80      	ldr	r3, [pc, #512]	@ (8002350 <HAL_RCC_OscConfig+0x618>)
 800214e:	2104      	movs	r1, #4
 8002150:	438a      	bics	r2, r1
 8002152:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	689b      	ldr	r3, [r3, #8]
 8002158:	2b00      	cmp	r3, #0
 800215a:	d014      	beq.n	8002186 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800215c:	f7ff f8f4 	bl	8001348 <HAL_GetTick>
 8002160:	0003      	movs	r3, r0
 8002162:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002164:	e009      	b.n	800217a <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002166:	f7ff f8ef 	bl	8001348 <HAL_GetTick>
 800216a:	0002      	movs	r2, r0
 800216c:	693b      	ldr	r3, [r7, #16]
 800216e:	1ad3      	subs	r3, r2, r3
 8002170:	4a79      	ldr	r2, [pc, #484]	@ (8002358 <HAL_RCC_OscConfig+0x620>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d901      	bls.n	800217a <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8002176:	2303      	movs	r3, #3
 8002178:	e0e6      	b.n	8002348 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800217a:	4b75      	ldr	r3, [pc, #468]	@ (8002350 <HAL_RCC_OscConfig+0x618>)
 800217c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800217e:	2202      	movs	r2, #2
 8002180:	4013      	ands	r3, r2
 8002182:	d0f0      	beq.n	8002166 <HAL_RCC_OscConfig+0x42e>
 8002184:	e013      	b.n	80021ae <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002186:	f7ff f8df 	bl	8001348 <HAL_GetTick>
 800218a:	0003      	movs	r3, r0
 800218c:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800218e:	e009      	b.n	80021a4 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002190:	f7ff f8da 	bl	8001348 <HAL_GetTick>
 8002194:	0002      	movs	r2, r0
 8002196:	693b      	ldr	r3, [r7, #16]
 8002198:	1ad3      	subs	r3, r2, r3
 800219a:	4a6f      	ldr	r2, [pc, #444]	@ (8002358 <HAL_RCC_OscConfig+0x620>)
 800219c:	4293      	cmp	r3, r2
 800219e:	d901      	bls.n	80021a4 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 80021a0:	2303      	movs	r3, #3
 80021a2:	e0d1      	b.n	8002348 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80021a4:	4b6a      	ldr	r3, [pc, #424]	@ (8002350 <HAL_RCC_OscConfig+0x618>)
 80021a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021a8:	2202      	movs	r2, #2
 80021aa:	4013      	ands	r3, r2
 80021ac:	d1f0      	bne.n	8002190 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80021ae:	231f      	movs	r3, #31
 80021b0:	18fb      	adds	r3, r7, r3
 80021b2:	781b      	ldrb	r3, [r3, #0]
 80021b4:	2b01      	cmp	r3, #1
 80021b6:	d105      	bne.n	80021c4 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80021b8:	4b65      	ldr	r3, [pc, #404]	@ (8002350 <HAL_RCC_OscConfig+0x618>)
 80021ba:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80021bc:	4b64      	ldr	r3, [pc, #400]	@ (8002350 <HAL_RCC_OscConfig+0x618>)
 80021be:	4967      	ldr	r1, [pc, #412]	@ (800235c <HAL_RCC_OscConfig+0x624>)
 80021c0:	400a      	ands	r2, r1
 80021c2:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	69db      	ldr	r3, [r3, #28]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d100      	bne.n	80021ce <HAL_RCC_OscConfig+0x496>
 80021cc:	e0bb      	b.n	8002346 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80021ce:	4b60      	ldr	r3, [pc, #384]	@ (8002350 <HAL_RCC_OscConfig+0x618>)
 80021d0:	689b      	ldr	r3, [r3, #8]
 80021d2:	2238      	movs	r2, #56	@ 0x38
 80021d4:	4013      	ands	r3, r2
 80021d6:	2b10      	cmp	r3, #16
 80021d8:	d100      	bne.n	80021dc <HAL_RCC_OscConfig+0x4a4>
 80021da:	e07b      	b.n	80022d4 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	69db      	ldr	r3, [r3, #28]
 80021e0:	2b02      	cmp	r3, #2
 80021e2:	d156      	bne.n	8002292 <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021e4:	4b5a      	ldr	r3, [pc, #360]	@ (8002350 <HAL_RCC_OscConfig+0x618>)
 80021e6:	681a      	ldr	r2, [r3, #0]
 80021e8:	4b59      	ldr	r3, [pc, #356]	@ (8002350 <HAL_RCC_OscConfig+0x618>)
 80021ea:	495d      	ldr	r1, [pc, #372]	@ (8002360 <HAL_RCC_OscConfig+0x628>)
 80021ec:	400a      	ands	r2, r1
 80021ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021f0:	f7ff f8aa 	bl	8001348 <HAL_GetTick>
 80021f4:	0003      	movs	r3, r0
 80021f6:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80021f8:	e008      	b.n	800220c <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021fa:	f7ff f8a5 	bl	8001348 <HAL_GetTick>
 80021fe:	0002      	movs	r2, r0
 8002200:	693b      	ldr	r3, [r7, #16]
 8002202:	1ad3      	subs	r3, r2, r3
 8002204:	2b02      	cmp	r3, #2
 8002206:	d901      	bls.n	800220c <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8002208:	2303      	movs	r3, #3
 800220a:	e09d      	b.n	8002348 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800220c:	4b50      	ldr	r3, [pc, #320]	@ (8002350 <HAL_RCC_OscConfig+0x618>)
 800220e:	681a      	ldr	r2, [r3, #0]
 8002210:	2380      	movs	r3, #128	@ 0x80
 8002212:	049b      	lsls	r3, r3, #18
 8002214:	4013      	ands	r3, r2
 8002216:	d1f0      	bne.n	80021fa <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002218:	4b4d      	ldr	r3, [pc, #308]	@ (8002350 <HAL_RCC_OscConfig+0x618>)
 800221a:	68db      	ldr	r3, [r3, #12]
 800221c:	4a51      	ldr	r2, [pc, #324]	@ (8002364 <HAL_RCC_OscConfig+0x62c>)
 800221e:	4013      	ands	r3, r2
 8002220:	0019      	movs	r1, r3
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6a1a      	ldr	r2, [r3, #32]
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800222a:	431a      	orrs	r2, r3
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002230:	021b      	lsls	r3, r3, #8
 8002232:	431a      	orrs	r2, r3
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002238:	431a      	orrs	r2, r3
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800223e:	431a      	orrs	r2, r3
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002244:	431a      	orrs	r2, r3
 8002246:	4b42      	ldr	r3, [pc, #264]	@ (8002350 <HAL_RCC_OscConfig+0x618>)
 8002248:	430a      	orrs	r2, r1
 800224a:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800224c:	4b40      	ldr	r3, [pc, #256]	@ (8002350 <HAL_RCC_OscConfig+0x618>)
 800224e:	681a      	ldr	r2, [r3, #0]
 8002250:	4b3f      	ldr	r3, [pc, #252]	@ (8002350 <HAL_RCC_OscConfig+0x618>)
 8002252:	2180      	movs	r1, #128	@ 0x80
 8002254:	0449      	lsls	r1, r1, #17
 8002256:	430a      	orrs	r2, r1
 8002258:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 800225a:	4b3d      	ldr	r3, [pc, #244]	@ (8002350 <HAL_RCC_OscConfig+0x618>)
 800225c:	68da      	ldr	r2, [r3, #12]
 800225e:	4b3c      	ldr	r3, [pc, #240]	@ (8002350 <HAL_RCC_OscConfig+0x618>)
 8002260:	2180      	movs	r1, #128	@ 0x80
 8002262:	0549      	lsls	r1, r1, #21
 8002264:	430a      	orrs	r2, r1
 8002266:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002268:	f7ff f86e 	bl	8001348 <HAL_GetTick>
 800226c:	0003      	movs	r3, r0
 800226e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002270:	e008      	b.n	8002284 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002272:	f7ff f869 	bl	8001348 <HAL_GetTick>
 8002276:	0002      	movs	r2, r0
 8002278:	693b      	ldr	r3, [r7, #16]
 800227a:	1ad3      	subs	r3, r2, r3
 800227c:	2b02      	cmp	r3, #2
 800227e:	d901      	bls.n	8002284 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8002280:	2303      	movs	r3, #3
 8002282:	e061      	b.n	8002348 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002284:	4b32      	ldr	r3, [pc, #200]	@ (8002350 <HAL_RCC_OscConfig+0x618>)
 8002286:	681a      	ldr	r2, [r3, #0]
 8002288:	2380      	movs	r3, #128	@ 0x80
 800228a:	049b      	lsls	r3, r3, #18
 800228c:	4013      	ands	r3, r2
 800228e:	d0f0      	beq.n	8002272 <HAL_RCC_OscConfig+0x53a>
 8002290:	e059      	b.n	8002346 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002292:	4b2f      	ldr	r3, [pc, #188]	@ (8002350 <HAL_RCC_OscConfig+0x618>)
 8002294:	681a      	ldr	r2, [r3, #0]
 8002296:	4b2e      	ldr	r3, [pc, #184]	@ (8002350 <HAL_RCC_OscConfig+0x618>)
 8002298:	4931      	ldr	r1, [pc, #196]	@ (8002360 <HAL_RCC_OscConfig+0x628>)
 800229a:	400a      	ands	r2, r1
 800229c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800229e:	f7ff f853 	bl	8001348 <HAL_GetTick>
 80022a2:	0003      	movs	r3, r0
 80022a4:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80022a6:	e008      	b.n	80022ba <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022a8:	f7ff f84e 	bl	8001348 <HAL_GetTick>
 80022ac:	0002      	movs	r2, r0
 80022ae:	693b      	ldr	r3, [r7, #16]
 80022b0:	1ad3      	subs	r3, r2, r3
 80022b2:	2b02      	cmp	r3, #2
 80022b4:	d901      	bls.n	80022ba <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 80022b6:	2303      	movs	r3, #3
 80022b8:	e046      	b.n	8002348 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80022ba:	4b25      	ldr	r3, [pc, #148]	@ (8002350 <HAL_RCC_OscConfig+0x618>)
 80022bc:	681a      	ldr	r2, [r3, #0]
 80022be:	2380      	movs	r3, #128	@ 0x80
 80022c0:	049b      	lsls	r3, r3, #18
 80022c2:	4013      	ands	r3, r2
 80022c4:	d1f0      	bne.n	80022a8 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 80022c6:	4b22      	ldr	r3, [pc, #136]	@ (8002350 <HAL_RCC_OscConfig+0x618>)
 80022c8:	68da      	ldr	r2, [r3, #12]
 80022ca:	4b21      	ldr	r3, [pc, #132]	@ (8002350 <HAL_RCC_OscConfig+0x618>)
 80022cc:	4926      	ldr	r1, [pc, #152]	@ (8002368 <HAL_RCC_OscConfig+0x630>)
 80022ce:	400a      	ands	r2, r1
 80022d0:	60da      	str	r2, [r3, #12]
 80022d2:	e038      	b.n	8002346 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	69db      	ldr	r3, [r3, #28]
 80022d8:	2b01      	cmp	r3, #1
 80022da:	d101      	bne.n	80022e0 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 80022dc:	2301      	movs	r3, #1
 80022de:	e033      	b.n	8002348 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80022e0:	4b1b      	ldr	r3, [pc, #108]	@ (8002350 <HAL_RCC_OscConfig+0x618>)
 80022e2:	68db      	ldr	r3, [r3, #12]
 80022e4:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022e6:	697b      	ldr	r3, [r7, #20]
 80022e8:	2203      	movs	r2, #3
 80022ea:	401a      	ands	r2, r3
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6a1b      	ldr	r3, [r3, #32]
 80022f0:	429a      	cmp	r2, r3
 80022f2:	d126      	bne.n	8002342 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80022f4:	697b      	ldr	r3, [r7, #20]
 80022f6:	2270      	movs	r2, #112	@ 0x70
 80022f8:	401a      	ands	r2, r3
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022fe:	429a      	cmp	r2, r3
 8002300:	d11f      	bne.n	8002342 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002302:	697a      	ldr	r2, [r7, #20]
 8002304:	23fe      	movs	r3, #254	@ 0xfe
 8002306:	01db      	lsls	r3, r3, #7
 8002308:	401a      	ands	r2, r3
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800230e:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002310:	429a      	cmp	r2, r3
 8002312:	d116      	bne.n	8002342 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002314:	697a      	ldr	r2, [r7, #20]
 8002316:	23f8      	movs	r3, #248	@ 0xf8
 8002318:	039b      	lsls	r3, r3, #14
 800231a:	401a      	ands	r2, r3
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002320:	429a      	cmp	r2, r3
 8002322:	d10e      	bne.n	8002342 <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002324:	697a      	ldr	r2, [r7, #20]
 8002326:	23e0      	movs	r3, #224	@ 0xe0
 8002328:	051b      	lsls	r3, r3, #20
 800232a:	401a      	ands	r2, r3
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002330:	429a      	cmp	r2, r3
 8002332:	d106      	bne.n	8002342 <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8002334:	697b      	ldr	r3, [r7, #20]
 8002336:	0f5b      	lsrs	r3, r3, #29
 8002338:	075a      	lsls	r2, r3, #29
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800233e:	429a      	cmp	r2, r3
 8002340:	d001      	beq.n	8002346 <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 8002342:	2301      	movs	r3, #1
 8002344:	e000      	b.n	8002348 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 8002346:	2300      	movs	r3, #0
}
 8002348:	0018      	movs	r0, r3
 800234a:	46bd      	mov	sp, r7
 800234c:	b008      	add	sp, #32
 800234e:	bd80      	pop	{r7, pc}
 8002350:	40021000 	.word	0x40021000
 8002354:	40007000 	.word	0x40007000
 8002358:	00001388 	.word	0x00001388
 800235c:	efffffff 	.word	0xefffffff
 8002360:	feffffff 	.word	0xfeffffff
 8002364:	11c1808c 	.word	0x11c1808c
 8002368:	eefefffc 	.word	0xeefefffc

0800236c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b084      	sub	sp, #16
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
 8002374:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	2b00      	cmp	r3, #0
 800237a:	d101      	bne.n	8002380 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800237c:	2301      	movs	r3, #1
 800237e:	e0e9      	b.n	8002554 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002380:	4b76      	ldr	r3, [pc, #472]	@ (800255c <HAL_RCC_ClockConfig+0x1f0>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	2207      	movs	r2, #7
 8002386:	4013      	ands	r3, r2
 8002388:	683a      	ldr	r2, [r7, #0]
 800238a:	429a      	cmp	r2, r3
 800238c:	d91e      	bls.n	80023cc <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800238e:	4b73      	ldr	r3, [pc, #460]	@ (800255c <HAL_RCC_ClockConfig+0x1f0>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	2207      	movs	r2, #7
 8002394:	4393      	bics	r3, r2
 8002396:	0019      	movs	r1, r3
 8002398:	4b70      	ldr	r3, [pc, #448]	@ (800255c <HAL_RCC_ClockConfig+0x1f0>)
 800239a:	683a      	ldr	r2, [r7, #0]
 800239c:	430a      	orrs	r2, r1
 800239e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80023a0:	f7fe ffd2 	bl	8001348 <HAL_GetTick>
 80023a4:	0003      	movs	r3, r0
 80023a6:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80023a8:	e009      	b.n	80023be <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023aa:	f7fe ffcd 	bl	8001348 <HAL_GetTick>
 80023ae:	0002      	movs	r2, r0
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	1ad3      	subs	r3, r2, r3
 80023b4:	4a6a      	ldr	r2, [pc, #424]	@ (8002560 <HAL_RCC_ClockConfig+0x1f4>)
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d901      	bls.n	80023be <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80023ba:	2303      	movs	r3, #3
 80023bc:	e0ca      	b.n	8002554 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80023be:	4b67      	ldr	r3, [pc, #412]	@ (800255c <HAL_RCC_ClockConfig+0x1f0>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	2207      	movs	r2, #7
 80023c4:	4013      	ands	r3, r2
 80023c6:	683a      	ldr	r2, [r7, #0]
 80023c8:	429a      	cmp	r2, r3
 80023ca:	d1ee      	bne.n	80023aa <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	2202      	movs	r2, #2
 80023d2:	4013      	ands	r3, r2
 80023d4:	d015      	beq.n	8002402 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	2204      	movs	r2, #4
 80023dc:	4013      	ands	r3, r2
 80023de:	d006      	beq.n	80023ee <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80023e0:	4b60      	ldr	r3, [pc, #384]	@ (8002564 <HAL_RCC_ClockConfig+0x1f8>)
 80023e2:	689a      	ldr	r2, [r3, #8]
 80023e4:	4b5f      	ldr	r3, [pc, #380]	@ (8002564 <HAL_RCC_ClockConfig+0x1f8>)
 80023e6:	21e0      	movs	r1, #224	@ 0xe0
 80023e8:	01c9      	lsls	r1, r1, #7
 80023ea:	430a      	orrs	r2, r1
 80023ec:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023ee:	4b5d      	ldr	r3, [pc, #372]	@ (8002564 <HAL_RCC_ClockConfig+0x1f8>)
 80023f0:	689b      	ldr	r3, [r3, #8]
 80023f2:	4a5d      	ldr	r2, [pc, #372]	@ (8002568 <HAL_RCC_ClockConfig+0x1fc>)
 80023f4:	4013      	ands	r3, r2
 80023f6:	0019      	movs	r1, r3
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	689a      	ldr	r2, [r3, #8]
 80023fc:	4b59      	ldr	r3, [pc, #356]	@ (8002564 <HAL_RCC_ClockConfig+0x1f8>)
 80023fe:	430a      	orrs	r2, r1
 8002400:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	2201      	movs	r2, #1
 8002408:	4013      	ands	r3, r2
 800240a:	d057      	beq.n	80024bc <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	685b      	ldr	r3, [r3, #4]
 8002410:	2b01      	cmp	r3, #1
 8002412:	d107      	bne.n	8002424 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002414:	4b53      	ldr	r3, [pc, #332]	@ (8002564 <HAL_RCC_ClockConfig+0x1f8>)
 8002416:	681a      	ldr	r2, [r3, #0]
 8002418:	2380      	movs	r3, #128	@ 0x80
 800241a:	029b      	lsls	r3, r3, #10
 800241c:	4013      	ands	r3, r2
 800241e:	d12b      	bne.n	8002478 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002420:	2301      	movs	r3, #1
 8002422:	e097      	b.n	8002554 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	685b      	ldr	r3, [r3, #4]
 8002428:	2b02      	cmp	r3, #2
 800242a:	d107      	bne.n	800243c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800242c:	4b4d      	ldr	r3, [pc, #308]	@ (8002564 <HAL_RCC_ClockConfig+0x1f8>)
 800242e:	681a      	ldr	r2, [r3, #0]
 8002430:	2380      	movs	r3, #128	@ 0x80
 8002432:	049b      	lsls	r3, r3, #18
 8002434:	4013      	ands	r3, r2
 8002436:	d11f      	bne.n	8002478 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002438:	2301      	movs	r3, #1
 800243a:	e08b      	b.n	8002554 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	2b00      	cmp	r3, #0
 8002442:	d107      	bne.n	8002454 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002444:	4b47      	ldr	r3, [pc, #284]	@ (8002564 <HAL_RCC_ClockConfig+0x1f8>)
 8002446:	681a      	ldr	r2, [r3, #0]
 8002448:	2380      	movs	r3, #128	@ 0x80
 800244a:	00db      	lsls	r3, r3, #3
 800244c:	4013      	ands	r3, r2
 800244e:	d113      	bne.n	8002478 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002450:	2301      	movs	r3, #1
 8002452:	e07f      	b.n	8002554 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	2b03      	cmp	r3, #3
 800245a:	d106      	bne.n	800246a <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800245c:	4b41      	ldr	r3, [pc, #260]	@ (8002564 <HAL_RCC_ClockConfig+0x1f8>)
 800245e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002460:	2202      	movs	r2, #2
 8002462:	4013      	ands	r3, r2
 8002464:	d108      	bne.n	8002478 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002466:	2301      	movs	r3, #1
 8002468:	e074      	b.n	8002554 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800246a:	4b3e      	ldr	r3, [pc, #248]	@ (8002564 <HAL_RCC_ClockConfig+0x1f8>)
 800246c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800246e:	2202      	movs	r2, #2
 8002470:	4013      	ands	r3, r2
 8002472:	d101      	bne.n	8002478 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002474:	2301      	movs	r3, #1
 8002476:	e06d      	b.n	8002554 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002478:	4b3a      	ldr	r3, [pc, #232]	@ (8002564 <HAL_RCC_ClockConfig+0x1f8>)
 800247a:	689b      	ldr	r3, [r3, #8]
 800247c:	2207      	movs	r2, #7
 800247e:	4393      	bics	r3, r2
 8002480:	0019      	movs	r1, r3
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	685a      	ldr	r2, [r3, #4]
 8002486:	4b37      	ldr	r3, [pc, #220]	@ (8002564 <HAL_RCC_ClockConfig+0x1f8>)
 8002488:	430a      	orrs	r2, r1
 800248a:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800248c:	f7fe ff5c 	bl	8001348 <HAL_GetTick>
 8002490:	0003      	movs	r3, r0
 8002492:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002494:	e009      	b.n	80024aa <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002496:	f7fe ff57 	bl	8001348 <HAL_GetTick>
 800249a:	0002      	movs	r2, r0
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	1ad3      	subs	r3, r2, r3
 80024a0:	4a2f      	ldr	r2, [pc, #188]	@ (8002560 <HAL_RCC_ClockConfig+0x1f4>)
 80024a2:	4293      	cmp	r3, r2
 80024a4:	d901      	bls.n	80024aa <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80024a6:	2303      	movs	r3, #3
 80024a8:	e054      	b.n	8002554 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024aa:	4b2e      	ldr	r3, [pc, #184]	@ (8002564 <HAL_RCC_ClockConfig+0x1f8>)
 80024ac:	689b      	ldr	r3, [r3, #8]
 80024ae:	2238      	movs	r2, #56	@ 0x38
 80024b0:	401a      	ands	r2, r3
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	685b      	ldr	r3, [r3, #4]
 80024b6:	00db      	lsls	r3, r3, #3
 80024b8:	429a      	cmp	r2, r3
 80024ba:	d1ec      	bne.n	8002496 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80024bc:	4b27      	ldr	r3, [pc, #156]	@ (800255c <HAL_RCC_ClockConfig+0x1f0>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	2207      	movs	r2, #7
 80024c2:	4013      	ands	r3, r2
 80024c4:	683a      	ldr	r2, [r7, #0]
 80024c6:	429a      	cmp	r2, r3
 80024c8:	d21e      	bcs.n	8002508 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024ca:	4b24      	ldr	r3, [pc, #144]	@ (800255c <HAL_RCC_ClockConfig+0x1f0>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	2207      	movs	r2, #7
 80024d0:	4393      	bics	r3, r2
 80024d2:	0019      	movs	r1, r3
 80024d4:	4b21      	ldr	r3, [pc, #132]	@ (800255c <HAL_RCC_ClockConfig+0x1f0>)
 80024d6:	683a      	ldr	r2, [r7, #0]
 80024d8:	430a      	orrs	r2, r1
 80024da:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80024dc:	f7fe ff34 	bl	8001348 <HAL_GetTick>
 80024e0:	0003      	movs	r3, r0
 80024e2:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80024e4:	e009      	b.n	80024fa <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024e6:	f7fe ff2f 	bl	8001348 <HAL_GetTick>
 80024ea:	0002      	movs	r2, r0
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	1ad3      	subs	r3, r2, r3
 80024f0:	4a1b      	ldr	r2, [pc, #108]	@ (8002560 <HAL_RCC_ClockConfig+0x1f4>)
 80024f2:	4293      	cmp	r3, r2
 80024f4:	d901      	bls.n	80024fa <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80024f6:	2303      	movs	r3, #3
 80024f8:	e02c      	b.n	8002554 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80024fa:	4b18      	ldr	r3, [pc, #96]	@ (800255c <HAL_RCC_ClockConfig+0x1f0>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	2207      	movs	r2, #7
 8002500:	4013      	ands	r3, r2
 8002502:	683a      	ldr	r2, [r7, #0]
 8002504:	429a      	cmp	r2, r3
 8002506:	d1ee      	bne.n	80024e6 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	2204      	movs	r2, #4
 800250e:	4013      	ands	r3, r2
 8002510:	d009      	beq.n	8002526 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002512:	4b14      	ldr	r3, [pc, #80]	@ (8002564 <HAL_RCC_ClockConfig+0x1f8>)
 8002514:	689b      	ldr	r3, [r3, #8]
 8002516:	4a15      	ldr	r2, [pc, #84]	@ (800256c <HAL_RCC_ClockConfig+0x200>)
 8002518:	4013      	ands	r3, r2
 800251a:	0019      	movs	r1, r3
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	68da      	ldr	r2, [r3, #12]
 8002520:	4b10      	ldr	r3, [pc, #64]	@ (8002564 <HAL_RCC_ClockConfig+0x1f8>)
 8002522:	430a      	orrs	r2, r1
 8002524:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8002526:	f000 f829 	bl	800257c <HAL_RCC_GetSysClockFreq>
 800252a:	0001      	movs	r1, r0
 800252c:	4b0d      	ldr	r3, [pc, #52]	@ (8002564 <HAL_RCC_ClockConfig+0x1f8>)
 800252e:	689b      	ldr	r3, [r3, #8]
 8002530:	0a1b      	lsrs	r3, r3, #8
 8002532:	220f      	movs	r2, #15
 8002534:	401a      	ands	r2, r3
 8002536:	4b0e      	ldr	r3, [pc, #56]	@ (8002570 <HAL_RCC_ClockConfig+0x204>)
 8002538:	0092      	lsls	r2, r2, #2
 800253a:	58d3      	ldr	r3, [r2, r3]
 800253c:	221f      	movs	r2, #31
 800253e:	4013      	ands	r3, r2
 8002540:	000a      	movs	r2, r1
 8002542:	40da      	lsrs	r2, r3
 8002544:	4b0b      	ldr	r3, [pc, #44]	@ (8002574 <HAL_RCC_ClockConfig+0x208>)
 8002546:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002548:	4b0b      	ldr	r3, [pc, #44]	@ (8002578 <HAL_RCC_ClockConfig+0x20c>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	0018      	movs	r0, r3
 800254e:	f7fe fdb1 	bl	80010b4 <HAL_InitTick>
 8002552:	0003      	movs	r3, r0
}
 8002554:	0018      	movs	r0, r3
 8002556:	46bd      	mov	sp, r7
 8002558:	b004      	add	sp, #16
 800255a:	bd80      	pop	{r7, pc}
 800255c:	40022000 	.word	0x40022000
 8002560:	00001388 	.word	0x00001388
 8002564:	40021000 	.word	0x40021000
 8002568:	fffff0ff 	.word	0xfffff0ff
 800256c:	ffff8fff 	.word	0xffff8fff
 8002570:	080070f0 	.word	0x080070f0
 8002574:	200001ac 	.word	0x200001ac
 8002578:	200001b0 	.word	0x200001b0

0800257c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b086      	sub	sp, #24
 8002580:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002582:	4b3c      	ldr	r3, [pc, #240]	@ (8002674 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002584:	689b      	ldr	r3, [r3, #8]
 8002586:	2238      	movs	r2, #56	@ 0x38
 8002588:	4013      	ands	r3, r2
 800258a:	d10f      	bne.n	80025ac <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 800258c:	4b39      	ldr	r3, [pc, #228]	@ (8002674 <HAL_RCC_GetSysClockFreq+0xf8>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	0adb      	lsrs	r3, r3, #11
 8002592:	2207      	movs	r2, #7
 8002594:	4013      	ands	r3, r2
 8002596:	2201      	movs	r2, #1
 8002598:	409a      	lsls	r2, r3
 800259a:	0013      	movs	r3, r2
 800259c:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800259e:	6839      	ldr	r1, [r7, #0]
 80025a0:	4835      	ldr	r0, [pc, #212]	@ (8002678 <HAL_RCC_GetSysClockFreq+0xfc>)
 80025a2:	f7fd fdc3 	bl	800012c <__udivsi3>
 80025a6:	0003      	movs	r3, r0
 80025a8:	613b      	str	r3, [r7, #16]
 80025aa:	e05d      	b.n	8002668 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80025ac:	4b31      	ldr	r3, [pc, #196]	@ (8002674 <HAL_RCC_GetSysClockFreq+0xf8>)
 80025ae:	689b      	ldr	r3, [r3, #8]
 80025b0:	2238      	movs	r2, #56	@ 0x38
 80025b2:	4013      	ands	r3, r2
 80025b4:	2b08      	cmp	r3, #8
 80025b6:	d102      	bne.n	80025be <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80025b8:	4b30      	ldr	r3, [pc, #192]	@ (800267c <HAL_RCC_GetSysClockFreq+0x100>)
 80025ba:	613b      	str	r3, [r7, #16]
 80025bc:	e054      	b.n	8002668 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80025be:	4b2d      	ldr	r3, [pc, #180]	@ (8002674 <HAL_RCC_GetSysClockFreq+0xf8>)
 80025c0:	689b      	ldr	r3, [r3, #8]
 80025c2:	2238      	movs	r2, #56	@ 0x38
 80025c4:	4013      	ands	r3, r2
 80025c6:	2b10      	cmp	r3, #16
 80025c8:	d138      	bne.n	800263c <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80025ca:	4b2a      	ldr	r3, [pc, #168]	@ (8002674 <HAL_RCC_GetSysClockFreq+0xf8>)
 80025cc:	68db      	ldr	r3, [r3, #12]
 80025ce:	2203      	movs	r2, #3
 80025d0:	4013      	ands	r3, r2
 80025d2:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80025d4:	4b27      	ldr	r3, [pc, #156]	@ (8002674 <HAL_RCC_GetSysClockFreq+0xf8>)
 80025d6:	68db      	ldr	r3, [r3, #12]
 80025d8:	091b      	lsrs	r3, r3, #4
 80025da:	2207      	movs	r2, #7
 80025dc:	4013      	ands	r3, r2
 80025de:	3301      	adds	r3, #1
 80025e0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	2b03      	cmp	r3, #3
 80025e6:	d10d      	bne.n	8002604 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80025e8:	68b9      	ldr	r1, [r7, #8]
 80025ea:	4824      	ldr	r0, [pc, #144]	@ (800267c <HAL_RCC_GetSysClockFreq+0x100>)
 80025ec:	f7fd fd9e 	bl	800012c <__udivsi3>
 80025f0:	0003      	movs	r3, r0
 80025f2:	0019      	movs	r1, r3
 80025f4:	4b1f      	ldr	r3, [pc, #124]	@ (8002674 <HAL_RCC_GetSysClockFreq+0xf8>)
 80025f6:	68db      	ldr	r3, [r3, #12]
 80025f8:	0a1b      	lsrs	r3, r3, #8
 80025fa:	227f      	movs	r2, #127	@ 0x7f
 80025fc:	4013      	ands	r3, r2
 80025fe:	434b      	muls	r3, r1
 8002600:	617b      	str	r3, [r7, #20]
        break;
 8002602:	e00d      	b.n	8002620 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8002604:	68b9      	ldr	r1, [r7, #8]
 8002606:	481c      	ldr	r0, [pc, #112]	@ (8002678 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002608:	f7fd fd90 	bl	800012c <__udivsi3>
 800260c:	0003      	movs	r3, r0
 800260e:	0019      	movs	r1, r3
 8002610:	4b18      	ldr	r3, [pc, #96]	@ (8002674 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002612:	68db      	ldr	r3, [r3, #12]
 8002614:	0a1b      	lsrs	r3, r3, #8
 8002616:	227f      	movs	r2, #127	@ 0x7f
 8002618:	4013      	ands	r3, r2
 800261a:	434b      	muls	r3, r1
 800261c:	617b      	str	r3, [r7, #20]
        break;
 800261e:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8002620:	4b14      	ldr	r3, [pc, #80]	@ (8002674 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002622:	68db      	ldr	r3, [r3, #12]
 8002624:	0f5b      	lsrs	r3, r3, #29
 8002626:	2207      	movs	r2, #7
 8002628:	4013      	ands	r3, r2
 800262a:	3301      	adds	r3, #1
 800262c:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 800262e:	6879      	ldr	r1, [r7, #4]
 8002630:	6978      	ldr	r0, [r7, #20]
 8002632:	f7fd fd7b 	bl	800012c <__udivsi3>
 8002636:	0003      	movs	r3, r0
 8002638:	613b      	str	r3, [r7, #16]
 800263a:	e015      	b.n	8002668 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800263c:	4b0d      	ldr	r3, [pc, #52]	@ (8002674 <HAL_RCC_GetSysClockFreq+0xf8>)
 800263e:	689b      	ldr	r3, [r3, #8]
 8002640:	2238      	movs	r2, #56	@ 0x38
 8002642:	4013      	ands	r3, r2
 8002644:	2b20      	cmp	r3, #32
 8002646:	d103      	bne.n	8002650 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8002648:	2380      	movs	r3, #128	@ 0x80
 800264a:	021b      	lsls	r3, r3, #8
 800264c:	613b      	str	r3, [r7, #16]
 800264e:	e00b      	b.n	8002668 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002650:	4b08      	ldr	r3, [pc, #32]	@ (8002674 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002652:	689b      	ldr	r3, [r3, #8]
 8002654:	2238      	movs	r2, #56	@ 0x38
 8002656:	4013      	ands	r3, r2
 8002658:	2b18      	cmp	r3, #24
 800265a:	d103      	bne.n	8002664 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 800265c:	23fa      	movs	r3, #250	@ 0xfa
 800265e:	01db      	lsls	r3, r3, #7
 8002660:	613b      	str	r3, [r7, #16]
 8002662:	e001      	b.n	8002668 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8002664:	2300      	movs	r3, #0
 8002666:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002668:	693b      	ldr	r3, [r7, #16]
}
 800266a:	0018      	movs	r0, r3
 800266c:	46bd      	mov	sp, r7
 800266e:	b006      	add	sp, #24
 8002670:	bd80      	pop	{r7, pc}
 8002672:	46c0      	nop			@ (mov r8, r8)
 8002674:	40021000 	.word	0x40021000
 8002678:	00f42400 	.word	0x00f42400
 800267c:	007a1200 	.word	0x007a1200

08002680 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002684:	4b02      	ldr	r3, [pc, #8]	@ (8002690 <HAL_RCC_GetHCLKFreq+0x10>)
 8002686:	681b      	ldr	r3, [r3, #0]
}
 8002688:	0018      	movs	r0, r3
 800268a:	46bd      	mov	sp, r7
 800268c:	bd80      	pop	{r7, pc}
 800268e:	46c0      	nop			@ (mov r8, r8)
 8002690:	200001ac 	.word	0x200001ac

08002694 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002694:	b5b0      	push	{r4, r5, r7, lr}
 8002696:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8002698:	f7ff fff2 	bl	8002680 <HAL_RCC_GetHCLKFreq>
 800269c:	0004      	movs	r4, r0
 800269e:	f7ff fb3f 	bl	8001d20 <LL_RCC_GetAPB1Prescaler>
 80026a2:	0003      	movs	r3, r0
 80026a4:	0b1a      	lsrs	r2, r3, #12
 80026a6:	4b05      	ldr	r3, [pc, #20]	@ (80026bc <HAL_RCC_GetPCLK1Freq+0x28>)
 80026a8:	0092      	lsls	r2, r2, #2
 80026aa:	58d3      	ldr	r3, [r2, r3]
 80026ac:	221f      	movs	r2, #31
 80026ae:	4013      	ands	r3, r2
 80026b0:	40dc      	lsrs	r4, r3
 80026b2:	0023      	movs	r3, r4
}
 80026b4:	0018      	movs	r0, r3
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bdb0      	pop	{r4, r5, r7, pc}
 80026ba:	46c0      	nop			@ (mov r8, r8)
 80026bc:	08007130 	.word	0x08007130

080026c0 <HAL_RCC_GetClockConfig>:
  *                           will be configured.
  * @param  pFLatency         Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b082      	sub	sp, #8
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
 80026c8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	2207      	movs	r2, #7
 80026ce:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80026d0:	4b0e      	ldr	r3, [pc, #56]	@ (800270c <HAL_RCC_GetClockConfig+0x4c>)
 80026d2:	689b      	ldr	r3, [r3, #8]
 80026d4:	2207      	movs	r2, #7
 80026d6:	401a      	ands	r2, r3
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80026dc:	4b0b      	ldr	r3, [pc, #44]	@ (800270c <HAL_RCC_GetClockConfig+0x4c>)
 80026de:	689a      	ldr	r2, [r3, #8]
 80026e0:	23f0      	movs	r3, #240	@ 0xf0
 80026e2:	011b      	lsls	r3, r3, #4
 80026e4:	401a      	ands	r2, r3
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE);
 80026ea:	4b08      	ldr	r3, [pc, #32]	@ (800270c <HAL_RCC_GetClockConfig+0x4c>)
 80026ec:	689a      	ldr	r2, [r3, #8]
 80026ee:	23e0      	movs	r3, #224	@ 0xe0
 80026f0:	01db      	lsls	r3, r3, #7
 80026f2:	401a      	ands	r2, r3
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	60da      	str	r2, [r3, #12]


  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80026f8:	4b05      	ldr	r3, [pc, #20]	@ (8002710 <HAL_RCC_GetClockConfig+0x50>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	2207      	movs	r2, #7
 80026fe:	401a      	ands	r2, r3
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	601a      	str	r2, [r3, #0]
}
 8002704:	46c0      	nop			@ (mov r8, r8)
 8002706:	46bd      	mov	sp, r7
 8002708:	b002      	add	sp, #8
 800270a:	bd80      	pop	{r7, pc}
 800270c:	40021000 	.word	0x40021000
 8002710:	40022000 	.word	0x40022000

08002714 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b086      	sub	sp, #24
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 800271c:	2313      	movs	r3, #19
 800271e:	18fb      	adds	r3, r7, r3
 8002720:	2200      	movs	r2, #0
 8002722:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002724:	2312      	movs	r3, #18
 8002726:	18fb      	adds	r3, r7, r3
 8002728:	2200      	movs	r2, #0
 800272a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681a      	ldr	r2, [r3, #0]
 8002730:	2380      	movs	r3, #128	@ 0x80
 8002732:	029b      	lsls	r3, r3, #10
 8002734:	4013      	ands	r3, r2
 8002736:	d100      	bne.n	800273a <HAL_RCCEx_PeriphCLKConfig+0x26>
 8002738:	e0a3      	b.n	8002882 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800273a:	2011      	movs	r0, #17
 800273c:	183b      	adds	r3, r7, r0
 800273e:	2200      	movs	r2, #0
 8002740:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002742:	4bc3      	ldr	r3, [pc, #780]	@ (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002744:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002746:	2380      	movs	r3, #128	@ 0x80
 8002748:	055b      	lsls	r3, r3, #21
 800274a:	4013      	ands	r3, r2
 800274c:	d110      	bne.n	8002770 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800274e:	4bc0      	ldr	r3, [pc, #768]	@ (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002750:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002752:	4bbf      	ldr	r3, [pc, #764]	@ (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002754:	2180      	movs	r1, #128	@ 0x80
 8002756:	0549      	lsls	r1, r1, #21
 8002758:	430a      	orrs	r2, r1
 800275a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800275c:	4bbc      	ldr	r3, [pc, #752]	@ (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800275e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002760:	2380      	movs	r3, #128	@ 0x80
 8002762:	055b      	lsls	r3, r3, #21
 8002764:	4013      	ands	r3, r2
 8002766:	60bb      	str	r3, [r7, #8]
 8002768:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800276a:	183b      	adds	r3, r7, r0
 800276c:	2201      	movs	r2, #1
 800276e:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002770:	4bb8      	ldr	r3, [pc, #736]	@ (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8002772:	681a      	ldr	r2, [r3, #0]
 8002774:	4bb7      	ldr	r3, [pc, #732]	@ (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8002776:	2180      	movs	r1, #128	@ 0x80
 8002778:	0049      	lsls	r1, r1, #1
 800277a:	430a      	orrs	r2, r1
 800277c:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800277e:	f7fe fde3 	bl	8001348 <HAL_GetTick>
 8002782:	0003      	movs	r3, r0
 8002784:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002786:	e00b      	b.n	80027a0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002788:	f7fe fdde 	bl	8001348 <HAL_GetTick>
 800278c:	0002      	movs	r2, r0
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	1ad3      	subs	r3, r2, r3
 8002792:	2b02      	cmp	r3, #2
 8002794:	d904      	bls.n	80027a0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8002796:	2313      	movs	r3, #19
 8002798:	18fb      	adds	r3, r7, r3
 800279a:	2203      	movs	r2, #3
 800279c:	701a      	strb	r2, [r3, #0]
        break;
 800279e:	e005      	b.n	80027ac <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80027a0:	4bac      	ldr	r3, [pc, #688]	@ (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80027a2:	681a      	ldr	r2, [r3, #0]
 80027a4:	2380      	movs	r3, #128	@ 0x80
 80027a6:	005b      	lsls	r3, r3, #1
 80027a8:	4013      	ands	r3, r2
 80027aa:	d0ed      	beq.n	8002788 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 80027ac:	2313      	movs	r3, #19
 80027ae:	18fb      	adds	r3, r7, r3
 80027b0:	781b      	ldrb	r3, [r3, #0]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d154      	bne.n	8002860 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80027b6:	4ba6      	ldr	r3, [pc, #664]	@ (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80027b8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80027ba:	23c0      	movs	r3, #192	@ 0xc0
 80027bc:	009b      	lsls	r3, r3, #2
 80027be:	4013      	ands	r3, r2
 80027c0:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80027c2:	697b      	ldr	r3, [r7, #20]
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d019      	beq.n	80027fc <HAL_RCCEx_PeriphCLKConfig+0xe8>
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027cc:	697a      	ldr	r2, [r7, #20]
 80027ce:	429a      	cmp	r2, r3
 80027d0:	d014      	beq.n	80027fc <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80027d2:	4b9f      	ldr	r3, [pc, #636]	@ (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80027d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027d6:	4aa0      	ldr	r2, [pc, #640]	@ (8002a58 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80027d8:	4013      	ands	r3, r2
 80027da:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80027dc:	4b9c      	ldr	r3, [pc, #624]	@ (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80027de:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80027e0:	4b9b      	ldr	r3, [pc, #620]	@ (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80027e2:	2180      	movs	r1, #128	@ 0x80
 80027e4:	0249      	lsls	r1, r1, #9
 80027e6:	430a      	orrs	r2, r1
 80027e8:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 80027ea:	4b99      	ldr	r3, [pc, #612]	@ (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80027ec:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80027ee:	4b98      	ldr	r3, [pc, #608]	@ (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80027f0:	499a      	ldr	r1, [pc, #616]	@ (8002a5c <HAL_RCCEx_PeriphCLKConfig+0x348>)
 80027f2:	400a      	ands	r2, r1
 80027f4:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80027f6:	4b96      	ldr	r3, [pc, #600]	@ (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80027f8:	697a      	ldr	r2, [r7, #20]
 80027fa:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80027fc:	697b      	ldr	r3, [r7, #20]
 80027fe:	2201      	movs	r2, #1
 8002800:	4013      	ands	r3, r2
 8002802:	d016      	beq.n	8002832 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002804:	f7fe fda0 	bl	8001348 <HAL_GetTick>
 8002808:	0003      	movs	r3, r0
 800280a:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800280c:	e00c      	b.n	8002828 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800280e:	f7fe fd9b 	bl	8001348 <HAL_GetTick>
 8002812:	0002      	movs	r2, r0
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	1ad3      	subs	r3, r2, r3
 8002818:	4a91      	ldr	r2, [pc, #580]	@ (8002a60 <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 800281a:	4293      	cmp	r3, r2
 800281c:	d904      	bls.n	8002828 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 800281e:	2313      	movs	r3, #19
 8002820:	18fb      	adds	r3, r7, r3
 8002822:	2203      	movs	r2, #3
 8002824:	701a      	strb	r2, [r3, #0]
            break;
 8002826:	e004      	b.n	8002832 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002828:	4b89      	ldr	r3, [pc, #548]	@ (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800282a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800282c:	2202      	movs	r2, #2
 800282e:	4013      	ands	r3, r2
 8002830:	d0ed      	beq.n	800280e <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8002832:	2313      	movs	r3, #19
 8002834:	18fb      	adds	r3, r7, r3
 8002836:	781b      	ldrb	r3, [r3, #0]
 8002838:	2b00      	cmp	r3, #0
 800283a:	d10a      	bne.n	8002852 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800283c:	4b84      	ldr	r3, [pc, #528]	@ (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800283e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002840:	4a85      	ldr	r2, [pc, #532]	@ (8002a58 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8002842:	4013      	ands	r3, r2
 8002844:	0019      	movs	r1, r3
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800284a:	4b81      	ldr	r3, [pc, #516]	@ (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800284c:	430a      	orrs	r2, r1
 800284e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002850:	e00c      	b.n	800286c <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002852:	2312      	movs	r3, #18
 8002854:	18fb      	adds	r3, r7, r3
 8002856:	2213      	movs	r2, #19
 8002858:	18ba      	adds	r2, r7, r2
 800285a:	7812      	ldrb	r2, [r2, #0]
 800285c:	701a      	strb	r2, [r3, #0]
 800285e:	e005      	b.n	800286c <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002860:	2312      	movs	r3, #18
 8002862:	18fb      	adds	r3, r7, r3
 8002864:	2213      	movs	r2, #19
 8002866:	18ba      	adds	r2, r7, r2
 8002868:	7812      	ldrb	r2, [r2, #0]
 800286a:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800286c:	2311      	movs	r3, #17
 800286e:	18fb      	adds	r3, r7, r3
 8002870:	781b      	ldrb	r3, [r3, #0]
 8002872:	2b01      	cmp	r3, #1
 8002874:	d105      	bne.n	8002882 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002876:	4b76      	ldr	r3, [pc, #472]	@ (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002878:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800287a:	4b75      	ldr	r3, [pc, #468]	@ (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800287c:	4979      	ldr	r1, [pc, #484]	@ (8002a64 <HAL_RCCEx_PeriphCLKConfig+0x350>)
 800287e:	400a      	ands	r2, r1
 8002880:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	2201      	movs	r2, #1
 8002888:	4013      	ands	r3, r2
 800288a:	d009      	beq.n	80028a0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800288c:	4b70      	ldr	r3, [pc, #448]	@ (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800288e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002890:	2203      	movs	r2, #3
 8002892:	4393      	bics	r3, r2
 8002894:	0019      	movs	r1, r3
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	685a      	ldr	r2, [r3, #4]
 800289a:	4b6d      	ldr	r3, [pc, #436]	@ (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800289c:	430a      	orrs	r2, r1
 800289e:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	2202      	movs	r2, #2
 80028a6:	4013      	ands	r3, r2
 80028a8:	d009      	beq.n	80028be <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80028aa:	4b69      	ldr	r3, [pc, #420]	@ (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80028ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028ae:	220c      	movs	r2, #12
 80028b0:	4393      	bics	r3, r2
 80028b2:	0019      	movs	r1, r3
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	689a      	ldr	r2, [r3, #8]
 80028b8:	4b65      	ldr	r3, [pc, #404]	@ (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80028ba:	430a      	orrs	r2, r1
 80028bc:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	2210      	movs	r2, #16
 80028c4:	4013      	ands	r3, r2
 80028c6:	d009      	beq.n	80028dc <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80028c8:	4b61      	ldr	r3, [pc, #388]	@ (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80028ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028cc:	4a66      	ldr	r2, [pc, #408]	@ (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x354>)
 80028ce:	4013      	ands	r3, r2
 80028d0:	0019      	movs	r1, r3
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	68da      	ldr	r2, [r3, #12]
 80028d6:	4b5e      	ldr	r3, [pc, #376]	@ (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80028d8:	430a      	orrs	r2, r1
 80028da:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681a      	ldr	r2, [r3, #0]
 80028e0:	2380      	movs	r3, #128	@ 0x80
 80028e2:	009b      	lsls	r3, r3, #2
 80028e4:	4013      	ands	r3, r2
 80028e6:	d009      	beq.n	80028fc <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80028e8:	4b59      	ldr	r3, [pc, #356]	@ (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80028ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028ec:	4a5f      	ldr	r2, [pc, #380]	@ (8002a6c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80028ee:	4013      	ands	r3, r2
 80028f0:	0019      	movs	r1, r3
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	699a      	ldr	r2, [r3, #24]
 80028f6:	4b56      	ldr	r3, [pc, #344]	@ (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80028f8:	430a      	orrs	r2, r1
 80028fa:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681a      	ldr	r2, [r3, #0]
 8002900:	2380      	movs	r3, #128	@ 0x80
 8002902:	00db      	lsls	r3, r3, #3
 8002904:	4013      	ands	r3, r2
 8002906:	d009      	beq.n	800291c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002908:	4b51      	ldr	r3, [pc, #324]	@ (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800290a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800290c:	4a58      	ldr	r2, [pc, #352]	@ (8002a70 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800290e:	4013      	ands	r3, r2
 8002910:	0019      	movs	r1, r3
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	69da      	ldr	r2, [r3, #28]
 8002916:	4b4e      	ldr	r3, [pc, #312]	@ (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002918:	430a      	orrs	r2, r1
 800291a:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	2220      	movs	r2, #32
 8002922:	4013      	ands	r3, r2
 8002924:	d009      	beq.n	800293a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002926:	4b4a      	ldr	r3, [pc, #296]	@ (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002928:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800292a:	4a52      	ldr	r2, [pc, #328]	@ (8002a74 <HAL_RCCEx_PeriphCLKConfig+0x360>)
 800292c:	4013      	ands	r3, r2
 800292e:	0019      	movs	r1, r3
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	691a      	ldr	r2, [r3, #16]
 8002934:	4b46      	ldr	r3, [pc, #280]	@ (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002936:	430a      	orrs	r2, r1
 8002938:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681a      	ldr	r2, [r3, #0]
 800293e:	2380      	movs	r3, #128	@ 0x80
 8002940:	01db      	lsls	r3, r3, #7
 8002942:	4013      	ands	r3, r2
 8002944:	d015      	beq.n	8002972 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002946:	4b42      	ldr	r3, [pc, #264]	@ (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002948:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800294a:	009b      	lsls	r3, r3, #2
 800294c:	0899      	lsrs	r1, r3, #2
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6a1a      	ldr	r2, [r3, #32]
 8002952:	4b3f      	ldr	r3, [pc, #252]	@ (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002954:	430a      	orrs	r2, r1
 8002956:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6a1a      	ldr	r2, [r3, #32]
 800295c:	2380      	movs	r3, #128	@ 0x80
 800295e:	05db      	lsls	r3, r3, #23
 8002960:	429a      	cmp	r2, r3
 8002962:	d106      	bne.n	8002972 <HAL_RCCEx_PeriphCLKConfig+0x25e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002964:	4b3a      	ldr	r3, [pc, #232]	@ (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002966:	68da      	ldr	r2, [r3, #12]
 8002968:	4b39      	ldr	r3, [pc, #228]	@ (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800296a:	2180      	movs	r1, #128	@ 0x80
 800296c:	0249      	lsls	r1, r1, #9
 800296e:	430a      	orrs	r2, r1
 8002970:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681a      	ldr	r2, [r3, #0]
 8002976:	2380      	movs	r3, #128	@ 0x80
 8002978:	031b      	lsls	r3, r3, #12
 800297a:	4013      	ands	r3, r2
 800297c:	d009      	beq.n	8002992 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800297e:	4b34      	ldr	r3, [pc, #208]	@ (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002980:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002982:	2240      	movs	r2, #64	@ 0x40
 8002984:	4393      	bics	r3, r2
 8002986:	0019      	movs	r1, r3
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800298c:	4b30      	ldr	r3, [pc, #192]	@ (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800298e:	430a      	orrs	r2, r1
 8002990:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681a      	ldr	r2, [r3, #0]
 8002996:	2380      	movs	r3, #128	@ 0x80
 8002998:	039b      	lsls	r3, r3, #14
 800299a:	4013      	ands	r3, r2
 800299c:	d016      	beq.n	80029cc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800299e:	4b2c      	ldr	r3, [pc, #176]	@ (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80029a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029a2:	4a35      	ldr	r2, [pc, #212]	@ (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80029a4:	4013      	ands	r3, r2
 80029a6:	0019      	movs	r1, r3
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80029ac:	4b28      	ldr	r3, [pc, #160]	@ (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80029ae:	430a      	orrs	r2, r1
 80029b0:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80029b6:	2380      	movs	r3, #128	@ 0x80
 80029b8:	03db      	lsls	r3, r3, #15
 80029ba:	429a      	cmp	r2, r3
 80029bc:	d106      	bne.n	80029cc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80029be:	4b24      	ldr	r3, [pc, #144]	@ (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80029c0:	68da      	ldr	r2, [r3, #12]
 80029c2:	4b23      	ldr	r3, [pc, #140]	@ (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80029c4:	2180      	movs	r1, #128	@ 0x80
 80029c6:	0449      	lsls	r1, r1, #17
 80029c8:	430a      	orrs	r2, r1
 80029ca:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681a      	ldr	r2, [r3, #0]
 80029d0:	2380      	movs	r3, #128	@ 0x80
 80029d2:	03db      	lsls	r3, r3, #15
 80029d4:	4013      	ands	r3, r2
 80029d6:	d016      	beq.n	8002a06 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80029d8:	4b1d      	ldr	r3, [pc, #116]	@ (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80029da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029dc:	4a27      	ldr	r2, [pc, #156]	@ (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x368>)
 80029de:	4013      	ands	r3, r2
 80029e0:	0019      	movs	r1, r3
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80029e6:	4b1a      	ldr	r3, [pc, #104]	@ (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80029e8:	430a      	orrs	r2, r1
 80029ea:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80029f0:	2380      	movs	r3, #128	@ 0x80
 80029f2:	045b      	lsls	r3, r3, #17
 80029f4:	429a      	cmp	r2, r3
 80029f6:	d106      	bne.n	8002a06 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80029f8:	4b15      	ldr	r3, [pc, #84]	@ (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80029fa:	68da      	ldr	r2, [r3, #12]
 80029fc:	4b14      	ldr	r3, [pc, #80]	@ (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80029fe:	2180      	movs	r1, #128	@ 0x80
 8002a00:	0449      	lsls	r1, r1, #17
 8002a02:	430a      	orrs	r2, r1
 8002a04:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681a      	ldr	r2, [r3, #0]
 8002a0a:	2380      	movs	r3, #128	@ 0x80
 8002a0c:	011b      	lsls	r3, r3, #4
 8002a0e:	4013      	ands	r3, r2
 8002a10:	d016      	beq.n	8002a40 <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8002a12:	4b0f      	ldr	r3, [pc, #60]	@ (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002a14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a16:	4a1a      	ldr	r2, [pc, #104]	@ (8002a80 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 8002a18:	4013      	ands	r3, r2
 8002a1a:	0019      	movs	r1, r3
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	695a      	ldr	r2, [r3, #20]
 8002a20:	4b0b      	ldr	r3, [pc, #44]	@ (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002a22:	430a      	orrs	r2, r1
 8002a24:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	695a      	ldr	r2, [r3, #20]
 8002a2a:	2380      	movs	r3, #128	@ 0x80
 8002a2c:	01db      	lsls	r3, r3, #7
 8002a2e:	429a      	cmp	r2, r3
 8002a30:	d106      	bne.n	8002a40 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002a32:	4b07      	ldr	r3, [pc, #28]	@ (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002a34:	68da      	ldr	r2, [r3, #12]
 8002a36:	4b06      	ldr	r3, [pc, #24]	@ (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002a38:	2180      	movs	r1, #128	@ 0x80
 8002a3a:	0249      	lsls	r1, r1, #9
 8002a3c:	430a      	orrs	r2, r1
 8002a3e:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8002a40:	2312      	movs	r3, #18
 8002a42:	18fb      	adds	r3, r7, r3
 8002a44:	781b      	ldrb	r3, [r3, #0]
}
 8002a46:	0018      	movs	r0, r3
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	b006      	add	sp, #24
 8002a4c:	bd80      	pop	{r7, pc}
 8002a4e:	46c0      	nop			@ (mov r8, r8)
 8002a50:	40021000 	.word	0x40021000
 8002a54:	40007000 	.word	0x40007000
 8002a58:	fffffcff 	.word	0xfffffcff
 8002a5c:	fffeffff 	.word	0xfffeffff
 8002a60:	00001388 	.word	0x00001388
 8002a64:	efffffff 	.word	0xefffffff
 8002a68:	fffff3ff 	.word	0xfffff3ff
 8002a6c:	fff3ffff 	.word	0xfff3ffff
 8002a70:	ffcfffff 	.word	0xffcfffff
 8002a74:	ffffcfff 	.word	0xffffcfff
 8002a78:	ffbfffff 	.word	0xffbfffff
 8002a7c:	feffffff 	.word	0xfeffffff
 8002a80:	ffff3fff 	.word	0xffff3fff

08002a84 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b082      	sub	sp, #8
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d101      	bne.n	8002a96 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002a92:	2301      	movs	r3, #1
 8002a94:	e04a      	b.n	8002b2c <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	223d      	movs	r2, #61	@ 0x3d
 8002a9a:	5c9b      	ldrb	r3, [r3, r2]
 8002a9c:	b2db      	uxtb	r3, r3
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d107      	bne.n	8002ab2 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	223c      	movs	r2, #60	@ 0x3c
 8002aa6:	2100      	movs	r1, #0
 8002aa8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	0018      	movs	r0, r3
 8002aae:	f7fe fa4d 	bl	8000f4c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	223d      	movs	r2, #61	@ 0x3d
 8002ab6:	2102      	movs	r1, #2
 8002ab8:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681a      	ldr	r2, [r3, #0]
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	3304      	adds	r3, #4
 8002ac2:	0019      	movs	r1, r3
 8002ac4:	0010      	movs	r0, r2
 8002ac6:	f000 fa8f 	bl	8002fe8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	2248      	movs	r2, #72	@ 0x48
 8002ace:	2101      	movs	r1, #1
 8002ad0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	223e      	movs	r2, #62	@ 0x3e
 8002ad6:	2101      	movs	r1, #1
 8002ad8:	5499      	strb	r1, [r3, r2]
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	223f      	movs	r2, #63	@ 0x3f
 8002ade:	2101      	movs	r1, #1
 8002ae0:	5499      	strb	r1, [r3, r2]
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	2240      	movs	r2, #64	@ 0x40
 8002ae6:	2101      	movs	r1, #1
 8002ae8:	5499      	strb	r1, [r3, r2]
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	2241      	movs	r2, #65	@ 0x41
 8002aee:	2101      	movs	r1, #1
 8002af0:	5499      	strb	r1, [r3, r2]
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	2242      	movs	r2, #66	@ 0x42
 8002af6:	2101      	movs	r1, #1
 8002af8:	5499      	strb	r1, [r3, r2]
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	2243      	movs	r2, #67	@ 0x43
 8002afe:	2101      	movs	r1, #1
 8002b00:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	2244      	movs	r2, #68	@ 0x44
 8002b06:	2101      	movs	r1, #1
 8002b08:	5499      	strb	r1, [r3, r2]
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	2245      	movs	r2, #69	@ 0x45
 8002b0e:	2101      	movs	r1, #1
 8002b10:	5499      	strb	r1, [r3, r2]
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	2246      	movs	r2, #70	@ 0x46
 8002b16:	2101      	movs	r1, #1
 8002b18:	5499      	strb	r1, [r3, r2]
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	2247      	movs	r2, #71	@ 0x47
 8002b1e:	2101      	movs	r1, #1
 8002b20:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	223d      	movs	r2, #61	@ 0x3d
 8002b26:	2101      	movs	r1, #1
 8002b28:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002b2a:	2300      	movs	r3, #0
}
 8002b2c:	0018      	movs	r0, r3
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	b002      	add	sp, #8
 8002b32:	bd80      	pop	{r7, pc}

08002b34 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b084      	sub	sp, #16
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	223d      	movs	r2, #61	@ 0x3d
 8002b40:	5c9b      	ldrb	r3, [r3, r2]
 8002b42:	b2db      	uxtb	r3, r3
 8002b44:	2b01      	cmp	r3, #1
 8002b46:	d001      	beq.n	8002b4c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002b48:	2301      	movs	r3, #1
 8002b4a:	e042      	b.n	8002bd2 <HAL_TIM_Base_Start_IT+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	223d      	movs	r2, #61	@ 0x3d
 8002b50:	2102      	movs	r1, #2
 8002b52:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	68da      	ldr	r2, [r3, #12]
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	2101      	movs	r1, #1
 8002b60:	430a      	orrs	r2, r1
 8002b62:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	4a1c      	ldr	r2, [pc, #112]	@ (8002bdc <HAL_TIM_Base_Start_IT+0xa8>)
 8002b6a:	4293      	cmp	r3, r2
 8002b6c:	d00f      	beq.n	8002b8e <HAL_TIM_Base_Start_IT+0x5a>
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681a      	ldr	r2, [r3, #0]
 8002b72:	2380      	movs	r3, #128	@ 0x80
 8002b74:	05db      	lsls	r3, r3, #23
 8002b76:	429a      	cmp	r2, r3
 8002b78:	d009      	beq.n	8002b8e <HAL_TIM_Base_Start_IT+0x5a>
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	4a18      	ldr	r2, [pc, #96]	@ (8002be0 <HAL_TIM_Base_Start_IT+0xac>)
 8002b80:	4293      	cmp	r3, r2
 8002b82:	d004      	beq.n	8002b8e <HAL_TIM_Base_Start_IT+0x5a>
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	4a16      	ldr	r2, [pc, #88]	@ (8002be4 <HAL_TIM_Base_Start_IT+0xb0>)
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d116      	bne.n	8002bbc <HAL_TIM_Base_Start_IT+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	689b      	ldr	r3, [r3, #8]
 8002b94:	4a14      	ldr	r2, [pc, #80]	@ (8002be8 <HAL_TIM_Base_Start_IT+0xb4>)
 8002b96:	4013      	ands	r3, r2
 8002b98:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	2b06      	cmp	r3, #6
 8002b9e:	d016      	beq.n	8002bce <HAL_TIM_Base_Start_IT+0x9a>
 8002ba0:	68fa      	ldr	r2, [r7, #12]
 8002ba2:	2380      	movs	r3, #128	@ 0x80
 8002ba4:	025b      	lsls	r3, r3, #9
 8002ba6:	429a      	cmp	r2, r3
 8002ba8:	d011      	beq.n	8002bce <HAL_TIM_Base_Start_IT+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	681a      	ldr	r2, [r3, #0]
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	2101      	movs	r1, #1
 8002bb6:	430a      	orrs	r2, r1
 8002bb8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002bba:	e008      	b.n	8002bce <HAL_TIM_Base_Start_IT+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	681a      	ldr	r2, [r3, #0]
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	2101      	movs	r1, #1
 8002bc8:	430a      	orrs	r2, r1
 8002bca:	601a      	str	r2, [r3, #0]
 8002bcc:	e000      	b.n	8002bd0 <HAL_TIM_Base_Start_IT+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002bce:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8002bd0:	2300      	movs	r3, #0
}
 8002bd2:	0018      	movs	r0, r3
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	b004      	add	sp, #16
 8002bd8:	bd80      	pop	{r7, pc}
 8002bda:	46c0      	nop			@ (mov r8, r8)
 8002bdc:	40012c00 	.word	0x40012c00
 8002be0:	40000400 	.word	0x40000400
 8002be4:	40014000 	.word	0x40014000
 8002be8:	00010007 	.word	0x00010007

08002bec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b084      	sub	sp, #16
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	68db      	ldr	r3, [r3, #12]
 8002bfa:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	691b      	ldr	r3, [r3, #16]
 8002c02:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002c04:	68bb      	ldr	r3, [r7, #8]
 8002c06:	2202      	movs	r2, #2
 8002c08:	4013      	ands	r3, r2
 8002c0a:	d021      	beq.n	8002c50 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	2202      	movs	r2, #2
 8002c10:	4013      	ands	r3, r2
 8002c12:	d01d      	beq.n	8002c50 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	2203      	movs	r2, #3
 8002c1a:	4252      	negs	r2, r2
 8002c1c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	2201      	movs	r2, #1
 8002c22:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	699b      	ldr	r3, [r3, #24]
 8002c2a:	2203      	movs	r2, #3
 8002c2c:	4013      	ands	r3, r2
 8002c2e:	d004      	beq.n	8002c3a <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	0018      	movs	r0, r3
 8002c34:	f000 f9c0 	bl	8002fb8 <HAL_TIM_IC_CaptureCallback>
 8002c38:	e007      	b.n	8002c4a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	0018      	movs	r0, r3
 8002c3e:	f000 f9b3 	bl	8002fa8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	0018      	movs	r0, r3
 8002c46:	f000 f9bf 	bl	8002fc8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002c50:	68bb      	ldr	r3, [r7, #8]
 8002c52:	2204      	movs	r2, #4
 8002c54:	4013      	ands	r3, r2
 8002c56:	d022      	beq.n	8002c9e <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	2204      	movs	r2, #4
 8002c5c:	4013      	ands	r3, r2
 8002c5e:	d01e      	beq.n	8002c9e <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	2205      	movs	r2, #5
 8002c66:	4252      	negs	r2, r2
 8002c68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	2202      	movs	r2, #2
 8002c6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	699a      	ldr	r2, [r3, #24]
 8002c76:	23c0      	movs	r3, #192	@ 0xc0
 8002c78:	009b      	lsls	r3, r3, #2
 8002c7a:	4013      	ands	r3, r2
 8002c7c:	d004      	beq.n	8002c88 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	0018      	movs	r0, r3
 8002c82:	f000 f999 	bl	8002fb8 <HAL_TIM_IC_CaptureCallback>
 8002c86:	e007      	b.n	8002c98 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	0018      	movs	r0, r3
 8002c8c:	f000 f98c 	bl	8002fa8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	0018      	movs	r0, r3
 8002c94:	f000 f998 	bl	8002fc8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002c9e:	68bb      	ldr	r3, [r7, #8]
 8002ca0:	2208      	movs	r2, #8
 8002ca2:	4013      	ands	r3, r2
 8002ca4:	d021      	beq.n	8002cea <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	2208      	movs	r2, #8
 8002caa:	4013      	ands	r3, r2
 8002cac:	d01d      	beq.n	8002cea <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	2209      	movs	r2, #9
 8002cb4:	4252      	negs	r2, r2
 8002cb6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2204      	movs	r2, #4
 8002cbc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	69db      	ldr	r3, [r3, #28]
 8002cc4:	2203      	movs	r2, #3
 8002cc6:	4013      	ands	r3, r2
 8002cc8:	d004      	beq.n	8002cd4 <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	0018      	movs	r0, r3
 8002cce:	f000 f973 	bl	8002fb8 <HAL_TIM_IC_CaptureCallback>
 8002cd2:	e007      	b.n	8002ce4 <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	0018      	movs	r0, r3
 8002cd8:	f000 f966 	bl	8002fa8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	0018      	movs	r0, r3
 8002ce0:	f000 f972 	bl	8002fc8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002cea:	68bb      	ldr	r3, [r7, #8]
 8002cec:	2210      	movs	r2, #16
 8002cee:	4013      	ands	r3, r2
 8002cf0:	d022      	beq.n	8002d38 <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	2210      	movs	r2, #16
 8002cf6:	4013      	ands	r3, r2
 8002cf8:	d01e      	beq.n	8002d38 <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	2211      	movs	r2, #17
 8002d00:	4252      	negs	r2, r2
 8002d02:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2208      	movs	r2, #8
 8002d08:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	69da      	ldr	r2, [r3, #28]
 8002d10:	23c0      	movs	r3, #192	@ 0xc0
 8002d12:	009b      	lsls	r3, r3, #2
 8002d14:	4013      	ands	r3, r2
 8002d16:	d004      	beq.n	8002d22 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	0018      	movs	r0, r3
 8002d1c:	f000 f94c 	bl	8002fb8 <HAL_TIM_IC_CaptureCallback>
 8002d20:	e007      	b.n	8002d32 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	0018      	movs	r0, r3
 8002d26:	f000 f93f 	bl	8002fa8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	0018      	movs	r0, r3
 8002d2e:	f000 f94b 	bl	8002fc8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	2200      	movs	r2, #0
 8002d36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002d38:	68bb      	ldr	r3, [r7, #8]
 8002d3a:	2201      	movs	r2, #1
 8002d3c:	4013      	ands	r3, r2
 8002d3e:	d00c      	beq.n	8002d5a <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	2201      	movs	r2, #1
 8002d44:	4013      	ands	r3, r2
 8002d46:	d008      	beq.n	8002d5a <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	2202      	movs	r2, #2
 8002d4e:	4252      	negs	r2, r2
 8002d50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	0018      	movs	r0, r3
 8002d56:	f7fe f8b7 	bl	8000ec8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8002d5a:	68bb      	ldr	r3, [r7, #8]
 8002d5c:	2280      	movs	r2, #128	@ 0x80
 8002d5e:	4013      	ands	r3, r2
 8002d60:	d104      	bne.n	8002d6c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8002d62:	68ba      	ldr	r2, [r7, #8]
 8002d64:	2380      	movs	r3, #128	@ 0x80
 8002d66:	019b      	lsls	r3, r3, #6
 8002d68:	4013      	ands	r3, r2
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8002d6a:	d00b      	beq.n	8002d84 <HAL_TIM_IRQHandler+0x198>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	2280      	movs	r2, #128	@ 0x80
 8002d70:	4013      	ands	r3, r2
 8002d72:	d007      	beq.n	8002d84 <HAL_TIM_IRQHandler+0x198>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	4a1e      	ldr	r2, [pc, #120]	@ (8002df4 <HAL_TIM_IRQHandler+0x208>)
 8002d7a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	0018      	movs	r0, r3
 8002d80:	f000 fad2 	bl	8003328 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8002d84:	68ba      	ldr	r2, [r7, #8]
 8002d86:	2380      	movs	r3, #128	@ 0x80
 8002d88:	005b      	lsls	r3, r3, #1
 8002d8a:	4013      	ands	r3, r2
 8002d8c:	d00b      	beq.n	8002da6 <HAL_TIM_IRQHandler+0x1ba>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	2280      	movs	r2, #128	@ 0x80
 8002d92:	4013      	ands	r3, r2
 8002d94:	d007      	beq.n	8002da6 <HAL_TIM_IRQHandler+0x1ba>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4a17      	ldr	r2, [pc, #92]	@ (8002df8 <HAL_TIM_IRQHandler+0x20c>)
 8002d9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	0018      	movs	r0, r3
 8002da2:	f000 fac9 	bl	8003338 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002da6:	68bb      	ldr	r3, [r7, #8]
 8002da8:	2240      	movs	r2, #64	@ 0x40
 8002daa:	4013      	ands	r3, r2
 8002dac:	d00c      	beq.n	8002dc8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	2240      	movs	r2, #64	@ 0x40
 8002db2:	4013      	ands	r3, r2
 8002db4:	d008      	beq.n	8002dc8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	2241      	movs	r2, #65	@ 0x41
 8002dbc:	4252      	negs	r2, r2
 8002dbe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	0018      	movs	r0, r3
 8002dc4:	f000 f908 	bl	8002fd8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002dc8:	68bb      	ldr	r3, [r7, #8]
 8002dca:	2220      	movs	r2, #32
 8002dcc:	4013      	ands	r3, r2
 8002dce:	d00c      	beq.n	8002dea <HAL_TIM_IRQHandler+0x1fe>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	2220      	movs	r2, #32
 8002dd4:	4013      	ands	r3, r2
 8002dd6:	d008      	beq.n	8002dea <HAL_TIM_IRQHandler+0x1fe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	2221      	movs	r2, #33	@ 0x21
 8002dde:	4252      	negs	r2, r2
 8002de0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	0018      	movs	r0, r3
 8002de6:	f000 fa97 	bl	8003318 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002dea:	46c0      	nop			@ (mov r8, r8)
 8002dec:	46bd      	mov	sp, r7
 8002dee:	b004      	add	sp, #16
 8002df0:	bd80      	pop	{r7, pc}
 8002df2:	46c0      	nop			@ (mov r8, r8)
 8002df4:	ffffdf7f 	.word	0xffffdf7f
 8002df8:	fffffeff 	.word	0xfffffeff

08002dfc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b084      	sub	sp, #16
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
 8002e04:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002e06:	230f      	movs	r3, #15
 8002e08:	18fb      	adds	r3, r7, r3
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	223c      	movs	r2, #60	@ 0x3c
 8002e12:	5c9b      	ldrb	r3, [r3, r2]
 8002e14:	2b01      	cmp	r3, #1
 8002e16:	d101      	bne.n	8002e1c <HAL_TIM_ConfigClockSource+0x20>
 8002e18:	2302      	movs	r3, #2
 8002e1a:	e0bc      	b.n	8002f96 <HAL_TIM_ConfigClockSource+0x19a>
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	223c      	movs	r2, #60	@ 0x3c
 8002e20:	2101      	movs	r1, #1
 8002e22:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	223d      	movs	r2, #61	@ 0x3d
 8002e28:	2102      	movs	r1, #2
 8002e2a:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	689b      	ldr	r3, [r3, #8]
 8002e32:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002e34:	68bb      	ldr	r3, [r7, #8]
 8002e36:	4a5a      	ldr	r2, [pc, #360]	@ (8002fa0 <HAL_TIM_ConfigClockSource+0x1a4>)
 8002e38:	4013      	ands	r3, r2
 8002e3a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002e3c:	68bb      	ldr	r3, [r7, #8]
 8002e3e:	4a59      	ldr	r2, [pc, #356]	@ (8002fa4 <HAL_TIM_ConfigClockSource+0x1a8>)
 8002e40:	4013      	ands	r3, r2
 8002e42:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	68ba      	ldr	r2, [r7, #8]
 8002e4a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	2280      	movs	r2, #128	@ 0x80
 8002e52:	0192      	lsls	r2, r2, #6
 8002e54:	4293      	cmp	r3, r2
 8002e56:	d040      	beq.n	8002eda <HAL_TIM_ConfigClockSource+0xde>
 8002e58:	2280      	movs	r2, #128	@ 0x80
 8002e5a:	0192      	lsls	r2, r2, #6
 8002e5c:	4293      	cmp	r3, r2
 8002e5e:	d900      	bls.n	8002e62 <HAL_TIM_ConfigClockSource+0x66>
 8002e60:	e088      	b.n	8002f74 <HAL_TIM_ConfigClockSource+0x178>
 8002e62:	2280      	movs	r2, #128	@ 0x80
 8002e64:	0152      	lsls	r2, r2, #5
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d100      	bne.n	8002e6c <HAL_TIM_ConfigClockSource+0x70>
 8002e6a:	e088      	b.n	8002f7e <HAL_TIM_ConfigClockSource+0x182>
 8002e6c:	2280      	movs	r2, #128	@ 0x80
 8002e6e:	0152      	lsls	r2, r2, #5
 8002e70:	4293      	cmp	r3, r2
 8002e72:	d900      	bls.n	8002e76 <HAL_TIM_ConfigClockSource+0x7a>
 8002e74:	e07e      	b.n	8002f74 <HAL_TIM_ConfigClockSource+0x178>
 8002e76:	2b70      	cmp	r3, #112	@ 0x70
 8002e78:	d018      	beq.n	8002eac <HAL_TIM_ConfigClockSource+0xb0>
 8002e7a:	d900      	bls.n	8002e7e <HAL_TIM_ConfigClockSource+0x82>
 8002e7c:	e07a      	b.n	8002f74 <HAL_TIM_ConfigClockSource+0x178>
 8002e7e:	2b60      	cmp	r3, #96	@ 0x60
 8002e80:	d04f      	beq.n	8002f22 <HAL_TIM_ConfigClockSource+0x126>
 8002e82:	d900      	bls.n	8002e86 <HAL_TIM_ConfigClockSource+0x8a>
 8002e84:	e076      	b.n	8002f74 <HAL_TIM_ConfigClockSource+0x178>
 8002e86:	2b50      	cmp	r3, #80	@ 0x50
 8002e88:	d03b      	beq.n	8002f02 <HAL_TIM_ConfigClockSource+0x106>
 8002e8a:	d900      	bls.n	8002e8e <HAL_TIM_ConfigClockSource+0x92>
 8002e8c:	e072      	b.n	8002f74 <HAL_TIM_ConfigClockSource+0x178>
 8002e8e:	2b40      	cmp	r3, #64	@ 0x40
 8002e90:	d057      	beq.n	8002f42 <HAL_TIM_ConfigClockSource+0x146>
 8002e92:	d900      	bls.n	8002e96 <HAL_TIM_ConfigClockSource+0x9a>
 8002e94:	e06e      	b.n	8002f74 <HAL_TIM_ConfigClockSource+0x178>
 8002e96:	2b30      	cmp	r3, #48	@ 0x30
 8002e98:	d063      	beq.n	8002f62 <HAL_TIM_ConfigClockSource+0x166>
 8002e9a:	d86b      	bhi.n	8002f74 <HAL_TIM_ConfigClockSource+0x178>
 8002e9c:	2b20      	cmp	r3, #32
 8002e9e:	d060      	beq.n	8002f62 <HAL_TIM_ConfigClockSource+0x166>
 8002ea0:	d868      	bhi.n	8002f74 <HAL_TIM_ConfigClockSource+0x178>
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d05d      	beq.n	8002f62 <HAL_TIM_ConfigClockSource+0x166>
 8002ea6:	2b10      	cmp	r3, #16
 8002ea8:	d05b      	beq.n	8002f62 <HAL_TIM_ConfigClockSource+0x166>
 8002eaa:	e063      	b.n	8002f74 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002ebc:	f000 f99e 	bl	80031fc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	689b      	ldr	r3, [r3, #8]
 8002ec6:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002ec8:	68bb      	ldr	r3, [r7, #8]
 8002eca:	2277      	movs	r2, #119	@ 0x77
 8002ecc:	4313      	orrs	r3, r2
 8002ece:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	68ba      	ldr	r2, [r7, #8]
 8002ed6:	609a      	str	r2, [r3, #8]
      break;
 8002ed8:	e052      	b.n	8002f80 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002eea:	f000 f987 	bl	80031fc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	689a      	ldr	r2, [r3, #8]
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	2180      	movs	r1, #128	@ 0x80
 8002efa:	01c9      	lsls	r1, r1, #7
 8002efc:	430a      	orrs	r2, r1
 8002efe:	609a      	str	r2, [r3, #8]
      break;
 8002f00:	e03e      	b.n	8002f80 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f0e:	001a      	movs	r2, r3
 8002f10:	f000 f8f8 	bl	8003104 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	2150      	movs	r1, #80	@ 0x50
 8002f1a:	0018      	movs	r0, r3
 8002f1c:	f000 f952 	bl	80031c4 <TIM_ITRx_SetConfig>
      break;
 8002f20:	e02e      	b.n	8002f80 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002f2e:	001a      	movs	r2, r3
 8002f30:	f000 f916 	bl	8003160 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	2160      	movs	r1, #96	@ 0x60
 8002f3a:	0018      	movs	r0, r3
 8002f3c:	f000 f942 	bl	80031c4 <TIM_ITRx_SetConfig>
      break;
 8002f40:	e01e      	b.n	8002f80 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f4e:	001a      	movs	r2, r3
 8002f50:	f000 f8d8 	bl	8003104 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	2140      	movs	r1, #64	@ 0x40
 8002f5a:	0018      	movs	r0, r3
 8002f5c:	f000 f932 	bl	80031c4 <TIM_ITRx_SetConfig>
      break;
 8002f60:	e00e      	b.n	8002f80 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681a      	ldr	r2, [r3, #0]
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	0019      	movs	r1, r3
 8002f6c:	0010      	movs	r0, r2
 8002f6e:	f000 f929 	bl	80031c4 <TIM_ITRx_SetConfig>
      break;
 8002f72:	e005      	b.n	8002f80 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8002f74:	230f      	movs	r3, #15
 8002f76:	18fb      	adds	r3, r7, r3
 8002f78:	2201      	movs	r2, #1
 8002f7a:	701a      	strb	r2, [r3, #0]
      break;
 8002f7c:	e000      	b.n	8002f80 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8002f7e:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	223d      	movs	r2, #61	@ 0x3d
 8002f84:	2101      	movs	r1, #1
 8002f86:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	223c      	movs	r2, #60	@ 0x3c
 8002f8c:	2100      	movs	r1, #0
 8002f8e:	5499      	strb	r1, [r3, r2]

  return status;
 8002f90:	230f      	movs	r3, #15
 8002f92:	18fb      	adds	r3, r7, r3
 8002f94:	781b      	ldrb	r3, [r3, #0]
}
 8002f96:	0018      	movs	r0, r3
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	b004      	add	sp, #16
 8002f9c:	bd80      	pop	{r7, pc}
 8002f9e:	46c0      	nop			@ (mov r8, r8)
 8002fa0:	ffceff88 	.word	0xffceff88
 8002fa4:	ffff00ff 	.word	0xffff00ff

08002fa8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b082      	sub	sp, #8
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002fb0:	46c0      	nop			@ (mov r8, r8)
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	b002      	add	sp, #8
 8002fb6:	bd80      	pop	{r7, pc}

08002fb8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b082      	sub	sp, #8
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002fc0:	46c0      	nop			@ (mov r8, r8)
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	b002      	add	sp, #8
 8002fc6:	bd80      	pop	{r7, pc}

08002fc8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b082      	sub	sp, #8
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002fd0:	46c0      	nop			@ (mov r8, r8)
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	b002      	add	sp, #8
 8002fd6:	bd80      	pop	{r7, pc}

08002fd8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b082      	sub	sp, #8
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002fe0:	46c0      	nop			@ (mov r8, r8)
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	b002      	add	sp, #8
 8002fe6:	bd80      	pop	{r7, pc}

08002fe8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b084      	sub	sp, #16
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
 8002ff0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	4a3b      	ldr	r2, [pc, #236]	@ (80030e8 <TIM_Base_SetConfig+0x100>)
 8002ffc:	4293      	cmp	r3, r2
 8002ffe:	d008      	beq.n	8003012 <TIM_Base_SetConfig+0x2a>
 8003000:	687a      	ldr	r2, [r7, #4]
 8003002:	2380      	movs	r3, #128	@ 0x80
 8003004:	05db      	lsls	r3, r3, #23
 8003006:	429a      	cmp	r2, r3
 8003008:	d003      	beq.n	8003012 <TIM_Base_SetConfig+0x2a>
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	4a37      	ldr	r2, [pc, #220]	@ (80030ec <TIM_Base_SetConfig+0x104>)
 800300e:	4293      	cmp	r3, r2
 8003010:	d108      	bne.n	8003024 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	2270      	movs	r2, #112	@ 0x70
 8003016:	4393      	bics	r3, r2
 8003018:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800301a:	683b      	ldr	r3, [r7, #0]
 800301c:	685b      	ldr	r3, [r3, #4]
 800301e:	68fa      	ldr	r2, [r7, #12]
 8003020:	4313      	orrs	r3, r2
 8003022:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	4a30      	ldr	r2, [pc, #192]	@ (80030e8 <TIM_Base_SetConfig+0x100>)
 8003028:	4293      	cmp	r3, r2
 800302a:	d018      	beq.n	800305e <TIM_Base_SetConfig+0x76>
 800302c:	687a      	ldr	r2, [r7, #4]
 800302e:	2380      	movs	r3, #128	@ 0x80
 8003030:	05db      	lsls	r3, r3, #23
 8003032:	429a      	cmp	r2, r3
 8003034:	d013      	beq.n	800305e <TIM_Base_SetConfig+0x76>
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	4a2c      	ldr	r2, [pc, #176]	@ (80030ec <TIM_Base_SetConfig+0x104>)
 800303a:	4293      	cmp	r3, r2
 800303c:	d00f      	beq.n	800305e <TIM_Base_SetConfig+0x76>
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	4a2b      	ldr	r2, [pc, #172]	@ (80030f0 <TIM_Base_SetConfig+0x108>)
 8003042:	4293      	cmp	r3, r2
 8003044:	d00b      	beq.n	800305e <TIM_Base_SetConfig+0x76>
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	4a2a      	ldr	r2, [pc, #168]	@ (80030f4 <TIM_Base_SetConfig+0x10c>)
 800304a:	4293      	cmp	r3, r2
 800304c:	d007      	beq.n	800305e <TIM_Base_SetConfig+0x76>
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	4a29      	ldr	r2, [pc, #164]	@ (80030f8 <TIM_Base_SetConfig+0x110>)
 8003052:	4293      	cmp	r3, r2
 8003054:	d003      	beq.n	800305e <TIM_Base_SetConfig+0x76>
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	4a28      	ldr	r2, [pc, #160]	@ (80030fc <TIM_Base_SetConfig+0x114>)
 800305a:	4293      	cmp	r3, r2
 800305c:	d108      	bne.n	8003070 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	4a27      	ldr	r2, [pc, #156]	@ (8003100 <TIM_Base_SetConfig+0x118>)
 8003062:	4013      	ands	r3, r2
 8003064:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	68db      	ldr	r3, [r3, #12]
 800306a:	68fa      	ldr	r2, [r7, #12]
 800306c:	4313      	orrs	r3, r2
 800306e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	2280      	movs	r2, #128	@ 0x80
 8003074:	4393      	bics	r3, r2
 8003076:	001a      	movs	r2, r3
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	695b      	ldr	r3, [r3, #20]
 800307c:	4313      	orrs	r3, r2
 800307e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	68fa      	ldr	r2, [r7, #12]
 8003084:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	689a      	ldr	r2, [r3, #8]
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	681a      	ldr	r2, [r3, #0]
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	4a13      	ldr	r2, [pc, #76]	@ (80030e8 <TIM_Base_SetConfig+0x100>)
 800309a:	4293      	cmp	r3, r2
 800309c:	d00b      	beq.n	80030b6 <TIM_Base_SetConfig+0xce>
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	4a14      	ldr	r2, [pc, #80]	@ (80030f4 <TIM_Base_SetConfig+0x10c>)
 80030a2:	4293      	cmp	r3, r2
 80030a4:	d007      	beq.n	80030b6 <TIM_Base_SetConfig+0xce>
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	4a13      	ldr	r2, [pc, #76]	@ (80030f8 <TIM_Base_SetConfig+0x110>)
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d003      	beq.n	80030b6 <TIM_Base_SetConfig+0xce>
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	4a12      	ldr	r2, [pc, #72]	@ (80030fc <TIM_Base_SetConfig+0x114>)
 80030b2:	4293      	cmp	r3, r2
 80030b4:	d103      	bne.n	80030be <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	691a      	ldr	r2, [r3, #16]
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2201      	movs	r2, #1
 80030c2:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	691b      	ldr	r3, [r3, #16]
 80030c8:	2201      	movs	r2, #1
 80030ca:	4013      	ands	r3, r2
 80030cc:	2b01      	cmp	r3, #1
 80030ce:	d106      	bne.n	80030de <TIM_Base_SetConfig+0xf6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	691b      	ldr	r3, [r3, #16]
 80030d4:	2201      	movs	r2, #1
 80030d6:	4393      	bics	r3, r2
 80030d8:	001a      	movs	r2, r3
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	611a      	str	r2, [r3, #16]
  }
}
 80030de:	46c0      	nop			@ (mov r8, r8)
 80030e0:	46bd      	mov	sp, r7
 80030e2:	b004      	add	sp, #16
 80030e4:	bd80      	pop	{r7, pc}
 80030e6:	46c0      	nop			@ (mov r8, r8)
 80030e8:	40012c00 	.word	0x40012c00
 80030ec:	40000400 	.word	0x40000400
 80030f0:	40002000 	.word	0x40002000
 80030f4:	40014000 	.word	0x40014000
 80030f8:	40014400 	.word	0x40014400
 80030fc:	40014800 	.word	0x40014800
 8003100:	fffffcff 	.word	0xfffffcff

08003104 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b086      	sub	sp, #24
 8003108:	af00      	add	r7, sp, #0
 800310a:	60f8      	str	r0, [r7, #12]
 800310c:	60b9      	str	r1, [r7, #8]
 800310e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	6a1b      	ldr	r3, [r3, #32]
 8003114:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	6a1b      	ldr	r3, [r3, #32]
 800311a:	2201      	movs	r2, #1
 800311c:	4393      	bics	r3, r2
 800311e:	001a      	movs	r2, r3
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	699b      	ldr	r3, [r3, #24]
 8003128:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800312a:	693b      	ldr	r3, [r7, #16]
 800312c:	22f0      	movs	r2, #240	@ 0xf0
 800312e:	4393      	bics	r3, r2
 8003130:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	011b      	lsls	r3, r3, #4
 8003136:	693a      	ldr	r2, [r7, #16]
 8003138:	4313      	orrs	r3, r2
 800313a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800313c:	697b      	ldr	r3, [r7, #20]
 800313e:	220a      	movs	r2, #10
 8003140:	4393      	bics	r3, r2
 8003142:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003144:	697a      	ldr	r2, [r7, #20]
 8003146:	68bb      	ldr	r3, [r7, #8]
 8003148:	4313      	orrs	r3, r2
 800314a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	693a      	ldr	r2, [r7, #16]
 8003150:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	697a      	ldr	r2, [r7, #20]
 8003156:	621a      	str	r2, [r3, #32]
}
 8003158:	46c0      	nop			@ (mov r8, r8)
 800315a:	46bd      	mov	sp, r7
 800315c:	b006      	add	sp, #24
 800315e:	bd80      	pop	{r7, pc}

08003160 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b086      	sub	sp, #24
 8003164:	af00      	add	r7, sp, #0
 8003166:	60f8      	str	r0, [r7, #12]
 8003168:	60b9      	str	r1, [r7, #8]
 800316a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	6a1b      	ldr	r3, [r3, #32]
 8003170:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	6a1b      	ldr	r3, [r3, #32]
 8003176:	2210      	movs	r2, #16
 8003178:	4393      	bics	r3, r2
 800317a:	001a      	movs	r2, r3
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	699b      	ldr	r3, [r3, #24]
 8003184:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003186:	693b      	ldr	r3, [r7, #16]
 8003188:	4a0d      	ldr	r2, [pc, #52]	@ (80031c0 <TIM_TI2_ConfigInputStage+0x60>)
 800318a:	4013      	ands	r3, r2
 800318c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	031b      	lsls	r3, r3, #12
 8003192:	693a      	ldr	r2, [r7, #16]
 8003194:	4313      	orrs	r3, r2
 8003196:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003198:	697b      	ldr	r3, [r7, #20]
 800319a:	22a0      	movs	r2, #160	@ 0xa0
 800319c:	4393      	bics	r3, r2
 800319e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80031a0:	68bb      	ldr	r3, [r7, #8]
 80031a2:	011b      	lsls	r3, r3, #4
 80031a4:	697a      	ldr	r2, [r7, #20]
 80031a6:	4313      	orrs	r3, r2
 80031a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	693a      	ldr	r2, [r7, #16]
 80031ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	697a      	ldr	r2, [r7, #20]
 80031b4:	621a      	str	r2, [r3, #32]
}
 80031b6:	46c0      	nop			@ (mov r8, r8)
 80031b8:	46bd      	mov	sp, r7
 80031ba:	b006      	add	sp, #24
 80031bc:	bd80      	pop	{r7, pc}
 80031be:	46c0      	nop			@ (mov r8, r8)
 80031c0:	ffff0fff 	.word	0xffff0fff

080031c4 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	b084      	sub	sp, #16
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
 80031cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	689b      	ldr	r3, [r3, #8]
 80031d2:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	4a08      	ldr	r2, [pc, #32]	@ (80031f8 <TIM_ITRx_SetConfig+0x34>)
 80031d8:	4013      	ands	r3, r2
 80031da:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80031dc:	683a      	ldr	r2, [r7, #0]
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	4313      	orrs	r3, r2
 80031e2:	2207      	movs	r2, #7
 80031e4:	4313      	orrs	r3, r2
 80031e6:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	68fa      	ldr	r2, [r7, #12]
 80031ec:	609a      	str	r2, [r3, #8]
}
 80031ee:	46c0      	nop			@ (mov r8, r8)
 80031f0:	46bd      	mov	sp, r7
 80031f2:	b004      	add	sp, #16
 80031f4:	bd80      	pop	{r7, pc}
 80031f6:	46c0      	nop			@ (mov r8, r8)
 80031f8:	ffcfff8f 	.word	0xffcfff8f

080031fc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b086      	sub	sp, #24
 8003200:	af00      	add	r7, sp, #0
 8003202:	60f8      	str	r0, [r7, #12]
 8003204:	60b9      	str	r1, [r7, #8]
 8003206:	607a      	str	r2, [r7, #4]
 8003208:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	689b      	ldr	r3, [r3, #8]
 800320e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003210:	697b      	ldr	r3, [r7, #20]
 8003212:	4a09      	ldr	r2, [pc, #36]	@ (8003238 <TIM_ETR_SetConfig+0x3c>)
 8003214:	4013      	ands	r3, r2
 8003216:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	021a      	lsls	r2, r3, #8
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	431a      	orrs	r2, r3
 8003220:	68bb      	ldr	r3, [r7, #8]
 8003222:	4313      	orrs	r3, r2
 8003224:	697a      	ldr	r2, [r7, #20]
 8003226:	4313      	orrs	r3, r2
 8003228:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	697a      	ldr	r2, [r7, #20]
 800322e:	609a      	str	r2, [r3, #8]
}
 8003230:	46c0      	nop			@ (mov r8, r8)
 8003232:	46bd      	mov	sp, r7
 8003234:	b006      	add	sp, #24
 8003236:	bd80      	pop	{r7, pc}
 8003238:	ffff00ff 	.word	0xffff00ff

0800323c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b084      	sub	sp, #16
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
 8003244:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	223c      	movs	r2, #60	@ 0x3c
 800324a:	5c9b      	ldrb	r3, [r3, r2]
 800324c:	2b01      	cmp	r3, #1
 800324e:	d101      	bne.n	8003254 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003250:	2302      	movs	r3, #2
 8003252:	e055      	b.n	8003300 <HAL_TIMEx_MasterConfigSynchronization+0xc4>
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	223c      	movs	r2, #60	@ 0x3c
 8003258:	2101      	movs	r1, #1
 800325a:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	223d      	movs	r2, #61	@ 0x3d
 8003260:	2102      	movs	r1, #2
 8003262:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	685b      	ldr	r3, [r3, #4]
 800326a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	689b      	ldr	r3, [r3, #8]
 8003272:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	4a23      	ldr	r2, [pc, #140]	@ (8003308 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800327a:	4293      	cmp	r3, r2
 800327c:	d108      	bne.n	8003290 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	4a22      	ldr	r2, [pc, #136]	@ (800330c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003282:	4013      	ands	r3, r2
 8003284:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	685b      	ldr	r3, [r3, #4]
 800328a:	68fa      	ldr	r2, [r7, #12]
 800328c:	4313      	orrs	r3, r2
 800328e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	2270      	movs	r2, #112	@ 0x70
 8003294:	4393      	bics	r3, r2
 8003296:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	68fa      	ldr	r2, [r7, #12]
 800329e:	4313      	orrs	r3, r2
 80032a0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	68fa      	ldr	r2, [r7, #12]
 80032a8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	4a16      	ldr	r2, [pc, #88]	@ (8003308 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80032b0:	4293      	cmp	r3, r2
 80032b2:	d00f      	beq.n	80032d4 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681a      	ldr	r2, [r3, #0]
 80032b8:	2380      	movs	r3, #128	@ 0x80
 80032ba:	05db      	lsls	r3, r3, #23
 80032bc:	429a      	cmp	r2, r3
 80032be:	d009      	beq.n	80032d4 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	4a12      	ldr	r2, [pc, #72]	@ (8003310 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d004      	beq.n	80032d4 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	4a11      	ldr	r2, [pc, #68]	@ (8003314 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80032d0:	4293      	cmp	r3, r2
 80032d2:	d10c      	bne.n	80032ee <HAL_TIMEx_MasterConfigSynchronization+0xb2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80032d4:	68bb      	ldr	r3, [r7, #8]
 80032d6:	2280      	movs	r2, #128	@ 0x80
 80032d8:	4393      	bics	r3, r2
 80032da:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	689b      	ldr	r3, [r3, #8]
 80032e0:	68ba      	ldr	r2, [r7, #8]
 80032e2:	4313      	orrs	r3, r2
 80032e4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	68ba      	ldr	r2, [r7, #8]
 80032ec:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	223d      	movs	r2, #61	@ 0x3d
 80032f2:	2101      	movs	r1, #1
 80032f4:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	223c      	movs	r2, #60	@ 0x3c
 80032fa:	2100      	movs	r1, #0
 80032fc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80032fe:	2300      	movs	r3, #0
}
 8003300:	0018      	movs	r0, r3
 8003302:	46bd      	mov	sp, r7
 8003304:	b004      	add	sp, #16
 8003306:	bd80      	pop	{r7, pc}
 8003308:	40012c00 	.word	0x40012c00
 800330c:	ff0fffff 	.word	0xff0fffff
 8003310:	40000400 	.word	0x40000400
 8003314:	40014000 	.word	0x40014000

08003318 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	b082      	sub	sp, #8
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003320:	46c0      	nop			@ (mov r8, r8)
 8003322:	46bd      	mov	sp, r7
 8003324:	b002      	add	sp, #8
 8003326:	bd80      	pop	{r7, pc}

08003328 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b082      	sub	sp, #8
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003330:	46c0      	nop			@ (mov r8, r8)
 8003332:	46bd      	mov	sp, r7
 8003334:	b002      	add	sp, #8
 8003336:	bd80      	pop	{r7, pc}

08003338 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	b082      	sub	sp, #8
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003340:	46c0      	nop			@ (mov r8, r8)
 8003342:	46bd      	mov	sp, r7
 8003344:	b002      	add	sp, #8
 8003346:	bd80      	pop	{r7, pc}

08003348 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	b082      	sub	sp, #8
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2b00      	cmp	r3, #0
 8003354:	d101      	bne.n	800335a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003356:	2301      	movs	r3, #1
 8003358:	e046      	b.n	80033e8 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	2288      	movs	r2, #136	@ 0x88
 800335e:	589b      	ldr	r3, [r3, r2]
 8003360:	2b00      	cmp	r3, #0
 8003362:	d107      	bne.n	8003374 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2284      	movs	r2, #132	@ 0x84
 8003368:	2100      	movs	r1, #0
 800336a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	0018      	movs	r0, r3
 8003370:	f7fd fe38 	bl	8000fe4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2288      	movs	r2, #136	@ 0x88
 8003378:	2124      	movs	r1, #36	@ 0x24
 800337a:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	681a      	ldr	r2, [r3, #0]
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	2101      	movs	r1, #1
 8003388:	438a      	bics	r2, r1
 800338a:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003390:	2b00      	cmp	r3, #0
 8003392:	d003      	beq.n	800339c <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	0018      	movs	r0, r3
 8003398:	f000 ff2e 	bl	80041f8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	0018      	movs	r0, r3
 80033a0:	f000 fc6c 	bl	8003c7c <UART_SetConfig>
 80033a4:	0003      	movs	r3, r0
 80033a6:	2b01      	cmp	r3, #1
 80033a8:	d101      	bne.n	80033ae <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 80033aa:	2301      	movs	r3, #1
 80033ac:	e01c      	b.n	80033e8 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	685a      	ldr	r2, [r3, #4]
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	490d      	ldr	r1, [pc, #52]	@ (80033f0 <HAL_UART_Init+0xa8>)
 80033ba:	400a      	ands	r2, r1
 80033bc:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	689a      	ldr	r2, [r3, #8]
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	212a      	movs	r1, #42	@ 0x2a
 80033ca:	438a      	bics	r2, r1
 80033cc:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	681a      	ldr	r2, [r3, #0]
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	2101      	movs	r1, #1
 80033da:	430a      	orrs	r2, r1
 80033dc:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	0018      	movs	r0, r3
 80033e2:	f000 ffbd 	bl	8004360 <UART_CheckIdleState>
 80033e6:	0003      	movs	r3, r0
}
 80033e8:	0018      	movs	r0, r3
 80033ea:	46bd      	mov	sp, r7
 80033ec:	b002      	add	sp, #8
 80033ee:	bd80      	pop	{r7, pc}
 80033f0:	ffffb7ff 	.word	0xffffb7ff

080033f4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b08a      	sub	sp, #40	@ 0x28
 80033f8:	af02      	add	r7, sp, #8
 80033fa:	60f8      	str	r0, [r7, #12]
 80033fc:	60b9      	str	r1, [r7, #8]
 80033fe:	603b      	str	r3, [r7, #0]
 8003400:	1dbb      	adds	r3, r7, #6
 8003402:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	2288      	movs	r2, #136	@ 0x88
 8003408:	589b      	ldr	r3, [r3, r2]
 800340a:	2b20      	cmp	r3, #32
 800340c:	d000      	beq.n	8003410 <HAL_UART_Transmit+0x1c>
 800340e:	e090      	b.n	8003532 <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003410:	68bb      	ldr	r3, [r7, #8]
 8003412:	2b00      	cmp	r3, #0
 8003414:	d003      	beq.n	800341e <HAL_UART_Transmit+0x2a>
 8003416:	1dbb      	adds	r3, r7, #6
 8003418:	881b      	ldrh	r3, [r3, #0]
 800341a:	2b00      	cmp	r3, #0
 800341c:	d101      	bne.n	8003422 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 800341e:	2301      	movs	r3, #1
 8003420:	e088      	b.n	8003534 <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	689a      	ldr	r2, [r3, #8]
 8003426:	2380      	movs	r3, #128	@ 0x80
 8003428:	015b      	lsls	r3, r3, #5
 800342a:	429a      	cmp	r2, r3
 800342c:	d109      	bne.n	8003442 <HAL_UART_Transmit+0x4e>
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	691b      	ldr	r3, [r3, #16]
 8003432:	2b00      	cmp	r3, #0
 8003434:	d105      	bne.n	8003442 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003436:	68bb      	ldr	r3, [r7, #8]
 8003438:	2201      	movs	r2, #1
 800343a:	4013      	ands	r3, r2
 800343c:	d001      	beq.n	8003442 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 800343e:	2301      	movs	r3, #1
 8003440:	e078      	b.n	8003534 <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	2290      	movs	r2, #144	@ 0x90
 8003446:	2100      	movs	r1, #0
 8003448:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	2288      	movs	r2, #136	@ 0x88
 800344e:	2121      	movs	r1, #33	@ 0x21
 8003450:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003452:	f7fd ff79 	bl	8001348 <HAL_GetTick>
 8003456:	0003      	movs	r3, r0
 8003458:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	1dba      	adds	r2, r7, #6
 800345e:	2154      	movs	r1, #84	@ 0x54
 8003460:	8812      	ldrh	r2, [r2, #0]
 8003462:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	1dba      	adds	r2, r7, #6
 8003468:	2156      	movs	r1, #86	@ 0x56
 800346a:	8812      	ldrh	r2, [r2, #0]
 800346c:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	689a      	ldr	r2, [r3, #8]
 8003472:	2380      	movs	r3, #128	@ 0x80
 8003474:	015b      	lsls	r3, r3, #5
 8003476:	429a      	cmp	r2, r3
 8003478:	d108      	bne.n	800348c <HAL_UART_Transmit+0x98>
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	691b      	ldr	r3, [r3, #16]
 800347e:	2b00      	cmp	r3, #0
 8003480:	d104      	bne.n	800348c <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 8003482:	2300      	movs	r3, #0
 8003484:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003486:	68bb      	ldr	r3, [r7, #8]
 8003488:	61bb      	str	r3, [r7, #24]
 800348a:	e003      	b.n	8003494 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 800348c:	68bb      	ldr	r3, [r7, #8]
 800348e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003490:	2300      	movs	r3, #0
 8003492:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003494:	e030      	b.n	80034f8 <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003496:	697a      	ldr	r2, [r7, #20]
 8003498:	68f8      	ldr	r0, [r7, #12]
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	9300      	str	r3, [sp, #0]
 800349e:	0013      	movs	r3, r2
 80034a0:	2200      	movs	r2, #0
 80034a2:	2180      	movs	r1, #128	@ 0x80
 80034a4:	f001 f806 	bl	80044b4 <UART_WaitOnFlagUntilTimeout>
 80034a8:	1e03      	subs	r3, r0, #0
 80034aa:	d005      	beq.n	80034b8 <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	2288      	movs	r2, #136	@ 0x88
 80034b0:	2120      	movs	r1, #32
 80034b2:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 80034b4:	2303      	movs	r3, #3
 80034b6:	e03d      	b.n	8003534 <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 80034b8:	69fb      	ldr	r3, [r7, #28]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d10b      	bne.n	80034d6 <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80034be:	69bb      	ldr	r3, [r7, #24]
 80034c0:	881b      	ldrh	r3, [r3, #0]
 80034c2:	001a      	movs	r2, r3
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	05d2      	lsls	r2, r2, #23
 80034ca:	0dd2      	lsrs	r2, r2, #23
 80034cc:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80034ce:	69bb      	ldr	r3, [r7, #24]
 80034d0:	3302      	adds	r3, #2
 80034d2:	61bb      	str	r3, [r7, #24]
 80034d4:	e007      	b.n	80034e6 <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80034d6:	69fb      	ldr	r3, [r7, #28]
 80034d8:	781a      	ldrb	r2, [r3, #0]
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80034e0:	69fb      	ldr	r3, [r7, #28]
 80034e2:	3301      	adds	r3, #1
 80034e4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	2256      	movs	r2, #86	@ 0x56
 80034ea:	5a9b      	ldrh	r3, [r3, r2]
 80034ec:	b29b      	uxth	r3, r3
 80034ee:	3b01      	subs	r3, #1
 80034f0:	b299      	uxth	r1, r3
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	2256      	movs	r2, #86	@ 0x56
 80034f6:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	2256      	movs	r2, #86	@ 0x56
 80034fc:	5a9b      	ldrh	r3, [r3, r2]
 80034fe:	b29b      	uxth	r3, r3
 8003500:	2b00      	cmp	r3, #0
 8003502:	d1c8      	bne.n	8003496 <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003504:	697a      	ldr	r2, [r7, #20]
 8003506:	68f8      	ldr	r0, [r7, #12]
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	9300      	str	r3, [sp, #0]
 800350c:	0013      	movs	r3, r2
 800350e:	2200      	movs	r2, #0
 8003510:	2140      	movs	r1, #64	@ 0x40
 8003512:	f000 ffcf 	bl	80044b4 <UART_WaitOnFlagUntilTimeout>
 8003516:	1e03      	subs	r3, r0, #0
 8003518:	d005      	beq.n	8003526 <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	2288      	movs	r2, #136	@ 0x88
 800351e:	2120      	movs	r1, #32
 8003520:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 8003522:	2303      	movs	r3, #3
 8003524:	e006      	b.n	8003534 <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	2288      	movs	r2, #136	@ 0x88
 800352a:	2120      	movs	r1, #32
 800352c:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 800352e:	2300      	movs	r3, #0
 8003530:	e000      	b.n	8003534 <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 8003532:	2302      	movs	r3, #2
  }
}
 8003534:	0018      	movs	r0, r3
 8003536:	46bd      	mov	sp, r7
 8003538:	b008      	add	sp, #32
 800353a:	bd80      	pop	{r7, pc}

0800353c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	b088      	sub	sp, #32
 8003540:	af00      	add	r7, sp, #0
 8003542:	60f8      	str	r0, [r7, #12]
 8003544:	60b9      	str	r1, [r7, #8]
 8003546:	1dbb      	adds	r3, r7, #6
 8003548:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	228c      	movs	r2, #140	@ 0x8c
 800354e:	589b      	ldr	r3, [r3, r2]
 8003550:	2b20      	cmp	r3, #32
 8003552:	d14a      	bne.n	80035ea <HAL_UART_Receive_IT+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 8003554:	68bb      	ldr	r3, [r7, #8]
 8003556:	2b00      	cmp	r3, #0
 8003558:	d003      	beq.n	8003562 <HAL_UART_Receive_IT+0x26>
 800355a:	1dbb      	adds	r3, r7, #6
 800355c:	881b      	ldrh	r3, [r3, #0]
 800355e:	2b00      	cmp	r3, #0
 8003560:	d101      	bne.n	8003566 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003562:	2301      	movs	r3, #1
 8003564:	e042      	b.n	80035ec <HAL_UART_Receive_IT+0xb0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	689a      	ldr	r2, [r3, #8]
 800356a:	2380      	movs	r3, #128	@ 0x80
 800356c:	015b      	lsls	r3, r3, #5
 800356e:	429a      	cmp	r2, r3
 8003570:	d109      	bne.n	8003586 <HAL_UART_Receive_IT+0x4a>
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	691b      	ldr	r3, [r3, #16]
 8003576:	2b00      	cmp	r3, #0
 8003578:	d105      	bne.n	8003586 <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800357a:	68bb      	ldr	r3, [r7, #8]
 800357c:	2201      	movs	r2, #1
 800357e:	4013      	ands	r3, r2
 8003580:	d001      	beq.n	8003586 <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 8003582:	2301      	movs	r3, #1
 8003584:	e032      	b.n	80035ec <HAL_UART_Receive_IT+0xb0>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	2200      	movs	r2, #0
 800358a:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	4a18      	ldr	r2, [pc, #96]	@ (80035f4 <HAL_UART_Receive_IT+0xb8>)
 8003592:	4293      	cmp	r3, r2
 8003594:	d020      	beq.n	80035d8 <HAL_UART_Receive_IT+0x9c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	685a      	ldr	r2, [r3, #4]
 800359c:	2380      	movs	r3, #128	@ 0x80
 800359e:	041b      	lsls	r3, r3, #16
 80035a0:	4013      	ands	r3, r2
 80035a2:	d019      	beq.n	80035d8 <HAL_UART_Receive_IT+0x9c>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80035a4:	f3ef 8310 	mrs	r3, PRIMASK
 80035a8:	613b      	str	r3, [r7, #16]
  return(result);
 80035aa:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80035ac:	61fb      	str	r3, [r7, #28]
 80035ae:	2301      	movs	r3, #1
 80035b0:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035b2:	697b      	ldr	r3, [r7, #20]
 80035b4:	f383 8810 	msr	PRIMASK, r3
}
 80035b8:	46c0      	nop			@ (mov r8, r8)
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	681a      	ldr	r2, [r3, #0]
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	2180      	movs	r1, #128	@ 0x80
 80035c6:	04c9      	lsls	r1, r1, #19
 80035c8:	430a      	orrs	r2, r1
 80035ca:	601a      	str	r2, [r3, #0]
 80035cc:	69fb      	ldr	r3, [r7, #28]
 80035ce:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035d0:	69bb      	ldr	r3, [r7, #24]
 80035d2:	f383 8810 	msr	PRIMASK, r3
}
 80035d6:	46c0      	nop			@ (mov r8, r8)
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80035d8:	1dbb      	adds	r3, r7, #6
 80035da:	881a      	ldrh	r2, [r3, #0]
 80035dc:	68b9      	ldr	r1, [r7, #8]
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	0018      	movs	r0, r3
 80035e2:	f000 ffd7 	bl	8004594 <UART_Start_Receive_IT>
 80035e6:	0003      	movs	r3, r0
 80035e8:	e000      	b.n	80035ec <HAL_UART_Receive_IT+0xb0>
  }
  else
  {
    return HAL_BUSY;
 80035ea:	2302      	movs	r3, #2
  }
}
 80035ec:	0018      	movs	r0, r3
 80035ee:	46bd      	mov	sp, r7
 80035f0:	b008      	add	sp, #32
 80035f2:	bd80      	pop	{r7, pc}
 80035f4:	40008000 	.word	0x40008000

080035f8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80035f8:	b5b0      	push	{r4, r5, r7, lr}
 80035fa:	b0aa      	sub	sp, #168	@ 0xa8
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	69db      	ldr	r3, [r3, #28]
 8003606:	22a4      	movs	r2, #164	@ 0xa4
 8003608:	18b9      	adds	r1, r7, r2
 800360a:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	20a0      	movs	r0, #160	@ 0xa0
 8003614:	1839      	adds	r1, r7, r0
 8003616:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	689b      	ldr	r3, [r3, #8]
 800361e:	249c      	movs	r4, #156	@ 0x9c
 8003620:	1939      	adds	r1, r7, r4
 8003622:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003624:	0011      	movs	r1, r2
 8003626:	18bb      	adds	r3, r7, r2
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	4aa2      	ldr	r2, [pc, #648]	@ (80038b4 <HAL_UART_IRQHandler+0x2bc>)
 800362c:	4013      	ands	r3, r2
 800362e:	2298      	movs	r2, #152	@ 0x98
 8003630:	18bd      	adds	r5, r7, r2
 8003632:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 8003634:	18bb      	adds	r3, r7, r2
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	2b00      	cmp	r3, #0
 800363a:	d11a      	bne.n	8003672 <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800363c:	187b      	adds	r3, r7, r1
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	2220      	movs	r2, #32
 8003642:	4013      	ands	r3, r2
 8003644:	d015      	beq.n	8003672 <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8003646:	183b      	adds	r3, r7, r0
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	2220      	movs	r2, #32
 800364c:	4013      	ands	r3, r2
 800364e:	d105      	bne.n	800365c <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003650:	193b      	adds	r3, r7, r4
 8003652:	681a      	ldr	r2, [r3, #0]
 8003654:	2380      	movs	r3, #128	@ 0x80
 8003656:	055b      	lsls	r3, r3, #21
 8003658:	4013      	ands	r3, r2
 800365a:	d00a      	beq.n	8003672 <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003660:	2b00      	cmp	r3, #0
 8003662:	d100      	bne.n	8003666 <HAL_UART_IRQHandler+0x6e>
 8003664:	e2dc      	b.n	8003c20 <HAL_UART_IRQHandler+0x628>
      {
        huart->RxISR(huart);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800366a:	687a      	ldr	r2, [r7, #4]
 800366c:	0010      	movs	r0, r2
 800366e:	4798      	blx	r3
      }
      return;
 8003670:	e2d6      	b.n	8003c20 <HAL_UART_IRQHandler+0x628>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003672:	2398      	movs	r3, #152	@ 0x98
 8003674:	18fb      	adds	r3, r7, r3
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	2b00      	cmp	r3, #0
 800367a:	d100      	bne.n	800367e <HAL_UART_IRQHandler+0x86>
 800367c:	e122      	b.n	80038c4 <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800367e:	239c      	movs	r3, #156	@ 0x9c
 8003680:	18fb      	adds	r3, r7, r3
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	4a8c      	ldr	r2, [pc, #560]	@ (80038b8 <HAL_UART_IRQHandler+0x2c0>)
 8003686:	4013      	ands	r3, r2
 8003688:	d106      	bne.n	8003698 <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800368a:	23a0      	movs	r3, #160	@ 0xa0
 800368c:	18fb      	adds	r3, r7, r3
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	4a8a      	ldr	r2, [pc, #552]	@ (80038bc <HAL_UART_IRQHandler+0x2c4>)
 8003692:	4013      	ands	r3, r2
 8003694:	d100      	bne.n	8003698 <HAL_UART_IRQHandler+0xa0>
 8003696:	e115      	b.n	80038c4 <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003698:	23a4      	movs	r3, #164	@ 0xa4
 800369a:	18fb      	adds	r3, r7, r3
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	2201      	movs	r2, #1
 80036a0:	4013      	ands	r3, r2
 80036a2:	d012      	beq.n	80036ca <HAL_UART_IRQHandler+0xd2>
 80036a4:	23a0      	movs	r3, #160	@ 0xa0
 80036a6:	18fb      	adds	r3, r7, r3
 80036a8:	681a      	ldr	r2, [r3, #0]
 80036aa:	2380      	movs	r3, #128	@ 0x80
 80036ac:	005b      	lsls	r3, r3, #1
 80036ae:	4013      	ands	r3, r2
 80036b0:	d00b      	beq.n	80036ca <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	2201      	movs	r2, #1
 80036b8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2290      	movs	r2, #144	@ 0x90
 80036be:	589b      	ldr	r3, [r3, r2]
 80036c0:	2201      	movs	r2, #1
 80036c2:	431a      	orrs	r2, r3
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2190      	movs	r1, #144	@ 0x90
 80036c8:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80036ca:	23a4      	movs	r3, #164	@ 0xa4
 80036cc:	18fb      	adds	r3, r7, r3
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	2202      	movs	r2, #2
 80036d2:	4013      	ands	r3, r2
 80036d4:	d011      	beq.n	80036fa <HAL_UART_IRQHandler+0x102>
 80036d6:	239c      	movs	r3, #156	@ 0x9c
 80036d8:	18fb      	adds	r3, r7, r3
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	2201      	movs	r2, #1
 80036de:	4013      	ands	r3, r2
 80036e0:	d00b      	beq.n	80036fa <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	2202      	movs	r2, #2
 80036e8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	2290      	movs	r2, #144	@ 0x90
 80036ee:	589b      	ldr	r3, [r3, r2]
 80036f0:	2204      	movs	r2, #4
 80036f2:	431a      	orrs	r2, r3
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2190      	movs	r1, #144	@ 0x90
 80036f8:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80036fa:	23a4      	movs	r3, #164	@ 0xa4
 80036fc:	18fb      	adds	r3, r7, r3
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	2204      	movs	r2, #4
 8003702:	4013      	ands	r3, r2
 8003704:	d011      	beq.n	800372a <HAL_UART_IRQHandler+0x132>
 8003706:	239c      	movs	r3, #156	@ 0x9c
 8003708:	18fb      	adds	r3, r7, r3
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	2201      	movs	r2, #1
 800370e:	4013      	ands	r3, r2
 8003710:	d00b      	beq.n	800372a <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	2204      	movs	r2, #4
 8003718:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2290      	movs	r2, #144	@ 0x90
 800371e:	589b      	ldr	r3, [r3, r2]
 8003720:	2202      	movs	r2, #2
 8003722:	431a      	orrs	r2, r3
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2190      	movs	r1, #144	@ 0x90
 8003728:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800372a:	23a4      	movs	r3, #164	@ 0xa4
 800372c:	18fb      	adds	r3, r7, r3
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	2208      	movs	r2, #8
 8003732:	4013      	ands	r3, r2
 8003734:	d017      	beq.n	8003766 <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8003736:	23a0      	movs	r3, #160	@ 0xa0
 8003738:	18fb      	adds	r3, r7, r3
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	2220      	movs	r2, #32
 800373e:	4013      	ands	r3, r2
 8003740:	d105      	bne.n	800374e <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8003742:	239c      	movs	r3, #156	@ 0x9c
 8003744:	18fb      	adds	r3, r7, r3
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	4a5b      	ldr	r2, [pc, #364]	@ (80038b8 <HAL_UART_IRQHandler+0x2c0>)
 800374a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800374c:	d00b      	beq.n	8003766 <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	2208      	movs	r2, #8
 8003754:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2290      	movs	r2, #144	@ 0x90
 800375a:	589b      	ldr	r3, [r3, r2]
 800375c:	2208      	movs	r2, #8
 800375e:	431a      	orrs	r2, r3
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2190      	movs	r1, #144	@ 0x90
 8003764:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003766:	23a4      	movs	r3, #164	@ 0xa4
 8003768:	18fb      	adds	r3, r7, r3
 800376a:	681a      	ldr	r2, [r3, #0]
 800376c:	2380      	movs	r3, #128	@ 0x80
 800376e:	011b      	lsls	r3, r3, #4
 8003770:	4013      	ands	r3, r2
 8003772:	d013      	beq.n	800379c <HAL_UART_IRQHandler+0x1a4>
 8003774:	23a0      	movs	r3, #160	@ 0xa0
 8003776:	18fb      	adds	r3, r7, r3
 8003778:	681a      	ldr	r2, [r3, #0]
 800377a:	2380      	movs	r3, #128	@ 0x80
 800377c:	04db      	lsls	r3, r3, #19
 800377e:	4013      	ands	r3, r2
 8003780:	d00c      	beq.n	800379c <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	2280      	movs	r2, #128	@ 0x80
 8003788:	0112      	lsls	r2, r2, #4
 800378a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2290      	movs	r2, #144	@ 0x90
 8003790:	589b      	ldr	r3, [r3, r2]
 8003792:	2220      	movs	r2, #32
 8003794:	431a      	orrs	r2, r3
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	2190      	movs	r1, #144	@ 0x90
 800379a:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2290      	movs	r2, #144	@ 0x90
 80037a0:	589b      	ldr	r3, [r3, r2]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d100      	bne.n	80037a8 <HAL_UART_IRQHandler+0x1b0>
 80037a6:	e23d      	b.n	8003c24 <HAL_UART_IRQHandler+0x62c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80037a8:	23a4      	movs	r3, #164	@ 0xa4
 80037aa:	18fb      	adds	r3, r7, r3
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	2220      	movs	r2, #32
 80037b0:	4013      	ands	r3, r2
 80037b2:	d015      	beq.n	80037e0 <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80037b4:	23a0      	movs	r3, #160	@ 0xa0
 80037b6:	18fb      	adds	r3, r7, r3
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	2220      	movs	r2, #32
 80037bc:	4013      	ands	r3, r2
 80037be:	d106      	bne.n	80037ce <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80037c0:	239c      	movs	r3, #156	@ 0x9c
 80037c2:	18fb      	adds	r3, r7, r3
 80037c4:	681a      	ldr	r2, [r3, #0]
 80037c6:	2380      	movs	r3, #128	@ 0x80
 80037c8:	055b      	lsls	r3, r3, #21
 80037ca:	4013      	ands	r3, r2
 80037cc:	d008      	beq.n	80037e0 <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d004      	beq.n	80037e0 <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80037da:	687a      	ldr	r2, [r7, #4]
 80037dc:	0010      	movs	r0, r2
 80037de:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2290      	movs	r2, #144	@ 0x90
 80037e4:	589b      	ldr	r3, [r3, r2]
 80037e6:	2194      	movs	r1, #148	@ 0x94
 80037e8:	187a      	adds	r2, r7, r1
 80037ea:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	689b      	ldr	r3, [r3, #8]
 80037f2:	2240      	movs	r2, #64	@ 0x40
 80037f4:	4013      	ands	r3, r2
 80037f6:	2b40      	cmp	r3, #64	@ 0x40
 80037f8:	d004      	beq.n	8003804 <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80037fa:	187b      	adds	r3, r7, r1
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	2228      	movs	r2, #40	@ 0x28
 8003800:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003802:	d04c      	beq.n	800389e <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	0018      	movs	r0, r3
 8003808:	f000 ffe8 	bl	80047dc <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	689b      	ldr	r3, [r3, #8]
 8003812:	2240      	movs	r2, #64	@ 0x40
 8003814:	4013      	ands	r3, r2
 8003816:	2b40      	cmp	r3, #64	@ 0x40
 8003818:	d13c      	bne.n	8003894 <HAL_UART_IRQHandler+0x29c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800381a:	f3ef 8310 	mrs	r3, PRIMASK
 800381e:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 8003820:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003822:	2090      	movs	r0, #144	@ 0x90
 8003824:	183a      	adds	r2, r7, r0
 8003826:	6013      	str	r3, [r2, #0]
 8003828:	2301      	movs	r3, #1
 800382a:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800382c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800382e:	f383 8810 	msr	PRIMASK, r3
}
 8003832:	46c0      	nop			@ (mov r8, r8)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	689a      	ldr	r2, [r3, #8]
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	2140      	movs	r1, #64	@ 0x40
 8003840:	438a      	bics	r2, r1
 8003842:	609a      	str	r2, [r3, #8]
 8003844:	183b      	adds	r3, r7, r0
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800384a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800384c:	f383 8810 	msr	PRIMASK, r3
}
 8003850:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	2280      	movs	r2, #128	@ 0x80
 8003856:	589b      	ldr	r3, [r3, r2]
 8003858:	2b00      	cmp	r3, #0
 800385a:	d016      	beq.n	800388a <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2280      	movs	r2, #128	@ 0x80
 8003860:	589b      	ldr	r3, [r3, r2]
 8003862:	4a17      	ldr	r2, [pc, #92]	@ (80038c0 <HAL_UART_IRQHandler+0x2c8>)
 8003864:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	2280      	movs	r2, #128	@ 0x80
 800386a:	589b      	ldr	r3, [r3, r2]
 800386c:	0018      	movs	r0, r3
 800386e:	f7fd ff0f 	bl	8001690 <HAL_DMA_Abort_IT>
 8003872:	1e03      	subs	r3, r0, #0
 8003874:	d01c      	beq.n	80038b0 <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	2280      	movs	r2, #128	@ 0x80
 800387a:	589b      	ldr	r3, [r3, r2]
 800387c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800387e:	687a      	ldr	r2, [r7, #4]
 8003880:	2180      	movs	r1, #128	@ 0x80
 8003882:	5852      	ldr	r2, [r2, r1]
 8003884:	0010      	movs	r0, r2
 8003886:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003888:	e012      	b.n	80038b0 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	0018      	movs	r0, r3
 800388e:	f000 f9e1 	bl	8003c54 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003892:	e00d      	b.n	80038b0 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	0018      	movs	r0, r3
 8003898:	f000 f9dc 	bl	8003c54 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800389c:	e008      	b.n	80038b0 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	0018      	movs	r0, r3
 80038a2:	f000 f9d7 	bl	8003c54 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	2290      	movs	r2, #144	@ 0x90
 80038aa:	2100      	movs	r1, #0
 80038ac:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 80038ae:	e1b9      	b.n	8003c24 <HAL_UART_IRQHandler+0x62c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038b0:	46c0      	nop			@ (mov r8, r8)
    return;
 80038b2:	e1b7      	b.n	8003c24 <HAL_UART_IRQHandler+0x62c>
 80038b4:	0000080f 	.word	0x0000080f
 80038b8:	10000001 	.word	0x10000001
 80038bc:	04000120 	.word	0x04000120
 80038c0:	080048a9 	.word	0x080048a9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80038c8:	2b01      	cmp	r3, #1
 80038ca:	d000      	beq.n	80038ce <HAL_UART_IRQHandler+0x2d6>
 80038cc:	e13e      	b.n	8003b4c <HAL_UART_IRQHandler+0x554>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80038ce:	23a4      	movs	r3, #164	@ 0xa4
 80038d0:	18fb      	adds	r3, r7, r3
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	2210      	movs	r2, #16
 80038d6:	4013      	ands	r3, r2
 80038d8:	d100      	bne.n	80038dc <HAL_UART_IRQHandler+0x2e4>
 80038da:	e137      	b.n	8003b4c <HAL_UART_IRQHandler+0x554>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80038dc:	23a0      	movs	r3, #160	@ 0xa0
 80038de:	18fb      	adds	r3, r7, r3
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	2210      	movs	r2, #16
 80038e4:	4013      	ands	r3, r2
 80038e6:	d100      	bne.n	80038ea <HAL_UART_IRQHandler+0x2f2>
 80038e8:	e130      	b.n	8003b4c <HAL_UART_IRQHandler+0x554>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	2210      	movs	r2, #16
 80038f0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	689b      	ldr	r3, [r3, #8]
 80038f8:	2240      	movs	r2, #64	@ 0x40
 80038fa:	4013      	ands	r3, r2
 80038fc:	2b40      	cmp	r3, #64	@ 0x40
 80038fe:	d000      	beq.n	8003902 <HAL_UART_IRQHandler+0x30a>
 8003900:	e0a4      	b.n	8003a4c <HAL_UART_IRQHandler+0x454>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	2280      	movs	r2, #128	@ 0x80
 8003906:	589b      	ldr	r3, [r3, r2]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	685a      	ldr	r2, [r3, #4]
 800390c:	217e      	movs	r1, #126	@ 0x7e
 800390e:	187b      	adds	r3, r7, r1
 8003910:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8003912:	187b      	adds	r3, r7, r1
 8003914:	881b      	ldrh	r3, [r3, #0]
 8003916:	2b00      	cmp	r3, #0
 8003918:	d100      	bne.n	800391c <HAL_UART_IRQHandler+0x324>
 800391a:	e185      	b.n	8003c28 <HAL_UART_IRQHandler+0x630>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	225c      	movs	r2, #92	@ 0x5c
 8003920:	5a9b      	ldrh	r3, [r3, r2]
 8003922:	187a      	adds	r2, r7, r1
 8003924:	8812      	ldrh	r2, [r2, #0]
 8003926:	429a      	cmp	r2, r3
 8003928:	d300      	bcc.n	800392c <HAL_UART_IRQHandler+0x334>
 800392a:	e17d      	b.n	8003c28 <HAL_UART_IRQHandler+0x630>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	187a      	adds	r2, r7, r1
 8003930:	215e      	movs	r1, #94	@ 0x5e
 8003932:	8812      	ldrh	r2, [r2, #0]
 8003934:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2280      	movs	r2, #128	@ 0x80
 800393a:	589b      	ldr	r3, [r3, r2]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	2220      	movs	r2, #32
 8003942:	4013      	ands	r3, r2
 8003944:	d170      	bne.n	8003a28 <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003946:	f3ef 8310 	mrs	r3, PRIMASK
 800394a:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 800394c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800394e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003950:	2301      	movs	r3, #1
 8003952:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003954:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003956:	f383 8810 	msr	PRIMASK, r3
}
 800395a:	46c0      	nop			@ (mov r8, r8)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	681a      	ldr	r2, [r3, #0]
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	49b4      	ldr	r1, [pc, #720]	@ (8003c38 <HAL_UART_IRQHandler+0x640>)
 8003968:	400a      	ands	r2, r1
 800396a:	601a      	str	r2, [r3, #0]
 800396c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800396e:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003970:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003972:	f383 8810 	msr	PRIMASK, r3
}
 8003976:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003978:	f3ef 8310 	mrs	r3, PRIMASK
 800397c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 800397e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003980:	677b      	str	r3, [r7, #116]	@ 0x74
 8003982:	2301      	movs	r3, #1
 8003984:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003986:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003988:	f383 8810 	msr	PRIMASK, r3
}
 800398c:	46c0      	nop			@ (mov r8, r8)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	689a      	ldr	r2, [r3, #8]
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	2101      	movs	r1, #1
 800399a:	438a      	bics	r2, r1
 800399c:	609a      	str	r2, [r3, #8]
 800399e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80039a0:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039a2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80039a4:	f383 8810 	msr	PRIMASK, r3
}
 80039a8:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80039aa:	f3ef 8310 	mrs	r3, PRIMASK
 80039ae:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 80039b0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80039b2:	673b      	str	r3, [r7, #112]	@ 0x70
 80039b4:	2301      	movs	r3, #1
 80039b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039b8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80039ba:	f383 8810 	msr	PRIMASK, r3
}
 80039be:	46c0      	nop			@ (mov r8, r8)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	689a      	ldr	r2, [r3, #8]
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	2140      	movs	r1, #64	@ 0x40
 80039cc:	438a      	bics	r2, r1
 80039ce:	609a      	str	r2, [r3, #8]
 80039d0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80039d2:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039d4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80039d6:	f383 8810 	msr	PRIMASK, r3
}
 80039da:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	228c      	movs	r2, #140	@ 0x8c
 80039e0:	2120      	movs	r1, #32
 80039e2:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2200      	movs	r2, #0
 80039e8:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80039ea:	f3ef 8310 	mrs	r3, PRIMASK
 80039ee:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 80039f0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80039f2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80039f4:	2301      	movs	r3, #1
 80039f6:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039f8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80039fa:	f383 8810 	msr	PRIMASK, r3
}
 80039fe:	46c0      	nop			@ (mov r8, r8)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	681a      	ldr	r2, [r3, #0]
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	2110      	movs	r1, #16
 8003a0c:	438a      	bics	r2, r1
 8003a0e:	601a      	str	r2, [r3, #0]
 8003a10:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003a12:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a14:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003a16:	f383 8810 	msr	PRIMASK, r3
}
 8003a1a:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2280      	movs	r2, #128	@ 0x80
 8003a20:	589b      	ldr	r3, [r3, r2]
 8003a22:	0018      	movs	r0, r3
 8003a24:	f7fd fdd2 	bl	80015cc <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2202      	movs	r2, #2
 8003a2c:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	225c      	movs	r2, #92	@ 0x5c
 8003a32:	5a9a      	ldrh	r2, [r3, r2]
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	215e      	movs	r1, #94	@ 0x5e
 8003a38:	5a5b      	ldrh	r3, [r3, r1]
 8003a3a:	b29b      	uxth	r3, r3
 8003a3c:	1ad3      	subs	r3, r2, r3
 8003a3e:	b29a      	uxth	r2, r3
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	0011      	movs	r1, r2
 8003a44:	0018      	movs	r0, r3
 8003a46:	f000 f90d 	bl	8003c64 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003a4a:	e0ed      	b.n	8003c28 <HAL_UART_IRQHandler+0x630>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	225c      	movs	r2, #92	@ 0x5c
 8003a50:	5a99      	ldrh	r1, [r3, r2]
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	225e      	movs	r2, #94	@ 0x5e
 8003a56:	5a9b      	ldrh	r3, [r3, r2]
 8003a58:	b29a      	uxth	r2, r3
 8003a5a:	208e      	movs	r0, #142	@ 0x8e
 8003a5c:	183b      	adds	r3, r7, r0
 8003a5e:	1a8a      	subs	r2, r1, r2
 8003a60:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	225e      	movs	r2, #94	@ 0x5e
 8003a66:	5a9b      	ldrh	r3, [r3, r2]
 8003a68:	b29b      	uxth	r3, r3
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d100      	bne.n	8003a70 <HAL_UART_IRQHandler+0x478>
 8003a6e:	e0dd      	b.n	8003c2c <HAL_UART_IRQHandler+0x634>
          && (nb_rx_data > 0U))
 8003a70:	183b      	adds	r3, r7, r0
 8003a72:	881b      	ldrh	r3, [r3, #0]
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d100      	bne.n	8003a7a <HAL_UART_IRQHandler+0x482>
 8003a78:	e0d8      	b.n	8003c2c <HAL_UART_IRQHandler+0x634>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a7a:	f3ef 8310 	mrs	r3, PRIMASK
 8003a7e:	60fb      	str	r3, [r7, #12]
  return(result);
 8003a80:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003a82:	2488      	movs	r4, #136	@ 0x88
 8003a84:	193a      	adds	r2, r7, r4
 8003a86:	6013      	str	r3, [r2, #0]
 8003a88:	2301      	movs	r3, #1
 8003a8a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a8c:	693b      	ldr	r3, [r7, #16]
 8003a8e:	f383 8810 	msr	PRIMASK, r3
}
 8003a92:	46c0      	nop			@ (mov r8, r8)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	681a      	ldr	r2, [r3, #0]
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	4967      	ldr	r1, [pc, #412]	@ (8003c3c <HAL_UART_IRQHandler+0x644>)
 8003aa0:	400a      	ands	r2, r1
 8003aa2:	601a      	str	r2, [r3, #0]
 8003aa4:	193b      	adds	r3, r7, r4
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003aaa:	697b      	ldr	r3, [r7, #20]
 8003aac:	f383 8810 	msr	PRIMASK, r3
}
 8003ab0:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ab2:	f3ef 8310 	mrs	r3, PRIMASK
 8003ab6:	61bb      	str	r3, [r7, #24]
  return(result);
 8003ab8:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003aba:	2484      	movs	r4, #132	@ 0x84
 8003abc:	193a      	adds	r2, r7, r4
 8003abe:	6013      	str	r3, [r2, #0]
 8003ac0:	2301      	movs	r3, #1
 8003ac2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ac4:	69fb      	ldr	r3, [r7, #28]
 8003ac6:	f383 8810 	msr	PRIMASK, r3
}
 8003aca:	46c0      	nop			@ (mov r8, r8)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	689a      	ldr	r2, [r3, #8]
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	495a      	ldr	r1, [pc, #360]	@ (8003c40 <HAL_UART_IRQHandler+0x648>)
 8003ad8:	400a      	ands	r2, r1
 8003ada:	609a      	str	r2, [r3, #8]
 8003adc:	193b      	adds	r3, r7, r4
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ae2:	6a3b      	ldr	r3, [r7, #32]
 8003ae4:	f383 8810 	msr	PRIMASK, r3
}
 8003ae8:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	228c      	movs	r2, #140	@ 0x8c
 8003aee:	2120      	movs	r1, #32
 8003af0:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	2200      	movs	r2, #0
 8003af6:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2200      	movs	r2, #0
 8003afc:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003afe:	f3ef 8310 	mrs	r3, PRIMASK
 8003b02:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8003b04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b06:	2480      	movs	r4, #128	@ 0x80
 8003b08:	193a      	adds	r2, r7, r4
 8003b0a:	6013      	str	r3, [r2, #0]
 8003b0c:	2301      	movs	r3, #1
 8003b0e:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b12:	f383 8810 	msr	PRIMASK, r3
}
 8003b16:	46c0      	nop			@ (mov r8, r8)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	681a      	ldr	r2, [r3, #0]
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	2110      	movs	r1, #16
 8003b24:	438a      	bics	r2, r1
 8003b26:	601a      	str	r2, [r3, #0]
 8003b28:	193b      	adds	r3, r7, r4
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b30:	f383 8810 	msr	PRIMASK, r3
}
 8003b34:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	2202      	movs	r2, #2
 8003b3a:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003b3c:	183b      	adds	r3, r7, r0
 8003b3e:	881a      	ldrh	r2, [r3, #0]
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	0011      	movs	r1, r2
 8003b44:	0018      	movs	r0, r3
 8003b46:	f000 f88d 	bl	8003c64 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003b4a:	e06f      	b.n	8003c2c <HAL_UART_IRQHandler+0x634>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003b4c:	23a4      	movs	r3, #164	@ 0xa4
 8003b4e:	18fb      	adds	r3, r7, r3
 8003b50:	681a      	ldr	r2, [r3, #0]
 8003b52:	2380      	movs	r3, #128	@ 0x80
 8003b54:	035b      	lsls	r3, r3, #13
 8003b56:	4013      	ands	r3, r2
 8003b58:	d010      	beq.n	8003b7c <HAL_UART_IRQHandler+0x584>
 8003b5a:	239c      	movs	r3, #156	@ 0x9c
 8003b5c:	18fb      	adds	r3, r7, r3
 8003b5e:	681a      	ldr	r2, [r3, #0]
 8003b60:	2380      	movs	r3, #128	@ 0x80
 8003b62:	03db      	lsls	r3, r3, #15
 8003b64:	4013      	ands	r3, r2
 8003b66:	d009      	beq.n	8003b7c <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	2280      	movs	r2, #128	@ 0x80
 8003b6e:	0352      	lsls	r2, r2, #13
 8003b70:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	0018      	movs	r0, r3
 8003b76:	f001 fbeb 	bl	8005350 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003b7a:	e05a      	b.n	8003c32 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8003b7c:	23a4      	movs	r3, #164	@ 0xa4
 8003b7e:	18fb      	adds	r3, r7, r3
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	2280      	movs	r2, #128	@ 0x80
 8003b84:	4013      	ands	r3, r2
 8003b86:	d016      	beq.n	8003bb6 <HAL_UART_IRQHandler+0x5be>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8003b88:	23a0      	movs	r3, #160	@ 0xa0
 8003b8a:	18fb      	adds	r3, r7, r3
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	2280      	movs	r2, #128	@ 0x80
 8003b90:	4013      	ands	r3, r2
 8003b92:	d106      	bne.n	8003ba2 <HAL_UART_IRQHandler+0x5aa>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8003b94:	239c      	movs	r3, #156	@ 0x9c
 8003b96:	18fb      	adds	r3, r7, r3
 8003b98:	681a      	ldr	r2, [r3, #0]
 8003b9a:	2380      	movs	r3, #128	@ 0x80
 8003b9c:	041b      	lsls	r3, r3, #16
 8003b9e:	4013      	ands	r3, r2
 8003ba0:	d009      	beq.n	8003bb6 <HAL_UART_IRQHandler+0x5be>
  {
    if (huart->TxISR != NULL)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d042      	beq.n	8003c30 <HAL_UART_IRQHandler+0x638>
    {
      huart->TxISR(huart);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003bae:	687a      	ldr	r2, [r7, #4]
 8003bb0:	0010      	movs	r0, r2
 8003bb2:	4798      	blx	r3
    }
    return;
 8003bb4:	e03c      	b.n	8003c30 <HAL_UART_IRQHandler+0x638>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003bb6:	23a4      	movs	r3, #164	@ 0xa4
 8003bb8:	18fb      	adds	r3, r7, r3
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	2240      	movs	r2, #64	@ 0x40
 8003bbe:	4013      	ands	r3, r2
 8003bc0:	d00a      	beq.n	8003bd8 <HAL_UART_IRQHandler+0x5e0>
 8003bc2:	23a0      	movs	r3, #160	@ 0xa0
 8003bc4:	18fb      	adds	r3, r7, r3
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	2240      	movs	r2, #64	@ 0x40
 8003bca:	4013      	ands	r3, r2
 8003bcc:	d004      	beq.n	8003bd8 <HAL_UART_IRQHandler+0x5e0>
  {
    UART_EndTransmit_IT(huart);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	0018      	movs	r0, r3
 8003bd2:	f000 fe80 	bl	80048d6 <UART_EndTransmit_IT>
    return;
 8003bd6:	e02c      	b.n	8003c32 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8003bd8:	23a4      	movs	r3, #164	@ 0xa4
 8003bda:	18fb      	adds	r3, r7, r3
 8003bdc:	681a      	ldr	r2, [r3, #0]
 8003bde:	2380      	movs	r3, #128	@ 0x80
 8003be0:	041b      	lsls	r3, r3, #16
 8003be2:	4013      	ands	r3, r2
 8003be4:	d00b      	beq.n	8003bfe <HAL_UART_IRQHandler+0x606>
 8003be6:	23a0      	movs	r3, #160	@ 0xa0
 8003be8:	18fb      	adds	r3, r7, r3
 8003bea:	681a      	ldr	r2, [r3, #0]
 8003bec:	2380      	movs	r3, #128	@ 0x80
 8003bee:	05db      	lsls	r3, r3, #23
 8003bf0:	4013      	ands	r3, r2
 8003bf2:	d004      	beq.n	8003bfe <HAL_UART_IRQHandler+0x606>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	0018      	movs	r0, r3
 8003bf8:	f001 fbba 	bl	8005370 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003bfc:	e019      	b.n	8003c32 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8003bfe:	23a4      	movs	r3, #164	@ 0xa4
 8003c00:	18fb      	adds	r3, r7, r3
 8003c02:	681a      	ldr	r2, [r3, #0]
 8003c04:	2380      	movs	r3, #128	@ 0x80
 8003c06:	045b      	lsls	r3, r3, #17
 8003c08:	4013      	ands	r3, r2
 8003c0a:	d012      	beq.n	8003c32 <HAL_UART_IRQHandler+0x63a>
 8003c0c:	23a0      	movs	r3, #160	@ 0xa0
 8003c0e:	18fb      	adds	r3, r7, r3
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	da0d      	bge.n	8003c32 <HAL_UART_IRQHandler+0x63a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	0018      	movs	r0, r3
 8003c1a:	f001 fba1 	bl	8005360 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003c1e:	e008      	b.n	8003c32 <HAL_UART_IRQHandler+0x63a>
      return;
 8003c20:	46c0      	nop			@ (mov r8, r8)
 8003c22:	e006      	b.n	8003c32 <HAL_UART_IRQHandler+0x63a>
    return;
 8003c24:	46c0      	nop			@ (mov r8, r8)
 8003c26:	e004      	b.n	8003c32 <HAL_UART_IRQHandler+0x63a>
      return;
 8003c28:	46c0      	nop			@ (mov r8, r8)
 8003c2a:	e002      	b.n	8003c32 <HAL_UART_IRQHandler+0x63a>
      return;
 8003c2c:	46c0      	nop			@ (mov r8, r8)
 8003c2e:	e000      	b.n	8003c32 <HAL_UART_IRQHandler+0x63a>
    return;
 8003c30:	46c0      	nop			@ (mov r8, r8)
  }
}
 8003c32:	46bd      	mov	sp, r7
 8003c34:	b02a      	add	sp, #168	@ 0xa8
 8003c36:	bdb0      	pop	{r4, r5, r7, pc}
 8003c38:	fffffeff 	.word	0xfffffeff
 8003c3c:	fffffedf 	.word	0xfffffedf
 8003c40:	effffffe 	.word	0xeffffffe

08003c44 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b082      	sub	sp, #8
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003c4c:	46c0      	nop			@ (mov r8, r8)
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	b002      	add	sp, #8
 8003c52:	bd80      	pop	{r7, pc}

08003c54 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003c54:	b580      	push	{r7, lr}
 8003c56:	b082      	sub	sp, #8
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003c5c:	46c0      	nop			@ (mov r8, r8)
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	b002      	add	sp, #8
 8003c62:	bd80      	pop	{r7, pc}

08003c64 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	b082      	sub	sp, #8
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
 8003c6c:	000a      	movs	r2, r1
 8003c6e:	1cbb      	adds	r3, r7, #2
 8003c70:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003c72:	46c0      	nop			@ (mov r8, r8)
 8003c74:	46bd      	mov	sp, r7
 8003c76:	b002      	add	sp, #8
 8003c78:	bd80      	pop	{r7, pc}
	...

08003c7c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003c7c:	b5b0      	push	{r4, r5, r7, lr}
 8003c7e:	b090      	sub	sp, #64	@ 0x40
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003c84:	231a      	movs	r3, #26
 8003c86:	2220      	movs	r2, #32
 8003c88:	189b      	adds	r3, r3, r2
 8003c8a:	19db      	adds	r3, r3, r7
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003c90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c92:	689a      	ldr	r2, [r3, #8]
 8003c94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c96:	691b      	ldr	r3, [r3, #16]
 8003c98:	431a      	orrs	r2, r3
 8003c9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c9c:	695b      	ldr	r3, [r3, #20]
 8003c9e:	431a      	orrs	r2, r3
 8003ca0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ca2:	69db      	ldr	r3, [r3, #28]
 8003ca4:	4313      	orrs	r3, r2
 8003ca6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003ca8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	4aaf      	ldr	r2, [pc, #700]	@ (8003f6c <UART_SetConfig+0x2f0>)
 8003cb0:	4013      	ands	r3, r2
 8003cb2:	0019      	movs	r1, r3
 8003cb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cb6:	681a      	ldr	r2, [r3, #0]
 8003cb8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003cba:	430b      	orrs	r3, r1
 8003cbc:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003cbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	685b      	ldr	r3, [r3, #4]
 8003cc4:	4aaa      	ldr	r2, [pc, #680]	@ (8003f70 <UART_SetConfig+0x2f4>)
 8003cc6:	4013      	ands	r3, r2
 8003cc8:	0018      	movs	r0, r3
 8003cca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ccc:	68d9      	ldr	r1, [r3, #12]
 8003cce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cd0:	681a      	ldr	r2, [r3, #0]
 8003cd2:	0003      	movs	r3, r0
 8003cd4:	430b      	orrs	r3, r1
 8003cd6:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003cd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cda:	699b      	ldr	r3, [r3, #24]
 8003cdc:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003cde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	4aa4      	ldr	r2, [pc, #656]	@ (8003f74 <UART_SetConfig+0x2f8>)
 8003ce4:	4293      	cmp	r3, r2
 8003ce6:	d004      	beq.n	8003cf2 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003ce8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cea:	6a1b      	ldr	r3, [r3, #32]
 8003cec:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003cee:	4313      	orrs	r3, r2
 8003cf0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003cf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	689b      	ldr	r3, [r3, #8]
 8003cf8:	4a9f      	ldr	r2, [pc, #636]	@ (8003f78 <UART_SetConfig+0x2fc>)
 8003cfa:	4013      	ands	r3, r2
 8003cfc:	0019      	movs	r1, r3
 8003cfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d00:	681a      	ldr	r2, [r3, #0]
 8003d02:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003d04:	430b      	orrs	r3, r1
 8003d06:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003d08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d0e:	220f      	movs	r2, #15
 8003d10:	4393      	bics	r3, r2
 8003d12:	0018      	movs	r0, r3
 8003d14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d16:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8003d18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d1a:	681a      	ldr	r2, [r3, #0]
 8003d1c:	0003      	movs	r3, r0
 8003d1e:	430b      	orrs	r3, r1
 8003d20:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003d22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	4a95      	ldr	r2, [pc, #596]	@ (8003f7c <UART_SetConfig+0x300>)
 8003d28:	4293      	cmp	r3, r2
 8003d2a:	d131      	bne.n	8003d90 <UART_SetConfig+0x114>
 8003d2c:	4b94      	ldr	r3, [pc, #592]	@ (8003f80 <UART_SetConfig+0x304>)
 8003d2e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d30:	2203      	movs	r2, #3
 8003d32:	4013      	ands	r3, r2
 8003d34:	2b03      	cmp	r3, #3
 8003d36:	d01d      	beq.n	8003d74 <UART_SetConfig+0xf8>
 8003d38:	d823      	bhi.n	8003d82 <UART_SetConfig+0x106>
 8003d3a:	2b02      	cmp	r3, #2
 8003d3c:	d00c      	beq.n	8003d58 <UART_SetConfig+0xdc>
 8003d3e:	d820      	bhi.n	8003d82 <UART_SetConfig+0x106>
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d002      	beq.n	8003d4a <UART_SetConfig+0xce>
 8003d44:	2b01      	cmp	r3, #1
 8003d46:	d00e      	beq.n	8003d66 <UART_SetConfig+0xea>
 8003d48:	e01b      	b.n	8003d82 <UART_SetConfig+0x106>
 8003d4a:	231b      	movs	r3, #27
 8003d4c:	2220      	movs	r2, #32
 8003d4e:	189b      	adds	r3, r3, r2
 8003d50:	19db      	adds	r3, r3, r7
 8003d52:	2200      	movs	r2, #0
 8003d54:	701a      	strb	r2, [r3, #0]
 8003d56:	e0b4      	b.n	8003ec2 <UART_SetConfig+0x246>
 8003d58:	231b      	movs	r3, #27
 8003d5a:	2220      	movs	r2, #32
 8003d5c:	189b      	adds	r3, r3, r2
 8003d5e:	19db      	adds	r3, r3, r7
 8003d60:	2202      	movs	r2, #2
 8003d62:	701a      	strb	r2, [r3, #0]
 8003d64:	e0ad      	b.n	8003ec2 <UART_SetConfig+0x246>
 8003d66:	231b      	movs	r3, #27
 8003d68:	2220      	movs	r2, #32
 8003d6a:	189b      	adds	r3, r3, r2
 8003d6c:	19db      	adds	r3, r3, r7
 8003d6e:	2204      	movs	r2, #4
 8003d70:	701a      	strb	r2, [r3, #0]
 8003d72:	e0a6      	b.n	8003ec2 <UART_SetConfig+0x246>
 8003d74:	231b      	movs	r3, #27
 8003d76:	2220      	movs	r2, #32
 8003d78:	189b      	adds	r3, r3, r2
 8003d7a:	19db      	adds	r3, r3, r7
 8003d7c:	2208      	movs	r2, #8
 8003d7e:	701a      	strb	r2, [r3, #0]
 8003d80:	e09f      	b.n	8003ec2 <UART_SetConfig+0x246>
 8003d82:	231b      	movs	r3, #27
 8003d84:	2220      	movs	r2, #32
 8003d86:	189b      	adds	r3, r3, r2
 8003d88:	19db      	adds	r3, r3, r7
 8003d8a:	2210      	movs	r2, #16
 8003d8c:	701a      	strb	r2, [r3, #0]
 8003d8e:	e098      	b.n	8003ec2 <UART_SetConfig+0x246>
 8003d90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	4a7b      	ldr	r2, [pc, #492]	@ (8003f84 <UART_SetConfig+0x308>)
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d131      	bne.n	8003dfe <UART_SetConfig+0x182>
 8003d9a:	4b79      	ldr	r3, [pc, #484]	@ (8003f80 <UART_SetConfig+0x304>)
 8003d9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d9e:	220c      	movs	r2, #12
 8003da0:	4013      	ands	r3, r2
 8003da2:	2b0c      	cmp	r3, #12
 8003da4:	d01d      	beq.n	8003de2 <UART_SetConfig+0x166>
 8003da6:	d823      	bhi.n	8003df0 <UART_SetConfig+0x174>
 8003da8:	2b08      	cmp	r3, #8
 8003daa:	d00c      	beq.n	8003dc6 <UART_SetConfig+0x14a>
 8003dac:	d820      	bhi.n	8003df0 <UART_SetConfig+0x174>
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d002      	beq.n	8003db8 <UART_SetConfig+0x13c>
 8003db2:	2b04      	cmp	r3, #4
 8003db4:	d00e      	beq.n	8003dd4 <UART_SetConfig+0x158>
 8003db6:	e01b      	b.n	8003df0 <UART_SetConfig+0x174>
 8003db8:	231b      	movs	r3, #27
 8003dba:	2220      	movs	r2, #32
 8003dbc:	189b      	adds	r3, r3, r2
 8003dbe:	19db      	adds	r3, r3, r7
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	701a      	strb	r2, [r3, #0]
 8003dc4:	e07d      	b.n	8003ec2 <UART_SetConfig+0x246>
 8003dc6:	231b      	movs	r3, #27
 8003dc8:	2220      	movs	r2, #32
 8003dca:	189b      	adds	r3, r3, r2
 8003dcc:	19db      	adds	r3, r3, r7
 8003dce:	2202      	movs	r2, #2
 8003dd0:	701a      	strb	r2, [r3, #0]
 8003dd2:	e076      	b.n	8003ec2 <UART_SetConfig+0x246>
 8003dd4:	231b      	movs	r3, #27
 8003dd6:	2220      	movs	r2, #32
 8003dd8:	189b      	adds	r3, r3, r2
 8003dda:	19db      	adds	r3, r3, r7
 8003ddc:	2204      	movs	r2, #4
 8003dde:	701a      	strb	r2, [r3, #0]
 8003de0:	e06f      	b.n	8003ec2 <UART_SetConfig+0x246>
 8003de2:	231b      	movs	r3, #27
 8003de4:	2220      	movs	r2, #32
 8003de6:	189b      	adds	r3, r3, r2
 8003de8:	19db      	adds	r3, r3, r7
 8003dea:	2208      	movs	r2, #8
 8003dec:	701a      	strb	r2, [r3, #0]
 8003dee:	e068      	b.n	8003ec2 <UART_SetConfig+0x246>
 8003df0:	231b      	movs	r3, #27
 8003df2:	2220      	movs	r2, #32
 8003df4:	189b      	adds	r3, r3, r2
 8003df6:	19db      	adds	r3, r3, r7
 8003df8:	2210      	movs	r2, #16
 8003dfa:	701a      	strb	r2, [r3, #0]
 8003dfc:	e061      	b.n	8003ec2 <UART_SetConfig+0x246>
 8003dfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	4a61      	ldr	r2, [pc, #388]	@ (8003f88 <UART_SetConfig+0x30c>)
 8003e04:	4293      	cmp	r3, r2
 8003e06:	d106      	bne.n	8003e16 <UART_SetConfig+0x19a>
 8003e08:	231b      	movs	r3, #27
 8003e0a:	2220      	movs	r2, #32
 8003e0c:	189b      	adds	r3, r3, r2
 8003e0e:	19db      	adds	r3, r3, r7
 8003e10:	2200      	movs	r2, #0
 8003e12:	701a      	strb	r2, [r3, #0]
 8003e14:	e055      	b.n	8003ec2 <UART_SetConfig+0x246>
 8003e16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	4a5c      	ldr	r2, [pc, #368]	@ (8003f8c <UART_SetConfig+0x310>)
 8003e1c:	4293      	cmp	r3, r2
 8003e1e:	d106      	bne.n	8003e2e <UART_SetConfig+0x1b2>
 8003e20:	231b      	movs	r3, #27
 8003e22:	2220      	movs	r2, #32
 8003e24:	189b      	adds	r3, r3, r2
 8003e26:	19db      	adds	r3, r3, r7
 8003e28:	2200      	movs	r2, #0
 8003e2a:	701a      	strb	r2, [r3, #0]
 8003e2c:	e049      	b.n	8003ec2 <UART_SetConfig+0x246>
 8003e2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	4a50      	ldr	r2, [pc, #320]	@ (8003f74 <UART_SetConfig+0x2f8>)
 8003e34:	4293      	cmp	r3, r2
 8003e36:	d13e      	bne.n	8003eb6 <UART_SetConfig+0x23a>
 8003e38:	4b51      	ldr	r3, [pc, #324]	@ (8003f80 <UART_SetConfig+0x304>)
 8003e3a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003e3c:	23c0      	movs	r3, #192	@ 0xc0
 8003e3e:	011b      	lsls	r3, r3, #4
 8003e40:	4013      	ands	r3, r2
 8003e42:	22c0      	movs	r2, #192	@ 0xc0
 8003e44:	0112      	lsls	r2, r2, #4
 8003e46:	4293      	cmp	r3, r2
 8003e48:	d027      	beq.n	8003e9a <UART_SetConfig+0x21e>
 8003e4a:	22c0      	movs	r2, #192	@ 0xc0
 8003e4c:	0112      	lsls	r2, r2, #4
 8003e4e:	4293      	cmp	r3, r2
 8003e50:	d82a      	bhi.n	8003ea8 <UART_SetConfig+0x22c>
 8003e52:	2280      	movs	r2, #128	@ 0x80
 8003e54:	0112      	lsls	r2, r2, #4
 8003e56:	4293      	cmp	r3, r2
 8003e58:	d011      	beq.n	8003e7e <UART_SetConfig+0x202>
 8003e5a:	2280      	movs	r2, #128	@ 0x80
 8003e5c:	0112      	lsls	r2, r2, #4
 8003e5e:	4293      	cmp	r3, r2
 8003e60:	d822      	bhi.n	8003ea8 <UART_SetConfig+0x22c>
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d004      	beq.n	8003e70 <UART_SetConfig+0x1f4>
 8003e66:	2280      	movs	r2, #128	@ 0x80
 8003e68:	00d2      	lsls	r2, r2, #3
 8003e6a:	4293      	cmp	r3, r2
 8003e6c:	d00e      	beq.n	8003e8c <UART_SetConfig+0x210>
 8003e6e:	e01b      	b.n	8003ea8 <UART_SetConfig+0x22c>
 8003e70:	231b      	movs	r3, #27
 8003e72:	2220      	movs	r2, #32
 8003e74:	189b      	adds	r3, r3, r2
 8003e76:	19db      	adds	r3, r3, r7
 8003e78:	2200      	movs	r2, #0
 8003e7a:	701a      	strb	r2, [r3, #0]
 8003e7c:	e021      	b.n	8003ec2 <UART_SetConfig+0x246>
 8003e7e:	231b      	movs	r3, #27
 8003e80:	2220      	movs	r2, #32
 8003e82:	189b      	adds	r3, r3, r2
 8003e84:	19db      	adds	r3, r3, r7
 8003e86:	2202      	movs	r2, #2
 8003e88:	701a      	strb	r2, [r3, #0]
 8003e8a:	e01a      	b.n	8003ec2 <UART_SetConfig+0x246>
 8003e8c:	231b      	movs	r3, #27
 8003e8e:	2220      	movs	r2, #32
 8003e90:	189b      	adds	r3, r3, r2
 8003e92:	19db      	adds	r3, r3, r7
 8003e94:	2204      	movs	r2, #4
 8003e96:	701a      	strb	r2, [r3, #0]
 8003e98:	e013      	b.n	8003ec2 <UART_SetConfig+0x246>
 8003e9a:	231b      	movs	r3, #27
 8003e9c:	2220      	movs	r2, #32
 8003e9e:	189b      	adds	r3, r3, r2
 8003ea0:	19db      	adds	r3, r3, r7
 8003ea2:	2208      	movs	r2, #8
 8003ea4:	701a      	strb	r2, [r3, #0]
 8003ea6:	e00c      	b.n	8003ec2 <UART_SetConfig+0x246>
 8003ea8:	231b      	movs	r3, #27
 8003eaa:	2220      	movs	r2, #32
 8003eac:	189b      	adds	r3, r3, r2
 8003eae:	19db      	adds	r3, r3, r7
 8003eb0:	2210      	movs	r2, #16
 8003eb2:	701a      	strb	r2, [r3, #0]
 8003eb4:	e005      	b.n	8003ec2 <UART_SetConfig+0x246>
 8003eb6:	231b      	movs	r3, #27
 8003eb8:	2220      	movs	r2, #32
 8003eba:	189b      	adds	r3, r3, r2
 8003ebc:	19db      	adds	r3, r3, r7
 8003ebe:	2210      	movs	r2, #16
 8003ec0:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003ec2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	4a2b      	ldr	r2, [pc, #172]	@ (8003f74 <UART_SetConfig+0x2f8>)
 8003ec8:	4293      	cmp	r3, r2
 8003eca:	d000      	beq.n	8003ece <UART_SetConfig+0x252>
 8003ecc:	e0a9      	b.n	8004022 <UART_SetConfig+0x3a6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003ece:	231b      	movs	r3, #27
 8003ed0:	2220      	movs	r2, #32
 8003ed2:	189b      	adds	r3, r3, r2
 8003ed4:	19db      	adds	r3, r3, r7
 8003ed6:	781b      	ldrb	r3, [r3, #0]
 8003ed8:	2b08      	cmp	r3, #8
 8003eda:	d015      	beq.n	8003f08 <UART_SetConfig+0x28c>
 8003edc:	dc18      	bgt.n	8003f10 <UART_SetConfig+0x294>
 8003ede:	2b04      	cmp	r3, #4
 8003ee0:	d00d      	beq.n	8003efe <UART_SetConfig+0x282>
 8003ee2:	dc15      	bgt.n	8003f10 <UART_SetConfig+0x294>
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d002      	beq.n	8003eee <UART_SetConfig+0x272>
 8003ee8:	2b02      	cmp	r3, #2
 8003eea:	d005      	beq.n	8003ef8 <UART_SetConfig+0x27c>
 8003eec:	e010      	b.n	8003f10 <UART_SetConfig+0x294>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003eee:	f7fe fbd1 	bl	8002694 <HAL_RCC_GetPCLK1Freq>
 8003ef2:	0003      	movs	r3, r0
 8003ef4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003ef6:	e014      	b.n	8003f22 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003ef8:	4b25      	ldr	r3, [pc, #148]	@ (8003f90 <UART_SetConfig+0x314>)
 8003efa:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003efc:	e011      	b.n	8003f22 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003efe:	f7fe fb3d 	bl	800257c <HAL_RCC_GetSysClockFreq>
 8003f02:	0003      	movs	r3, r0
 8003f04:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003f06:	e00c      	b.n	8003f22 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003f08:	2380      	movs	r3, #128	@ 0x80
 8003f0a:	021b      	lsls	r3, r3, #8
 8003f0c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003f0e:	e008      	b.n	8003f22 <UART_SetConfig+0x2a6>
      default:
        pclk = 0U;
 8003f10:	2300      	movs	r3, #0
 8003f12:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 8003f14:	231a      	movs	r3, #26
 8003f16:	2220      	movs	r2, #32
 8003f18:	189b      	adds	r3, r3, r2
 8003f1a:	19db      	adds	r3, r3, r7
 8003f1c:	2201      	movs	r2, #1
 8003f1e:	701a      	strb	r2, [r3, #0]
        break;
 8003f20:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003f22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d100      	bne.n	8003f2a <UART_SetConfig+0x2ae>
 8003f28:	e14b      	b.n	80041c2 <UART_SetConfig+0x546>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003f2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f2c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003f2e:	4b19      	ldr	r3, [pc, #100]	@ (8003f94 <UART_SetConfig+0x318>)
 8003f30:	0052      	lsls	r2, r2, #1
 8003f32:	5ad3      	ldrh	r3, [r2, r3]
 8003f34:	0019      	movs	r1, r3
 8003f36:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8003f38:	f7fc f8f8 	bl	800012c <__udivsi3>
 8003f3c:	0003      	movs	r3, r0
 8003f3e:	62bb      	str	r3, [r7, #40]	@ 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003f40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f42:	685a      	ldr	r2, [r3, #4]
 8003f44:	0013      	movs	r3, r2
 8003f46:	005b      	lsls	r3, r3, #1
 8003f48:	189b      	adds	r3, r3, r2
 8003f4a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003f4c:	429a      	cmp	r2, r3
 8003f4e:	d305      	bcc.n	8003f5c <UART_SetConfig+0x2e0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003f50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f52:	685b      	ldr	r3, [r3, #4]
 8003f54:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003f56:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003f58:	429a      	cmp	r2, r3
 8003f5a:	d91d      	bls.n	8003f98 <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 8003f5c:	231a      	movs	r3, #26
 8003f5e:	2220      	movs	r2, #32
 8003f60:	189b      	adds	r3, r3, r2
 8003f62:	19db      	adds	r3, r3, r7
 8003f64:	2201      	movs	r2, #1
 8003f66:	701a      	strb	r2, [r3, #0]
 8003f68:	e12b      	b.n	80041c2 <UART_SetConfig+0x546>
 8003f6a:	46c0      	nop			@ (mov r8, r8)
 8003f6c:	cfff69f3 	.word	0xcfff69f3
 8003f70:	ffffcfff 	.word	0xffffcfff
 8003f74:	40008000 	.word	0x40008000
 8003f78:	11fff4ff 	.word	0x11fff4ff
 8003f7c:	40013800 	.word	0x40013800
 8003f80:	40021000 	.word	0x40021000
 8003f84:	40004400 	.word	0x40004400
 8003f88:	40004800 	.word	0x40004800
 8003f8c:	40004c00 	.word	0x40004c00
 8003f90:	00f42400 	.word	0x00f42400
 8003f94:	08007150 	.word	0x08007150
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003f98:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f9a:	61bb      	str	r3, [r7, #24]
 8003f9c:	2300      	movs	r3, #0
 8003f9e:	61fb      	str	r3, [r7, #28]
 8003fa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fa2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003fa4:	4b92      	ldr	r3, [pc, #584]	@ (80041f0 <UART_SetConfig+0x574>)
 8003fa6:	0052      	lsls	r2, r2, #1
 8003fa8:	5ad3      	ldrh	r3, [r2, r3]
 8003faa:	613b      	str	r3, [r7, #16]
 8003fac:	2300      	movs	r3, #0
 8003fae:	617b      	str	r3, [r7, #20]
 8003fb0:	693a      	ldr	r2, [r7, #16]
 8003fb2:	697b      	ldr	r3, [r7, #20]
 8003fb4:	69b8      	ldr	r0, [r7, #24]
 8003fb6:	69f9      	ldr	r1, [r7, #28]
 8003fb8:	f7fc fa2e 	bl	8000418 <__aeabi_uldivmod>
 8003fbc:	0002      	movs	r2, r0
 8003fbe:	000b      	movs	r3, r1
 8003fc0:	0e11      	lsrs	r1, r2, #24
 8003fc2:	021d      	lsls	r5, r3, #8
 8003fc4:	430d      	orrs	r5, r1
 8003fc6:	0214      	lsls	r4, r2, #8
 8003fc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fca:	685b      	ldr	r3, [r3, #4]
 8003fcc:	085b      	lsrs	r3, r3, #1
 8003fce:	60bb      	str	r3, [r7, #8]
 8003fd0:	2300      	movs	r3, #0
 8003fd2:	60fb      	str	r3, [r7, #12]
 8003fd4:	68b8      	ldr	r0, [r7, #8]
 8003fd6:	68f9      	ldr	r1, [r7, #12]
 8003fd8:	1900      	adds	r0, r0, r4
 8003fda:	4169      	adcs	r1, r5
 8003fdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fde:	685b      	ldr	r3, [r3, #4]
 8003fe0:	603b      	str	r3, [r7, #0]
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	607b      	str	r3, [r7, #4]
 8003fe6:	683a      	ldr	r2, [r7, #0]
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	f7fc fa15 	bl	8000418 <__aeabi_uldivmod>
 8003fee:	0002      	movs	r2, r0
 8003ff0:	000b      	movs	r3, r1
 8003ff2:	0013      	movs	r3, r2
 8003ff4:	633b      	str	r3, [r7, #48]	@ 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003ff6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003ff8:	23c0      	movs	r3, #192	@ 0xc0
 8003ffa:	009b      	lsls	r3, r3, #2
 8003ffc:	429a      	cmp	r2, r3
 8003ffe:	d309      	bcc.n	8004014 <UART_SetConfig+0x398>
 8004000:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004002:	2380      	movs	r3, #128	@ 0x80
 8004004:	035b      	lsls	r3, r3, #13
 8004006:	429a      	cmp	r2, r3
 8004008:	d204      	bcs.n	8004014 <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 800400a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004010:	60da      	str	r2, [r3, #12]
 8004012:	e0d6      	b.n	80041c2 <UART_SetConfig+0x546>
        }
        else
        {
          ret = HAL_ERROR;
 8004014:	231a      	movs	r3, #26
 8004016:	2220      	movs	r2, #32
 8004018:	189b      	adds	r3, r3, r2
 800401a:	19db      	adds	r3, r3, r7
 800401c:	2201      	movs	r2, #1
 800401e:	701a      	strb	r2, [r3, #0]
 8004020:	e0cf      	b.n	80041c2 <UART_SetConfig+0x546>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004022:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004024:	69da      	ldr	r2, [r3, #28]
 8004026:	2380      	movs	r3, #128	@ 0x80
 8004028:	021b      	lsls	r3, r3, #8
 800402a:	429a      	cmp	r2, r3
 800402c:	d000      	beq.n	8004030 <UART_SetConfig+0x3b4>
 800402e:	e070      	b.n	8004112 <UART_SetConfig+0x496>
  {
    switch (clocksource)
 8004030:	231b      	movs	r3, #27
 8004032:	2220      	movs	r2, #32
 8004034:	189b      	adds	r3, r3, r2
 8004036:	19db      	adds	r3, r3, r7
 8004038:	781b      	ldrb	r3, [r3, #0]
 800403a:	2b08      	cmp	r3, #8
 800403c:	d015      	beq.n	800406a <UART_SetConfig+0x3ee>
 800403e:	dc18      	bgt.n	8004072 <UART_SetConfig+0x3f6>
 8004040:	2b04      	cmp	r3, #4
 8004042:	d00d      	beq.n	8004060 <UART_SetConfig+0x3e4>
 8004044:	dc15      	bgt.n	8004072 <UART_SetConfig+0x3f6>
 8004046:	2b00      	cmp	r3, #0
 8004048:	d002      	beq.n	8004050 <UART_SetConfig+0x3d4>
 800404a:	2b02      	cmp	r3, #2
 800404c:	d005      	beq.n	800405a <UART_SetConfig+0x3de>
 800404e:	e010      	b.n	8004072 <UART_SetConfig+0x3f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004050:	f7fe fb20 	bl	8002694 <HAL_RCC_GetPCLK1Freq>
 8004054:	0003      	movs	r3, r0
 8004056:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004058:	e014      	b.n	8004084 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800405a:	4b66      	ldr	r3, [pc, #408]	@ (80041f4 <UART_SetConfig+0x578>)
 800405c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800405e:	e011      	b.n	8004084 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004060:	f7fe fa8c 	bl	800257c <HAL_RCC_GetSysClockFreq>
 8004064:	0003      	movs	r3, r0
 8004066:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004068:	e00c      	b.n	8004084 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800406a:	2380      	movs	r3, #128	@ 0x80
 800406c:	021b      	lsls	r3, r3, #8
 800406e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004070:	e008      	b.n	8004084 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8004072:	2300      	movs	r3, #0
 8004074:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 8004076:	231a      	movs	r3, #26
 8004078:	2220      	movs	r2, #32
 800407a:	189b      	adds	r3, r3, r2
 800407c:	19db      	adds	r3, r3, r7
 800407e:	2201      	movs	r2, #1
 8004080:	701a      	strb	r2, [r3, #0]
        break;
 8004082:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004084:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004086:	2b00      	cmp	r3, #0
 8004088:	d100      	bne.n	800408c <UART_SetConfig+0x410>
 800408a:	e09a      	b.n	80041c2 <UART_SetConfig+0x546>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800408c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800408e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004090:	4b57      	ldr	r3, [pc, #348]	@ (80041f0 <UART_SetConfig+0x574>)
 8004092:	0052      	lsls	r2, r2, #1
 8004094:	5ad3      	ldrh	r3, [r2, r3]
 8004096:	0019      	movs	r1, r3
 8004098:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800409a:	f7fc f847 	bl	800012c <__udivsi3>
 800409e:	0003      	movs	r3, r0
 80040a0:	005a      	lsls	r2, r3, #1
 80040a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040a4:	685b      	ldr	r3, [r3, #4]
 80040a6:	085b      	lsrs	r3, r3, #1
 80040a8:	18d2      	adds	r2, r2, r3
 80040aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040ac:	685b      	ldr	r3, [r3, #4]
 80040ae:	0019      	movs	r1, r3
 80040b0:	0010      	movs	r0, r2
 80040b2:	f7fc f83b 	bl	800012c <__udivsi3>
 80040b6:	0003      	movs	r3, r0
 80040b8:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80040ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040bc:	2b0f      	cmp	r3, #15
 80040be:	d921      	bls.n	8004104 <UART_SetConfig+0x488>
 80040c0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80040c2:	2380      	movs	r3, #128	@ 0x80
 80040c4:	025b      	lsls	r3, r3, #9
 80040c6:	429a      	cmp	r2, r3
 80040c8:	d21c      	bcs.n	8004104 <UART_SetConfig+0x488>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80040ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040cc:	b29a      	uxth	r2, r3
 80040ce:	200e      	movs	r0, #14
 80040d0:	2420      	movs	r4, #32
 80040d2:	1903      	adds	r3, r0, r4
 80040d4:	19db      	adds	r3, r3, r7
 80040d6:	210f      	movs	r1, #15
 80040d8:	438a      	bics	r2, r1
 80040da:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80040dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040de:	085b      	lsrs	r3, r3, #1
 80040e0:	b29b      	uxth	r3, r3
 80040e2:	2207      	movs	r2, #7
 80040e4:	4013      	ands	r3, r2
 80040e6:	b299      	uxth	r1, r3
 80040e8:	1903      	adds	r3, r0, r4
 80040ea:	19db      	adds	r3, r3, r7
 80040ec:	1902      	adds	r2, r0, r4
 80040ee:	19d2      	adds	r2, r2, r7
 80040f0:	8812      	ldrh	r2, [r2, #0]
 80040f2:	430a      	orrs	r2, r1
 80040f4:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80040f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	1902      	adds	r2, r0, r4
 80040fc:	19d2      	adds	r2, r2, r7
 80040fe:	8812      	ldrh	r2, [r2, #0]
 8004100:	60da      	str	r2, [r3, #12]
 8004102:	e05e      	b.n	80041c2 <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 8004104:	231a      	movs	r3, #26
 8004106:	2220      	movs	r2, #32
 8004108:	189b      	adds	r3, r3, r2
 800410a:	19db      	adds	r3, r3, r7
 800410c:	2201      	movs	r2, #1
 800410e:	701a      	strb	r2, [r3, #0]
 8004110:	e057      	b.n	80041c2 <UART_SetConfig+0x546>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004112:	231b      	movs	r3, #27
 8004114:	2220      	movs	r2, #32
 8004116:	189b      	adds	r3, r3, r2
 8004118:	19db      	adds	r3, r3, r7
 800411a:	781b      	ldrb	r3, [r3, #0]
 800411c:	2b08      	cmp	r3, #8
 800411e:	d015      	beq.n	800414c <UART_SetConfig+0x4d0>
 8004120:	dc18      	bgt.n	8004154 <UART_SetConfig+0x4d8>
 8004122:	2b04      	cmp	r3, #4
 8004124:	d00d      	beq.n	8004142 <UART_SetConfig+0x4c6>
 8004126:	dc15      	bgt.n	8004154 <UART_SetConfig+0x4d8>
 8004128:	2b00      	cmp	r3, #0
 800412a:	d002      	beq.n	8004132 <UART_SetConfig+0x4b6>
 800412c:	2b02      	cmp	r3, #2
 800412e:	d005      	beq.n	800413c <UART_SetConfig+0x4c0>
 8004130:	e010      	b.n	8004154 <UART_SetConfig+0x4d8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004132:	f7fe faaf 	bl	8002694 <HAL_RCC_GetPCLK1Freq>
 8004136:	0003      	movs	r3, r0
 8004138:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800413a:	e014      	b.n	8004166 <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800413c:	4b2d      	ldr	r3, [pc, #180]	@ (80041f4 <UART_SetConfig+0x578>)
 800413e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004140:	e011      	b.n	8004166 <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004142:	f7fe fa1b 	bl	800257c <HAL_RCC_GetSysClockFreq>
 8004146:	0003      	movs	r3, r0
 8004148:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800414a:	e00c      	b.n	8004166 <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800414c:	2380      	movs	r3, #128	@ 0x80
 800414e:	021b      	lsls	r3, r3, #8
 8004150:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004152:	e008      	b.n	8004166 <UART_SetConfig+0x4ea>
      default:
        pclk = 0U;
 8004154:	2300      	movs	r3, #0
 8004156:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 8004158:	231a      	movs	r3, #26
 800415a:	2220      	movs	r2, #32
 800415c:	189b      	adds	r3, r3, r2
 800415e:	19db      	adds	r3, r3, r7
 8004160:	2201      	movs	r2, #1
 8004162:	701a      	strb	r2, [r3, #0]
        break;
 8004164:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8004166:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004168:	2b00      	cmp	r3, #0
 800416a:	d02a      	beq.n	80041c2 <UART_SetConfig+0x546>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800416c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800416e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004170:	4b1f      	ldr	r3, [pc, #124]	@ (80041f0 <UART_SetConfig+0x574>)
 8004172:	0052      	lsls	r2, r2, #1
 8004174:	5ad3      	ldrh	r3, [r2, r3]
 8004176:	0019      	movs	r1, r3
 8004178:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800417a:	f7fb ffd7 	bl	800012c <__udivsi3>
 800417e:	0003      	movs	r3, r0
 8004180:	001a      	movs	r2, r3
 8004182:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004184:	685b      	ldr	r3, [r3, #4]
 8004186:	085b      	lsrs	r3, r3, #1
 8004188:	18d2      	adds	r2, r2, r3
 800418a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800418c:	685b      	ldr	r3, [r3, #4]
 800418e:	0019      	movs	r1, r3
 8004190:	0010      	movs	r0, r2
 8004192:	f7fb ffcb 	bl	800012c <__udivsi3>
 8004196:	0003      	movs	r3, r0
 8004198:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800419a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800419c:	2b0f      	cmp	r3, #15
 800419e:	d90a      	bls.n	80041b6 <UART_SetConfig+0x53a>
 80041a0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80041a2:	2380      	movs	r3, #128	@ 0x80
 80041a4:	025b      	lsls	r3, r3, #9
 80041a6:	429a      	cmp	r2, r3
 80041a8:	d205      	bcs.n	80041b6 <UART_SetConfig+0x53a>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80041aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041ac:	b29a      	uxth	r2, r3
 80041ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	60da      	str	r2, [r3, #12]
 80041b4:	e005      	b.n	80041c2 <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 80041b6:	231a      	movs	r3, #26
 80041b8:	2220      	movs	r2, #32
 80041ba:	189b      	adds	r3, r3, r2
 80041bc:	19db      	adds	r3, r3, r7
 80041be:	2201      	movs	r2, #1
 80041c0:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80041c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041c4:	226a      	movs	r2, #106	@ 0x6a
 80041c6:	2101      	movs	r1, #1
 80041c8:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 80041ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041cc:	2268      	movs	r2, #104	@ 0x68
 80041ce:	2101      	movs	r1, #1
 80041d0:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80041d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041d4:	2200      	movs	r2, #0
 80041d6:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80041d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041da:	2200      	movs	r2, #0
 80041dc:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80041de:	231a      	movs	r3, #26
 80041e0:	2220      	movs	r2, #32
 80041e2:	189b      	adds	r3, r3, r2
 80041e4:	19db      	adds	r3, r3, r7
 80041e6:	781b      	ldrb	r3, [r3, #0]
}
 80041e8:	0018      	movs	r0, r3
 80041ea:	46bd      	mov	sp, r7
 80041ec:	b010      	add	sp, #64	@ 0x40
 80041ee:	bdb0      	pop	{r4, r5, r7, pc}
 80041f0:	08007150 	.word	0x08007150
 80041f4:	00f42400 	.word	0x00f42400

080041f8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	b082      	sub	sp, #8
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004204:	2208      	movs	r2, #8
 8004206:	4013      	ands	r3, r2
 8004208:	d00b      	beq.n	8004222 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	685b      	ldr	r3, [r3, #4]
 8004210:	4a4a      	ldr	r2, [pc, #296]	@ (800433c <UART_AdvFeatureConfig+0x144>)
 8004212:	4013      	ands	r3, r2
 8004214:	0019      	movs	r1, r3
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	430a      	orrs	r2, r1
 8004220:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004226:	2201      	movs	r2, #1
 8004228:	4013      	ands	r3, r2
 800422a:	d00b      	beq.n	8004244 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	685b      	ldr	r3, [r3, #4]
 8004232:	4a43      	ldr	r2, [pc, #268]	@ (8004340 <UART_AdvFeatureConfig+0x148>)
 8004234:	4013      	ands	r3, r2
 8004236:	0019      	movs	r1, r3
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	430a      	orrs	r2, r1
 8004242:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004248:	2202      	movs	r2, #2
 800424a:	4013      	ands	r3, r2
 800424c:	d00b      	beq.n	8004266 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	685b      	ldr	r3, [r3, #4]
 8004254:	4a3b      	ldr	r2, [pc, #236]	@ (8004344 <UART_AdvFeatureConfig+0x14c>)
 8004256:	4013      	ands	r3, r2
 8004258:	0019      	movs	r1, r3
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	430a      	orrs	r2, r1
 8004264:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800426a:	2204      	movs	r2, #4
 800426c:	4013      	ands	r3, r2
 800426e:	d00b      	beq.n	8004288 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	685b      	ldr	r3, [r3, #4]
 8004276:	4a34      	ldr	r2, [pc, #208]	@ (8004348 <UART_AdvFeatureConfig+0x150>)
 8004278:	4013      	ands	r3, r2
 800427a:	0019      	movs	r1, r3
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	430a      	orrs	r2, r1
 8004286:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800428c:	2210      	movs	r2, #16
 800428e:	4013      	ands	r3, r2
 8004290:	d00b      	beq.n	80042aa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	689b      	ldr	r3, [r3, #8]
 8004298:	4a2c      	ldr	r2, [pc, #176]	@ (800434c <UART_AdvFeatureConfig+0x154>)
 800429a:	4013      	ands	r3, r2
 800429c:	0019      	movs	r1, r3
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	430a      	orrs	r2, r1
 80042a8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042ae:	2220      	movs	r2, #32
 80042b0:	4013      	ands	r3, r2
 80042b2:	d00b      	beq.n	80042cc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	689b      	ldr	r3, [r3, #8]
 80042ba:	4a25      	ldr	r2, [pc, #148]	@ (8004350 <UART_AdvFeatureConfig+0x158>)
 80042bc:	4013      	ands	r3, r2
 80042be:	0019      	movs	r1, r3
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	430a      	orrs	r2, r1
 80042ca:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042d0:	2240      	movs	r2, #64	@ 0x40
 80042d2:	4013      	ands	r3, r2
 80042d4:	d01d      	beq.n	8004312 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	685b      	ldr	r3, [r3, #4]
 80042dc:	4a1d      	ldr	r2, [pc, #116]	@ (8004354 <UART_AdvFeatureConfig+0x15c>)
 80042de:	4013      	ands	r3, r2
 80042e0:	0019      	movs	r1, r3
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	430a      	orrs	r2, r1
 80042ec:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80042f2:	2380      	movs	r3, #128	@ 0x80
 80042f4:	035b      	lsls	r3, r3, #13
 80042f6:	429a      	cmp	r2, r3
 80042f8:	d10b      	bne.n	8004312 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	685b      	ldr	r3, [r3, #4]
 8004300:	4a15      	ldr	r2, [pc, #84]	@ (8004358 <UART_AdvFeatureConfig+0x160>)
 8004302:	4013      	ands	r3, r2
 8004304:	0019      	movs	r1, r3
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	430a      	orrs	r2, r1
 8004310:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004316:	2280      	movs	r2, #128	@ 0x80
 8004318:	4013      	ands	r3, r2
 800431a:	d00b      	beq.n	8004334 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	685b      	ldr	r3, [r3, #4]
 8004322:	4a0e      	ldr	r2, [pc, #56]	@ (800435c <UART_AdvFeatureConfig+0x164>)
 8004324:	4013      	ands	r3, r2
 8004326:	0019      	movs	r1, r3
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	430a      	orrs	r2, r1
 8004332:	605a      	str	r2, [r3, #4]
  }
}
 8004334:	46c0      	nop			@ (mov r8, r8)
 8004336:	46bd      	mov	sp, r7
 8004338:	b002      	add	sp, #8
 800433a:	bd80      	pop	{r7, pc}
 800433c:	ffff7fff 	.word	0xffff7fff
 8004340:	fffdffff 	.word	0xfffdffff
 8004344:	fffeffff 	.word	0xfffeffff
 8004348:	fffbffff 	.word	0xfffbffff
 800434c:	ffffefff 	.word	0xffffefff
 8004350:	ffffdfff 	.word	0xffffdfff
 8004354:	ffefffff 	.word	0xffefffff
 8004358:	ff9fffff 	.word	0xff9fffff
 800435c:	fff7ffff 	.word	0xfff7ffff

08004360 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004360:	b580      	push	{r7, lr}
 8004362:	b092      	sub	sp, #72	@ 0x48
 8004364:	af02      	add	r7, sp, #8
 8004366:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2290      	movs	r2, #144	@ 0x90
 800436c:	2100      	movs	r1, #0
 800436e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004370:	f7fc ffea 	bl	8001348 <HAL_GetTick>
 8004374:	0003      	movs	r3, r0
 8004376:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	2208      	movs	r2, #8
 8004380:	4013      	ands	r3, r2
 8004382:	2b08      	cmp	r3, #8
 8004384:	d12d      	bne.n	80043e2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004386:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004388:	2280      	movs	r2, #128	@ 0x80
 800438a:	0391      	lsls	r1, r2, #14
 800438c:	6878      	ldr	r0, [r7, #4]
 800438e:	4a47      	ldr	r2, [pc, #284]	@ (80044ac <UART_CheckIdleState+0x14c>)
 8004390:	9200      	str	r2, [sp, #0]
 8004392:	2200      	movs	r2, #0
 8004394:	f000 f88e 	bl	80044b4 <UART_WaitOnFlagUntilTimeout>
 8004398:	1e03      	subs	r3, r0, #0
 800439a:	d022      	beq.n	80043e2 <UART_CheckIdleState+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800439c:	f3ef 8310 	mrs	r3, PRIMASK
 80043a0:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80043a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80043a4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80043a6:	2301      	movs	r3, #1
 80043a8:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043ac:	f383 8810 	msr	PRIMASK, r3
}
 80043b0:	46c0      	nop			@ (mov r8, r8)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	681a      	ldr	r2, [r3, #0]
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	2180      	movs	r1, #128	@ 0x80
 80043be:	438a      	bics	r2, r1
 80043c0:	601a      	str	r2, [r3, #0]
 80043c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80043c8:	f383 8810 	msr	PRIMASK, r3
}
 80043cc:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	2288      	movs	r2, #136	@ 0x88
 80043d2:	2120      	movs	r1, #32
 80043d4:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	2284      	movs	r2, #132	@ 0x84
 80043da:	2100      	movs	r1, #0
 80043dc:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80043de:	2303      	movs	r3, #3
 80043e0:	e060      	b.n	80044a4 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	2204      	movs	r2, #4
 80043ea:	4013      	ands	r3, r2
 80043ec:	2b04      	cmp	r3, #4
 80043ee:	d146      	bne.n	800447e <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80043f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80043f2:	2280      	movs	r2, #128	@ 0x80
 80043f4:	03d1      	lsls	r1, r2, #15
 80043f6:	6878      	ldr	r0, [r7, #4]
 80043f8:	4a2c      	ldr	r2, [pc, #176]	@ (80044ac <UART_CheckIdleState+0x14c>)
 80043fa:	9200      	str	r2, [sp, #0]
 80043fc:	2200      	movs	r2, #0
 80043fe:	f000 f859 	bl	80044b4 <UART_WaitOnFlagUntilTimeout>
 8004402:	1e03      	subs	r3, r0, #0
 8004404:	d03b      	beq.n	800447e <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004406:	f3ef 8310 	mrs	r3, PRIMASK
 800440a:	60fb      	str	r3, [r7, #12]
  return(result);
 800440c:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800440e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004410:	2301      	movs	r3, #1
 8004412:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004414:	693b      	ldr	r3, [r7, #16]
 8004416:	f383 8810 	msr	PRIMASK, r3
}
 800441a:	46c0      	nop			@ (mov r8, r8)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	681a      	ldr	r2, [r3, #0]
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	4922      	ldr	r1, [pc, #136]	@ (80044b0 <UART_CheckIdleState+0x150>)
 8004428:	400a      	ands	r2, r1
 800442a:	601a      	str	r2, [r3, #0]
 800442c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800442e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004430:	697b      	ldr	r3, [r7, #20]
 8004432:	f383 8810 	msr	PRIMASK, r3
}
 8004436:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004438:	f3ef 8310 	mrs	r3, PRIMASK
 800443c:	61bb      	str	r3, [r7, #24]
  return(result);
 800443e:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004440:	633b      	str	r3, [r7, #48]	@ 0x30
 8004442:	2301      	movs	r3, #1
 8004444:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004446:	69fb      	ldr	r3, [r7, #28]
 8004448:	f383 8810 	msr	PRIMASK, r3
}
 800444c:	46c0      	nop			@ (mov r8, r8)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	689a      	ldr	r2, [r3, #8]
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	2101      	movs	r1, #1
 800445a:	438a      	bics	r2, r1
 800445c:	609a      	str	r2, [r3, #8]
 800445e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004460:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004462:	6a3b      	ldr	r3, [r7, #32]
 8004464:	f383 8810 	msr	PRIMASK, r3
}
 8004468:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	228c      	movs	r2, #140	@ 0x8c
 800446e:	2120      	movs	r1, #32
 8004470:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	2284      	movs	r2, #132	@ 0x84
 8004476:	2100      	movs	r1, #0
 8004478:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800447a:	2303      	movs	r3, #3
 800447c:	e012      	b.n	80044a4 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	2288      	movs	r2, #136	@ 0x88
 8004482:	2120      	movs	r1, #32
 8004484:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	228c      	movs	r2, #140	@ 0x8c
 800448a:	2120      	movs	r1, #32
 800448c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	2200      	movs	r2, #0
 8004492:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2200      	movs	r2, #0
 8004498:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	2284      	movs	r2, #132	@ 0x84
 800449e:	2100      	movs	r1, #0
 80044a0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80044a2:	2300      	movs	r3, #0
}
 80044a4:	0018      	movs	r0, r3
 80044a6:	46bd      	mov	sp, r7
 80044a8:	b010      	add	sp, #64	@ 0x40
 80044aa:	bd80      	pop	{r7, pc}
 80044ac:	01ffffff 	.word	0x01ffffff
 80044b0:	fffffedf 	.word	0xfffffedf

080044b4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80044b4:	b580      	push	{r7, lr}
 80044b6:	b084      	sub	sp, #16
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	60f8      	str	r0, [r7, #12]
 80044bc:	60b9      	str	r1, [r7, #8]
 80044be:	603b      	str	r3, [r7, #0]
 80044c0:	1dfb      	adds	r3, r7, #7
 80044c2:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80044c4:	e051      	b.n	800456a <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80044c6:	69bb      	ldr	r3, [r7, #24]
 80044c8:	3301      	adds	r3, #1
 80044ca:	d04e      	beq.n	800456a <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044cc:	f7fc ff3c 	bl	8001348 <HAL_GetTick>
 80044d0:	0002      	movs	r2, r0
 80044d2:	683b      	ldr	r3, [r7, #0]
 80044d4:	1ad3      	subs	r3, r2, r3
 80044d6:	69ba      	ldr	r2, [r7, #24]
 80044d8:	429a      	cmp	r2, r3
 80044da:	d302      	bcc.n	80044e2 <UART_WaitOnFlagUntilTimeout+0x2e>
 80044dc:	69bb      	ldr	r3, [r7, #24]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d101      	bne.n	80044e6 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 80044e2:	2303      	movs	r3, #3
 80044e4:	e051      	b.n	800458a <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	2204      	movs	r2, #4
 80044ee:	4013      	ands	r3, r2
 80044f0:	d03b      	beq.n	800456a <UART_WaitOnFlagUntilTimeout+0xb6>
 80044f2:	68bb      	ldr	r3, [r7, #8]
 80044f4:	2b80      	cmp	r3, #128	@ 0x80
 80044f6:	d038      	beq.n	800456a <UART_WaitOnFlagUntilTimeout+0xb6>
 80044f8:	68bb      	ldr	r3, [r7, #8]
 80044fa:	2b40      	cmp	r3, #64	@ 0x40
 80044fc:	d035      	beq.n	800456a <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	69db      	ldr	r3, [r3, #28]
 8004504:	2208      	movs	r2, #8
 8004506:	4013      	ands	r3, r2
 8004508:	2b08      	cmp	r3, #8
 800450a:	d111      	bne.n	8004530 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	2208      	movs	r2, #8
 8004512:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	0018      	movs	r0, r3
 8004518:	f000 f960 	bl	80047dc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	2290      	movs	r2, #144	@ 0x90
 8004520:	2108      	movs	r1, #8
 8004522:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	2284      	movs	r2, #132	@ 0x84
 8004528:	2100      	movs	r1, #0
 800452a:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 800452c:	2301      	movs	r3, #1
 800452e:	e02c      	b.n	800458a <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	69da      	ldr	r2, [r3, #28]
 8004536:	2380      	movs	r3, #128	@ 0x80
 8004538:	011b      	lsls	r3, r3, #4
 800453a:	401a      	ands	r2, r3
 800453c:	2380      	movs	r3, #128	@ 0x80
 800453e:	011b      	lsls	r3, r3, #4
 8004540:	429a      	cmp	r2, r3
 8004542:	d112      	bne.n	800456a <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	2280      	movs	r2, #128	@ 0x80
 800454a:	0112      	lsls	r2, r2, #4
 800454c:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	0018      	movs	r0, r3
 8004552:	f000 f943 	bl	80047dc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	2290      	movs	r2, #144	@ 0x90
 800455a:	2120      	movs	r1, #32
 800455c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	2284      	movs	r2, #132	@ 0x84
 8004562:	2100      	movs	r1, #0
 8004564:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8004566:	2303      	movs	r3, #3
 8004568:	e00f      	b.n	800458a <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	69db      	ldr	r3, [r3, #28]
 8004570:	68ba      	ldr	r2, [r7, #8]
 8004572:	4013      	ands	r3, r2
 8004574:	68ba      	ldr	r2, [r7, #8]
 8004576:	1ad3      	subs	r3, r2, r3
 8004578:	425a      	negs	r2, r3
 800457a:	4153      	adcs	r3, r2
 800457c:	b2db      	uxtb	r3, r3
 800457e:	001a      	movs	r2, r3
 8004580:	1dfb      	adds	r3, r7, #7
 8004582:	781b      	ldrb	r3, [r3, #0]
 8004584:	429a      	cmp	r2, r3
 8004586:	d09e      	beq.n	80044c6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004588:	2300      	movs	r3, #0
}
 800458a:	0018      	movs	r0, r3
 800458c:	46bd      	mov	sp, r7
 800458e:	b004      	add	sp, #16
 8004590:	bd80      	pop	{r7, pc}
	...

08004594 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004594:	b580      	push	{r7, lr}
 8004596:	b098      	sub	sp, #96	@ 0x60
 8004598:	af00      	add	r7, sp, #0
 800459a:	60f8      	str	r0, [r7, #12]
 800459c:	60b9      	str	r1, [r7, #8]
 800459e:	1dbb      	adds	r3, r7, #6
 80045a0:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	68ba      	ldr	r2, [r7, #8]
 80045a6:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	1dba      	adds	r2, r7, #6
 80045ac:	215c      	movs	r1, #92	@ 0x5c
 80045ae:	8812      	ldrh	r2, [r2, #0]
 80045b0:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	1dba      	adds	r2, r7, #6
 80045b6:	215e      	movs	r1, #94	@ 0x5e
 80045b8:	8812      	ldrh	r2, [r2, #0]
 80045ba:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	2200      	movs	r2, #0
 80045c0:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	689a      	ldr	r2, [r3, #8]
 80045c6:	2380      	movs	r3, #128	@ 0x80
 80045c8:	015b      	lsls	r3, r3, #5
 80045ca:	429a      	cmp	r2, r3
 80045cc:	d10d      	bne.n	80045ea <UART_Start_Receive_IT+0x56>
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	691b      	ldr	r3, [r3, #16]
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d104      	bne.n	80045e0 <UART_Start_Receive_IT+0x4c>
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	2260      	movs	r2, #96	@ 0x60
 80045da:	497b      	ldr	r1, [pc, #492]	@ (80047c8 <UART_Start_Receive_IT+0x234>)
 80045dc:	5299      	strh	r1, [r3, r2]
 80045de:	e02e      	b.n	800463e <UART_Start_Receive_IT+0xaa>
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	2260      	movs	r2, #96	@ 0x60
 80045e4:	21ff      	movs	r1, #255	@ 0xff
 80045e6:	5299      	strh	r1, [r3, r2]
 80045e8:	e029      	b.n	800463e <UART_Start_Receive_IT+0xaa>
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	689b      	ldr	r3, [r3, #8]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d10d      	bne.n	800460e <UART_Start_Receive_IT+0x7a>
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	691b      	ldr	r3, [r3, #16]
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d104      	bne.n	8004604 <UART_Start_Receive_IT+0x70>
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	2260      	movs	r2, #96	@ 0x60
 80045fe:	21ff      	movs	r1, #255	@ 0xff
 8004600:	5299      	strh	r1, [r3, r2]
 8004602:	e01c      	b.n	800463e <UART_Start_Receive_IT+0xaa>
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	2260      	movs	r2, #96	@ 0x60
 8004608:	217f      	movs	r1, #127	@ 0x7f
 800460a:	5299      	strh	r1, [r3, r2]
 800460c:	e017      	b.n	800463e <UART_Start_Receive_IT+0xaa>
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	689a      	ldr	r2, [r3, #8]
 8004612:	2380      	movs	r3, #128	@ 0x80
 8004614:	055b      	lsls	r3, r3, #21
 8004616:	429a      	cmp	r2, r3
 8004618:	d10d      	bne.n	8004636 <UART_Start_Receive_IT+0xa2>
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	691b      	ldr	r3, [r3, #16]
 800461e:	2b00      	cmp	r3, #0
 8004620:	d104      	bne.n	800462c <UART_Start_Receive_IT+0x98>
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	2260      	movs	r2, #96	@ 0x60
 8004626:	217f      	movs	r1, #127	@ 0x7f
 8004628:	5299      	strh	r1, [r3, r2]
 800462a:	e008      	b.n	800463e <UART_Start_Receive_IT+0xaa>
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	2260      	movs	r2, #96	@ 0x60
 8004630:	213f      	movs	r1, #63	@ 0x3f
 8004632:	5299      	strh	r1, [r3, r2]
 8004634:	e003      	b.n	800463e <UART_Start_Receive_IT+0xaa>
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	2260      	movs	r2, #96	@ 0x60
 800463a:	2100      	movs	r1, #0
 800463c:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	2290      	movs	r2, #144	@ 0x90
 8004642:	2100      	movs	r1, #0
 8004644:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	228c      	movs	r2, #140	@ 0x8c
 800464a:	2122      	movs	r1, #34	@ 0x22
 800464c:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800464e:	f3ef 8310 	mrs	r3, PRIMASK
 8004652:	643b      	str	r3, [r7, #64]	@ 0x40
  return(result);
 8004654:	6c3b      	ldr	r3, [r7, #64]	@ 0x40

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004656:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004658:	2301      	movs	r3, #1
 800465a:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800465c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800465e:	f383 8810 	msr	PRIMASK, r3
}
 8004662:	46c0      	nop			@ (mov r8, r8)
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	689a      	ldr	r2, [r3, #8]
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	2101      	movs	r1, #1
 8004670:	430a      	orrs	r2, r1
 8004672:	609a      	str	r2, [r3, #8]
 8004674:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004676:	64bb      	str	r3, [r7, #72]	@ 0x48
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004678:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800467a:	f383 8810 	msr	PRIMASK, r3
}
 800467e:	46c0      	nop			@ (mov r8, r8)

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8004684:	2380      	movs	r3, #128	@ 0x80
 8004686:	059b      	lsls	r3, r3, #22
 8004688:	429a      	cmp	r2, r3
 800468a:	d150      	bne.n	800472e <UART_Start_Receive_IT+0x19a>
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	2268      	movs	r2, #104	@ 0x68
 8004690:	5a9b      	ldrh	r3, [r3, r2]
 8004692:	1dba      	adds	r2, r7, #6
 8004694:	8812      	ldrh	r2, [r2, #0]
 8004696:	429a      	cmp	r2, r3
 8004698:	d349      	bcc.n	800472e <UART_Start_Receive_IT+0x19a>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	689a      	ldr	r2, [r3, #8]
 800469e:	2380      	movs	r3, #128	@ 0x80
 80046a0:	015b      	lsls	r3, r3, #5
 80046a2:	429a      	cmp	r2, r3
 80046a4:	d107      	bne.n	80046b6 <UART_Start_Receive_IT+0x122>
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	691b      	ldr	r3, [r3, #16]
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d103      	bne.n	80046b6 <UART_Start_Receive_IT+0x122>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	4a46      	ldr	r2, [pc, #280]	@ (80047cc <UART_Start_Receive_IT+0x238>)
 80046b2:	675a      	str	r2, [r3, #116]	@ 0x74
 80046b4:	e002      	b.n	80046bc <UART_Start_Receive_IT+0x128>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	4a45      	ldr	r2, [pc, #276]	@ (80047d0 <UART_Start_Receive_IT+0x23c>)
 80046ba:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	691b      	ldr	r3, [r3, #16]
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d019      	beq.n	80046f8 <UART_Start_Receive_IT+0x164>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80046c4:	f3ef 8310 	mrs	r3, PRIMASK
 80046c8:	637b      	str	r3, [r7, #52]	@ 0x34
  return(result);
 80046ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80046cc:	65bb      	str	r3, [r7, #88]	@ 0x58
 80046ce:	2301      	movs	r3, #1
 80046d0:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046d4:	f383 8810 	msr	PRIMASK, r3
}
 80046d8:	46c0      	nop			@ (mov r8, r8)
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	681a      	ldr	r2, [r3, #0]
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	2180      	movs	r1, #128	@ 0x80
 80046e6:	0049      	lsls	r1, r1, #1
 80046e8:	430a      	orrs	r2, r1
 80046ea:	601a      	str	r2, [r3, #0]
 80046ec:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80046ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80046f2:	f383 8810 	msr	PRIMASK, r3
}
 80046f6:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80046f8:	f3ef 8310 	mrs	r3, PRIMASK
 80046fc:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 80046fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8004700:	657b      	str	r3, [r7, #84]	@ 0x54
 8004702:	2301      	movs	r3, #1
 8004704:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004706:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004708:	f383 8810 	msr	PRIMASK, r3
}
 800470c:	46c0      	nop			@ (mov r8, r8)
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	689a      	ldr	r2, [r3, #8]
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	2180      	movs	r1, #128	@ 0x80
 800471a:	0549      	lsls	r1, r1, #21
 800471c:	430a      	orrs	r2, r1
 800471e:	609a      	str	r2, [r3, #8]
 8004720:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004722:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004724:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004726:	f383 8810 	msr	PRIMASK, r3
}
 800472a:	46c0      	nop			@ (mov r8, r8)
 800472c:	e047      	b.n	80047be <UART_Start_Receive_IT+0x22a>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	689a      	ldr	r2, [r3, #8]
 8004732:	2380      	movs	r3, #128	@ 0x80
 8004734:	015b      	lsls	r3, r3, #5
 8004736:	429a      	cmp	r2, r3
 8004738:	d107      	bne.n	800474a <UART_Start_Receive_IT+0x1b6>
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	691b      	ldr	r3, [r3, #16]
 800473e:	2b00      	cmp	r3, #0
 8004740:	d103      	bne.n	800474a <UART_Start_Receive_IT+0x1b6>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	4a23      	ldr	r2, [pc, #140]	@ (80047d4 <UART_Start_Receive_IT+0x240>)
 8004746:	675a      	str	r2, [r3, #116]	@ 0x74
 8004748:	e002      	b.n	8004750 <UART_Start_Receive_IT+0x1bc>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	4a22      	ldr	r2, [pc, #136]	@ (80047d8 <UART_Start_Receive_IT+0x244>)
 800474e:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	691b      	ldr	r3, [r3, #16]
 8004754:	2b00      	cmp	r3, #0
 8004756:	d019      	beq.n	800478c <UART_Start_Receive_IT+0x1f8>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004758:	f3ef 8310 	mrs	r3, PRIMASK
 800475c:	61fb      	str	r3, [r7, #28]
  return(result);
 800475e:	69fb      	ldr	r3, [r7, #28]
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8004760:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004762:	2301      	movs	r3, #1
 8004764:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004766:	6a3b      	ldr	r3, [r7, #32]
 8004768:	f383 8810 	msr	PRIMASK, r3
}
 800476c:	46c0      	nop			@ (mov r8, r8)
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	681a      	ldr	r2, [r3, #0]
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	2190      	movs	r1, #144	@ 0x90
 800477a:	0049      	lsls	r1, r1, #1
 800477c:	430a      	orrs	r2, r1
 800477e:	601a      	str	r2, [r3, #0]
 8004780:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004782:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004784:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004786:	f383 8810 	msr	PRIMASK, r3
}
 800478a:	e018      	b.n	80047be <UART_Start_Receive_IT+0x22a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800478c:	f3ef 8310 	mrs	r3, PRIMASK
 8004790:	613b      	str	r3, [r7, #16]
  return(result);
 8004792:	693b      	ldr	r3, [r7, #16]
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8004794:	653b      	str	r3, [r7, #80]	@ 0x50
 8004796:	2301      	movs	r3, #1
 8004798:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800479a:	697b      	ldr	r3, [r7, #20]
 800479c:	f383 8810 	msr	PRIMASK, r3
}
 80047a0:	46c0      	nop			@ (mov r8, r8)
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	681a      	ldr	r2, [r3, #0]
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	2120      	movs	r1, #32
 80047ae:	430a      	orrs	r2, r1
 80047b0:	601a      	str	r2, [r3, #0]
 80047b2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80047b4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80047b6:	69bb      	ldr	r3, [r7, #24]
 80047b8:	f383 8810 	msr	PRIMASK, r3
}
 80047bc:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return HAL_OK;
 80047be:	2300      	movs	r3, #0
}
 80047c0:	0018      	movs	r0, r3
 80047c2:	46bd      	mov	sp, r7
 80047c4:	b018      	add	sp, #96	@ 0x60
 80047c6:	bd80      	pop	{r7, pc}
 80047c8:	000001ff 	.word	0x000001ff
 80047cc:	08004ff9 	.word	0x08004ff9
 80047d0:	08004cb9 	.word	0x08004cb9
 80047d4:	08004af5 	.word	0x08004af5
 80047d8:	08004931 	.word	0x08004931

080047dc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80047dc:	b580      	push	{r7, lr}
 80047de:	b08e      	sub	sp, #56	@ 0x38
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80047e4:	f3ef 8310 	mrs	r3, PRIMASK
 80047e8:	617b      	str	r3, [r7, #20]
  return(result);
 80047ea:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80047ec:	637b      	str	r3, [r7, #52]	@ 0x34
 80047ee:	2301      	movs	r3, #1
 80047f0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80047f2:	69bb      	ldr	r3, [r7, #24]
 80047f4:	f383 8810 	msr	PRIMASK, r3
}
 80047f8:	46c0      	nop			@ (mov r8, r8)
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	681a      	ldr	r2, [r3, #0]
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	4926      	ldr	r1, [pc, #152]	@ (80048a0 <UART_EndRxTransfer+0xc4>)
 8004806:	400a      	ands	r2, r1
 8004808:	601a      	str	r2, [r3, #0]
 800480a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800480c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800480e:	69fb      	ldr	r3, [r7, #28]
 8004810:	f383 8810 	msr	PRIMASK, r3
}
 8004814:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004816:	f3ef 8310 	mrs	r3, PRIMASK
 800481a:	623b      	str	r3, [r7, #32]
  return(result);
 800481c:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800481e:	633b      	str	r3, [r7, #48]	@ 0x30
 8004820:	2301      	movs	r3, #1
 8004822:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004824:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004826:	f383 8810 	msr	PRIMASK, r3
}
 800482a:	46c0      	nop			@ (mov r8, r8)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	689a      	ldr	r2, [r3, #8]
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	491b      	ldr	r1, [pc, #108]	@ (80048a4 <UART_EndRxTransfer+0xc8>)
 8004838:	400a      	ands	r2, r1
 800483a:	609a      	str	r2, [r3, #8]
 800483c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800483e:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004840:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004842:	f383 8810 	msr	PRIMASK, r3
}
 8004846:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800484c:	2b01      	cmp	r3, #1
 800484e:	d118      	bne.n	8004882 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004850:	f3ef 8310 	mrs	r3, PRIMASK
 8004854:	60bb      	str	r3, [r7, #8]
  return(result);
 8004856:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004858:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800485a:	2301      	movs	r3, #1
 800485c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	f383 8810 	msr	PRIMASK, r3
}
 8004864:	46c0      	nop			@ (mov r8, r8)
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	681a      	ldr	r2, [r3, #0]
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	2110      	movs	r1, #16
 8004872:	438a      	bics	r2, r1
 8004874:	601a      	str	r2, [r3, #0]
 8004876:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004878:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800487a:	693b      	ldr	r3, [r7, #16]
 800487c:	f383 8810 	msr	PRIMASK, r3
}
 8004880:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	228c      	movs	r2, #140	@ 0x8c
 8004886:	2120      	movs	r1, #32
 8004888:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	2200      	movs	r2, #0
 800488e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2200      	movs	r2, #0
 8004894:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8004896:	46c0      	nop			@ (mov r8, r8)
 8004898:	46bd      	mov	sp, r7
 800489a:	b00e      	add	sp, #56	@ 0x38
 800489c:	bd80      	pop	{r7, pc}
 800489e:	46c0      	nop			@ (mov r8, r8)
 80048a0:	fffffedf 	.word	0xfffffedf
 80048a4:	effffffe 	.word	0xeffffffe

080048a8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80048a8:	b580      	push	{r7, lr}
 80048aa:	b084      	sub	sp, #16
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048b4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	225e      	movs	r2, #94	@ 0x5e
 80048ba:	2100      	movs	r1, #0
 80048bc:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	2256      	movs	r2, #86	@ 0x56
 80048c2:	2100      	movs	r1, #0
 80048c4:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	0018      	movs	r0, r3
 80048ca:	f7ff f9c3 	bl	8003c54 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80048ce:	46c0      	nop			@ (mov r8, r8)
 80048d0:	46bd      	mov	sp, r7
 80048d2:	b004      	add	sp, #16
 80048d4:	bd80      	pop	{r7, pc}

080048d6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80048d6:	b580      	push	{r7, lr}
 80048d8:	b086      	sub	sp, #24
 80048da:	af00      	add	r7, sp, #0
 80048dc:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80048de:	f3ef 8310 	mrs	r3, PRIMASK
 80048e2:	60bb      	str	r3, [r7, #8]
  return(result);
 80048e4:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80048e6:	617b      	str	r3, [r7, #20]
 80048e8:	2301      	movs	r3, #1
 80048ea:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	f383 8810 	msr	PRIMASK, r3
}
 80048f2:	46c0      	nop			@ (mov r8, r8)
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	681a      	ldr	r2, [r3, #0]
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	2140      	movs	r1, #64	@ 0x40
 8004900:	438a      	bics	r2, r1
 8004902:	601a      	str	r2, [r3, #0]
 8004904:	697b      	ldr	r3, [r7, #20]
 8004906:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004908:	693b      	ldr	r3, [r7, #16]
 800490a:	f383 8810 	msr	PRIMASK, r3
}
 800490e:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2288      	movs	r2, #136	@ 0x88
 8004914:	2120      	movs	r1, #32
 8004916:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2200      	movs	r2, #0
 800491c:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	0018      	movs	r0, r3
 8004922:	f7ff f98f 	bl	8003c44 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004926:	46c0      	nop			@ (mov r8, r8)
 8004928:	46bd      	mov	sp, r7
 800492a:	b006      	add	sp, #24
 800492c:	bd80      	pop	{r7, pc}
	...

08004930 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004930:	b580      	push	{r7, lr}
 8004932:	b094      	sub	sp, #80	@ 0x50
 8004934:	af00      	add	r7, sp, #0
 8004936:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8004938:	204e      	movs	r0, #78	@ 0x4e
 800493a:	183b      	adds	r3, r7, r0
 800493c:	687a      	ldr	r2, [r7, #4]
 800493e:	2160      	movs	r1, #96	@ 0x60
 8004940:	5a52      	ldrh	r2, [r2, r1]
 8004942:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	228c      	movs	r2, #140	@ 0x8c
 8004948:	589b      	ldr	r3, [r3, r2]
 800494a:	2b22      	cmp	r3, #34	@ 0x22
 800494c:	d000      	beq.n	8004950 <UART_RxISR_8BIT+0x20>
 800494e:	e0bf      	b.n	8004ad0 <UART_RxISR_8BIT+0x1a0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004956:	214c      	movs	r1, #76	@ 0x4c
 8004958:	187b      	adds	r3, r7, r1
 800495a:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800495c:	187b      	adds	r3, r7, r1
 800495e:	881b      	ldrh	r3, [r3, #0]
 8004960:	b2da      	uxtb	r2, r3
 8004962:	183b      	adds	r3, r7, r0
 8004964:	881b      	ldrh	r3, [r3, #0]
 8004966:	b2d9      	uxtb	r1, r3
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800496c:	400a      	ands	r2, r1
 800496e:	b2d2      	uxtb	r2, r2
 8004970:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004976:	1c5a      	adds	r2, r3, #1
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	225e      	movs	r2, #94	@ 0x5e
 8004980:	5a9b      	ldrh	r3, [r3, r2]
 8004982:	b29b      	uxth	r3, r3
 8004984:	3b01      	subs	r3, #1
 8004986:	b299      	uxth	r1, r3
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	225e      	movs	r2, #94	@ 0x5e
 800498c:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	225e      	movs	r2, #94	@ 0x5e
 8004992:	5a9b      	ldrh	r3, [r3, r2]
 8004994:	b29b      	uxth	r3, r3
 8004996:	2b00      	cmp	r3, #0
 8004998:	d000      	beq.n	800499c <UART_RxISR_8BIT+0x6c>
 800499a:	e0a1      	b.n	8004ae0 <UART_RxISR_8BIT+0x1b0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800499c:	f3ef 8310 	mrs	r3, PRIMASK
 80049a0:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80049a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80049a4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80049a6:	2301      	movs	r3, #1
 80049a8:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80049aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049ac:	f383 8810 	msr	PRIMASK, r3
}
 80049b0:	46c0      	nop			@ (mov r8, r8)
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	681a      	ldr	r2, [r3, #0]
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	494a      	ldr	r1, [pc, #296]	@ (8004ae8 <UART_RxISR_8BIT+0x1b8>)
 80049be:	400a      	ands	r2, r1
 80049c0:	601a      	str	r2, [r3, #0]
 80049c2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80049c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80049c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80049c8:	f383 8810 	msr	PRIMASK, r3
}
 80049cc:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80049ce:	f3ef 8310 	mrs	r3, PRIMASK
 80049d2:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 80049d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049d6:	647b      	str	r3, [r7, #68]	@ 0x44
 80049d8:	2301      	movs	r3, #1
 80049da:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80049dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80049de:	f383 8810 	msr	PRIMASK, r3
}
 80049e2:	46c0      	nop			@ (mov r8, r8)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	689a      	ldr	r2, [r3, #8]
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	2101      	movs	r1, #1
 80049f0:	438a      	bics	r2, r1
 80049f2:	609a      	str	r2, [r3, #8]
 80049f4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80049f6:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80049f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049fa:	f383 8810 	msr	PRIMASK, r3
}
 80049fe:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	228c      	movs	r2, #140	@ 0x8c
 8004a04:	2120      	movs	r1, #32
 8004a06:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	2200      	movs	r2, #0
 8004a12:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	4a34      	ldr	r2, [pc, #208]	@ (8004aec <UART_RxISR_8BIT+0x1bc>)
 8004a1a:	4293      	cmp	r3, r2
 8004a1c:	d01f      	beq.n	8004a5e <UART_RxISR_8BIT+0x12e>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	685a      	ldr	r2, [r3, #4]
 8004a24:	2380      	movs	r3, #128	@ 0x80
 8004a26:	041b      	lsls	r3, r3, #16
 8004a28:	4013      	ands	r3, r2
 8004a2a:	d018      	beq.n	8004a5e <UART_RxISR_8BIT+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004a2c:	f3ef 8310 	mrs	r3, PRIMASK
 8004a30:	61bb      	str	r3, [r7, #24]
  return(result);
 8004a32:	69bb      	ldr	r3, [r7, #24]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004a34:	643b      	str	r3, [r7, #64]	@ 0x40
 8004a36:	2301      	movs	r3, #1
 8004a38:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a3a:	69fb      	ldr	r3, [r7, #28]
 8004a3c:	f383 8810 	msr	PRIMASK, r3
}
 8004a40:	46c0      	nop			@ (mov r8, r8)
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	681a      	ldr	r2, [r3, #0]
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	4928      	ldr	r1, [pc, #160]	@ (8004af0 <UART_RxISR_8BIT+0x1c0>)
 8004a4e:	400a      	ands	r2, r1
 8004a50:	601a      	str	r2, [r3, #0]
 8004a52:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004a54:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a56:	6a3b      	ldr	r3, [r7, #32]
 8004a58:	f383 8810 	msr	PRIMASK, r3
}
 8004a5c:	46c0      	nop			@ (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004a62:	2b01      	cmp	r3, #1
 8004a64:	d12f      	bne.n	8004ac6 <UART_RxISR_8BIT+0x196>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	2200      	movs	r2, #0
 8004a6a:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004a6c:	f3ef 8310 	mrs	r3, PRIMASK
 8004a70:	60fb      	str	r3, [r7, #12]
  return(result);
 8004a72:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a74:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004a76:	2301      	movs	r3, #1
 8004a78:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a7a:	693b      	ldr	r3, [r7, #16]
 8004a7c:	f383 8810 	msr	PRIMASK, r3
}
 8004a80:	46c0      	nop			@ (mov r8, r8)
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	681a      	ldr	r2, [r3, #0]
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	2110      	movs	r1, #16
 8004a8e:	438a      	bics	r2, r1
 8004a90:	601a      	str	r2, [r3, #0]
 8004a92:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004a94:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a96:	697b      	ldr	r3, [r7, #20]
 8004a98:	f383 8810 	msr	PRIMASK, r3
}
 8004a9c:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	69db      	ldr	r3, [r3, #28]
 8004aa4:	2210      	movs	r2, #16
 8004aa6:	4013      	ands	r3, r2
 8004aa8:	2b10      	cmp	r3, #16
 8004aaa:	d103      	bne.n	8004ab4 <UART_RxISR_8BIT+0x184>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	2210      	movs	r2, #16
 8004ab2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	225c      	movs	r2, #92	@ 0x5c
 8004ab8:	5a9a      	ldrh	r2, [r3, r2]
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	0011      	movs	r1, r2
 8004abe:	0018      	movs	r0, r3
 8004ac0:	f7ff f8d0 	bl	8003c64 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004ac4:	e00c      	b.n	8004ae0 <UART_RxISR_8BIT+0x1b0>
        HAL_UART_RxCpltCallback(huart);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	0018      	movs	r0, r3
 8004aca:	f7fb ff3b 	bl	8000944 <HAL_UART_RxCpltCallback>
}
 8004ace:	e007      	b.n	8004ae0 <UART_RxISR_8BIT+0x1b0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	699a      	ldr	r2, [r3, #24]
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	2108      	movs	r1, #8
 8004adc:	430a      	orrs	r2, r1
 8004ade:	619a      	str	r2, [r3, #24]
}
 8004ae0:	46c0      	nop			@ (mov r8, r8)
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	b014      	add	sp, #80	@ 0x50
 8004ae6:	bd80      	pop	{r7, pc}
 8004ae8:	fffffedf 	.word	0xfffffedf
 8004aec:	40008000 	.word	0x40008000
 8004af0:	fbffffff 	.word	0xfbffffff

08004af4 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004af4:	b580      	push	{r7, lr}
 8004af6:	b094      	sub	sp, #80	@ 0x50
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8004afc:	204e      	movs	r0, #78	@ 0x4e
 8004afe:	183b      	adds	r3, r7, r0
 8004b00:	687a      	ldr	r2, [r7, #4]
 8004b02:	2160      	movs	r1, #96	@ 0x60
 8004b04:	5a52      	ldrh	r2, [r2, r1]
 8004b06:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	228c      	movs	r2, #140	@ 0x8c
 8004b0c:	589b      	ldr	r3, [r3, r2]
 8004b0e:	2b22      	cmp	r3, #34	@ 0x22
 8004b10:	d000      	beq.n	8004b14 <UART_RxISR_16BIT+0x20>
 8004b12:	e0bf      	b.n	8004c94 <UART_RxISR_16BIT+0x1a0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004b1a:	214c      	movs	r1, #76	@ 0x4c
 8004b1c:	187b      	adds	r3, r7, r1
 8004b1e:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b24:	64bb      	str	r3, [r7, #72]	@ 0x48
    *tmp = (uint16_t)(uhdata & uhMask);
 8004b26:	187b      	adds	r3, r7, r1
 8004b28:	183a      	adds	r2, r7, r0
 8004b2a:	881b      	ldrh	r3, [r3, #0]
 8004b2c:	8812      	ldrh	r2, [r2, #0]
 8004b2e:	4013      	ands	r3, r2
 8004b30:	b29a      	uxth	r2, r3
 8004b32:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004b34:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b3a:	1c9a      	adds	r2, r3, #2
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	225e      	movs	r2, #94	@ 0x5e
 8004b44:	5a9b      	ldrh	r3, [r3, r2]
 8004b46:	b29b      	uxth	r3, r3
 8004b48:	3b01      	subs	r3, #1
 8004b4a:	b299      	uxth	r1, r3
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	225e      	movs	r2, #94	@ 0x5e
 8004b50:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	225e      	movs	r2, #94	@ 0x5e
 8004b56:	5a9b      	ldrh	r3, [r3, r2]
 8004b58:	b29b      	uxth	r3, r3
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d000      	beq.n	8004b60 <UART_RxISR_16BIT+0x6c>
 8004b5e:	e0a1      	b.n	8004ca4 <UART_RxISR_16BIT+0x1b0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004b60:	f3ef 8310 	mrs	r3, PRIMASK
 8004b64:	623b      	str	r3, [r7, #32]
  return(result);
 8004b66:	6a3b      	ldr	r3, [r7, #32]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004b68:	647b      	str	r3, [r7, #68]	@ 0x44
 8004b6a:	2301      	movs	r3, #1
 8004b6c:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b70:	f383 8810 	msr	PRIMASK, r3
}
 8004b74:	46c0      	nop			@ (mov r8, r8)
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	681a      	ldr	r2, [r3, #0]
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	494a      	ldr	r1, [pc, #296]	@ (8004cac <UART_RxISR_16BIT+0x1b8>)
 8004b82:	400a      	ands	r2, r1
 8004b84:	601a      	str	r2, [r3, #0]
 8004b86:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004b88:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b8c:	f383 8810 	msr	PRIMASK, r3
}
 8004b90:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004b92:	f3ef 8310 	mrs	r3, PRIMASK
 8004b96:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 8004b98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b9a:	643b      	str	r3, [r7, #64]	@ 0x40
 8004b9c:	2301      	movs	r3, #1
 8004b9e:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ba0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ba2:	f383 8810 	msr	PRIMASK, r3
}
 8004ba6:	46c0      	nop			@ (mov r8, r8)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	689a      	ldr	r2, [r3, #8]
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	2101      	movs	r1, #1
 8004bb4:	438a      	bics	r2, r1
 8004bb6:	609a      	str	r2, [r3, #8]
 8004bb8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004bba:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004bbc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004bbe:	f383 8810 	msr	PRIMASK, r3
}
 8004bc2:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	228c      	movs	r2, #140	@ 0x8c
 8004bc8:	2120      	movs	r1, #32
 8004bca:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2200      	movs	r2, #0
 8004bd0:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	4a34      	ldr	r2, [pc, #208]	@ (8004cb0 <UART_RxISR_16BIT+0x1bc>)
 8004bde:	4293      	cmp	r3, r2
 8004be0:	d01f      	beq.n	8004c22 <UART_RxISR_16BIT+0x12e>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	685a      	ldr	r2, [r3, #4]
 8004be8:	2380      	movs	r3, #128	@ 0x80
 8004bea:	041b      	lsls	r3, r3, #16
 8004bec:	4013      	ands	r3, r2
 8004bee:	d018      	beq.n	8004c22 <UART_RxISR_16BIT+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004bf0:	f3ef 8310 	mrs	r3, PRIMASK
 8004bf4:	617b      	str	r3, [r7, #20]
  return(result);
 8004bf6:	697b      	ldr	r3, [r7, #20]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004bf8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004bfa:	2301      	movs	r3, #1
 8004bfc:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004bfe:	69bb      	ldr	r3, [r7, #24]
 8004c00:	f383 8810 	msr	PRIMASK, r3
}
 8004c04:	46c0      	nop			@ (mov r8, r8)
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	681a      	ldr	r2, [r3, #0]
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	4928      	ldr	r1, [pc, #160]	@ (8004cb4 <UART_RxISR_16BIT+0x1c0>)
 8004c12:	400a      	ands	r2, r1
 8004c14:	601a      	str	r2, [r3, #0]
 8004c16:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004c18:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c1a:	69fb      	ldr	r3, [r7, #28]
 8004c1c:	f383 8810 	msr	PRIMASK, r3
}
 8004c20:	46c0      	nop			@ (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004c26:	2b01      	cmp	r3, #1
 8004c28:	d12f      	bne.n	8004c8a <UART_RxISR_16BIT+0x196>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	2200      	movs	r2, #0
 8004c2e:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004c30:	f3ef 8310 	mrs	r3, PRIMASK
 8004c34:	60bb      	str	r3, [r7, #8]
  return(result);
 8004c36:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c38:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004c3a:	2301      	movs	r3, #1
 8004c3c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	f383 8810 	msr	PRIMASK, r3
}
 8004c44:	46c0      	nop			@ (mov r8, r8)
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	681a      	ldr	r2, [r3, #0]
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	2110      	movs	r1, #16
 8004c52:	438a      	bics	r2, r1
 8004c54:	601a      	str	r2, [r3, #0]
 8004c56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c58:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c5a:	693b      	ldr	r3, [r7, #16]
 8004c5c:	f383 8810 	msr	PRIMASK, r3
}
 8004c60:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	69db      	ldr	r3, [r3, #28]
 8004c68:	2210      	movs	r2, #16
 8004c6a:	4013      	ands	r3, r2
 8004c6c:	2b10      	cmp	r3, #16
 8004c6e:	d103      	bne.n	8004c78 <UART_RxISR_16BIT+0x184>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	2210      	movs	r2, #16
 8004c76:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	225c      	movs	r2, #92	@ 0x5c
 8004c7c:	5a9a      	ldrh	r2, [r3, r2]
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	0011      	movs	r1, r2
 8004c82:	0018      	movs	r0, r3
 8004c84:	f7fe ffee 	bl	8003c64 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004c88:	e00c      	b.n	8004ca4 <UART_RxISR_16BIT+0x1b0>
        HAL_UART_RxCpltCallback(huart);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	0018      	movs	r0, r3
 8004c8e:	f7fb fe59 	bl	8000944 <HAL_UART_RxCpltCallback>
}
 8004c92:	e007      	b.n	8004ca4 <UART_RxISR_16BIT+0x1b0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	699a      	ldr	r2, [r3, #24]
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	2108      	movs	r1, #8
 8004ca0:	430a      	orrs	r2, r1
 8004ca2:	619a      	str	r2, [r3, #24]
}
 8004ca4:	46c0      	nop			@ (mov r8, r8)
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	b014      	add	sp, #80	@ 0x50
 8004caa:	bd80      	pop	{r7, pc}
 8004cac:	fffffedf 	.word	0xfffffedf
 8004cb0:	40008000 	.word	0x40008000
 8004cb4:	fbffffff 	.word	0xfbffffff

08004cb8 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8004cb8:	b580      	push	{r7, lr}
 8004cba:	b0a0      	sub	sp, #128	@ 0x80
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8004cc0:	237a      	movs	r3, #122	@ 0x7a
 8004cc2:	18fb      	adds	r3, r7, r3
 8004cc4:	687a      	ldr	r2, [r7, #4]
 8004cc6:	2160      	movs	r1, #96	@ 0x60
 8004cc8:	5a52      	ldrh	r2, [r2, r1]
 8004cca:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	69db      	ldr	r3, [r3, #28]
 8004cd2:	67fb      	str	r3, [r7, #124]	@ 0x7c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	677b      	str	r3, [r7, #116]	@ 0x74
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	689b      	ldr	r3, [r3, #8]
 8004ce2:	673b      	str	r3, [r7, #112]	@ 0x70

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	228c      	movs	r2, #140	@ 0x8c
 8004ce8:	589b      	ldr	r3, [r3, r2]
 8004cea:	2b22      	cmp	r3, #34	@ 0x22
 8004cec:	d000      	beq.n	8004cf0 <UART_RxISR_8BIT_FIFOEN+0x38>
 8004cee:	e16a      	b.n	8004fc6 <UART_RxISR_8BIT_FIFOEN+0x30e>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8004cf0:	236e      	movs	r3, #110	@ 0x6e
 8004cf2:	18fb      	adds	r3, r7, r3
 8004cf4:	687a      	ldr	r2, [r7, #4]
 8004cf6:	2168      	movs	r1, #104	@ 0x68
 8004cf8:	5a52      	ldrh	r2, [r2, r1]
 8004cfa:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8004cfc:	e111      	b.n	8004f22 <UART_RxISR_8BIT_FIFOEN+0x26a>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004d04:	216c      	movs	r1, #108	@ 0x6c
 8004d06:	187b      	adds	r3, r7, r1
 8004d08:	801a      	strh	r2, [r3, #0]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004d0a:	187b      	adds	r3, r7, r1
 8004d0c:	881b      	ldrh	r3, [r3, #0]
 8004d0e:	b2da      	uxtb	r2, r3
 8004d10:	237a      	movs	r3, #122	@ 0x7a
 8004d12:	18fb      	adds	r3, r7, r3
 8004d14:	881b      	ldrh	r3, [r3, #0]
 8004d16:	b2d9      	uxtb	r1, r3
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d1c:	400a      	ands	r2, r1
 8004d1e:	b2d2      	uxtb	r2, r2
 8004d20:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d26:	1c5a      	adds	r2, r3, #1
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	225e      	movs	r2, #94	@ 0x5e
 8004d30:	5a9b      	ldrh	r3, [r3, r2]
 8004d32:	b29b      	uxth	r3, r3
 8004d34:	3b01      	subs	r3, #1
 8004d36:	b299      	uxth	r1, r3
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	225e      	movs	r2, #94	@ 0x5e
 8004d3c:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	69db      	ldr	r3, [r3, #28]
 8004d44:	67fb      	str	r3, [r7, #124]	@ 0x7c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8004d46:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004d48:	2207      	movs	r2, #7
 8004d4a:	4013      	ands	r3, r2
 8004d4c:	d049      	beq.n	8004de2 <UART_RxISR_8BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004d4e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004d50:	2201      	movs	r2, #1
 8004d52:	4013      	ands	r3, r2
 8004d54:	d010      	beq.n	8004d78 <UART_RxISR_8BIT_FIFOEN+0xc0>
 8004d56:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8004d58:	2380      	movs	r3, #128	@ 0x80
 8004d5a:	005b      	lsls	r3, r3, #1
 8004d5c:	4013      	ands	r3, r2
 8004d5e:	d00b      	beq.n	8004d78 <UART_RxISR_8BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	2201      	movs	r2, #1
 8004d66:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2290      	movs	r2, #144	@ 0x90
 8004d6c:	589b      	ldr	r3, [r3, r2]
 8004d6e:	2201      	movs	r2, #1
 8004d70:	431a      	orrs	r2, r3
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	2190      	movs	r1, #144	@ 0x90
 8004d76:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004d78:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004d7a:	2202      	movs	r2, #2
 8004d7c:	4013      	ands	r3, r2
 8004d7e:	d00f      	beq.n	8004da0 <UART_RxISR_8BIT_FIFOEN+0xe8>
 8004d80:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004d82:	2201      	movs	r2, #1
 8004d84:	4013      	ands	r3, r2
 8004d86:	d00b      	beq.n	8004da0 <UART_RxISR_8BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	2202      	movs	r2, #2
 8004d8e:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2290      	movs	r2, #144	@ 0x90
 8004d94:	589b      	ldr	r3, [r3, r2]
 8004d96:	2204      	movs	r2, #4
 8004d98:	431a      	orrs	r2, r3
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	2190      	movs	r1, #144	@ 0x90
 8004d9e:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004da0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004da2:	2204      	movs	r2, #4
 8004da4:	4013      	ands	r3, r2
 8004da6:	d00f      	beq.n	8004dc8 <UART_RxISR_8BIT_FIFOEN+0x110>
 8004da8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004daa:	2201      	movs	r2, #1
 8004dac:	4013      	ands	r3, r2
 8004dae:	d00b      	beq.n	8004dc8 <UART_RxISR_8BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	2204      	movs	r2, #4
 8004db6:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2290      	movs	r2, #144	@ 0x90
 8004dbc:	589b      	ldr	r3, [r3, r2]
 8004dbe:	2202      	movs	r2, #2
 8004dc0:	431a      	orrs	r2, r3
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	2190      	movs	r1, #144	@ 0x90
 8004dc6:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2290      	movs	r2, #144	@ 0x90
 8004dcc:	589b      	ldr	r3, [r3, r2]
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d007      	beq.n	8004de2 <UART_RxISR_8BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	0018      	movs	r0, r3
 8004dd6:	f7fe ff3d 	bl	8003c54 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	2290      	movs	r2, #144	@ 0x90
 8004dde:	2100      	movs	r1, #0
 8004de0:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	225e      	movs	r2, #94	@ 0x5e
 8004de6:	5a9b      	ldrh	r3, [r3, r2]
 8004de8:	b29b      	uxth	r3, r3
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d000      	beq.n	8004df0 <UART_RxISR_8BIT_FIFOEN+0x138>
 8004dee:	e098      	b.n	8004f22 <UART_RxISR_8BIT_FIFOEN+0x26a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004df0:	f3ef 8310 	mrs	r3, PRIMASK
 8004df4:	63bb      	str	r3, [r7, #56]	@ 0x38
  return(result);
 8004df6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004df8:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004dfa:	2301      	movs	r3, #1
 8004dfc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004dfe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004e00:	f383 8810 	msr	PRIMASK, r3
}
 8004e04:	46c0      	nop			@ (mov r8, r8)
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	681a      	ldr	r2, [r3, #0]
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	4973      	ldr	r1, [pc, #460]	@ (8004fe0 <UART_RxISR_8BIT_FIFOEN+0x328>)
 8004e12:	400a      	ands	r2, r1
 8004e14:	601a      	str	r2, [r3, #0]
 8004e16:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004e18:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e1a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004e1c:	f383 8810 	msr	PRIMASK, r3
}
 8004e20:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004e22:	f3ef 8310 	mrs	r3, PRIMASK
 8004e26:	647b      	str	r3, [r7, #68]	@ 0x44
  return(result);
 8004e28:	6c7b      	ldr	r3, [r7, #68]	@ 0x44

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004e2a:	667b      	str	r3, [r7, #100]	@ 0x64
 8004e2c:	2301      	movs	r3, #1
 8004e2e:	64bb      	str	r3, [r7, #72]	@ 0x48
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e30:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004e32:	f383 8810 	msr	PRIMASK, r3
}
 8004e36:	46c0      	nop			@ (mov r8, r8)
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	689a      	ldr	r2, [r3, #8]
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	4968      	ldr	r1, [pc, #416]	@ (8004fe4 <UART_RxISR_8BIT_FIFOEN+0x32c>)
 8004e44:	400a      	ands	r2, r1
 8004e46:	609a      	str	r2, [r3, #8]
 8004e48:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004e4a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e4c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004e4e:	f383 8810 	msr	PRIMASK, r3
}
 8004e52:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	228c      	movs	r2, #140	@ 0x8c
 8004e58:	2120      	movs	r1, #32
 8004e5a:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2200      	movs	r2, #0
 8004e60:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	2200      	movs	r2, #0
 8004e66:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	4a5e      	ldr	r2, [pc, #376]	@ (8004fe8 <UART_RxISR_8BIT_FIFOEN+0x330>)
 8004e6e:	4293      	cmp	r3, r2
 8004e70:	d01f      	beq.n	8004eb2 <UART_RxISR_8BIT_FIFOEN+0x1fa>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	685a      	ldr	r2, [r3, #4]
 8004e78:	2380      	movs	r3, #128	@ 0x80
 8004e7a:	041b      	lsls	r3, r3, #16
 8004e7c:	4013      	ands	r3, r2
 8004e7e:	d018      	beq.n	8004eb2 <UART_RxISR_8BIT_FIFOEN+0x1fa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004e80:	f3ef 8310 	mrs	r3, PRIMASK
 8004e84:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 8004e86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004e88:	663b      	str	r3, [r7, #96]	@ 0x60
 8004e8a:	2301      	movs	r3, #1
 8004e8c:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e90:	f383 8810 	msr	PRIMASK, r3
}
 8004e94:	46c0      	nop			@ (mov r8, r8)
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	681a      	ldr	r2, [r3, #0]
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	4952      	ldr	r1, [pc, #328]	@ (8004fec <UART_RxISR_8BIT_FIFOEN+0x334>)
 8004ea2:	400a      	ands	r2, r1
 8004ea4:	601a      	str	r2, [r3, #0]
 8004ea6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004ea8:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004eaa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004eac:	f383 8810 	msr	PRIMASK, r3
}
 8004eb0:	46c0      	nop			@ (mov r8, r8)
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004eb6:	2b01      	cmp	r3, #1
 8004eb8:	d12f      	bne.n	8004f1a <UART_RxISR_8BIT_FIFOEN+0x262>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	2200      	movs	r2, #0
 8004ebe:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ec0:	f3ef 8310 	mrs	r3, PRIMASK
 8004ec4:	623b      	str	r3, [r7, #32]
  return(result);
 8004ec6:	6a3b      	ldr	r3, [r7, #32]

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ec8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004eca:	2301      	movs	r3, #1
 8004ecc:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ece:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ed0:	f383 8810 	msr	PRIMASK, r3
}
 8004ed4:	46c0      	nop			@ (mov r8, r8)
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	681a      	ldr	r2, [r3, #0]
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	2110      	movs	r1, #16
 8004ee2:	438a      	bics	r2, r1
 8004ee4:	601a      	str	r2, [r3, #0]
 8004ee6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004ee8:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004eea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004eec:	f383 8810 	msr	PRIMASK, r3
}
 8004ef0:	46c0      	nop			@ (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	69db      	ldr	r3, [r3, #28]
 8004ef8:	2210      	movs	r2, #16
 8004efa:	4013      	ands	r3, r2
 8004efc:	2b10      	cmp	r3, #16
 8004efe:	d103      	bne.n	8004f08 <UART_RxISR_8BIT_FIFOEN+0x250>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	2210      	movs	r2, #16
 8004f06:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	225c      	movs	r2, #92	@ 0x5c
 8004f0c:	5a9a      	ldrh	r2, [r3, r2]
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	0011      	movs	r1, r2
 8004f12:	0018      	movs	r0, r3
 8004f14:	f7fe fea6 	bl	8003c64 <HAL_UARTEx_RxEventCallback>
 8004f18:	e003      	b.n	8004f22 <UART_RxISR_8BIT_FIFOEN+0x26a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	0018      	movs	r0, r3
 8004f1e:	f7fb fd11 	bl	8000944 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8004f22:	236e      	movs	r3, #110	@ 0x6e
 8004f24:	18fb      	adds	r3, r7, r3
 8004f26:	881b      	ldrh	r3, [r3, #0]
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d004      	beq.n	8004f36 <UART_RxISR_8BIT_FIFOEN+0x27e>
 8004f2c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004f2e:	2220      	movs	r2, #32
 8004f30:	4013      	ands	r3, r2
 8004f32:	d000      	beq.n	8004f36 <UART_RxISR_8BIT_FIFOEN+0x27e>
 8004f34:	e6e3      	b.n	8004cfe <UART_RxISR_8BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8004f36:	205a      	movs	r0, #90	@ 0x5a
 8004f38:	183b      	adds	r3, r7, r0
 8004f3a:	687a      	ldr	r2, [r7, #4]
 8004f3c:	215e      	movs	r1, #94	@ 0x5e
 8004f3e:	5a52      	ldrh	r2, [r2, r1]
 8004f40:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8004f42:	0001      	movs	r1, r0
 8004f44:	187b      	adds	r3, r7, r1
 8004f46:	881b      	ldrh	r3, [r3, #0]
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d044      	beq.n	8004fd6 <UART_RxISR_8BIT_FIFOEN+0x31e>
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2268      	movs	r2, #104	@ 0x68
 8004f50:	5a9b      	ldrh	r3, [r3, r2]
 8004f52:	187a      	adds	r2, r7, r1
 8004f54:	8812      	ldrh	r2, [r2, #0]
 8004f56:	429a      	cmp	r2, r3
 8004f58:	d23d      	bcs.n	8004fd6 <UART_RxISR_8BIT_FIFOEN+0x31e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004f5a:	f3ef 8310 	mrs	r3, PRIMASK
 8004f5e:	60bb      	str	r3, [r7, #8]
  return(result);
 8004f60:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8004f62:	657b      	str	r3, [r7, #84]	@ 0x54
 8004f64:	2301      	movs	r3, #1
 8004f66:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	f383 8810 	msr	PRIMASK, r3
}
 8004f6e:	46c0      	nop			@ (mov r8, r8)
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	689a      	ldr	r2, [r3, #8]
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	491d      	ldr	r1, [pc, #116]	@ (8004ff0 <UART_RxISR_8BIT_FIFOEN+0x338>)
 8004f7c:	400a      	ands	r2, r1
 8004f7e:	609a      	str	r2, [r3, #8]
 8004f80:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004f82:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f84:	693b      	ldr	r3, [r7, #16]
 8004f86:	f383 8810 	msr	PRIMASK, r3
}
 8004f8a:	46c0      	nop			@ (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	4a19      	ldr	r2, [pc, #100]	@ (8004ff4 <UART_RxISR_8BIT_FIFOEN+0x33c>)
 8004f90:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004f92:	f3ef 8310 	mrs	r3, PRIMASK
 8004f96:	617b      	str	r3, [r7, #20]
  return(result);
 8004f98:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8004f9a:	653b      	str	r3, [r7, #80]	@ 0x50
 8004f9c:	2301      	movs	r3, #1
 8004f9e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004fa0:	69bb      	ldr	r3, [r7, #24]
 8004fa2:	f383 8810 	msr	PRIMASK, r3
}
 8004fa6:	46c0      	nop			@ (mov r8, r8)
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	681a      	ldr	r2, [r3, #0]
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	2120      	movs	r1, #32
 8004fb4:	430a      	orrs	r2, r1
 8004fb6:	601a      	str	r2, [r3, #0]
 8004fb8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004fba:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004fbc:	69fb      	ldr	r3, [r7, #28]
 8004fbe:	f383 8810 	msr	PRIMASK, r3
}
 8004fc2:	46c0      	nop			@ (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004fc4:	e007      	b.n	8004fd6 <UART_RxISR_8BIT_FIFOEN+0x31e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	699a      	ldr	r2, [r3, #24]
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	2108      	movs	r1, #8
 8004fd2:	430a      	orrs	r2, r1
 8004fd4:	619a      	str	r2, [r3, #24]
}
 8004fd6:	46c0      	nop			@ (mov r8, r8)
 8004fd8:	46bd      	mov	sp, r7
 8004fda:	b020      	add	sp, #128	@ 0x80
 8004fdc:	bd80      	pop	{r7, pc}
 8004fde:	46c0      	nop			@ (mov r8, r8)
 8004fe0:	fffffeff 	.word	0xfffffeff
 8004fe4:	effffffe 	.word	0xeffffffe
 8004fe8:	40008000 	.word	0x40008000
 8004fec:	fbffffff 	.word	0xfbffffff
 8004ff0:	efffffff 	.word	0xefffffff
 8004ff4:	08004931 	.word	0x08004931

08004ff8 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8004ff8:	b580      	push	{r7, lr}
 8004ffa:	b0a2      	sub	sp, #136	@ 0x88
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8005000:	2382      	movs	r3, #130	@ 0x82
 8005002:	18fb      	adds	r3, r7, r3
 8005004:	687a      	ldr	r2, [r7, #4]
 8005006:	2160      	movs	r1, #96	@ 0x60
 8005008:	5a52      	ldrh	r2, [r2, r1]
 800500a:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	69db      	ldr	r3, [r3, #28]
 8005012:	2284      	movs	r2, #132	@ 0x84
 8005014:	18ba      	adds	r2, r7, r2
 8005016:	6013      	str	r3, [r2, #0]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	67fb      	str	r3, [r7, #124]	@ 0x7c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	689b      	ldr	r3, [r3, #8]
 8005026:	67bb      	str	r3, [r7, #120]	@ 0x78

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	228c      	movs	r2, #140	@ 0x8c
 800502c:	589b      	ldr	r3, [r3, r2]
 800502e:	2b22      	cmp	r3, #34	@ 0x22
 8005030:	d000      	beq.n	8005034 <UART_RxISR_16BIT_FIFOEN+0x3c>
 8005032:	e174      	b.n	800531e <UART_RxISR_16BIT_FIFOEN+0x326>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8005034:	2376      	movs	r3, #118	@ 0x76
 8005036:	18fb      	adds	r3, r7, r3
 8005038:	687a      	ldr	r2, [r7, #4]
 800503a:	2168      	movs	r1, #104	@ 0x68
 800503c:	5a52      	ldrh	r2, [r2, r1]
 800503e:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005040:	e119      	b.n	8005276 <UART_RxISR_16BIT_FIFOEN+0x27e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005048:	2174      	movs	r1, #116	@ 0x74
 800504a:	187b      	adds	r3, r7, r1
 800504c:	801a      	strh	r2, [r3, #0]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005052:	673b      	str	r3, [r7, #112]	@ 0x70
      *tmp = (uint16_t)(uhdata & uhMask);
 8005054:	187b      	adds	r3, r7, r1
 8005056:	2282      	movs	r2, #130	@ 0x82
 8005058:	18ba      	adds	r2, r7, r2
 800505a:	881b      	ldrh	r3, [r3, #0]
 800505c:	8812      	ldrh	r2, [r2, #0]
 800505e:	4013      	ands	r3, r2
 8005060:	b29a      	uxth	r2, r3
 8005062:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005064:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800506a:	1c9a      	adds	r2, r3, #2
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	225e      	movs	r2, #94	@ 0x5e
 8005074:	5a9b      	ldrh	r3, [r3, r2]
 8005076:	b29b      	uxth	r3, r3
 8005078:	3b01      	subs	r3, #1
 800507a:	b299      	uxth	r1, r3
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	225e      	movs	r2, #94	@ 0x5e
 8005080:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	69db      	ldr	r3, [r3, #28]
 8005088:	2184      	movs	r1, #132	@ 0x84
 800508a:	187a      	adds	r2, r7, r1
 800508c:	6013      	str	r3, [r2, #0]

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800508e:	187b      	adds	r3, r7, r1
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	2207      	movs	r2, #7
 8005094:	4013      	ands	r3, r2
 8005096:	d04e      	beq.n	8005136 <UART_RxISR_16BIT_FIFOEN+0x13e>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005098:	187b      	adds	r3, r7, r1
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	2201      	movs	r2, #1
 800509e:	4013      	ands	r3, r2
 80050a0:	d010      	beq.n	80050c4 <UART_RxISR_16BIT_FIFOEN+0xcc>
 80050a2:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80050a4:	2380      	movs	r3, #128	@ 0x80
 80050a6:	005b      	lsls	r3, r3, #1
 80050a8:	4013      	ands	r3, r2
 80050aa:	d00b      	beq.n	80050c4 <UART_RxISR_16BIT_FIFOEN+0xcc>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	2201      	movs	r2, #1
 80050b2:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	2290      	movs	r2, #144	@ 0x90
 80050b8:	589b      	ldr	r3, [r3, r2]
 80050ba:	2201      	movs	r2, #1
 80050bc:	431a      	orrs	r2, r3
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	2190      	movs	r1, #144	@ 0x90
 80050c2:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80050c4:	2384      	movs	r3, #132	@ 0x84
 80050c6:	18fb      	adds	r3, r7, r3
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	2202      	movs	r2, #2
 80050cc:	4013      	ands	r3, r2
 80050ce:	d00f      	beq.n	80050f0 <UART_RxISR_16BIT_FIFOEN+0xf8>
 80050d0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80050d2:	2201      	movs	r2, #1
 80050d4:	4013      	ands	r3, r2
 80050d6:	d00b      	beq.n	80050f0 <UART_RxISR_16BIT_FIFOEN+0xf8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	2202      	movs	r2, #2
 80050de:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	2290      	movs	r2, #144	@ 0x90
 80050e4:	589b      	ldr	r3, [r3, r2]
 80050e6:	2204      	movs	r2, #4
 80050e8:	431a      	orrs	r2, r3
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	2190      	movs	r1, #144	@ 0x90
 80050ee:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80050f0:	2384      	movs	r3, #132	@ 0x84
 80050f2:	18fb      	adds	r3, r7, r3
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	2204      	movs	r2, #4
 80050f8:	4013      	ands	r3, r2
 80050fa:	d00f      	beq.n	800511c <UART_RxISR_16BIT_FIFOEN+0x124>
 80050fc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80050fe:	2201      	movs	r2, #1
 8005100:	4013      	ands	r3, r2
 8005102:	d00b      	beq.n	800511c <UART_RxISR_16BIT_FIFOEN+0x124>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	2204      	movs	r2, #4
 800510a:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2290      	movs	r2, #144	@ 0x90
 8005110:	589b      	ldr	r3, [r3, r2]
 8005112:	2202      	movs	r2, #2
 8005114:	431a      	orrs	r2, r3
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	2190      	movs	r1, #144	@ 0x90
 800511a:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2290      	movs	r2, #144	@ 0x90
 8005120:	589b      	ldr	r3, [r3, r2]
 8005122:	2b00      	cmp	r3, #0
 8005124:	d007      	beq.n	8005136 <UART_RxISR_16BIT_FIFOEN+0x13e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	0018      	movs	r0, r3
 800512a:	f7fe fd93 	bl	8003c54 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	2290      	movs	r2, #144	@ 0x90
 8005132:	2100      	movs	r1, #0
 8005134:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	225e      	movs	r2, #94	@ 0x5e
 800513a:	5a9b      	ldrh	r3, [r3, r2]
 800513c:	b29b      	uxth	r3, r3
 800513e:	2b00      	cmp	r3, #0
 8005140:	d000      	beq.n	8005144 <UART_RxISR_16BIT_FIFOEN+0x14c>
 8005142:	e098      	b.n	8005276 <UART_RxISR_16BIT_FIFOEN+0x27e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005144:	f3ef 8310 	mrs	r3, PRIMASK
 8005148:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 800514a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800514c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800514e:	2301      	movs	r3, #1
 8005150:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005152:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005154:	f383 8810 	msr	PRIMASK, r3
}
 8005158:	46c0      	nop			@ (mov r8, r8)
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	681a      	ldr	r2, [r3, #0]
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	4974      	ldr	r1, [pc, #464]	@ (8005338 <UART_RxISR_16BIT_FIFOEN+0x340>)
 8005166:	400a      	ands	r2, r1
 8005168:	601a      	str	r2, [r3, #0]
 800516a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800516c:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800516e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005170:	f383 8810 	msr	PRIMASK, r3
}
 8005174:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005176:	f3ef 8310 	mrs	r3, PRIMASK
 800517a:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 800517c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800517e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005180:	2301      	movs	r3, #1
 8005182:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005184:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005186:	f383 8810 	msr	PRIMASK, r3
}
 800518a:	46c0      	nop			@ (mov r8, r8)
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	689a      	ldr	r2, [r3, #8]
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	4969      	ldr	r1, [pc, #420]	@ (800533c <UART_RxISR_16BIT_FIFOEN+0x344>)
 8005198:	400a      	ands	r2, r1
 800519a:	609a      	str	r2, [r3, #8]
 800519c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800519e:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80051a0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80051a2:	f383 8810 	msr	PRIMASK, r3
}
 80051a6:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	228c      	movs	r2, #140	@ 0x8c
 80051ac:	2120      	movs	r1, #32
 80051ae:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	2200      	movs	r2, #0
 80051b4:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	2200      	movs	r2, #0
 80051ba:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	4a5f      	ldr	r2, [pc, #380]	@ (8005340 <UART_RxISR_16BIT_FIFOEN+0x348>)
 80051c2:	4293      	cmp	r3, r2
 80051c4:	d01f      	beq.n	8005206 <UART_RxISR_16BIT_FIFOEN+0x20e>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	685a      	ldr	r2, [r3, #4]
 80051cc:	2380      	movs	r3, #128	@ 0x80
 80051ce:	041b      	lsls	r3, r3, #16
 80051d0:	4013      	ands	r3, r2
 80051d2:	d018      	beq.n	8005206 <UART_RxISR_16BIT_FIFOEN+0x20e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80051d4:	f3ef 8310 	mrs	r3, PRIMASK
 80051d8:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 80051da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80051dc:	667b      	str	r3, [r7, #100]	@ 0x64
 80051de:	2301      	movs	r3, #1
 80051e0:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80051e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80051e4:	f383 8810 	msr	PRIMASK, r3
}
 80051e8:	46c0      	nop			@ (mov r8, r8)
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	681a      	ldr	r2, [r3, #0]
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	4953      	ldr	r1, [pc, #332]	@ (8005344 <UART_RxISR_16BIT_FIFOEN+0x34c>)
 80051f6:	400a      	ands	r2, r1
 80051f8:	601a      	str	r2, [r3, #0]
 80051fa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80051fc:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80051fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005200:	f383 8810 	msr	PRIMASK, r3
}
 8005204:	46c0      	nop			@ (mov r8, r8)
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800520a:	2b01      	cmp	r3, #1
 800520c:	d12f      	bne.n	800526e <UART_RxISR_16BIT_FIFOEN+0x276>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	2200      	movs	r2, #0
 8005212:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005214:	f3ef 8310 	mrs	r3, PRIMASK
 8005218:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800521a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800521c:	663b      	str	r3, [r7, #96]	@ 0x60
 800521e:	2301      	movs	r3, #1
 8005220:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005222:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005224:	f383 8810 	msr	PRIMASK, r3
}
 8005228:	46c0      	nop			@ (mov r8, r8)
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	681a      	ldr	r2, [r3, #0]
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	2110      	movs	r1, #16
 8005236:	438a      	bics	r2, r1
 8005238:	601a      	str	r2, [r3, #0]
 800523a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800523c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800523e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005240:	f383 8810 	msr	PRIMASK, r3
}
 8005244:	46c0      	nop			@ (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	69db      	ldr	r3, [r3, #28]
 800524c:	2210      	movs	r2, #16
 800524e:	4013      	ands	r3, r2
 8005250:	2b10      	cmp	r3, #16
 8005252:	d103      	bne.n	800525c <UART_RxISR_16BIT_FIFOEN+0x264>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	2210      	movs	r2, #16
 800525a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	225c      	movs	r2, #92	@ 0x5c
 8005260:	5a9a      	ldrh	r2, [r3, r2]
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	0011      	movs	r1, r2
 8005266:	0018      	movs	r0, r3
 8005268:	f7fe fcfc 	bl	8003c64 <HAL_UARTEx_RxEventCallback>
 800526c:	e003      	b.n	8005276 <UART_RxISR_16BIT_FIFOEN+0x27e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	0018      	movs	r0, r3
 8005272:	f7fb fb67 	bl	8000944 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005276:	2376      	movs	r3, #118	@ 0x76
 8005278:	18fb      	adds	r3, r7, r3
 800527a:	881b      	ldrh	r3, [r3, #0]
 800527c:	2b00      	cmp	r3, #0
 800527e:	d006      	beq.n	800528e <UART_RxISR_16BIT_FIFOEN+0x296>
 8005280:	2384      	movs	r3, #132	@ 0x84
 8005282:	18fb      	adds	r3, r7, r3
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	2220      	movs	r2, #32
 8005288:	4013      	ands	r3, r2
 800528a:	d000      	beq.n	800528e <UART_RxISR_16BIT_FIFOEN+0x296>
 800528c:	e6d9      	b.n	8005042 <UART_RxISR_16BIT_FIFOEN+0x4a>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800528e:	205e      	movs	r0, #94	@ 0x5e
 8005290:	183b      	adds	r3, r7, r0
 8005292:	687a      	ldr	r2, [r7, #4]
 8005294:	215e      	movs	r1, #94	@ 0x5e
 8005296:	5a52      	ldrh	r2, [r2, r1]
 8005298:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800529a:	0001      	movs	r1, r0
 800529c:	187b      	adds	r3, r7, r1
 800529e:	881b      	ldrh	r3, [r3, #0]
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d044      	beq.n	800532e <UART_RxISR_16BIT_FIFOEN+0x336>
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	2268      	movs	r2, #104	@ 0x68
 80052a8:	5a9b      	ldrh	r3, [r3, r2]
 80052aa:	187a      	adds	r2, r7, r1
 80052ac:	8812      	ldrh	r2, [r2, #0]
 80052ae:	429a      	cmp	r2, r3
 80052b0:	d23d      	bcs.n	800532e <UART_RxISR_16BIT_FIFOEN+0x336>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80052b2:	f3ef 8310 	mrs	r3, PRIMASK
 80052b6:	60fb      	str	r3, [r7, #12]
  return(result);
 80052b8:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80052ba:	65bb      	str	r3, [r7, #88]	@ 0x58
 80052bc:	2301      	movs	r3, #1
 80052be:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80052c0:	693b      	ldr	r3, [r7, #16]
 80052c2:	f383 8810 	msr	PRIMASK, r3
}
 80052c6:	46c0      	nop			@ (mov r8, r8)
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	689a      	ldr	r2, [r3, #8]
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	491d      	ldr	r1, [pc, #116]	@ (8005348 <UART_RxISR_16BIT_FIFOEN+0x350>)
 80052d4:	400a      	ands	r2, r1
 80052d6:	609a      	str	r2, [r3, #8]
 80052d8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80052da:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80052dc:	697b      	ldr	r3, [r7, #20]
 80052de:	f383 8810 	msr	PRIMASK, r3
}
 80052e2:	46c0      	nop			@ (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	4a19      	ldr	r2, [pc, #100]	@ (800534c <UART_RxISR_16BIT_FIFOEN+0x354>)
 80052e8:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80052ea:	f3ef 8310 	mrs	r3, PRIMASK
 80052ee:	61bb      	str	r3, [r7, #24]
  return(result);
 80052f0:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80052f2:	657b      	str	r3, [r7, #84]	@ 0x54
 80052f4:	2301      	movs	r3, #1
 80052f6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80052f8:	69fb      	ldr	r3, [r7, #28]
 80052fa:	f383 8810 	msr	PRIMASK, r3
}
 80052fe:	46c0      	nop			@ (mov r8, r8)
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	681a      	ldr	r2, [r3, #0]
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	2120      	movs	r1, #32
 800530c:	430a      	orrs	r2, r1
 800530e:	601a      	str	r2, [r3, #0]
 8005310:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005312:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005314:	6a3b      	ldr	r3, [r7, #32]
 8005316:	f383 8810 	msr	PRIMASK, r3
}
 800531a:	46c0      	nop			@ (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800531c:	e007      	b.n	800532e <UART_RxISR_16BIT_FIFOEN+0x336>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	699a      	ldr	r2, [r3, #24]
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	2108      	movs	r1, #8
 800532a:	430a      	orrs	r2, r1
 800532c:	619a      	str	r2, [r3, #24]
}
 800532e:	46c0      	nop			@ (mov r8, r8)
 8005330:	46bd      	mov	sp, r7
 8005332:	b022      	add	sp, #136	@ 0x88
 8005334:	bd80      	pop	{r7, pc}
 8005336:	46c0      	nop			@ (mov r8, r8)
 8005338:	fffffeff 	.word	0xfffffeff
 800533c:	effffffe 	.word	0xeffffffe
 8005340:	40008000 	.word	0x40008000
 8005344:	fbffffff 	.word	0xfbffffff
 8005348:	efffffff 	.word	0xefffffff
 800534c:	08004af5 	.word	0x08004af5

08005350 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005350:	b580      	push	{r7, lr}
 8005352:	b082      	sub	sp, #8
 8005354:	af00      	add	r7, sp, #0
 8005356:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005358:	46c0      	nop			@ (mov r8, r8)
 800535a:	46bd      	mov	sp, r7
 800535c:	b002      	add	sp, #8
 800535e:	bd80      	pop	{r7, pc}

08005360 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8005360:	b580      	push	{r7, lr}
 8005362:	b082      	sub	sp, #8
 8005364:	af00      	add	r7, sp, #0
 8005366:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8005368:	46c0      	nop			@ (mov r8, r8)
 800536a:	46bd      	mov	sp, r7
 800536c:	b002      	add	sp, #8
 800536e:	bd80      	pop	{r7, pc}

08005370 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8005370:	b580      	push	{r7, lr}
 8005372:	b082      	sub	sp, #8
 8005374:	af00      	add	r7, sp, #0
 8005376:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8005378:	46c0      	nop			@ (mov r8, r8)
 800537a:	46bd      	mov	sp, r7
 800537c:	b002      	add	sp, #8
 800537e:	bd80      	pop	{r7, pc}

08005380 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005380:	b580      	push	{r7, lr}
 8005382:	b084      	sub	sp, #16
 8005384:	af00      	add	r7, sp, #0
 8005386:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2284      	movs	r2, #132	@ 0x84
 800538c:	5c9b      	ldrb	r3, [r3, r2]
 800538e:	2b01      	cmp	r3, #1
 8005390:	d101      	bne.n	8005396 <HAL_UARTEx_DisableFifoMode+0x16>
 8005392:	2302      	movs	r3, #2
 8005394:	e027      	b.n	80053e6 <HAL_UARTEx_DisableFifoMode+0x66>
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	2284      	movs	r2, #132	@ 0x84
 800539a:	2101      	movs	r1, #1
 800539c:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	2288      	movs	r2, #136	@ 0x88
 80053a2:	2124      	movs	r1, #36	@ 0x24
 80053a4:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	681a      	ldr	r2, [r3, #0]
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	2101      	movs	r1, #1
 80053ba:	438a      	bics	r2, r1
 80053bc:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	4a0b      	ldr	r2, [pc, #44]	@ (80053f0 <HAL_UARTEx_DisableFifoMode+0x70>)
 80053c2:	4013      	ands	r3, r2
 80053c4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	2200      	movs	r2, #0
 80053ca:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	68fa      	ldr	r2, [r7, #12]
 80053d2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2288      	movs	r2, #136	@ 0x88
 80053d8:	2120      	movs	r1, #32
 80053da:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	2284      	movs	r2, #132	@ 0x84
 80053e0:	2100      	movs	r1, #0
 80053e2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80053e4:	2300      	movs	r3, #0
}
 80053e6:	0018      	movs	r0, r3
 80053e8:	46bd      	mov	sp, r7
 80053ea:	b004      	add	sp, #16
 80053ec:	bd80      	pop	{r7, pc}
 80053ee:	46c0      	nop			@ (mov r8, r8)
 80053f0:	dfffffff 	.word	0xdfffffff

080053f4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80053f4:	b580      	push	{r7, lr}
 80053f6:	b084      	sub	sp, #16
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	6078      	str	r0, [r7, #4]
 80053fc:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	2284      	movs	r2, #132	@ 0x84
 8005402:	5c9b      	ldrb	r3, [r3, r2]
 8005404:	2b01      	cmp	r3, #1
 8005406:	d101      	bne.n	800540c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005408:	2302      	movs	r3, #2
 800540a:	e02e      	b.n	800546a <HAL_UARTEx_SetTxFifoThreshold+0x76>
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2284      	movs	r2, #132	@ 0x84
 8005410:	2101      	movs	r1, #1
 8005412:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	2288      	movs	r2, #136	@ 0x88
 8005418:	2124      	movs	r1, #36	@ 0x24
 800541a:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	681a      	ldr	r2, [r3, #0]
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	2101      	movs	r1, #1
 8005430:	438a      	bics	r2, r1
 8005432:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	689b      	ldr	r3, [r3, #8]
 800543a:	00db      	lsls	r3, r3, #3
 800543c:	08d9      	lsrs	r1, r3, #3
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	683a      	ldr	r2, [r7, #0]
 8005444:	430a      	orrs	r2, r1
 8005446:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	0018      	movs	r0, r3
 800544c:	f000 f854 	bl	80054f8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	68fa      	ldr	r2, [r7, #12]
 8005456:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2288      	movs	r2, #136	@ 0x88
 800545c:	2120      	movs	r1, #32
 800545e:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2284      	movs	r2, #132	@ 0x84
 8005464:	2100      	movs	r1, #0
 8005466:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005468:	2300      	movs	r3, #0
}
 800546a:	0018      	movs	r0, r3
 800546c:	46bd      	mov	sp, r7
 800546e:	b004      	add	sp, #16
 8005470:	bd80      	pop	{r7, pc}
	...

08005474 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005474:	b580      	push	{r7, lr}
 8005476:	b084      	sub	sp, #16
 8005478:	af00      	add	r7, sp, #0
 800547a:	6078      	str	r0, [r7, #4]
 800547c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	2284      	movs	r2, #132	@ 0x84
 8005482:	5c9b      	ldrb	r3, [r3, r2]
 8005484:	2b01      	cmp	r3, #1
 8005486:	d101      	bne.n	800548c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005488:	2302      	movs	r3, #2
 800548a:	e02f      	b.n	80054ec <HAL_UARTEx_SetRxFifoThreshold+0x78>
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	2284      	movs	r2, #132	@ 0x84
 8005490:	2101      	movs	r1, #1
 8005492:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2288      	movs	r2, #136	@ 0x88
 8005498:	2124      	movs	r1, #36	@ 0x24
 800549a:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	681a      	ldr	r2, [r3, #0]
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	2101      	movs	r1, #1
 80054b0:	438a      	bics	r2, r1
 80054b2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	689b      	ldr	r3, [r3, #8]
 80054ba:	4a0e      	ldr	r2, [pc, #56]	@ (80054f4 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 80054bc:	4013      	ands	r3, r2
 80054be:	0019      	movs	r1, r3
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	683a      	ldr	r2, [r7, #0]
 80054c6:	430a      	orrs	r2, r1
 80054c8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	0018      	movs	r0, r3
 80054ce:	f000 f813 	bl	80054f8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	68fa      	ldr	r2, [r7, #12]
 80054d8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	2288      	movs	r2, #136	@ 0x88
 80054de:	2120      	movs	r1, #32
 80054e0:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	2284      	movs	r2, #132	@ 0x84
 80054e6:	2100      	movs	r1, #0
 80054e8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80054ea:	2300      	movs	r3, #0
}
 80054ec:	0018      	movs	r0, r3
 80054ee:	46bd      	mov	sp, r7
 80054f0:	b004      	add	sp, #16
 80054f2:	bd80      	pop	{r7, pc}
 80054f4:	f1ffffff 	.word	0xf1ffffff

080054f8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80054f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80054fa:	b085      	sub	sp, #20
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005504:	2b00      	cmp	r3, #0
 8005506:	d108      	bne.n	800551a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	226a      	movs	r2, #106	@ 0x6a
 800550c:	2101      	movs	r1, #1
 800550e:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2268      	movs	r2, #104	@ 0x68
 8005514:	2101      	movs	r1, #1
 8005516:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005518:	e043      	b.n	80055a2 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800551a:	260f      	movs	r6, #15
 800551c:	19bb      	adds	r3, r7, r6
 800551e:	2208      	movs	r2, #8
 8005520:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005522:	200e      	movs	r0, #14
 8005524:	183b      	adds	r3, r7, r0
 8005526:	2208      	movs	r2, #8
 8005528:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	689b      	ldr	r3, [r3, #8]
 8005530:	0e5b      	lsrs	r3, r3, #25
 8005532:	b2da      	uxtb	r2, r3
 8005534:	240d      	movs	r4, #13
 8005536:	193b      	adds	r3, r7, r4
 8005538:	2107      	movs	r1, #7
 800553a:	400a      	ands	r2, r1
 800553c:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	689b      	ldr	r3, [r3, #8]
 8005544:	0f5b      	lsrs	r3, r3, #29
 8005546:	b2da      	uxtb	r2, r3
 8005548:	250c      	movs	r5, #12
 800554a:	197b      	adds	r3, r7, r5
 800554c:	2107      	movs	r1, #7
 800554e:	400a      	ands	r2, r1
 8005550:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005552:	183b      	adds	r3, r7, r0
 8005554:	781b      	ldrb	r3, [r3, #0]
 8005556:	197a      	adds	r2, r7, r5
 8005558:	7812      	ldrb	r2, [r2, #0]
 800555a:	4914      	ldr	r1, [pc, #80]	@ (80055ac <UARTEx_SetNbDataToProcess+0xb4>)
 800555c:	5c8a      	ldrb	r2, [r1, r2]
 800555e:	435a      	muls	r2, r3
 8005560:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8005562:	197b      	adds	r3, r7, r5
 8005564:	781b      	ldrb	r3, [r3, #0]
 8005566:	4a12      	ldr	r2, [pc, #72]	@ (80055b0 <UARTEx_SetNbDataToProcess+0xb8>)
 8005568:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800556a:	0019      	movs	r1, r3
 800556c:	f7fa fe68 	bl	8000240 <__divsi3>
 8005570:	0003      	movs	r3, r0
 8005572:	b299      	uxth	r1, r3
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	226a      	movs	r2, #106	@ 0x6a
 8005578:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800557a:	19bb      	adds	r3, r7, r6
 800557c:	781b      	ldrb	r3, [r3, #0]
 800557e:	193a      	adds	r2, r7, r4
 8005580:	7812      	ldrb	r2, [r2, #0]
 8005582:	490a      	ldr	r1, [pc, #40]	@ (80055ac <UARTEx_SetNbDataToProcess+0xb4>)
 8005584:	5c8a      	ldrb	r2, [r1, r2]
 8005586:	435a      	muls	r2, r3
 8005588:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 800558a:	193b      	adds	r3, r7, r4
 800558c:	781b      	ldrb	r3, [r3, #0]
 800558e:	4a08      	ldr	r2, [pc, #32]	@ (80055b0 <UARTEx_SetNbDataToProcess+0xb8>)
 8005590:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005592:	0019      	movs	r1, r3
 8005594:	f7fa fe54 	bl	8000240 <__divsi3>
 8005598:	0003      	movs	r3, r0
 800559a:	b299      	uxth	r1, r3
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2268      	movs	r2, #104	@ 0x68
 80055a0:	5299      	strh	r1, [r3, r2]
}
 80055a2:	46c0      	nop			@ (mov r8, r8)
 80055a4:	46bd      	mov	sp, r7
 80055a6:	b005      	add	sp, #20
 80055a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80055aa:	46c0      	nop			@ (mov r8, r8)
 80055ac:	08007168 	.word	0x08007168
 80055b0:	08007170 	.word	0x08007170

080055b4 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80055b4:	b580      	push	{r7, lr}
 80055b6:	b084      	sub	sp, #16
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	0002      	movs	r2, r0
 80055bc:	1dbb      	adds	r3, r7, #6
 80055be:	801a      	strh	r2, [r3, #0]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80055c0:	2300      	movs	r3, #0
 80055c2:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80055c4:	1dbb      	adds	r3, r7, #6
 80055c6:	2200      	movs	r2, #0
 80055c8:	5e9b      	ldrsh	r3, [r3, r2]
 80055ca:	2b84      	cmp	r3, #132	@ 0x84
 80055cc:	d006      	beq.n	80055dc <makeFreeRtosPriority+0x28>
    fpriority += (priority - osPriorityIdle);
 80055ce:	1dbb      	adds	r3, r7, #6
 80055d0:	2200      	movs	r2, #0
 80055d2:	5e9a      	ldrsh	r2, [r3, r2]
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	18d3      	adds	r3, r2, r3
 80055d8:	3303      	adds	r3, #3
 80055da:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80055dc:	68fb      	ldr	r3, [r7, #12]
}
 80055de:	0018      	movs	r0, r3
 80055e0:	46bd      	mov	sp, r7
 80055e2:	b004      	add	sp, #16
 80055e4:	bd80      	pop	{r7, pc}

080055e6 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80055e6:	b580      	push	{r7, lr}
 80055e8:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80055ea:	f000 fa55 	bl	8005a98 <vTaskStartScheduler>
  
  return osOK;
 80055ee:	2300      	movs	r3, #0
}
 80055f0:	0018      	movs	r0, r3
 80055f2:	46bd      	mov	sp, r7
 80055f4:	bd80      	pop	{r7, pc}

080055f6 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80055f6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80055f8:	b087      	sub	sp, #28
 80055fa:	af02      	add	r7, sp, #8
 80055fc:	6078      	str	r0, [r7, #4]
 80055fe:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	685c      	ldr	r4, [r3, #4]
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800560c:	b29e      	uxth	r6, r3
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	2208      	movs	r2, #8
 8005612:	5e9b      	ldrsh	r3, [r3, r2]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005614:	0018      	movs	r0, r3
 8005616:	f7ff ffcd 	bl	80055b4 <makeFreeRtosPriority>
 800561a:	0001      	movs	r1, r0
 800561c:	683a      	ldr	r2, [r7, #0]
 800561e:	230c      	movs	r3, #12
 8005620:	18fb      	adds	r3, r7, r3
 8005622:	9301      	str	r3, [sp, #4]
 8005624:	9100      	str	r1, [sp, #0]
 8005626:	0013      	movs	r3, r2
 8005628:	0032      	movs	r2, r6
 800562a:	0029      	movs	r1, r5
 800562c:	0020      	movs	r0, r4
 800562e:	f000 f8c7 	bl	80057c0 <xTaskCreate>
 8005632:	0003      	movs	r3, r0
 8005634:	2b01      	cmp	r3, #1
 8005636:	d001      	beq.n	800563c <osThreadCreate+0x46>
                   &handle) != pdPASS)  {
    return NULL;
 8005638:	2300      	movs	r3, #0
 800563a:	e000      	b.n	800563e <osThreadCreate+0x48>
  }     
#endif
  
  return handle;
 800563c:	68fb      	ldr	r3, [r7, #12]
}
 800563e:	0018      	movs	r0, r3
 8005640:	46bd      	mov	sp, r7
 8005642:	b005      	add	sp, #20
 8005644:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005646 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8005646:	b580      	push	{r7, lr}
 8005648:	b084      	sub	sp, #16
 800564a:	af00      	add	r7, sp, #0
 800564c:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	2b00      	cmp	r3, #0
 8005656:	d001      	beq.n	800565c <osDelay+0x16>
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	e000      	b.n	800565e <osDelay+0x18>
 800565c:	2301      	movs	r3, #1
 800565e:	0018      	movs	r0, r3
 8005660:	f000 f9f4 	bl	8005a4c <vTaskDelay>
  
  return osOK;
 8005664:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8005666:	0018      	movs	r0, r3
 8005668:	46bd      	mov	sp, r7
 800566a:	b004      	add	sp, #16
 800566c:	bd80      	pop	{r7, pc}

0800566e <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800566e:	b580      	push	{r7, lr}
 8005670:	b082      	sub	sp, #8
 8005672:	af00      	add	r7, sp, #0
 8005674:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	3308      	adds	r3, #8
 800567a:	001a      	movs	r2, r3
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	2201      	movs	r2, #1
 8005684:	4252      	negs	r2, r2
 8005686:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	3308      	adds	r3, #8
 800568c:	001a      	movs	r2, r3
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	3308      	adds	r3, #8
 8005696:	001a      	movs	r2, r3
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2200      	movs	r2, #0
 80056a0:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80056a2:	46c0      	nop			@ (mov r8, r8)
 80056a4:	46bd      	mov	sp, r7
 80056a6:	b002      	add	sp, #8
 80056a8:	bd80      	pop	{r7, pc}

080056aa <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80056aa:	b580      	push	{r7, lr}
 80056ac:	b082      	sub	sp, #8
 80056ae:	af00      	add	r7, sp, #0
 80056b0:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	2200      	movs	r2, #0
 80056b6:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80056b8:	46c0      	nop			@ (mov r8, r8)
 80056ba:	46bd      	mov	sp, r7
 80056bc:	b002      	add	sp, #8
 80056be:	bd80      	pop	{r7, pc}

080056c0 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80056c0:	b580      	push	{r7, lr}
 80056c2:	b084      	sub	sp, #16
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	6078      	str	r0, [r7, #4]
 80056c8:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	685b      	ldr	r3, [r3, #4]
 80056ce:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80056d0:	683b      	ldr	r3, [r7, #0]
 80056d2:	68fa      	ldr	r2, [r7, #12]
 80056d4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	689a      	ldr	r2, [r3, #8]
 80056da:	683b      	ldr	r3, [r7, #0]
 80056dc:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	689b      	ldr	r3, [r3, #8]
 80056e2:	683a      	ldr	r2, [r7, #0]
 80056e4:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	683a      	ldr	r2, [r7, #0]
 80056ea:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80056ec:	683b      	ldr	r3, [r7, #0]
 80056ee:	687a      	ldr	r2, [r7, #4]
 80056f0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	1c5a      	adds	r2, r3, #1
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	601a      	str	r2, [r3, #0]
}
 80056fc:	46c0      	nop			@ (mov r8, r8)
 80056fe:	46bd      	mov	sp, r7
 8005700:	b004      	add	sp, #16
 8005702:	bd80      	pop	{r7, pc}

08005704 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005704:	b580      	push	{r7, lr}
 8005706:	b084      	sub	sp, #16
 8005708:	af00      	add	r7, sp, #0
 800570a:	6078      	str	r0, [r7, #4]
 800570c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800570e:	683b      	ldr	r3, [r7, #0]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005714:	68bb      	ldr	r3, [r7, #8]
 8005716:	3301      	adds	r3, #1
 8005718:	d103      	bne.n	8005722 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	691b      	ldr	r3, [r3, #16]
 800571e:	60fb      	str	r3, [r7, #12]
 8005720:	e00c      	b.n	800573c <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	3308      	adds	r3, #8
 8005726:	60fb      	str	r3, [r7, #12]
 8005728:	e002      	b.n	8005730 <vListInsert+0x2c>
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	685b      	ldr	r3, [r3, #4]
 800572e:	60fb      	str	r3, [r7, #12]
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	685b      	ldr	r3, [r3, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	68ba      	ldr	r2, [r7, #8]
 8005738:	429a      	cmp	r2, r3
 800573a:	d2f6      	bcs.n	800572a <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	685a      	ldr	r2, [r3, #4]
 8005740:	683b      	ldr	r3, [r7, #0]
 8005742:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005744:	683b      	ldr	r3, [r7, #0]
 8005746:	685b      	ldr	r3, [r3, #4]
 8005748:	683a      	ldr	r2, [r7, #0]
 800574a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800574c:	683b      	ldr	r3, [r7, #0]
 800574e:	68fa      	ldr	r2, [r7, #12]
 8005750:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	683a      	ldr	r2, [r7, #0]
 8005756:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005758:	683b      	ldr	r3, [r7, #0]
 800575a:	687a      	ldr	r2, [r7, #4]
 800575c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	1c5a      	adds	r2, r3, #1
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	601a      	str	r2, [r3, #0]
}
 8005768:	46c0      	nop			@ (mov r8, r8)
 800576a:	46bd      	mov	sp, r7
 800576c:	b004      	add	sp, #16
 800576e:	bd80      	pop	{r7, pc}

08005770 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005770:	b580      	push	{r7, lr}
 8005772:	b084      	sub	sp, #16
 8005774:	af00      	add	r7, sp, #0
 8005776:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	691b      	ldr	r3, [r3, #16]
 800577c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	685b      	ldr	r3, [r3, #4]
 8005782:	687a      	ldr	r2, [r7, #4]
 8005784:	6892      	ldr	r2, [r2, #8]
 8005786:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	689b      	ldr	r3, [r3, #8]
 800578c:	687a      	ldr	r2, [r7, #4]
 800578e:	6852      	ldr	r2, [r2, #4]
 8005790:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	685b      	ldr	r3, [r3, #4]
 8005796:	687a      	ldr	r2, [r7, #4]
 8005798:	429a      	cmp	r2, r3
 800579a:	d103      	bne.n	80057a4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	689a      	ldr	r2, [r3, #8]
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	2200      	movs	r2, #0
 80057a8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	1e5a      	subs	r2, r3, #1
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	681b      	ldr	r3, [r3, #0]
}
 80057b8:	0018      	movs	r0, r3
 80057ba:	46bd      	mov	sp, r7
 80057bc:	b004      	add	sp, #16
 80057be:	bd80      	pop	{r7, pc}

080057c0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80057c0:	b590      	push	{r4, r7, lr}
 80057c2:	b08d      	sub	sp, #52	@ 0x34
 80057c4:	af04      	add	r7, sp, #16
 80057c6:	60f8      	str	r0, [r7, #12]
 80057c8:	60b9      	str	r1, [r7, #8]
 80057ca:	603b      	str	r3, [r7, #0]
 80057cc:	1dbb      	adds	r3, r7, #6
 80057ce:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80057d0:	1dbb      	adds	r3, r7, #6
 80057d2:	881b      	ldrh	r3, [r3, #0]
 80057d4:	009b      	lsls	r3, r3, #2
 80057d6:	0018      	movs	r0, r3
 80057d8:	f000 fd7a 	bl	80062d0 <pvPortMalloc>
 80057dc:	0003      	movs	r3, r0
 80057de:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
 80057e0:	697b      	ldr	r3, [r7, #20]
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d010      	beq.n	8005808 <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80057e6:	20a0      	movs	r0, #160	@ 0xa0
 80057e8:	f000 fd72 	bl	80062d0 <pvPortMalloc>
 80057ec:	0003      	movs	r3, r0
 80057ee:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
 80057f0:	69fb      	ldr	r3, [r7, #28]
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d003      	beq.n	80057fe <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80057f6:	69fb      	ldr	r3, [r7, #28]
 80057f8:	697a      	ldr	r2, [r7, #20]
 80057fa:	631a      	str	r2, [r3, #48]	@ 0x30
 80057fc:	e006      	b.n	800580c <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80057fe:	697b      	ldr	r3, [r7, #20]
 8005800:	0018      	movs	r0, r3
 8005802:	f000 fe15 	bl	8006430 <vPortFree>
 8005806:	e001      	b.n	800580c <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005808:	2300      	movs	r3, #0
 800580a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800580c:	69fb      	ldr	r3, [r7, #28]
 800580e:	2b00      	cmp	r3, #0
 8005810:	d016      	beq.n	8005840 <xTaskCreate+0x80>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005812:	1dbb      	adds	r3, r7, #6
 8005814:	881a      	ldrh	r2, [r3, #0]
 8005816:	683c      	ldr	r4, [r7, #0]
 8005818:	68b9      	ldr	r1, [r7, #8]
 800581a:	68f8      	ldr	r0, [r7, #12]
 800581c:	2300      	movs	r3, #0
 800581e:	9303      	str	r3, [sp, #12]
 8005820:	69fb      	ldr	r3, [r7, #28]
 8005822:	9302      	str	r3, [sp, #8]
 8005824:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005826:	9301      	str	r3, [sp, #4]
 8005828:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800582a:	9300      	str	r3, [sp, #0]
 800582c:	0023      	movs	r3, r4
 800582e:	f000 f80f 	bl	8005850 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005832:	69fb      	ldr	r3, [r7, #28]
 8005834:	0018      	movs	r0, r3
 8005836:	f000 f8a5 	bl	8005984 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800583a:	2301      	movs	r3, #1
 800583c:	61bb      	str	r3, [r7, #24]
 800583e:	e002      	b.n	8005846 <xTaskCreate+0x86>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005840:	2301      	movs	r3, #1
 8005842:	425b      	negs	r3, r3
 8005844:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005846:	69bb      	ldr	r3, [r7, #24]
	}
 8005848:	0018      	movs	r0, r3
 800584a:	46bd      	mov	sp, r7
 800584c:	b009      	add	sp, #36	@ 0x24
 800584e:	bd90      	pop	{r4, r7, pc}

08005850 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005850:	b580      	push	{r7, lr}
 8005852:	b086      	sub	sp, #24
 8005854:	af00      	add	r7, sp, #0
 8005856:	60f8      	str	r0, [r7, #12]
 8005858:	60b9      	str	r1, [r7, #8]
 800585a:	607a      	str	r2, [r7, #4]
 800585c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800585e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005860:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	4943      	ldr	r1, [pc, #268]	@ (8005974 <prvInitialiseNewTask+0x124>)
 8005866:	468c      	mov	ip, r1
 8005868:	4463      	add	r3, ip
 800586a:	009b      	lsls	r3, r3, #2
 800586c:	18d3      	adds	r3, r2, r3
 800586e:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005870:	693b      	ldr	r3, [r7, #16]
 8005872:	2207      	movs	r2, #7
 8005874:	4393      	bics	r3, r2
 8005876:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005878:	693b      	ldr	r3, [r7, #16]
 800587a:	2207      	movs	r2, #7
 800587c:	4013      	ands	r3, r2
 800587e:	d002      	beq.n	8005886 <prvInitialiseNewTask+0x36>
 8005880:	b672      	cpsid	i
 8005882:	46c0      	nop			@ (mov r8, r8)
 8005884:	e7fd      	b.n	8005882 <prvInitialiseNewTask+0x32>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005886:	68bb      	ldr	r3, [r7, #8]
 8005888:	2b00      	cmp	r3, #0
 800588a:	d020      	beq.n	80058ce <prvInitialiseNewTask+0x7e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800588c:	2300      	movs	r3, #0
 800588e:	617b      	str	r3, [r7, #20]
 8005890:	e013      	b.n	80058ba <prvInitialiseNewTask+0x6a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005892:	68ba      	ldr	r2, [r7, #8]
 8005894:	697b      	ldr	r3, [r7, #20]
 8005896:	18d3      	adds	r3, r2, r3
 8005898:	7818      	ldrb	r0, [r3, #0]
 800589a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800589c:	2134      	movs	r1, #52	@ 0x34
 800589e:	697b      	ldr	r3, [r7, #20]
 80058a0:	18d3      	adds	r3, r2, r3
 80058a2:	185b      	adds	r3, r3, r1
 80058a4:	1c02      	adds	r2, r0, #0
 80058a6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80058a8:	68ba      	ldr	r2, [r7, #8]
 80058aa:	697b      	ldr	r3, [r7, #20]
 80058ac:	18d3      	adds	r3, r2, r3
 80058ae:	781b      	ldrb	r3, [r3, #0]
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d006      	beq.n	80058c2 <prvInitialiseNewTask+0x72>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80058b4:	697b      	ldr	r3, [r7, #20]
 80058b6:	3301      	adds	r3, #1
 80058b8:	617b      	str	r3, [r7, #20]
 80058ba:	697b      	ldr	r3, [r7, #20]
 80058bc:	2b0f      	cmp	r3, #15
 80058be:	d9e8      	bls.n	8005892 <prvInitialiseNewTask+0x42>
 80058c0:	e000      	b.n	80058c4 <prvInitialiseNewTask+0x74>
			{
				break;
 80058c2:	46c0      	nop			@ (mov r8, r8)
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80058c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058c6:	2243      	movs	r2, #67	@ 0x43
 80058c8:	2100      	movs	r1, #0
 80058ca:	5499      	strb	r1, [r3, r2]
 80058cc:	e003      	b.n	80058d6 <prvInitialiseNewTask+0x86>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80058ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058d0:	2234      	movs	r2, #52	@ 0x34
 80058d2:	2100      	movs	r1, #0
 80058d4:	5499      	strb	r1, [r3, r2]
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80058d6:	6a3b      	ldr	r3, [r7, #32]
 80058d8:	2b06      	cmp	r3, #6
 80058da:	d901      	bls.n	80058e0 <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80058dc:	2306      	movs	r3, #6
 80058de:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80058e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058e2:	6a3a      	ldr	r2, [r7, #32]
 80058e4:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80058e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058e8:	6a3a      	ldr	r2, [r7, #32]
 80058ea:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80058ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058ee:	2200      	movs	r2, #0
 80058f0:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80058f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058f4:	3304      	adds	r3, #4
 80058f6:	0018      	movs	r0, r3
 80058f8:	f7ff fed7 	bl	80056aa <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80058fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058fe:	3318      	adds	r3, #24
 8005900:	0018      	movs	r0, r3
 8005902:	f7ff fed2 	bl	80056aa <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005906:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005908:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800590a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800590c:	6a3b      	ldr	r3, [r7, #32]
 800590e:	2207      	movs	r2, #7
 8005910:	1ad2      	subs	r2, r2, r3
 8005912:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005914:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005916:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005918:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800591a:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800591c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800591e:	2298      	movs	r2, #152	@ 0x98
 8005920:	2100      	movs	r1, #0
 8005922:	5099      	str	r1, [r3, r2]
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005924:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005926:	229c      	movs	r2, #156	@ 0x9c
 8005928:	2100      	movs	r1, #0
 800592a:	5499      	strb	r1, [r3, r2]
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800592c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800592e:	334c      	adds	r3, #76	@ 0x4c
 8005930:	224c      	movs	r2, #76	@ 0x4c
 8005932:	2100      	movs	r1, #0
 8005934:	0018      	movs	r0, r3
 8005936:	f000 fea3 	bl	8006680 <memset>
 800593a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800593c:	4a0e      	ldr	r2, [pc, #56]	@ (8005978 <prvInitialiseNewTask+0x128>)
 800593e:	651a      	str	r2, [r3, #80]	@ 0x50
 8005940:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005942:	4a0e      	ldr	r2, [pc, #56]	@ (800597c <prvInitialiseNewTask+0x12c>)
 8005944:	655a      	str	r2, [r3, #84]	@ 0x54
 8005946:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005948:	4a0d      	ldr	r2, [pc, #52]	@ (8005980 <prvInitialiseNewTask+0x130>)
 800594a:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800594c:	683a      	ldr	r2, [r7, #0]
 800594e:	68f9      	ldr	r1, [r7, #12]
 8005950:	693b      	ldr	r3, [r7, #16]
 8005952:	0018      	movs	r0, r3
 8005954:	f000 fb8c 	bl	8006070 <pxPortInitialiseStack>
 8005958:	0002      	movs	r2, r0
 800595a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800595c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800595e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005960:	2b00      	cmp	r3, #0
 8005962:	d002      	beq.n	800596a <prvInitialiseNewTask+0x11a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005964:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005966:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005968:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800596a:	46c0      	nop			@ (mov r8, r8)
 800596c:	46bd      	mov	sp, r7
 800596e:	b006      	add	sp, #24
 8005970:	bd80      	pop	{r7, pc}
 8005972:	46c0      	nop			@ (mov r8, r8)
 8005974:	3fffffff 	.word	0x3fffffff
 8005978:	20001140 	.word	0x20001140
 800597c:	200011a8 	.word	0x200011a8
 8005980:	20001210 	.word	0x20001210

08005984 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005984:	b580      	push	{r7, lr}
 8005986:	b082      	sub	sp, #8
 8005988:	af00      	add	r7, sp, #0
 800598a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800598c:	f000 fc08 	bl	80061a0 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005990:	4b28      	ldr	r3, [pc, #160]	@ (8005a34 <prvAddNewTaskToReadyList+0xb0>)
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	1c5a      	adds	r2, r3, #1
 8005996:	4b27      	ldr	r3, [pc, #156]	@ (8005a34 <prvAddNewTaskToReadyList+0xb0>)
 8005998:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 800599a:	4b27      	ldr	r3, [pc, #156]	@ (8005a38 <prvAddNewTaskToReadyList+0xb4>)
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d109      	bne.n	80059b6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80059a2:	4b25      	ldr	r3, [pc, #148]	@ (8005a38 <prvAddNewTaskToReadyList+0xb4>)
 80059a4:	687a      	ldr	r2, [r7, #4]
 80059a6:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80059a8:	4b22      	ldr	r3, [pc, #136]	@ (8005a34 <prvAddNewTaskToReadyList+0xb0>)
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	2b01      	cmp	r3, #1
 80059ae:	d110      	bne.n	80059d2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80059b0:	f000 fa64 	bl	8005e7c <prvInitialiseTaskLists>
 80059b4:	e00d      	b.n	80059d2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80059b6:	4b21      	ldr	r3, [pc, #132]	@ (8005a3c <prvAddNewTaskToReadyList+0xb8>)
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d109      	bne.n	80059d2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80059be:	4b1e      	ldr	r3, [pc, #120]	@ (8005a38 <prvAddNewTaskToReadyList+0xb4>)
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059c8:	429a      	cmp	r2, r3
 80059ca:	d802      	bhi.n	80059d2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80059cc:	4b1a      	ldr	r3, [pc, #104]	@ (8005a38 <prvAddNewTaskToReadyList+0xb4>)
 80059ce:	687a      	ldr	r2, [r7, #4]
 80059d0:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80059d2:	4b1b      	ldr	r3, [pc, #108]	@ (8005a40 <prvAddNewTaskToReadyList+0xbc>)
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	1c5a      	adds	r2, r3, #1
 80059d8:	4b19      	ldr	r3, [pc, #100]	@ (8005a40 <prvAddNewTaskToReadyList+0xbc>)
 80059da:	601a      	str	r2, [r3, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80059e0:	4b18      	ldr	r3, [pc, #96]	@ (8005a44 <prvAddNewTaskToReadyList+0xc0>)
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	429a      	cmp	r2, r3
 80059e6:	d903      	bls.n	80059f0 <prvAddNewTaskToReadyList+0x6c>
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80059ec:	4b15      	ldr	r3, [pc, #84]	@ (8005a44 <prvAddNewTaskToReadyList+0xc0>)
 80059ee:	601a      	str	r2, [r3, #0]
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80059f4:	0013      	movs	r3, r2
 80059f6:	009b      	lsls	r3, r3, #2
 80059f8:	189b      	adds	r3, r3, r2
 80059fa:	009b      	lsls	r3, r3, #2
 80059fc:	4a12      	ldr	r2, [pc, #72]	@ (8005a48 <prvAddNewTaskToReadyList+0xc4>)
 80059fe:	189a      	adds	r2, r3, r2
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	3304      	adds	r3, #4
 8005a04:	0019      	movs	r1, r3
 8005a06:	0010      	movs	r0, r2
 8005a08:	f7ff fe5a 	bl	80056c0 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005a0c:	f000 fbda 	bl	80061c4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005a10:	4b0a      	ldr	r3, [pc, #40]	@ (8005a3c <prvAddNewTaskToReadyList+0xb8>)
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d008      	beq.n	8005a2a <prvAddNewTaskToReadyList+0xa6>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005a18:	4b07      	ldr	r3, [pc, #28]	@ (8005a38 <prvAddNewTaskToReadyList+0xb4>)
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a22:	429a      	cmp	r2, r3
 8005a24:	d201      	bcs.n	8005a2a <prvAddNewTaskToReadyList+0xa6>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005a26:	f000 fbab 	bl	8006180 <vPortYield>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005a2a:	46c0      	nop			@ (mov r8, r8)
 8005a2c:	46bd      	mov	sp, r7
 8005a2e:	b002      	add	sp, #8
 8005a30:	bd80      	pop	{r7, pc}
 8005a32:	46c0      	nop			@ (mov r8, r8)
 8005a34:	200004f4 	.word	0x200004f4
 8005a38:	200003f4 	.word	0x200003f4
 8005a3c:	20000500 	.word	0x20000500
 8005a40:	20000510 	.word	0x20000510
 8005a44:	200004fc 	.word	0x200004fc
 8005a48:	200003f8 	.word	0x200003f8

08005a4c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005a4c:	b580      	push	{r7, lr}
 8005a4e:	b084      	sub	sp, #16
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005a54:	2300      	movs	r3, #0
 8005a56:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d011      	beq.n	8005a82 <vTaskDelay+0x36>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005a5e:	4b0d      	ldr	r3, [pc, #52]	@ (8005a94 <vTaskDelay+0x48>)
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d002      	beq.n	8005a6c <vTaskDelay+0x20>
 8005a66:	b672      	cpsid	i
 8005a68:	46c0      	nop			@ (mov r8, r8)
 8005a6a:	e7fd      	b.n	8005a68 <vTaskDelay+0x1c>
			vTaskSuspendAll();
 8005a6c:	f000 f854 	bl	8005b18 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	2100      	movs	r1, #0
 8005a74:	0018      	movs	r0, r3
 8005a76:	f000 faa7 	bl	8005fc8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005a7a:	f000 f859 	bl	8005b30 <xTaskResumeAll>
 8005a7e:	0003      	movs	r3, r0
 8005a80:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d101      	bne.n	8005a8c <vTaskDelay+0x40>
		{
			portYIELD_WITHIN_API();
 8005a88:	f000 fb7a 	bl	8006180 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005a8c:	46c0      	nop			@ (mov r8, r8)
 8005a8e:	46bd      	mov	sp, r7
 8005a90:	b004      	add	sp, #16
 8005a92:	bd80      	pop	{r7, pc}
 8005a94:	2000051c 	.word	0x2000051c

08005a98 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005a98:	b580      	push	{r7, lr}
 8005a9a:	b084      	sub	sp, #16
 8005a9c:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8005a9e:	4916      	ldr	r1, [pc, #88]	@ (8005af8 <vTaskStartScheduler+0x60>)
 8005aa0:	4816      	ldr	r0, [pc, #88]	@ (8005afc <vTaskStartScheduler+0x64>)
 8005aa2:	4b17      	ldr	r3, [pc, #92]	@ (8005b00 <vTaskStartScheduler+0x68>)
 8005aa4:	9301      	str	r3, [sp, #4]
 8005aa6:	2300      	movs	r3, #0
 8005aa8:	9300      	str	r3, [sp, #0]
 8005aaa:	2300      	movs	r3, #0
 8005aac:	2280      	movs	r2, #128	@ 0x80
 8005aae:	f7ff fe87 	bl	80057c0 <xTaskCreate>
 8005ab2:	0003      	movs	r3, r0
 8005ab4:	607b      	str	r3, [r7, #4]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	2b01      	cmp	r3, #1
 8005aba:	d113      	bne.n	8005ae4 <vTaskStartScheduler+0x4c>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 8005abc:	b672      	cpsid	i
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005abe:	4b11      	ldr	r3, [pc, #68]	@ (8005b04 <vTaskStartScheduler+0x6c>)
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	334c      	adds	r3, #76	@ 0x4c
 8005ac4:	001a      	movs	r2, r3
 8005ac6:	4b10      	ldr	r3, [pc, #64]	@ (8005b08 <vTaskStartScheduler+0x70>)
 8005ac8:	601a      	str	r2, [r3, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005aca:	4b10      	ldr	r3, [pc, #64]	@ (8005b0c <vTaskStartScheduler+0x74>)
 8005acc:	2201      	movs	r2, #1
 8005ace:	4252      	negs	r2, r2
 8005ad0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005ad2:	4b0f      	ldr	r3, [pc, #60]	@ (8005b10 <vTaskStartScheduler+0x78>)
 8005ad4:	2201      	movs	r2, #1
 8005ad6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005ad8:	4b0e      	ldr	r3, [pc, #56]	@ (8005b14 <vTaskStartScheduler+0x7c>)
 8005ada:	2200      	movs	r2, #0
 8005adc:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005ade:	f000 fb2b 	bl	8006138 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005ae2:	e005      	b.n	8005af0 <vTaskStartScheduler+0x58>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	3301      	adds	r3, #1
 8005ae8:	d102      	bne.n	8005af0 <vTaskStartScheduler+0x58>
 8005aea:	b672      	cpsid	i
 8005aec:	46c0      	nop			@ (mov r8, r8)
 8005aee:	e7fd      	b.n	8005aec <vTaskStartScheduler+0x54>
}
 8005af0:	46c0      	nop			@ (mov r8, r8)
 8005af2:	46bd      	mov	sp, r7
 8005af4:	b002      	add	sp, #8
 8005af6:	bd80      	pop	{r7, pc}
 8005af8:	080070e8 	.word	0x080070e8
 8005afc:	08005e5d 	.word	0x08005e5d
 8005b00:	20000518 	.word	0x20000518
 8005b04:	200003f4 	.word	0x200003f4
 8005b08:	200001bc 	.word	0x200001bc
 8005b0c:	20000514 	.word	0x20000514
 8005b10:	20000500 	.word	0x20000500
 8005b14:	200004f8 	.word	0x200004f8

08005b18 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005b18:	b580      	push	{r7, lr}
 8005b1a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005b1c:	4b03      	ldr	r3, [pc, #12]	@ (8005b2c <vTaskSuspendAll+0x14>)
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	1c5a      	adds	r2, r3, #1
 8005b22:	4b02      	ldr	r3, [pc, #8]	@ (8005b2c <vTaskSuspendAll+0x14>)
 8005b24:	601a      	str	r2, [r3, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005b26:	46c0      	nop			@ (mov r8, r8)
 8005b28:	46bd      	mov	sp, r7
 8005b2a:	bd80      	pop	{r7, pc}
 8005b2c:	2000051c 	.word	0x2000051c

08005b30 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005b30:	b580      	push	{r7, lr}
 8005b32:	b084      	sub	sp, #16
 8005b34:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005b36:	2300      	movs	r3, #0
 8005b38:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005b3a:	2300      	movs	r3, #0
 8005b3c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005b3e:	4b3a      	ldr	r3, [pc, #232]	@ (8005c28 <xTaskResumeAll+0xf8>)
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d102      	bne.n	8005b4c <xTaskResumeAll+0x1c>
 8005b46:	b672      	cpsid	i
 8005b48:	46c0      	nop			@ (mov r8, r8)
 8005b4a:	e7fd      	b.n	8005b48 <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005b4c:	f000 fb28 	bl	80061a0 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005b50:	4b35      	ldr	r3, [pc, #212]	@ (8005c28 <xTaskResumeAll+0xf8>)
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	1e5a      	subs	r2, r3, #1
 8005b56:	4b34      	ldr	r3, [pc, #208]	@ (8005c28 <xTaskResumeAll+0xf8>)
 8005b58:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005b5a:	4b33      	ldr	r3, [pc, #204]	@ (8005c28 <xTaskResumeAll+0xf8>)
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d15b      	bne.n	8005c1a <xTaskResumeAll+0xea>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005b62:	4b32      	ldr	r3, [pc, #200]	@ (8005c2c <xTaskResumeAll+0xfc>)
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d057      	beq.n	8005c1a <xTaskResumeAll+0xea>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005b6a:	e02f      	b.n	8005bcc <xTaskResumeAll+0x9c>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005b6c:	4b30      	ldr	r3, [pc, #192]	@ (8005c30 <xTaskResumeAll+0x100>)
 8005b6e:	68db      	ldr	r3, [r3, #12]
 8005b70:	68db      	ldr	r3, [r3, #12]
 8005b72:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	3318      	adds	r3, #24
 8005b78:	0018      	movs	r0, r3
 8005b7a:	f7ff fdf9 	bl	8005770 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	3304      	adds	r3, #4
 8005b82:	0018      	movs	r0, r3
 8005b84:	f7ff fdf4 	bl	8005770 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b8c:	4b29      	ldr	r3, [pc, #164]	@ (8005c34 <xTaskResumeAll+0x104>)
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	429a      	cmp	r2, r3
 8005b92:	d903      	bls.n	8005b9c <xTaskResumeAll+0x6c>
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b98:	4b26      	ldr	r3, [pc, #152]	@ (8005c34 <xTaskResumeAll+0x104>)
 8005b9a:	601a      	str	r2, [r3, #0]
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005ba0:	0013      	movs	r3, r2
 8005ba2:	009b      	lsls	r3, r3, #2
 8005ba4:	189b      	adds	r3, r3, r2
 8005ba6:	009b      	lsls	r3, r3, #2
 8005ba8:	4a23      	ldr	r2, [pc, #140]	@ (8005c38 <xTaskResumeAll+0x108>)
 8005baa:	189a      	adds	r2, r3, r2
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	3304      	adds	r3, #4
 8005bb0:	0019      	movs	r1, r3
 8005bb2:	0010      	movs	r0, r2
 8005bb4:	f7ff fd84 	bl	80056c0 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005bbc:	4b1f      	ldr	r3, [pc, #124]	@ (8005c3c <xTaskResumeAll+0x10c>)
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bc2:	429a      	cmp	r2, r3
 8005bc4:	d302      	bcc.n	8005bcc <xTaskResumeAll+0x9c>
					{
						xYieldPending = pdTRUE;
 8005bc6:	4b1e      	ldr	r3, [pc, #120]	@ (8005c40 <xTaskResumeAll+0x110>)
 8005bc8:	2201      	movs	r2, #1
 8005bca:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005bcc:	4b18      	ldr	r3, [pc, #96]	@ (8005c30 <xTaskResumeAll+0x100>)
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d1cb      	bne.n	8005b6c <xTaskResumeAll+0x3c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d001      	beq.n	8005bde <xTaskResumeAll+0xae>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005bda:	f000 f9d7 	bl	8005f8c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005bde:	4b19      	ldr	r3, [pc, #100]	@ (8005c44 <xTaskResumeAll+0x114>)
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d00f      	beq.n	8005c0a <xTaskResumeAll+0xda>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005bea:	f000 f82d 	bl	8005c48 <xTaskIncrementTick>
 8005bee:	1e03      	subs	r3, r0, #0
 8005bf0:	d002      	beq.n	8005bf8 <xTaskResumeAll+0xc8>
							{
								xYieldPending = pdTRUE;
 8005bf2:	4b13      	ldr	r3, [pc, #76]	@ (8005c40 <xTaskResumeAll+0x110>)
 8005bf4:	2201      	movs	r2, #1
 8005bf6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	3b01      	subs	r3, #1
 8005bfc:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d1f2      	bne.n	8005bea <xTaskResumeAll+0xba>

						xPendedTicks = 0;
 8005c04:	4b0f      	ldr	r3, [pc, #60]	@ (8005c44 <xTaskResumeAll+0x114>)
 8005c06:	2200      	movs	r2, #0
 8005c08:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005c0a:	4b0d      	ldr	r3, [pc, #52]	@ (8005c40 <xTaskResumeAll+0x110>)
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d003      	beq.n	8005c1a <xTaskResumeAll+0xea>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005c12:	2301      	movs	r3, #1
 8005c14:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005c16:	f000 fab3 	bl	8006180 <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005c1a:	f000 fad3 	bl	80061c4 <vPortExitCritical>

	return xAlreadyYielded;
 8005c1e:	68bb      	ldr	r3, [r7, #8]
}
 8005c20:	0018      	movs	r0, r3
 8005c22:	46bd      	mov	sp, r7
 8005c24:	b004      	add	sp, #16
 8005c26:	bd80      	pop	{r7, pc}
 8005c28:	2000051c 	.word	0x2000051c
 8005c2c:	200004f4 	.word	0x200004f4
 8005c30:	200004b4 	.word	0x200004b4
 8005c34:	200004fc 	.word	0x200004fc
 8005c38:	200003f8 	.word	0x200003f8
 8005c3c:	200003f4 	.word	0x200003f4
 8005c40:	20000508 	.word	0x20000508
 8005c44:	20000504 	.word	0x20000504

08005c48 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005c48:	b580      	push	{r7, lr}
 8005c4a:	b086      	sub	sp, #24
 8005c4c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005c4e:	2300      	movs	r3, #0
 8005c50:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005c52:	4b4a      	ldr	r3, [pc, #296]	@ (8005d7c <xTaskIncrementTick+0x134>)
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d000      	beq.n	8005c5c <xTaskIncrementTick+0x14>
 8005c5a:	e085      	b.n	8005d68 <xTaskIncrementTick+0x120>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005c5c:	4b48      	ldr	r3, [pc, #288]	@ (8005d80 <xTaskIncrementTick+0x138>)
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	3301      	adds	r3, #1
 8005c62:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005c64:	4b46      	ldr	r3, [pc, #280]	@ (8005d80 <xTaskIncrementTick+0x138>)
 8005c66:	693a      	ldr	r2, [r7, #16]
 8005c68:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005c6a:	693b      	ldr	r3, [r7, #16]
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d118      	bne.n	8005ca2 <xTaskIncrementTick+0x5a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005c70:	4b44      	ldr	r3, [pc, #272]	@ (8005d84 <xTaskIncrementTick+0x13c>)
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d002      	beq.n	8005c80 <xTaskIncrementTick+0x38>
 8005c7a:	b672      	cpsid	i
 8005c7c:	46c0      	nop			@ (mov r8, r8)
 8005c7e:	e7fd      	b.n	8005c7c <xTaskIncrementTick+0x34>
 8005c80:	4b40      	ldr	r3, [pc, #256]	@ (8005d84 <xTaskIncrementTick+0x13c>)
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	60fb      	str	r3, [r7, #12]
 8005c86:	4b40      	ldr	r3, [pc, #256]	@ (8005d88 <xTaskIncrementTick+0x140>)
 8005c88:	681a      	ldr	r2, [r3, #0]
 8005c8a:	4b3e      	ldr	r3, [pc, #248]	@ (8005d84 <xTaskIncrementTick+0x13c>)
 8005c8c:	601a      	str	r2, [r3, #0]
 8005c8e:	4b3e      	ldr	r3, [pc, #248]	@ (8005d88 <xTaskIncrementTick+0x140>)
 8005c90:	68fa      	ldr	r2, [r7, #12]
 8005c92:	601a      	str	r2, [r3, #0]
 8005c94:	4b3d      	ldr	r3, [pc, #244]	@ (8005d8c <xTaskIncrementTick+0x144>)
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	1c5a      	adds	r2, r3, #1
 8005c9a:	4b3c      	ldr	r3, [pc, #240]	@ (8005d8c <xTaskIncrementTick+0x144>)
 8005c9c:	601a      	str	r2, [r3, #0]
 8005c9e:	f000 f975 	bl	8005f8c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005ca2:	4b3b      	ldr	r3, [pc, #236]	@ (8005d90 <xTaskIncrementTick+0x148>)
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	693a      	ldr	r2, [r7, #16]
 8005ca8:	429a      	cmp	r2, r3
 8005caa:	d349      	bcc.n	8005d40 <xTaskIncrementTick+0xf8>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005cac:	4b35      	ldr	r3, [pc, #212]	@ (8005d84 <xTaskIncrementTick+0x13c>)
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d104      	bne.n	8005cc0 <xTaskIncrementTick+0x78>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005cb6:	4b36      	ldr	r3, [pc, #216]	@ (8005d90 <xTaskIncrementTick+0x148>)
 8005cb8:	2201      	movs	r2, #1
 8005cba:	4252      	negs	r2, r2
 8005cbc:	601a      	str	r2, [r3, #0]
					break;
 8005cbe:	e03f      	b.n	8005d40 <xTaskIncrementTick+0xf8>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005cc0:	4b30      	ldr	r3, [pc, #192]	@ (8005d84 <xTaskIncrementTick+0x13c>)
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	68db      	ldr	r3, [r3, #12]
 8005cc6:	68db      	ldr	r3, [r3, #12]
 8005cc8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005cca:	68bb      	ldr	r3, [r7, #8]
 8005ccc:	685b      	ldr	r3, [r3, #4]
 8005cce:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005cd0:	693a      	ldr	r2, [r7, #16]
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	429a      	cmp	r2, r3
 8005cd6:	d203      	bcs.n	8005ce0 <xTaskIncrementTick+0x98>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005cd8:	4b2d      	ldr	r3, [pc, #180]	@ (8005d90 <xTaskIncrementTick+0x148>)
 8005cda:	687a      	ldr	r2, [r7, #4]
 8005cdc:	601a      	str	r2, [r3, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005cde:	e02f      	b.n	8005d40 <xTaskIncrementTick+0xf8>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005ce0:	68bb      	ldr	r3, [r7, #8]
 8005ce2:	3304      	adds	r3, #4
 8005ce4:	0018      	movs	r0, r3
 8005ce6:	f7ff fd43 	bl	8005770 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005cea:	68bb      	ldr	r3, [r7, #8]
 8005cec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d004      	beq.n	8005cfc <xTaskIncrementTick+0xb4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005cf2:	68bb      	ldr	r3, [r7, #8]
 8005cf4:	3318      	adds	r3, #24
 8005cf6:	0018      	movs	r0, r3
 8005cf8:	f7ff fd3a 	bl	8005770 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005cfc:	68bb      	ldr	r3, [r7, #8]
 8005cfe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d00:	4b24      	ldr	r3, [pc, #144]	@ (8005d94 <xTaskIncrementTick+0x14c>)
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	429a      	cmp	r2, r3
 8005d06:	d903      	bls.n	8005d10 <xTaskIncrementTick+0xc8>
 8005d08:	68bb      	ldr	r3, [r7, #8]
 8005d0a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d0c:	4b21      	ldr	r3, [pc, #132]	@ (8005d94 <xTaskIncrementTick+0x14c>)
 8005d0e:	601a      	str	r2, [r3, #0]
 8005d10:	68bb      	ldr	r3, [r7, #8]
 8005d12:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d14:	0013      	movs	r3, r2
 8005d16:	009b      	lsls	r3, r3, #2
 8005d18:	189b      	adds	r3, r3, r2
 8005d1a:	009b      	lsls	r3, r3, #2
 8005d1c:	4a1e      	ldr	r2, [pc, #120]	@ (8005d98 <xTaskIncrementTick+0x150>)
 8005d1e:	189a      	adds	r2, r3, r2
 8005d20:	68bb      	ldr	r3, [r7, #8]
 8005d22:	3304      	adds	r3, #4
 8005d24:	0019      	movs	r1, r3
 8005d26:	0010      	movs	r0, r2
 8005d28:	f7ff fcca 	bl	80056c0 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005d2c:	68bb      	ldr	r3, [r7, #8]
 8005d2e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d30:	4b1a      	ldr	r3, [pc, #104]	@ (8005d9c <xTaskIncrementTick+0x154>)
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d36:	429a      	cmp	r2, r3
 8005d38:	d3b8      	bcc.n	8005cac <xTaskIncrementTick+0x64>
						{
							xSwitchRequired = pdTRUE;
 8005d3a:	2301      	movs	r3, #1
 8005d3c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005d3e:	e7b5      	b.n	8005cac <xTaskIncrementTick+0x64>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005d40:	4b16      	ldr	r3, [pc, #88]	@ (8005d9c <xTaskIncrementTick+0x154>)
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d46:	4914      	ldr	r1, [pc, #80]	@ (8005d98 <xTaskIncrementTick+0x150>)
 8005d48:	0013      	movs	r3, r2
 8005d4a:	009b      	lsls	r3, r3, #2
 8005d4c:	189b      	adds	r3, r3, r2
 8005d4e:	009b      	lsls	r3, r3, #2
 8005d50:	585b      	ldr	r3, [r3, r1]
 8005d52:	2b01      	cmp	r3, #1
 8005d54:	d901      	bls.n	8005d5a <xTaskIncrementTick+0x112>
			{
				xSwitchRequired = pdTRUE;
 8005d56:	2301      	movs	r3, #1
 8005d58:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005d5a:	4b11      	ldr	r3, [pc, #68]	@ (8005da0 <xTaskIncrementTick+0x158>)
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d007      	beq.n	8005d72 <xTaskIncrementTick+0x12a>
			{
				xSwitchRequired = pdTRUE;
 8005d62:	2301      	movs	r3, #1
 8005d64:	617b      	str	r3, [r7, #20]
 8005d66:	e004      	b.n	8005d72 <xTaskIncrementTick+0x12a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005d68:	4b0e      	ldr	r3, [pc, #56]	@ (8005da4 <xTaskIncrementTick+0x15c>)
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	1c5a      	adds	r2, r3, #1
 8005d6e:	4b0d      	ldr	r3, [pc, #52]	@ (8005da4 <xTaskIncrementTick+0x15c>)
 8005d70:	601a      	str	r2, [r3, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005d72:	697b      	ldr	r3, [r7, #20]
}
 8005d74:	0018      	movs	r0, r3
 8005d76:	46bd      	mov	sp, r7
 8005d78:	b006      	add	sp, #24
 8005d7a:	bd80      	pop	{r7, pc}
 8005d7c:	2000051c 	.word	0x2000051c
 8005d80:	200004f8 	.word	0x200004f8
 8005d84:	200004ac 	.word	0x200004ac
 8005d88:	200004b0 	.word	0x200004b0
 8005d8c:	2000050c 	.word	0x2000050c
 8005d90:	20000514 	.word	0x20000514
 8005d94:	200004fc 	.word	0x200004fc
 8005d98:	200003f8 	.word	0x200003f8
 8005d9c:	200003f4 	.word	0x200003f4
 8005da0:	20000508 	.word	0x20000508
 8005da4:	20000504 	.word	0x20000504

08005da8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005da8:	b580      	push	{r7, lr}
 8005daa:	b082      	sub	sp, #8
 8005dac:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005dae:	4b25      	ldr	r3, [pc, #148]	@ (8005e44 <vTaskSwitchContext+0x9c>)
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d003      	beq.n	8005dbe <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005db6:	4b24      	ldr	r3, [pc, #144]	@ (8005e48 <vTaskSwitchContext+0xa0>)
 8005db8:	2201      	movs	r2, #1
 8005dba:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005dbc:	e03e      	b.n	8005e3c <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 8005dbe:	4b22      	ldr	r3, [pc, #136]	@ (8005e48 <vTaskSwitchContext+0xa0>)
 8005dc0:	2200      	movs	r2, #0
 8005dc2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005dc4:	4b21      	ldr	r3, [pc, #132]	@ (8005e4c <vTaskSwitchContext+0xa4>)
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	607b      	str	r3, [r7, #4]
 8005dca:	e008      	b.n	8005dde <vTaskSwitchContext+0x36>
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d102      	bne.n	8005dd8 <vTaskSwitchContext+0x30>
 8005dd2:	b672      	cpsid	i
 8005dd4:	46c0      	nop			@ (mov r8, r8)
 8005dd6:	e7fd      	b.n	8005dd4 <vTaskSwitchContext+0x2c>
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	3b01      	subs	r3, #1
 8005ddc:	607b      	str	r3, [r7, #4]
 8005dde:	491c      	ldr	r1, [pc, #112]	@ (8005e50 <vTaskSwitchContext+0xa8>)
 8005de0:	687a      	ldr	r2, [r7, #4]
 8005de2:	0013      	movs	r3, r2
 8005de4:	009b      	lsls	r3, r3, #2
 8005de6:	189b      	adds	r3, r3, r2
 8005de8:	009b      	lsls	r3, r3, #2
 8005dea:	585b      	ldr	r3, [r3, r1]
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d0ed      	beq.n	8005dcc <vTaskSwitchContext+0x24>
 8005df0:	687a      	ldr	r2, [r7, #4]
 8005df2:	0013      	movs	r3, r2
 8005df4:	009b      	lsls	r3, r3, #2
 8005df6:	189b      	adds	r3, r3, r2
 8005df8:	009b      	lsls	r3, r3, #2
 8005dfa:	4a15      	ldr	r2, [pc, #84]	@ (8005e50 <vTaskSwitchContext+0xa8>)
 8005dfc:	189b      	adds	r3, r3, r2
 8005dfe:	603b      	str	r3, [r7, #0]
 8005e00:	683b      	ldr	r3, [r7, #0]
 8005e02:	685b      	ldr	r3, [r3, #4]
 8005e04:	685a      	ldr	r2, [r3, #4]
 8005e06:	683b      	ldr	r3, [r7, #0]
 8005e08:	605a      	str	r2, [r3, #4]
 8005e0a:	683b      	ldr	r3, [r7, #0]
 8005e0c:	685a      	ldr	r2, [r3, #4]
 8005e0e:	683b      	ldr	r3, [r7, #0]
 8005e10:	3308      	adds	r3, #8
 8005e12:	429a      	cmp	r2, r3
 8005e14:	d104      	bne.n	8005e20 <vTaskSwitchContext+0x78>
 8005e16:	683b      	ldr	r3, [r7, #0]
 8005e18:	685b      	ldr	r3, [r3, #4]
 8005e1a:	685a      	ldr	r2, [r3, #4]
 8005e1c:	683b      	ldr	r3, [r7, #0]
 8005e1e:	605a      	str	r2, [r3, #4]
 8005e20:	683b      	ldr	r3, [r7, #0]
 8005e22:	685b      	ldr	r3, [r3, #4]
 8005e24:	68da      	ldr	r2, [r3, #12]
 8005e26:	4b0b      	ldr	r3, [pc, #44]	@ (8005e54 <vTaskSwitchContext+0xac>)
 8005e28:	601a      	str	r2, [r3, #0]
 8005e2a:	4b08      	ldr	r3, [pc, #32]	@ (8005e4c <vTaskSwitchContext+0xa4>)
 8005e2c:	687a      	ldr	r2, [r7, #4]
 8005e2e:	601a      	str	r2, [r3, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005e30:	4b08      	ldr	r3, [pc, #32]	@ (8005e54 <vTaskSwitchContext+0xac>)
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	334c      	adds	r3, #76	@ 0x4c
 8005e36:	001a      	movs	r2, r3
 8005e38:	4b07      	ldr	r3, [pc, #28]	@ (8005e58 <vTaskSwitchContext+0xb0>)
 8005e3a:	601a      	str	r2, [r3, #0]
}
 8005e3c:	46c0      	nop			@ (mov r8, r8)
 8005e3e:	46bd      	mov	sp, r7
 8005e40:	b002      	add	sp, #8
 8005e42:	bd80      	pop	{r7, pc}
 8005e44:	2000051c 	.word	0x2000051c
 8005e48:	20000508 	.word	0x20000508
 8005e4c:	200004fc 	.word	0x200004fc
 8005e50:	200003f8 	.word	0x200003f8
 8005e54:	200003f4 	.word	0x200003f4
 8005e58:	200001bc 	.word	0x200001bc

08005e5c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005e5c:	b580      	push	{r7, lr}
 8005e5e:	b082      	sub	sp, #8
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005e64:	f000 f84e 	bl	8005f04 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005e68:	4b03      	ldr	r3, [pc, #12]	@ (8005e78 <prvIdleTask+0x1c>)
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	2b01      	cmp	r3, #1
 8005e6e:	d9f9      	bls.n	8005e64 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005e70:	f000 f986 	bl	8006180 <vPortYield>
		prvCheckTasksWaitingTermination();
 8005e74:	e7f6      	b.n	8005e64 <prvIdleTask+0x8>
 8005e76:	46c0      	nop			@ (mov r8, r8)
 8005e78:	200003f8 	.word	0x200003f8

08005e7c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005e7c:	b580      	push	{r7, lr}
 8005e7e:	b082      	sub	sp, #8
 8005e80:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005e82:	2300      	movs	r3, #0
 8005e84:	607b      	str	r3, [r7, #4]
 8005e86:	e00c      	b.n	8005ea2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005e88:	687a      	ldr	r2, [r7, #4]
 8005e8a:	0013      	movs	r3, r2
 8005e8c:	009b      	lsls	r3, r3, #2
 8005e8e:	189b      	adds	r3, r3, r2
 8005e90:	009b      	lsls	r3, r3, #2
 8005e92:	4a14      	ldr	r2, [pc, #80]	@ (8005ee4 <prvInitialiseTaskLists+0x68>)
 8005e94:	189b      	adds	r3, r3, r2
 8005e96:	0018      	movs	r0, r3
 8005e98:	f7ff fbe9 	bl	800566e <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	3301      	adds	r3, #1
 8005ea0:	607b      	str	r3, [r7, #4]
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	2b06      	cmp	r3, #6
 8005ea6:	d9ef      	bls.n	8005e88 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005ea8:	4b0f      	ldr	r3, [pc, #60]	@ (8005ee8 <prvInitialiseTaskLists+0x6c>)
 8005eaa:	0018      	movs	r0, r3
 8005eac:	f7ff fbdf 	bl	800566e <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005eb0:	4b0e      	ldr	r3, [pc, #56]	@ (8005eec <prvInitialiseTaskLists+0x70>)
 8005eb2:	0018      	movs	r0, r3
 8005eb4:	f7ff fbdb 	bl	800566e <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005eb8:	4b0d      	ldr	r3, [pc, #52]	@ (8005ef0 <prvInitialiseTaskLists+0x74>)
 8005eba:	0018      	movs	r0, r3
 8005ebc:	f7ff fbd7 	bl	800566e <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005ec0:	4b0c      	ldr	r3, [pc, #48]	@ (8005ef4 <prvInitialiseTaskLists+0x78>)
 8005ec2:	0018      	movs	r0, r3
 8005ec4:	f7ff fbd3 	bl	800566e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005ec8:	4b0b      	ldr	r3, [pc, #44]	@ (8005ef8 <prvInitialiseTaskLists+0x7c>)
 8005eca:	0018      	movs	r0, r3
 8005ecc:	f7ff fbcf 	bl	800566e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005ed0:	4b0a      	ldr	r3, [pc, #40]	@ (8005efc <prvInitialiseTaskLists+0x80>)
 8005ed2:	4a05      	ldr	r2, [pc, #20]	@ (8005ee8 <prvInitialiseTaskLists+0x6c>)
 8005ed4:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005ed6:	4b0a      	ldr	r3, [pc, #40]	@ (8005f00 <prvInitialiseTaskLists+0x84>)
 8005ed8:	4a04      	ldr	r2, [pc, #16]	@ (8005eec <prvInitialiseTaskLists+0x70>)
 8005eda:	601a      	str	r2, [r3, #0]
}
 8005edc:	46c0      	nop			@ (mov r8, r8)
 8005ede:	46bd      	mov	sp, r7
 8005ee0:	b002      	add	sp, #8
 8005ee2:	bd80      	pop	{r7, pc}
 8005ee4:	200003f8 	.word	0x200003f8
 8005ee8:	20000484 	.word	0x20000484
 8005eec:	20000498 	.word	0x20000498
 8005ef0:	200004b4 	.word	0x200004b4
 8005ef4:	200004c8 	.word	0x200004c8
 8005ef8:	200004e0 	.word	0x200004e0
 8005efc:	200004ac 	.word	0x200004ac
 8005f00:	200004b0 	.word	0x200004b0

08005f04 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005f04:	b580      	push	{r7, lr}
 8005f06:	b082      	sub	sp, #8
 8005f08:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005f0a:	e01a      	b.n	8005f42 <prvCheckTasksWaitingTermination+0x3e>
		{
			taskENTER_CRITICAL();
 8005f0c:	f000 f948 	bl	80061a0 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005f10:	4b10      	ldr	r3, [pc, #64]	@ (8005f54 <prvCheckTasksWaitingTermination+0x50>)
 8005f12:	68db      	ldr	r3, [r3, #12]
 8005f14:	68db      	ldr	r3, [r3, #12]
 8005f16:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	3304      	adds	r3, #4
 8005f1c:	0018      	movs	r0, r3
 8005f1e:	f7ff fc27 	bl	8005770 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005f22:	4b0d      	ldr	r3, [pc, #52]	@ (8005f58 <prvCheckTasksWaitingTermination+0x54>)
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	1e5a      	subs	r2, r3, #1
 8005f28:	4b0b      	ldr	r3, [pc, #44]	@ (8005f58 <prvCheckTasksWaitingTermination+0x54>)
 8005f2a:	601a      	str	r2, [r3, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005f2c:	4b0b      	ldr	r3, [pc, #44]	@ (8005f5c <prvCheckTasksWaitingTermination+0x58>)
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	1e5a      	subs	r2, r3, #1
 8005f32:	4b0a      	ldr	r3, [pc, #40]	@ (8005f5c <prvCheckTasksWaitingTermination+0x58>)
 8005f34:	601a      	str	r2, [r3, #0]
			}
			taskEXIT_CRITICAL();
 8005f36:	f000 f945 	bl	80061c4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	0018      	movs	r0, r3
 8005f3e:	f000 f80f 	bl	8005f60 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005f42:	4b06      	ldr	r3, [pc, #24]	@ (8005f5c <prvCheckTasksWaitingTermination+0x58>)
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d1e0      	bne.n	8005f0c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005f4a:	46c0      	nop			@ (mov r8, r8)
 8005f4c:	46c0      	nop			@ (mov r8, r8)
 8005f4e:	46bd      	mov	sp, r7
 8005f50:	b002      	add	sp, #8
 8005f52:	bd80      	pop	{r7, pc}
 8005f54:	200004c8 	.word	0x200004c8
 8005f58:	200004f4 	.word	0x200004f4
 8005f5c:	200004dc 	.word	0x200004dc

08005f60 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005f60:	b580      	push	{r7, lr}
 8005f62:	b082      	sub	sp, #8
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	334c      	adds	r3, #76	@ 0x4c
 8005f6c:	0018      	movs	r0, r3
 8005f6e:	f000 fb8f 	bl	8006690 <_reclaim_reent>

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f76:	0018      	movs	r0, r3
 8005f78:	f000 fa5a 	bl	8006430 <vPortFree>
			vPortFree( pxTCB );
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	0018      	movs	r0, r3
 8005f80:	f000 fa56 	bl	8006430 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005f84:	46c0      	nop			@ (mov r8, r8)
 8005f86:	46bd      	mov	sp, r7
 8005f88:	b002      	add	sp, #8
 8005f8a:	bd80      	pop	{r7, pc}

08005f8c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005f8c:	b580      	push	{r7, lr}
 8005f8e:	b082      	sub	sp, #8
 8005f90:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005f92:	4b0b      	ldr	r3, [pc, #44]	@ (8005fc0 <prvResetNextTaskUnblockTime+0x34>)
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d104      	bne.n	8005fa6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005f9c:	4b09      	ldr	r3, [pc, #36]	@ (8005fc4 <prvResetNextTaskUnblockTime+0x38>)
 8005f9e:	2201      	movs	r2, #1
 8005fa0:	4252      	negs	r2, r2
 8005fa2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005fa4:	e008      	b.n	8005fb8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005fa6:	4b06      	ldr	r3, [pc, #24]	@ (8005fc0 <prvResetNextTaskUnblockTime+0x34>)
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	68db      	ldr	r3, [r3, #12]
 8005fac:	68db      	ldr	r3, [r3, #12]
 8005fae:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	685a      	ldr	r2, [r3, #4]
 8005fb4:	4b03      	ldr	r3, [pc, #12]	@ (8005fc4 <prvResetNextTaskUnblockTime+0x38>)
 8005fb6:	601a      	str	r2, [r3, #0]
}
 8005fb8:	46c0      	nop			@ (mov r8, r8)
 8005fba:	46bd      	mov	sp, r7
 8005fbc:	b002      	add	sp, #8
 8005fbe:	bd80      	pop	{r7, pc}
 8005fc0:	200004ac 	.word	0x200004ac
 8005fc4:	20000514 	.word	0x20000514

08005fc8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005fc8:	b580      	push	{r7, lr}
 8005fca:	b084      	sub	sp, #16
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	6078      	str	r0, [r7, #4]
 8005fd0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005fd2:	4b21      	ldr	r3, [pc, #132]	@ (8006058 <prvAddCurrentTaskToDelayedList+0x90>)
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005fd8:	4b20      	ldr	r3, [pc, #128]	@ (800605c <prvAddCurrentTaskToDelayedList+0x94>)
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	3304      	adds	r3, #4
 8005fde:	0018      	movs	r0, r3
 8005fe0:	f7ff fbc6 	bl	8005770 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	3301      	adds	r3, #1
 8005fe8:	d10b      	bne.n	8006002 <prvAddCurrentTaskToDelayedList+0x3a>
 8005fea:	683b      	ldr	r3, [r7, #0]
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d008      	beq.n	8006002 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005ff0:	4b1a      	ldr	r3, [pc, #104]	@ (800605c <prvAddCurrentTaskToDelayedList+0x94>)
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	1d1a      	adds	r2, r3, #4
 8005ff6:	4b1a      	ldr	r3, [pc, #104]	@ (8006060 <prvAddCurrentTaskToDelayedList+0x98>)
 8005ff8:	0011      	movs	r1, r2
 8005ffa:	0018      	movs	r0, r3
 8005ffc:	f7ff fb60 	bl	80056c0 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006000:	e026      	b.n	8006050 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006002:	68fa      	ldr	r2, [r7, #12]
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	18d3      	adds	r3, r2, r3
 8006008:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800600a:	4b14      	ldr	r3, [pc, #80]	@ (800605c <prvAddCurrentTaskToDelayedList+0x94>)
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	68ba      	ldr	r2, [r7, #8]
 8006010:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006012:	68ba      	ldr	r2, [r7, #8]
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	429a      	cmp	r2, r3
 8006018:	d209      	bcs.n	800602e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800601a:	4b12      	ldr	r3, [pc, #72]	@ (8006064 <prvAddCurrentTaskToDelayedList+0x9c>)
 800601c:	681a      	ldr	r2, [r3, #0]
 800601e:	4b0f      	ldr	r3, [pc, #60]	@ (800605c <prvAddCurrentTaskToDelayedList+0x94>)
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	3304      	adds	r3, #4
 8006024:	0019      	movs	r1, r3
 8006026:	0010      	movs	r0, r2
 8006028:	f7ff fb6c 	bl	8005704 <vListInsert>
}
 800602c:	e010      	b.n	8006050 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800602e:	4b0e      	ldr	r3, [pc, #56]	@ (8006068 <prvAddCurrentTaskToDelayedList+0xa0>)
 8006030:	681a      	ldr	r2, [r3, #0]
 8006032:	4b0a      	ldr	r3, [pc, #40]	@ (800605c <prvAddCurrentTaskToDelayedList+0x94>)
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	3304      	adds	r3, #4
 8006038:	0019      	movs	r1, r3
 800603a:	0010      	movs	r0, r2
 800603c:	f7ff fb62 	bl	8005704 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006040:	4b0a      	ldr	r3, [pc, #40]	@ (800606c <prvAddCurrentTaskToDelayedList+0xa4>)
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	68ba      	ldr	r2, [r7, #8]
 8006046:	429a      	cmp	r2, r3
 8006048:	d202      	bcs.n	8006050 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800604a:	4b08      	ldr	r3, [pc, #32]	@ (800606c <prvAddCurrentTaskToDelayedList+0xa4>)
 800604c:	68ba      	ldr	r2, [r7, #8]
 800604e:	601a      	str	r2, [r3, #0]
}
 8006050:	46c0      	nop			@ (mov r8, r8)
 8006052:	46bd      	mov	sp, r7
 8006054:	b004      	add	sp, #16
 8006056:	bd80      	pop	{r7, pc}
 8006058:	200004f8 	.word	0x200004f8
 800605c:	200003f4 	.word	0x200003f4
 8006060:	200004e0 	.word	0x200004e0
 8006064:	200004b0 	.word	0x200004b0
 8006068:	200004ac 	.word	0x200004ac
 800606c:	20000514 	.word	0x20000514

08006070 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006070:	b580      	push	{r7, lr}
 8006072:	b084      	sub	sp, #16
 8006074:	af00      	add	r7, sp, #0
 8006076:	60f8      	str	r0, [r7, #12]
 8006078:	60b9      	str	r1, [r7, #8]
 800607a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	3b04      	subs	r3, #4
 8006080:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	2280      	movs	r2, #128	@ 0x80
 8006086:	0452      	lsls	r2, r2, #17
 8006088:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	3b04      	subs	r3, #4
 800608e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 8006090:	68ba      	ldr	r2, [r7, #8]
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	3b04      	subs	r3, #4
 800609a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800609c:	4a08      	ldr	r2, [pc, #32]	@ (80060c0 <pxPortInitialiseStack+0x50>)
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	3b14      	subs	r3, #20
 80060a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80060a8:	687a      	ldr	r2, [r7, #4]
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	3b20      	subs	r3, #32
 80060b2:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80060b4:	68fb      	ldr	r3, [r7, #12]
}
 80060b6:	0018      	movs	r0, r3
 80060b8:	46bd      	mov	sp, r7
 80060ba:	b004      	add	sp, #16
 80060bc:	bd80      	pop	{r7, pc}
 80060be:	46c0      	nop			@ (mov r8, r8)
 80060c0:	080060c5 	.word	0x080060c5

080060c4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80060c4:	b580      	push	{r7, lr}
 80060c6:	b082      	sub	sp, #8
 80060c8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80060ca:	2300      	movs	r3, #0
 80060cc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80060ce:	4b08      	ldr	r3, [pc, #32]	@ (80060f0 <prvTaskExitError+0x2c>)
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	3301      	adds	r3, #1
 80060d4:	d002      	beq.n	80060dc <prvTaskExitError+0x18>
 80060d6:	b672      	cpsid	i
 80060d8:	46c0      	nop			@ (mov r8, r8)
 80060da:	e7fd      	b.n	80060d8 <prvTaskExitError+0x14>
	portDISABLE_INTERRUPTS();
 80060dc:	b672      	cpsid	i
	while( ulDummy == 0 )
 80060de:	46c0      	nop			@ (mov r8, r8)
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d0fc      	beq.n	80060e0 <prvTaskExitError+0x1c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80060e6:	46c0      	nop			@ (mov r8, r8)
 80060e8:	46c0      	nop			@ (mov r8, r8)
 80060ea:	46bd      	mov	sp, r7
 80060ec:	b002      	add	sp, #8
 80060ee:	bd80      	pop	{r7, pc}
 80060f0:	200001b8 	.word	0x200001b8

080060f4 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
 80060f4:	b580      	push	{r7, lr}
 80060f6:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
 80060f8:	46c0      	nop			@ (mov r8, r8)
 80060fa:	46bd      	mov	sp, r7
 80060fc:	bd80      	pop	{r7, pc}
	...

08006100 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 8006100:	4a0b      	ldr	r2, [pc, #44]	@ (8006130 <pxCurrentTCBConst2>)
 8006102:	6813      	ldr	r3, [r2, #0]
 8006104:	6818      	ldr	r0, [r3, #0]
 8006106:	3020      	adds	r0, #32
 8006108:	f380 8809 	msr	PSP, r0
 800610c:	2002      	movs	r0, #2
 800610e:	f380 8814 	msr	CONTROL, r0
 8006112:	f3bf 8f6f 	isb	sy
 8006116:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 8006118:	46ae      	mov	lr, r5
 800611a:	bc08      	pop	{r3}
 800611c:	bc04      	pop	{r2}
 800611e:	b662      	cpsie	i
 8006120:	4718      	bx	r3
 8006122:	46c0      	nop			@ (mov r8, r8)
 8006124:	46c0      	nop			@ (mov r8, r8)
 8006126:	46c0      	nop			@ (mov r8, r8)
 8006128:	46c0      	nop			@ (mov r8, r8)
 800612a:	46c0      	nop			@ (mov r8, r8)
 800612c:	46c0      	nop			@ (mov r8, r8)
 800612e:	46c0      	nop			@ (mov r8, r8)

08006130 <pxCurrentTCBConst2>:
 8006130:	200003f4 	.word	0x200003f4
	"	bx   r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
 8006134:	46c0      	nop			@ (mov r8, r8)
 8006136:	46c0      	nop			@ (mov r8, r8)

08006138 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006138:	b580      	push	{r7, lr}
 800613a:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priority as the kernel. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800613c:	4b0e      	ldr	r3, [pc, #56]	@ (8006178 <xPortStartScheduler+0x40>)
 800613e:	681a      	ldr	r2, [r3, #0]
 8006140:	4b0d      	ldr	r3, [pc, #52]	@ (8006178 <xPortStartScheduler+0x40>)
 8006142:	21ff      	movs	r1, #255	@ 0xff
 8006144:	0409      	lsls	r1, r1, #16
 8006146:	430a      	orrs	r2, r1
 8006148:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800614a:	4b0b      	ldr	r3, [pc, #44]	@ (8006178 <xPortStartScheduler+0x40>)
 800614c:	681a      	ldr	r2, [r3, #0]
 800614e:	4b0a      	ldr	r3, [pc, #40]	@ (8006178 <xPortStartScheduler+0x40>)
 8006150:	21ff      	movs	r1, #255	@ 0xff
 8006152:	0609      	lsls	r1, r1, #24
 8006154:	430a      	orrs	r2, r1
 8006156:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006158:	f000 f898 	bl	800628c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800615c:	4b07      	ldr	r3, [pc, #28]	@ (800617c <xPortStartScheduler+0x44>)
 800615e:	2200      	movs	r2, #0
 8006160:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
 8006162:	f7ff ffcd 	bl	8006100 <vPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006166:	f7ff fe1f 	bl	8005da8 <vTaskSwitchContext>
	prvTaskExitError();
 800616a:	f7ff ffab 	bl	80060c4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800616e:	2300      	movs	r3, #0
}
 8006170:	0018      	movs	r0, r3
 8006172:	46bd      	mov	sp, r7
 8006174:	bd80      	pop	{r7, pc}
 8006176:	46c0      	nop			@ (mov r8, r8)
 8006178:	e000ed20 	.word	0xe000ed20
 800617c:	200001b8 	.word	0x200001b8

08006180 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 8006180:	b580      	push	{r7, lr}
 8006182:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006184:	4b05      	ldr	r3, [pc, #20]	@ (800619c <vPortYield+0x1c>)
 8006186:	2280      	movs	r2, #128	@ 0x80
 8006188:	0552      	lsls	r2, r2, #21
 800618a:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 800618c:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8006190:	f3bf 8f6f 	isb	sy
}
 8006194:	46c0      	nop			@ (mov r8, r8)
 8006196:	46bd      	mov	sp, r7
 8006198:	bd80      	pop	{r7, pc}
 800619a:	46c0      	nop			@ (mov r8, r8)
 800619c:	e000ed04 	.word	0xe000ed04

080061a0 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80061a0:	b580      	push	{r7, lr}
 80061a2:	af00      	add	r7, sp, #0
	portDISABLE_INTERRUPTS();
 80061a4:	b672      	cpsid	i
	uxCriticalNesting++;
 80061a6:	4b06      	ldr	r3, [pc, #24]	@ (80061c0 <vPortEnterCritical+0x20>)
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	1c5a      	adds	r2, r3, #1
 80061ac:	4b04      	ldr	r3, [pc, #16]	@ (80061c0 <vPortEnterCritical+0x20>)
 80061ae:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
 80061b0:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 80061b4:	f3bf 8f6f 	isb	sy
}
 80061b8:	46c0      	nop			@ (mov r8, r8)
 80061ba:	46bd      	mov	sp, r7
 80061bc:	bd80      	pop	{r7, pc}
 80061be:	46c0      	nop			@ (mov r8, r8)
 80061c0:	200001b8 	.word	0x200001b8

080061c4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80061c4:	b580      	push	{r7, lr}
 80061c6:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80061c8:	4b09      	ldr	r3, [pc, #36]	@ (80061f0 <vPortExitCritical+0x2c>)
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d102      	bne.n	80061d6 <vPortExitCritical+0x12>
 80061d0:	b672      	cpsid	i
 80061d2:	46c0      	nop			@ (mov r8, r8)
 80061d4:	e7fd      	b.n	80061d2 <vPortExitCritical+0xe>
	uxCriticalNesting--;
 80061d6:	4b06      	ldr	r3, [pc, #24]	@ (80061f0 <vPortExitCritical+0x2c>)
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	1e5a      	subs	r2, r3, #1
 80061dc:	4b04      	ldr	r3, [pc, #16]	@ (80061f0 <vPortExitCritical+0x2c>)
 80061de:	601a      	str	r2, [r3, #0]
	if( uxCriticalNesting == 0 )
 80061e0:	4b03      	ldr	r3, [pc, #12]	@ (80061f0 <vPortExitCritical+0x2c>)
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d100      	bne.n	80061ea <vPortExitCritical+0x26>
	{
		portENABLE_INTERRUPTS();
 80061e8:	b662      	cpsie	i
	}
}
 80061ea:	46c0      	nop			@ (mov r8, r8)
 80061ec:	46bd      	mov	sp, r7
 80061ee:	bd80      	pop	{r7, pc}
 80061f0:	200001b8 	.word	0x200001b8

080061f4 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
 80061f4:	f3ef 8010 	mrs	r0, PRIMASK
 80061f8:	b672      	cpsid	i
 80061fa:	4770      	bx	lr
					" mrs r0, PRIMASK	\n"
					" cpsid i			\n"
					" bx lr				  "
					::: "memory"
				  );
}
 80061fc:	46c0      	nop			@ (mov r8, r8)
 80061fe:	0018      	movs	r0, r3

08006200 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
 8006200:	f380 8810 	msr	PRIMASK, r0
 8006204:	4770      	bx	lr
					" msr PRIMASK, r0	\n"
					" bx lr				  "
					::: "memory"
				  );
}
 8006206:	46c0      	nop			@ (mov r8, r8)
	...

08006210 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006210:	f3ef 8009 	mrs	r0, PSP
 8006214:	4b0e      	ldr	r3, [pc, #56]	@ (8006250 <pxCurrentTCBConst>)
 8006216:	681a      	ldr	r2, [r3, #0]
 8006218:	3820      	subs	r0, #32
 800621a:	6010      	str	r0, [r2, #0]
 800621c:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 800621e:	4644      	mov	r4, r8
 8006220:	464d      	mov	r5, r9
 8006222:	4656      	mov	r6, sl
 8006224:	465f      	mov	r7, fp
 8006226:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8006228:	b508      	push	{r3, lr}
 800622a:	b672      	cpsid	i
 800622c:	f7ff fdbc 	bl	8005da8 <vTaskSwitchContext>
 8006230:	b662      	cpsie	i
 8006232:	bc0c      	pop	{r2, r3}
 8006234:	6811      	ldr	r1, [r2, #0]
 8006236:	6808      	ldr	r0, [r1, #0]
 8006238:	3010      	adds	r0, #16
 800623a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800623c:	46a0      	mov	r8, r4
 800623e:	46a9      	mov	r9, r5
 8006240:	46b2      	mov	sl, r6
 8006242:	46bb      	mov	fp, r7
 8006244:	f380 8809 	msr	PSP, r0
 8006248:	3820      	subs	r0, #32
 800624a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800624c:	4718      	bx	r3
 800624e:	46c0      	nop			@ (mov r8, r8)

08006250 <pxCurrentTCBConst>:
 8006250:	200003f4 	.word	0x200003f4
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
 8006254:	46c0      	nop			@ (mov r8, r8)
 8006256:	46c0      	nop			@ (mov r8, r8)

08006258 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006258:	b580      	push	{r7, lr}
 800625a:	b082      	sub	sp, #8
 800625c:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 800625e:	f7ff ffc9 	bl	80061f4 <ulSetInterruptMaskFromISR>
 8006262:	0003      	movs	r3, r0
 8006264:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006266:	f7ff fcef 	bl	8005c48 <xTaskIncrementTick>
 800626a:	1e03      	subs	r3, r0, #0
 800626c:	d003      	beq.n	8006276 <SysTick_Handler+0x1e>
		{
			/* Pend a context switch. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800626e:	4b06      	ldr	r3, [pc, #24]	@ (8006288 <SysTick_Handler+0x30>)
 8006270:	2280      	movs	r2, #128	@ 0x80
 8006272:	0552      	lsls	r2, r2, #21
 8006274:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	0018      	movs	r0, r3
 800627a:	f7ff ffc1 	bl	8006200 <vClearInterruptMaskFromISR>
}
 800627e:	46c0      	nop			@ (mov r8, r8)
 8006280:	46bd      	mov	sp, r7
 8006282:	b002      	add	sp, #8
 8006284:	bd80      	pop	{r7, pc}
 8006286:	46c0      	nop			@ (mov r8, r8)
 8006288:	e000ed04 	.word	0xe000ed04

0800628c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800628c:	b580      	push	{r7, lr}
 800628e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR;
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and reset the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006290:	4b0b      	ldr	r3, [pc, #44]	@ (80062c0 <vPortSetupTimerInterrupt+0x34>)
 8006292:	2200      	movs	r2, #0
 8006294:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006296:	4b0b      	ldr	r3, [pc, #44]	@ (80062c4 <vPortSetupTimerInterrupt+0x38>)
 8006298:	2200      	movs	r2, #0
 800629a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800629c:	4b0a      	ldr	r3, [pc, #40]	@ (80062c8 <vPortSetupTimerInterrupt+0x3c>)
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	22fa      	movs	r2, #250	@ 0xfa
 80062a2:	0091      	lsls	r1, r2, #2
 80062a4:	0018      	movs	r0, r3
 80062a6:	f7f9 ff41 	bl	800012c <__udivsi3>
 80062aa:	0003      	movs	r3, r0
 80062ac:	001a      	movs	r2, r3
 80062ae:	4b07      	ldr	r3, [pc, #28]	@ (80062cc <vPortSetupTimerInterrupt+0x40>)
 80062b0:	3a01      	subs	r2, #1
 80062b2:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT;
 80062b4:	4b02      	ldr	r3, [pc, #8]	@ (80062c0 <vPortSetupTimerInterrupt+0x34>)
 80062b6:	2207      	movs	r2, #7
 80062b8:	601a      	str	r2, [r3, #0]
}
 80062ba:	46c0      	nop			@ (mov r8, r8)
 80062bc:	46bd      	mov	sp, r7
 80062be:	bd80      	pop	{r7, pc}
 80062c0:	e000e010 	.word	0xe000e010
 80062c4:	e000e018 	.word	0xe000e018
 80062c8:	200001ac 	.word	0x200001ac
 80062cc:	e000e014 	.word	0xe000e014

080062d0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80062d0:	b580      	push	{r7, lr}
 80062d2:	b086      	sub	sp, #24
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80062d8:	2300      	movs	r3, #0
 80062da:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 80062dc:	f7ff fc1c 	bl	8005b18 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80062e0:	4b4d      	ldr	r3, [pc, #308]	@ (8006418 <pvPortMalloc+0x148>)
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d101      	bne.n	80062ec <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80062e8:	f000 f8f2 	bl	80064d0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80062ec:	4b4b      	ldr	r3, [pc, #300]	@ (800641c <pvPortMalloc+0x14c>)
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	687a      	ldr	r2, [r7, #4]
 80062f2:	4013      	ands	r3, r2
 80062f4:	d000      	beq.n	80062f8 <pvPortMalloc+0x28>
 80062f6:	e080      	b.n	80063fa <pvPortMalloc+0x12a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d013      	beq.n	8006326 <pvPortMalloc+0x56>
			{
				xWantedSize += xHeapStructSize;
 80062fe:	2208      	movs	r2, #8
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	189b      	adds	r3, r3, r2
 8006304:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	2207      	movs	r2, #7
 800630a:	4013      	ands	r3, r2
 800630c:	d00b      	beq.n	8006326 <pvPortMalloc+0x56>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	2207      	movs	r2, #7
 8006312:	4393      	bics	r3, r2
 8006314:	3308      	adds	r3, #8
 8006316:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	2207      	movs	r2, #7
 800631c:	4013      	ands	r3, r2
 800631e:	d002      	beq.n	8006326 <pvPortMalloc+0x56>
 8006320:	b672      	cpsid	i
 8006322:	46c0      	nop			@ (mov r8, r8)
 8006324:	e7fd      	b.n	8006322 <pvPortMalloc+0x52>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	2b00      	cmp	r3, #0
 800632a:	d066      	beq.n	80063fa <pvPortMalloc+0x12a>
 800632c:	4b3c      	ldr	r3, [pc, #240]	@ (8006420 <pvPortMalloc+0x150>)
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	687a      	ldr	r2, [r7, #4]
 8006332:	429a      	cmp	r2, r3
 8006334:	d861      	bhi.n	80063fa <pvPortMalloc+0x12a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006336:	4b3b      	ldr	r3, [pc, #236]	@ (8006424 <pvPortMalloc+0x154>)
 8006338:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 800633a:	4b3a      	ldr	r3, [pc, #232]	@ (8006424 <pvPortMalloc+0x154>)
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006340:	e004      	b.n	800634c <pvPortMalloc+0x7c>
				{
					pxPreviousBlock = pxBlock;
 8006342:	697b      	ldr	r3, [r7, #20]
 8006344:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006346:	697b      	ldr	r3, [r7, #20]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800634c:	697b      	ldr	r3, [r7, #20]
 800634e:	685b      	ldr	r3, [r3, #4]
 8006350:	687a      	ldr	r2, [r7, #4]
 8006352:	429a      	cmp	r2, r3
 8006354:	d903      	bls.n	800635e <pvPortMalloc+0x8e>
 8006356:	697b      	ldr	r3, [r7, #20]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	2b00      	cmp	r3, #0
 800635c:	d1f1      	bne.n	8006342 <pvPortMalloc+0x72>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800635e:	4b2e      	ldr	r3, [pc, #184]	@ (8006418 <pvPortMalloc+0x148>)
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	697a      	ldr	r2, [r7, #20]
 8006364:	429a      	cmp	r2, r3
 8006366:	d048      	beq.n	80063fa <pvPortMalloc+0x12a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006368:	693b      	ldr	r3, [r7, #16]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	2208      	movs	r2, #8
 800636e:	189b      	adds	r3, r3, r2
 8006370:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006372:	697b      	ldr	r3, [r7, #20]
 8006374:	681a      	ldr	r2, [r3, #0]
 8006376:	693b      	ldr	r3, [r7, #16]
 8006378:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800637a:	697b      	ldr	r3, [r7, #20]
 800637c:	685a      	ldr	r2, [r3, #4]
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	1ad2      	subs	r2, r2, r3
 8006382:	2308      	movs	r3, #8
 8006384:	005b      	lsls	r3, r3, #1
 8006386:	429a      	cmp	r2, r3
 8006388:	d917      	bls.n	80063ba <pvPortMalloc+0xea>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800638a:	697a      	ldr	r2, [r7, #20]
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	18d3      	adds	r3, r2, r3
 8006390:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006392:	68bb      	ldr	r3, [r7, #8]
 8006394:	2207      	movs	r2, #7
 8006396:	4013      	ands	r3, r2
 8006398:	d002      	beq.n	80063a0 <pvPortMalloc+0xd0>
 800639a:	b672      	cpsid	i
 800639c:	46c0      	nop			@ (mov r8, r8)
 800639e:	e7fd      	b.n	800639c <pvPortMalloc+0xcc>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80063a0:	697b      	ldr	r3, [r7, #20]
 80063a2:	685a      	ldr	r2, [r3, #4]
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	1ad2      	subs	r2, r2, r3
 80063a8:	68bb      	ldr	r3, [r7, #8]
 80063aa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80063ac:	697b      	ldr	r3, [r7, #20]
 80063ae:	687a      	ldr	r2, [r7, #4]
 80063b0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80063b2:	68bb      	ldr	r3, [r7, #8]
 80063b4:	0018      	movs	r0, r3
 80063b6:	f000 f8eb 	bl	8006590 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80063ba:	4b19      	ldr	r3, [pc, #100]	@ (8006420 <pvPortMalloc+0x150>)
 80063bc:	681a      	ldr	r2, [r3, #0]
 80063be:	697b      	ldr	r3, [r7, #20]
 80063c0:	685b      	ldr	r3, [r3, #4]
 80063c2:	1ad2      	subs	r2, r2, r3
 80063c4:	4b16      	ldr	r3, [pc, #88]	@ (8006420 <pvPortMalloc+0x150>)
 80063c6:	601a      	str	r2, [r3, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80063c8:	4b15      	ldr	r3, [pc, #84]	@ (8006420 <pvPortMalloc+0x150>)
 80063ca:	681a      	ldr	r2, [r3, #0]
 80063cc:	4b16      	ldr	r3, [pc, #88]	@ (8006428 <pvPortMalloc+0x158>)
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	429a      	cmp	r2, r3
 80063d2:	d203      	bcs.n	80063dc <pvPortMalloc+0x10c>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80063d4:	4b12      	ldr	r3, [pc, #72]	@ (8006420 <pvPortMalloc+0x150>)
 80063d6:	681a      	ldr	r2, [r3, #0]
 80063d8:	4b13      	ldr	r3, [pc, #76]	@ (8006428 <pvPortMalloc+0x158>)
 80063da:	601a      	str	r2, [r3, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80063dc:	697b      	ldr	r3, [r7, #20]
 80063de:	685a      	ldr	r2, [r3, #4]
 80063e0:	4b0e      	ldr	r3, [pc, #56]	@ (800641c <pvPortMalloc+0x14c>)
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	431a      	orrs	r2, r3
 80063e6:	697b      	ldr	r3, [r7, #20]
 80063e8:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80063ea:	697b      	ldr	r3, [r7, #20]
 80063ec:	2200      	movs	r2, #0
 80063ee:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80063f0:	4b0e      	ldr	r3, [pc, #56]	@ (800642c <pvPortMalloc+0x15c>)
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	1c5a      	adds	r2, r3, #1
 80063f6:	4b0d      	ldr	r3, [pc, #52]	@ (800642c <pvPortMalloc+0x15c>)
 80063f8:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80063fa:	f7ff fb99 	bl	8005b30 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	2207      	movs	r2, #7
 8006402:	4013      	ands	r3, r2
 8006404:	d002      	beq.n	800640c <pvPortMalloc+0x13c>
 8006406:	b672      	cpsid	i
 8006408:	46c0      	nop			@ (mov r8, r8)
 800640a:	e7fd      	b.n	8006408 <pvPortMalloc+0x138>
	return pvReturn;
 800640c:	68fb      	ldr	r3, [r7, #12]
}
 800640e:	0018      	movs	r0, r3
 8006410:	46bd      	mov	sp, r7
 8006412:	b006      	add	sp, #24
 8006414:	bd80      	pop	{r7, pc}
 8006416:	46c0      	nop			@ (mov r8, r8)
 8006418:	20001128 	.word	0x20001128
 800641c:	2000113c 	.word	0x2000113c
 8006420:	2000112c 	.word	0x2000112c
 8006424:	20001120 	.word	0x20001120
 8006428:	20001130 	.word	0x20001130
 800642c:	20001134 	.word	0x20001134

08006430 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006430:	b580      	push	{r7, lr}
 8006432:	b084      	sub	sp, #16
 8006434:	af00      	add	r7, sp, #0
 8006436:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	2b00      	cmp	r3, #0
 8006440:	d03c      	beq.n	80064bc <vPortFree+0x8c>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006442:	2308      	movs	r3, #8
 8006444:	425b      	negs	r3, r3
 8006446:	68fa      	ldr	r2, [r7, #12]
 8006448:	18d3      	adds	r3, r2, r3
 800644a:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006450:	68bb      	ldr	r3, [r7, #8]
 8006452:	685a      	ldr	r2, [r3, #4]
 8006454:	4b1b      	ldr	r3, [pc, #108]	@ (80064c4 <vPortFree+0x94>)
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	4013      	ands	r3, r2
 800645a:	d102      	bne.n	8006462 <vPortFree+0x32>
 800645c:	b672      	cpsid	i
 800645e:	46c0      	nop			@ (mov r8, r8)
 8006460:	e7fd      	b.n	800645e <vPortFree+0x2e>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006462:	68bb      	ldr	r3, [r7, #8]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	2b00      	cmp	r3, #0
 8006468:	d002      	beq.n	8006470 <vPortFree+0x40>
 800646a:	b672      	cpsid	i
 800646c:	46c0      	nop			@ (mov r8, r8)
 800646e:	e7fd      	b.n	800646c <vPortFree+0x3c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006470:	68bb      	ldr	r3, [r7, #8]
 8006472:	685a      	ldr	r2, [r3, #4]
 8006474:	4b13      	ldr	r3, [pc, #76]	@ (80064c4 <vPortFree+0x94>)
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	4013      	ands	r3, r2
 800647a:	d01f      	beq.n	80064bc <vPortFree+0x8c>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800647c:	68bb      	ldr	r3, [r7, #8]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	2b00      	cmp	r3, #0
 8006482:	d11b      	bne.n	80064bc <vPortFree+0x8c>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006484:	68bb      	ldr	r3, [r7, #8]
 8006486:	685a      	ldr	r2, [r3, #4]
 8006488:	4b0e      	ldr	r3, [pc, #56]	@ (80064c4 <vPortFree+0x94>)
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	43db      	mvns	r3, r3
 800648e:	401a      	ands	r2, r3
 8006490:	68bb      	ldr	r3, [r7, #8]
 8006492:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006494:	f7ff fb40 	bl	8005b18 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006498:	68bb      	ldr	r3, [r7, #8]
 800649a:	685a      	ldr	r2, [r3, #4]
 800649c:	4b0a      	ldr	r3, [pc, #40]	@ (80064c8 <vPortFree+0x98>)
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	18d2      	adds	r2, r2, r3
 80064a2:	4b09      	ldr	r3, [pc, #36]	@ (80064c8 <vPortFree+0x98>)
 80064a4:	601a      	str	r2, [r3, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80064a6:	68bb      	ldr	r3, [r7, #8]
 80064a8:	0018      	movs	r0, r3
 80064aa:	f000 f871 	bl	8006590 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80064ae:	4b07      	ldr	r3, [pc, #28]	@ (80064cc <vPortFree+0x9c>)
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	1c5a      	adds	r2, r3, #1
 80064b4:	4b05      	ldr	r3, [pc, #20]	@ (80064cc <vPortFree+0x9c>)
 80064b6:	601a      	str	r2, [r3, #0]
				}
				( void ) xTaskResumeAll();
 80064b8:	f7ff fb3a 	bl	8005b30 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80064bc:	46c0      	nop			@ (mov r8, r8)
 80064be:	46bd      	mov	sp, r7
 80064c0:	b004      	add	sp, #16
 80064c2:	bd80      	pop	{r7, pc}
 80064c4:	2000113c 	.word	0x2000113c
 80064c8:	2000112c 	.word	0x2000112c
 80064cc:	20001138 	.word	0x20001138

080064d0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80064d0:	b580      	push	{r7, lr}
 80064d2:	b084      	sub	sp, #16
 80064d4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80064d6:	23c0      	movs	r3, #192	@ 0xc0
 80064d8:	011b      	lsls	r3, r3, #4
 80064da:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80064dc:	4b26      	ldr	r3, [pc, #152]	@ (8006578 <prvHeapInit+0xa8>)
 80064de:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	2207      	movs	r2, #7
 80064e4:	4013      	ands	r3, r2
 80064e6:	d00c      	beq.n	8006502 <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	3307      	adds	r3, #7
 80064ec:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	2207      	movs	r2, #7
 80064f2:	4393      	bics	r3, r2
 80064f4:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80064f6:	68ba      	ldr	r2, [r7, #8]
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	1ad2      	subs	r2, r2, r3
 80064fc:	4b1e      	ldr	r3, [pc, #120]	@ (8006578 <prvHeapInit+0xa8>)
 80064fe:	18d3      	adds	r3, r2, r3
 8006500:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006506:	4b1d      	ldr	r3, [pc, #116]	@ (800657c <prvHeapInit+0xac>)
 8006508:	687a      	ldr	r2, [r7, #4]
 800650a:	601a      	str	r2, [r3, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800650c:	4b1b      	ldr	r3, [pc, #108]	@ (800657c <prvHeapInit+0xac>)
 800650e:	2200      	movs	r2, #0
 8006510:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	68ba      	ldr	r2, [r7, #8]
 8006516:	18d3      	adds	r3, r2, r3
 8006518:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800651a:	2208      	movs	r2, #8
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	1a9b      	subs	r3, r3, r2
 8006520:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	2207      	movs	r2, #7
 8006526:	4393      	bics	r3, r2
 8006528:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800652a:	68fa      	ldr	r2, [r7, #12]
 800652c:	4b14      	ldr	r3, [pc, #80]	@ (8006580 <prvHeapInit+0xb0>)
 800652e:	601a      	str	r2, [r3, #0]
	pxEnd->xBlockSize = 0;
 8006530:	4b13      	ldr	r3, [pc, #76]	@ (8006580 <prvHeapInit+0xb0>)
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	2200      	movs	r2, #0
 8006536:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006538:	4b11      	ldr	r3, [pc, #68]	@ (8006580 <prvHeapInit+0xb0>)
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	2200      	movs	r2, #0
 800653e:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006544:	683b      	ldr	r3, [r7, #0]
 8006546:	68fa      	ldr	r2, [r7, #12]
 8006548:	1ad2      	subs	r2, r2, r3
 800654a:	683b      	ldr	r3, [r7, #0]
 800654c:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800654e:	4b0c      	ldr	r3, [pc, #48]	@ (8006580 <prvHeapInit+0xb0>)
 8006550:	681a      	ldr	r2, [r3, #0]
 8006552:	683b      	ldr	r3, [r7, #0]
 8006554:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006556:	683b      	ldr	r3, [r7, #0]
 8006558:	685a      	ldr	r2, [r3, #4]
 800655a:	4b0a      	ldr	r3, [pc, #40]	@ (8006584 <prvHeapInit+0xb4>)
 800655c:	601a      	str	r2, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800655e:	683b      	ldr	r3, [r7, #0]
 8006560:	685a      	ldr	r2, [r3, #4]
 8006562:	4b09      	ldr	r3, [pc, #36]	@ (8006588 <prvHeapInit+0xb8>)
 8006564:	601a      	str	r2, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006566:	4b09      	ldr	r3, [pc, #36]	@ (800658c <prvHeapInit+0xbc>)
 8006568:	2280      	movs	r2, #128	@ 0x80
 800656a:	0612      	lsls	r2, r2, #24
 800656c:	601a      	str	r2, [r3, #0]
}
 800656e:	46c0      	nop			@ (mov r8, r8)
 8006570:	46bd      	mov	sp, r7
 8006572:	b004      	add	sp, #16
 8006574:	bd80      	pop	{r7, pc}
 8006576:	46c0      	nop			@ (mov r8, r8)
 8006578:	20000520 	.word	0x20000520
 800657c:	20001120 	.word	0x20001120
 8006580:	20001128 	.word	0x20001128
 8006584:	20001130 	.word	0x20001130
 8006588:	2000112c 	.word	0x2000112c
 800658c:	2000113c 	.word	0x2000113c

08006590 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006590:	b580      	push	{r7, lr}
 8006592:	b084      	sub	sp, #16
 8006594:	af00      	add	r7, sp, #0
 8006596:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006598:	4b27      	ldr	r3, [pc, #156]	@ (8006638 <prvInsertBlockIntoFreeList+0xa8>)
 800659a:	60fb      	str	r3, [r7, #12]
 800659c:	e002      	b.n	80065a4 <prvInsertBlockIntoFreeList+0x14>
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	60fb      	str	r3, [r7, #12]
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	687a      	ldr	r2, [r7, #4]
 80065aa:	429a      	cmp	r2, r3
 80065ac:	d8f7      	bhi.n	800659e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	685b      	ldr	r3, [r3, #4]
 80065b6:	68ba      	ldr	r2, [r7, #8]
 80065b8:	18d3      	adds	r3, r2, r3
 80065ba:	687a      	ldr	r2, [r7, #4]
 80065bc:	429a      	cmp	r2, r3
 80065be:	d108      	bne.n	80065d2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	685a      	ldr	r2, [r3, #4]
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	685b      	ldr	r3, [r3, #4]
 80065c8:	18d2      	adds	r2, r2, r3
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	685b      	ldr	r3, [r3, #4]
 80065da:	68ba      	ldr	r2, [r7, #8]
 80065dc:	18d2      	adds	r2, r2, r3
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	429a      	cmp	r2, r3
 80065e4:	d118      	bne.n	8006618 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	681a      	ldr	r2, [r3, #0]
 80065ea:	4b14      	ldr	r3, [pc, #80]	@ (800663c <prvInsertBlockIntoFreeList+0xac>)
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	429a      	cmp	r2, r3
 80065f0:	d00d      	beq.n	800660e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	685a      	ldr	r2, [r3, #4]
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	685b      	ldr	r3, [r3, #4]
 80065fc:	18d2      	adds	r2, r2, r3
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	681a      	ldr	r2, [r3, #0]
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	601a      	str	r2, [r3, #0]
 800660c:	e008      	b.n	8006620 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800660e:	4b0b      	ldr	r3, [pc, #44]	@ (800663c <prvInsertBlockIntoFreeList+0xac>)
 8006610:	681a      	ldr	r2, [r3, #0]
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	601a      	str	r2, [r3, #0]
 8006616:	e003      	b.n	8006620 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	681a      	ldr	r2, [r3, #0]
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006620:	68fa      	ldr	r2, [r7, #12]
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	429a      	cmp	r2, r3
 8006626:	d002      	beq.n	800662e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	687a      	ldr	r2, [r7, #4]
 800662c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800662e:	46c0      	nop			@ (mov r8, r8)
 8006630:	46bd      	mov	sp, r7
 8006632:	b004      	add	sp, #16
 8006634:	bd80      	pop	{r7, pc}
 8006636:	46c0      	nop			@ (mov r8, r8)
 8006638:	20001120 	.word	0x20001120
 800663c:	20001128 	.word	0x20001128

08006640 <siprintf>:
 8006640:	b40e      	push	{r1, r2, r3}
 8006642:	b500      	push	{lr}
 8006644:	490b      	ldr	r1, [pc, #44]	@ (8006674 <siprintf+0x34>)
 8006646:	b09c      	sub	sp, #112	@ 0x70
 8006648:	ab1d      	add	r3, sp, #116	@ 0x74
 800664a:	9002      	str	r0, [sp, #8]
 800664c:	9006      	str	r0, [sp, #24]
 800664e:	9107      	str	r1, [sp, #28]
 8006650:	9104      	str	r1, [sp, #16]
 8006652:	4809      	ldr	r0, [pc, #36]	@ (8006678 <siprintf+0x38>)
 8006654:	4909      	ldr	r1, [pc, #36]	@ (800667c <siprintf+0x3c>)
 8006656:	cb04      	ldmia	r3!, {r2}
 8006658:	9105      	str	r1, [sp, #20]
 800665a:	6800      	ldr	r0, [r0, #0]
 800665c:	a902      	add	r1, sp, #8
 800665e:	9301      	str	r3, [sp, #4]
 8006660:	f000 fa08 	bl	8006a74 <_svfiprintf_r>
 8006664:	2200      	movs	r2, #0
 8006666:	9b02      	ldr	r3, [sp, #8]
 8006668:	701a      	strb	r2, [r3, #0]
 800666a:	b01c      	add	sp, #112	@ 0x70
 800666c:	bc08      	pop	{r3}
 800666e:	b003      	add	sp, #12
 8006670:	4718      	bx	r3
 8006672:	46c0      	nop			@ (mov r8, r8)
 8006674:	7fffffff 	.word	0x7fffffff
 8006678:	200001bc 	.word	0x200001bc
 800667c:	ffff0208 	.word	0xffff0208

08006680 <memset>:
 8006680:	0003      	movs	r3, r0
 8006682:	1882      	adds	r2, r0, r2
 8006684:	4293      	cmp	r3, r2
 8006686:	d100      	bne.n	800668a <memset+0xa>
 8006688:	4770      	bx	lr
 800668a:	7019      	strb	r1, [r3, #0]
 800668c:	3301      	adds	r3, #1
 800668e:	e7f9      	b.n	8006684 <memset+0x4>

08006690 <_reclaim_reent>:
 8006690:	4b2e      	ldr	r3, [pc, #184]	@ (800674c <_reclaim_reent+0xbc>)
 8006692:	b570      	push	{r4, r5, r6, lr}
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	0004      	movs	r4, r0
 8006698:	4283      	cmp	r3, r0
 800669a:	d04f      	beq.n	800673c <_reclaim_reent+0xac>
 800669c:	69c3      	ldr	r3, [r0, #28]
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d017      	beq.n	80066d2 <_reclaim_reent+0x42>
 80066a2:	68db      	ldr	r3, [r3, #12]
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d00d      	beq.n	80066c4 <_reclaim_reent+0x34>
 80066a8:	2500      	movs	r5, #0
 80066aa:	69e3      	ldr	r3, [r4, #28]
 80066ac:	68db      	ldr	r3, [r3, #12]
 80066ae:	5959      	ldr	r1, [r3, r5]
 80066b0:	2900      	cmp	r1, #0
 80066b2:	d144      	bne.n	800673e <_reclaim_reent+0xae>
 80066b4:	3504      	adds	r5, #4
 80066b6:	2d80      	cmp	r5, #128	@ 0x80
 80066b8:	d1f7      	bne.n	80066aa <_reclaim_reent+0x1a>
 80066ba:	69e3      	ldr	r3, [r4, #28]
 80066bc:	0020      	movs	r0, r4
 80066be:	68d9      	ldr	r1, [r3, #12]
 80066c0:	f000 f87c 	bl	80067bc <_free_r>
 80066c4:	69e3      	ldr	r3, [r4, #28]
 80066c6:	6819      	ldr	r1, [r3, #0]
 80066c8:	2900      	cmp	r1, #0
 80066ca:	d002      	beq.n	80066d2 <_reclaim_reent+0x42>
 80066cc:	0020      	movs	r0, r4
 80066ce:	f000 f875 	bl	80067bc <_free_r>
 80066d2:	6961      	ldr	r1, [r4, #20]
 80066d4:	2900      	cmp	r1, #0
 80066d6:	d002      	beq.n	80066de <_reclaim_reent+0x4e>
 80066d8:	0020      	movs	r0, r4
 80066da:	f000 f86f 	bl	80067bc <_free_r>
 80066de:	69e1      	ldr	r1, [r4, #28]
 80066e0:	2900      	cmp	r1, #0
 80066e2:	d002      	beq.n	80066ea <_reclaim_reent+0x5a>
 80066e4:	0020      	movs	r0, r4
 80066e6:	f000 f869 	bl	80067bc <_free_r>
 80066ea:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80066ec:	2900      	cmp	r1, #0
 80066ee:	d002      	beq.n	80066f6 <_reclaim_reent+0x66>
 80066f0:	0020      	movs	r0, r4
 80066f2:	f000 f863 	bl	80067bc <_free_r>
 80066f6:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80066f8:	2900      	cmp	r1, #0
 80066fa:	d002      	beq.n	8006702 <_reclaim_reent+0x72>
 80066fc:	0020      	movs	r0, r4
 80066fe:	f000 f85d 	bl	80067bc <_free_r>
 8006702:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8006704:	2900      	cmp	r1, #0
 8006706:	d002      	beq.n	800670e <_reclaim_reent+0x7e>
 8006708:	0020      	movs	r0, r4
 800670a:	f000 f857 	bl	80067bc <_free_r>
 800670e:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8006710:	2900      	cmp	r1, #0
 8006712:	d002      	beq.n	800671a <_reclaim_reent+0x8a>
 8006714:	0020      	movs	r0, r4
 8006716:	f000 f851 	bl	80067bc <_free_r>
 800671a:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800671c:	2900      	cmp	r1, #0
 800671e:	d002      	beq.n	8006726 <_reclaim_reent+0x96>
 8006720:	0020      	movs	r0, r4
 8006722:	f000 f84b 	bl	80067bc <_free_r>
 8006726:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8006728:	2900      	cmp	r1, #0
 800672a:	d002      	beq.n	8006732 <_reclaim_reent+0xa2>
 800672c:	0020      	movs	r0, r4
 800672e:	f000 f845 	bl	80067bc <_free_r>
 8006732:	6a23      	ldr	r3, [r4, #32]
 8006734:	2b00      	cmp	r3, #0
 8006736:	d001      	beq.n	800673c <_reclaim_reent+0xac>
 8006738:	0020      	movs	r0, r4
 800673a:	4798      	blx	r3
 800673c:	bd70      	pop	{r4, r5, r6, pc}
 800673e:	680e      	ldr	r6, [r1, #0]
 8006740:	0020      	movs	r0, r4
 8006742:	f000 f83b 	bl	80067bc <_free_r>
 8006746:	0031      	movs	r1, r6
 8006748:	e7b2      	b.n	80066b0 <_reclaim_reent+0x20>
 800674a:	46c0      	nop			@ (mov r8, r8)
 800674c:	200001bc 	.word	0x200001bc

08006750 <__errno>:
 8006750:	4b01      	ldr	r3, [pc, #4]	@ (8006758 <__errno+0x8>)
 8006752:	6818      	ldr	r0, [r3, #0]
 8006754:	4770      	bx	lr
 8006756:	46c0      	nop			@ (mov r8, r8)
 8006758:	200001bc 	.word	0x200001bc

0800675c <__libc_init_array>:
 800675c:	b570      	push	{r4, r5, r6, lr}
 800675e:	2600      	movs	r6, #0
 8006760:	4c0c      	ldr	r4, [pc, #48]	@ (8006794 <__libc_init_array+0x38>)
 8006762:	4d0d      	ldr	r5, [pc, #52]	@ (8006798 <__libc_init_array+0x3c>)
 8006764:	1b64      	subs	r4, r4, r5
 8006766:	10a4      	asrs	r4, r4, #2
 8006768:	42a6      	cmp	r6, r4
 800676a:	d109      	bne.n	8006780 <__libc_init_array+0x24>
 800676c:	2600      	movs	r6, #0
 800676e:	f000 fc65 	bl	800703c <_init>
 8006772:	4c0a      	ldr	r4, [pc, #40]	@ (800679c <__libc_init_array+0x40>)
 8006774:	4d0a      	ldr	r5, [pc, #40]	@ (80067a0 <__libc_init_array+0x44>)
 8006776:	1b64      	subs	r4, r4, r5
 8006778:	10a4      	asrs	r4, r4, #2
 800677a:	42a6      	cmp	r6, r4
 800677c:	d105      	bne.n	800678a <__libc_init_array+0x2e>
 800677e:	bd70      	pop	{r4, r5, r6, pc}
 8006780:	00b3      	lsls	r3, r6, #2
 8006782:	58eb      	ldr	r3, [r5, r3]
 8006784:	4798      	blx	r3
 8006786:	3601      	adds	r6, #1
 8006788:	e7ee      	b.n	8006768 <__libc_init_array+0xc>
 800678a:	00b3      	lsls	r3, r6, #2
 800678c:	58eb      	ldr	r3, [r5, r3]
 800678e:	4798      	blx	r3
 8006790:	3601      	adds	r6, #1
 8006792:	e7f2      	b.n	800677a <__libc_init_array+0x1e>
 8006794:	080071b4 	.word	0x080071b4
 8006798:	080071b4 	.word	0x080071b4
 800679c:	080071b8 	.word	0x080071b8
 80067a0:	080071b4 	.word	0x080071b4

080067a4 <__retarget_lock_acquire_recursive>:
 80067a4:	4770      	bx	lr

080067a6 <__retarget_lock_release_recursive>:
 80067a6:	4770      	bx	lr

080067a8 <memcpy>:
 80067a8:	2300      	movs	r3, #0
 80067aa:	b510      	push	{r4, lr}
 80067ac:	429a      	cmp	r2, r3
 80067ae:	d100      	bne.n	80067b2 <memcpy+0xa>
 80067b0:	bd10      	pop	{r4, pc}
 80067b2:	5ccc      	ldrb	r4, [r1, r3]
 80067b4:	54c4      	strb	r4, [r0, r3]
 80067b6:	3301      	adds	r3, #1
 80067b8:	e7f8      	b.n	80067ac <memcpy+0x4>
	...

080067bc <_free_r>:
 80067bc:	b570      	push	{r4, r5, r6, lr}
 80067be:	0005      	movs	r5, r0
 80067c0:	1e0c      	subs	r4, r1, #0
 80067c2:	d010      	beq.n	80067e6 <_free_r+0x2a>
 80067c4:	3c04      	subs	r4, #4
 80067c6:	6823      	ldr	r3, [r4, #0]
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	da00      	bge.n	80067ce <_free_r+0x12>
 80067cc:	18e4      	adds	r4, r4, r3
 80067ce:	0028      	movs	r0, r5
 80067d0:	f000 f8e0 	bl	8006994 <__malloc_lock>
 80067d4:	4a1d      	ldr	r2, [pc, #116]	@ (800684c <_free_r+0x90>)
 80067d6:	6813      	ldr	r3, [r2, #0]
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d105      	bne.n	80067e8 <_free_r+0x2c>
 80067dc:	6063      	str	r3, [r4, #4]
 80067de:	6014      	str	r4, [r2, #0]
 80067e0:	0028      	movs	r0, r5
 80067e2:	f000 f8df 	bl	80069a4 <__malloc_unlock>
 80067e6:	bd70      	pop	{r4, r5, r6, pc}
 80067e8:	42a3      	cmp	r3, r4
 80067ea:	d908      	bls.n	80067fe <_free_r+0x42>
 80067ec:	6820      	ldr	r0, [r4, #0]
 80067ee:	1821      	adds	r1, r4, r0
 80067f0:	428b      	cmp	r3, r1
 80067f2:	d1f3      	bne.n	80067dc <_free_r+0x20>
 80067f4:	6819      	ldr	r1, [r3, #0]
 80067f6:	685b      	ldr	r3, [r3, #4]
 80067f8:	1809      	adds	r1, r1, r0
 80067fa:	6021      	str	r1, [r4, #0]
 80067fc:	e7ee      	b.n	80067dc <_free_r+0x20>
 80067fe:	001a      	movs	r2, r3
 8006800:	685b      	ldr	r3, [r3, #4]
 8006802:	2b00      	cmp	r3, #0
 8006804:	d001      	beq.n	800680a <_free_r+0x4e>
 8006806:	42a3      	cmp	r3, r4
 8006808:	d9f9      	bls.n	80067fe <_free_r+0x42>
 800680a:	6811      	ldr	r1, [r2, #0]
 800680c:	1850      	adds	r0, r2, r1
 800680e:	42a0      	cmp	r0, r4
 8006810:	d10b      	bne.n	800682a <_free_r+0x6e>
 8006812:	6820      	ldr	r0, [r4, #0]
 8006814:	1809      	adds	r1, r1, r0
 8006816:	1850      	adds	r0, r2, r1
 8006818:	6011      	str	r1, [r2, #0]
 800681a:	4283      	cmp	r3, r0
 800681c:	d1e0      	bne.n	80067e0 <_free_r+0x24>
 800681e:	6818      	ldr	r0, [r3, #0]
 8006820:	685b      	ldr	r3, [r3, #4]
 8006822:	1841      	adds	r1, r0, r1
 8006824:	6011      	str	r1, [r2, #0]
 8006826:	6053      	str	r3, [r2, #4]
 8006828:	e7da      	b.n	80067e0 <_free_r+0x24>
 800682a:	42a0      	cmp	r0, r4
 800682c:	d902      	bls.n	8006834 <_free_r+0x78>
 800682e:	230c      	movs	r3, #12
 8006830:	602b      	str	r3, [r5, #0]
 8006832:	e7d5      	b.n	80067e0 <_free_r+0x24>
 8006834:	6820      	ldr	r0, [r4, #0]
 8006836:	1821      	adds	r1, r4, r0
 8006838:	428b      	cmp	r3, r1
 800683a:	d103      	bne.n	8006844 <_free_r+0x88>
 800683c:	6819      	ldr	r1, [r3, #0]
 800683e:	685b      	ldr	r3, [r3, #4]
 8006840:	1809      	adds	r1, r1, r0
 8006842:	6021      	str	r1, [r4, #0]
 8006844:	6063      	str	r3, [r4, #4]
 8006846:	6054      	str	r4, [r2, #4]
 8006848:	e7ca      	b.n	80067e0 <_free_r+0x24>
 800684a:	46c0      	nop			@ (mov r8, r8)
 800684c:	20001284 	.word	0x20001284

08006850 <sbrk_aligned>:
 8006850:	b570      	push	{r4, r5, r6, lr}
 8006852:	4e0f      	ldr	r6, [pc, #60]	@ (8006890 <sbrk_aligned+0x40>)
 8006854:	000d      	movs	r5, r1
 8006856:	6831      	ldr	r1, [r6, #0]
 8006858:	0004      	movs	r4, r0
 800685a:	2900      	cmp	r1, #0
 800685c:	d102      	bne.n	8006864 <sbrk_aligned+0x14>
 800685e:	f000 fb99 	bl	8006f94 <_sbrk_r>
 8006862:	6030      	str	r0, [r6, #0]
 8006864:	0029      	movs	r1, r5
 8006866:	0020      	movs	r0, r4
 8006868:	f000 fb94 	bl	8006f94 <_sbrk_r>
 800686c:	1c43      	adds	r3, r0, #1
 800686e:	d103      	bne.n	8006878 <sbrk_aligned+0x28>
 8006870:	2501      	movs	r5, #1
 8006872:	426d      	negs	r5, r5
 8006874:	0028      	movs	r0, r5
 8006876:	bd70      	pop	{r4, r5, r6, pc}
 8006878:	2303      	movs	r3, #3
 800687a:	1cc5      	adds	r5, r0, #3
 800687c:	439d      	bics	r5, r3
 800687e:	42a8      	cmp	r0, r5
 8006880:	d0f8      	beq.n	8006874 <sbrk_aligned+0x24>
 8006882:	1a29      	subs	r1, r5, r0
 8006884:	0020      	movs	r0, r4
 8006886:	f000 fb85 	bl	8006f94 <_sbrk_r>
 800688a:	3001      	adds	r0, #1
 800688c:	d1f2      	bne.n	8006874 <sbrk_aligned+0x24>
 800688e:	e7ef      	b.n	8006870 <sbrk_aligned+0x20>
 8006890:	20001280 	.word	0x20001280

08006894 <_malloc_r>:
 8006894:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006896:	2203      	movs	r2, #3
 8006898:	1ccb      	adds	r3, r1, #3
 800689a:	4393      	bics	r3, r2
 800689c:	3308      	adds	r3, #8
 800689e:	0005      	movs	r5, r0
 80068a0:	001f      	movs	r7, r3
 80068a2:	2b0c      	cmp	r3, #12
 80068a4:	d234      	bcs.n	8006910 <_malloc_r+0x7c>
 80068a6:	270c      	movs	r7, #12
 80068a8:	42b9      	cmp	r1, r7
 80068aa:	d833      	bhi.n	8006914 <_malloc_r+0x80>
 80068ac:	0028      	movs	r0, r5
 80068ae:	f000 f871 	bl	8006994 <__malloc_lock>
 80068b2:	4e37      	ldr	r6, [pc, #220]	@ (8006990 <_malloc_r+0xfc>)
 80068b4:	6833      	ldr	r3, [r6, #0]
 80068b6:	001c      	movs	r4, r3
 80068b8:	2c00      	cmp	r4, #0
 80068ba:	d12f      	bne.n	800691c <_malloc_r+0x88>
 80068bc:	0039      	movs	r1, r7
 80068be:	0028      	movs	r0, r5
 80068c0:	f7ff ffc6 	bl	8006850 <sbrk_aligned>
 80068c4:	0004      	movs	r4, r0
 80068c6:	1c43      	adds	r3, r0, #1
 80068c8:	d15f      	bne.n	800698a <_malloc_r+0xf6>
 80068ca:	6834      	ldr	r4, [r6, #0]
 80068cc:	9400      	str	r4, [sp, #0]
 80068ce:	9b00      	ldr	r3, [sp, #0]
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d14a      	bne.n	800696a <_malloc_r+0xd6>
 80068d4:	2c00      	cmp	r4, #0
 80068d6:	d052      	beq.n	800697e <_malloc_r+0xea>
 80068d8:	6823      	ldr	r3, [r4, #0]
 80068da:	0028      	movs	r0, r5
 80068dc:	18e3      	adds	r3, r4, r3
 80068de:	9900      	ldr	r1, [sp, #0]
 80068e0:	9301      	str	r3, [sp, #4]
 80068e2:	f000 fb57 	bl	8006f94 <_sbrk_r>
 80068e6:	9b01      	ldr	r3, [sp, #4]
 80068e8:	4283      	cmp	r3, r0
 80068ea:	d148      	bne.n	800697e <_malloc_r+0xea>
 80068ec:	6823      	ldr	r3, [r4, #0]
 80068ee:	0028      	movs	r0, r5
 80068f0:	1aff      	subs	r7, r7, r3
 80068f2:	0039      	movs	r1, r7
 80068f4:	f7ff ffac 	bl	8006850 <sbrk_aligned>
 80068f8:	3001      	adds	r0, #1
 80068fa:	d040      	beq.n	800697e <_malloc_r+0xea>
 80068fc:	6823      	ldr	r3, [r4, #0]
 80068fe:	19db      	adds	r3, r3, r7
 8006900:	6023      	str	r3, [r4, #0]
 8006902:	6833      	ldr	r3, [r6, #0]
 8006904:	685a      	ldr	r2, [r3, #4]
 8006906:	2a00      	cmp	r2, #0
 8006908:	d133      	bne.n	8006972 <_malloc_r+0xde>
 800690a:	9b00      	ldr	r3, [sp, #0]
 800690c:	6033      	str	r3, [r6, #0]
 800690e:	e019      	b.n	8006944 <_malloc_r+0xb0>
 8006910:	2b00      	cmp	r3, #0
 8006912:	dac9      	bge.n	80068a8 <_malloc_r+0x14>
 8006914:	230c      	movs	r3, #12
 8006916:	602b      	str	r3, [r5, #0]
 8006918:	2000      	movs	r0, #0
 800691a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800691c:	6821      	ldr	r1, [r4, #0]
 800691e:	1bc9      	subs	r1, r1, r7
 8006920:	d420      	bmi.n	8006964 <_malloc_r+0xd0>
 8006922:	290b      	cmp	r1, #11
 8006924:	d90a      	bls.n	800693c <_malloc_r+0xa8>
 8006926:	19e2      	adds	r2, r4, r7
 8006928:	6027      	str	r7, [r4, #0]
 800692a:	42a3      	cmp	r3, r4
 800692c:	d104      	bne.n	8006938 <_malloc_r+0xa4>
 800692e:	6032      	str	r2, [r6, #0]
 8006930:	6863      	ldr	r3, [r4, #4]
 8006932:	6011      	str	r1, [r2, #0]
 8006934:	6053      	str	r3, [r2, #4]
 8006936:	e005      	b.n	8006944 <_malloc_r+0xb0>
 8006938:	605a      	str	r2, [r3, #4]
 800693a:	e7f9      	b.n	8006930 <_malloc_r+0x9c>
 800693c:	6862      	ldr	r2, [r4, #4]
 800693e:	42a3      	cmp	r3, r4
 8006940:	d10e      	bne.n	8006960 <_malloc_r+0xcc>
 8006942:	6032      	str	r2, [r6, #0]
 8006944:	0028      	movs	r0, r5
 8006946:	f000 f82d 	bl	80069a4 <__malloc_unlock>
 800694a:	0020      	movs	r0, r4
 800694c:	2207      	movs	r2, #7
 800694e:	300b      	adds	r0, #11
 8006950:	1d23      	adds	r3, r4, #4
 8006952:	4390      	bics	r0, r2
 8006954:	1ac2      	subs	r2, r0, r3
 8006956:	4298      	cmp	r0, r3
 8006958:	d0df      	beq.n	800691a <_malloc_r+0x86>
 800695a:	1a1b      	subs	r3, r3, r0
 800695c:	50a3      	str	r3, [r4, r2]
 800695e:	e7dc      	b.n	800691a <_malloc_r+0x86>
 8006960:	605a      	str	r2, [r3, #4]
 8006962:	e7ef      	b.n	8006944 <_malloc_r+0xb0>
 8006964:	0023      	movs	r3, r4
 8006966:	6864      	ldr	r4, [r4, #4]
 8006968:	e7a6      	b.n	80068b8 <_malloc_r+0x24>
 800696a:	9c00      	ldr	r4, [sp, #0]
 800696c:	6863      	ldr	r3, [r4, #4]
 800696e:	9300      	str	r3, [sp, #0]
 8006970:	e7ad      	b.n	80068ce <_malloc_r+0x3a>
 8006972:	001a      	movs	r2, r3
 8006974:	685b      	ldr	r3, [r3, #4]
 8006976:	42a3      	cmp	r3, r4
 8006978:	d1fb      	bne.n	8006972 <_malloc_r+0xde>
 800697a:	2300      	movs	r3, #0
 800697c:	e7da      	b.n	8006934 <_malloc_r+0xa0>
 800697e:	230c      	movs	r3, #12
 8006980:	0028      	movs	r0, r5
 8006982:	602b      	str	r3, [r5, #0]
 8006984:	f000 f80e 	bl	80069a4 <__malloc_unlock>
 8006988:	e7c6      	b.n	8006918 <_malloc_r+0x84>
 800698a:	6007      	str	r7, [r0, #0]
 800698c:	e7da      	b.n	8006944 <_malloc_r+0xb0>
 800698e:	46c0      	nop			@ (mov r8, r8)
 8006990:	20001284 	.word	0x20001284

08006994 <__malloc_lock>:
 8006994:	b510      	push	{r4, lr}
 8006996:	4802      	ldr	r0, [pc, #8]	@ (80069a0 <__malloc_lock+0xc>)
 8006998:	f7ff ff04 	bl	80067a4 <__retarget_lock_acquire_recursive>
 800699c:	bd10      	pop	{r4, pc}
 800699e:	46c0      	nop			@ (mov r8, r8)
 80069a0:	2000127c 	.word	0x2000127c

080069a4 <__malloc_unlock>:
 80069a4:	b510      	push	{r4, lr}
 80069a6:	4802      	ldr	r0, [pc, #8]	@ (80069b0 <__malloc_unlock+0xc>)
 80069a8:	f7ff fefd 	bl	80067a6 <__retarget_lock_release_recursive>
 80069ac:	bd10      	pop	{r4, pc}
 80069ae:	46c0      	nop			@ (mov r8, r8)
 80069b0:	2000127c 	.word	0x2000127c

080069b4 <__ssputs_r>:
 80069b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80069b6:	688e      	ldr	r6, [r1, #8]
 80069b8:	b085      	sub	sp, #20
 80069ba:	001f      	movs	r7, r3
 80069bc:	000c      	movs	r4, r1
 80069be:	680b      	ldr	r3, [r1, #0]
 80069c0:	9002      	str	r0, [sp, #8]
 80069c2:	9203      	str	r2, [sp, #12]
 80069c4:	42be      	cmp	r6, r7
 80069c6:	d830      	bhi.n	8006a2a <__ssputs_r+0x76>
 80069c8:	210c      	movs	r1, #12
 80069ca:	5e62      	ldrsh	r2, [r4, r1]
 80069cc:	2190      	movs	r1, #144	@ 0x90
 80069ce:	00c9      	lsls	r1, r1, #3
 80069d0:	420a      	tst	r2, r1
 80069d2:	d028      	beq.n	8006a26 <__ssputs_r+0x72>
 80069d4:	2003      	movs	r0, #3
 80069d6:	6921      	ldr	r1, [r4, #16]
 80069d8:	1a5b      	subs	r3, r3, r1
 80069da:	9301      	str	r3, [sp, #4]
 80069dc:	6963      	ldr	r3, [r4, #20]
 80069de:	4343      	muls	r3, r0
 80069e0:	9801      	ldr	r0, [sp, #4]
 80069e2:	0fdd      	lsrs	r5, r3, #31
 80069e4:	18ed      	adds	r5, r5, r3
 80069e6:	1c7b      	adds	r3, r7, #1
 80069e8:	181b      	adds	r3, r3, r0
 80069ea:	106d      	asrs	r5, r5, #1
 80069ec:	42ab      	cmp	r3, r5
 80069ee:	d900      	bls.n	80069f2 <__ssputs_r+0x3e>
 80069f0:	001d      	movs	r5, r3
 80069f2:	0552      	lsls	r2, r2, #21
 80069f4:	d528      	bpl.n	8006a48 <__ssputs_r+0x94>
 80069f6:	0029      	movs	r1, r5
 80069f8:	9802      	ldr	r0, [sp, #8]
 80069fa:	f7ff ff4b 	bl	8006894 <_malloc_r>
 80069fe:	1e06      	subs	r6, r0, #0
 8006a00:	d02c      	beq.n	8006a5c <__ssputs_r+0xa8>
 8006a02:	9a01      	ldr	r2, [sp, #4]
 8006a04:	6921      	ldr	r1, [r4, #16]
 8006a06:	f7ff fecf 	bl	80067a8 <memcpy>
 8006a0a:	89a2      	ldrh	r2, [r4, #12]
 8006a0c:	4b18      	ldr	r3, [pc, #96]	@ (8006a70 <__ssputs_r+0xbc>)
 8006a0e:	401a      	ands	r2, r3
 8006a10:	2380      	movs	r3, #128	@ 0x80
 8006a12:	4313      	orrs	r3, r2
 8006a14:	81a3      	strh	r3, [r4, #12]
 8006a16:	9b01      	ldr	r3, [sp, #4]
 8006a18:	6126      	str	r6, [r4, #16]
 8006a1a:	18f6      	adds	r6, r6, r3
 8006a1c:	6026      	str	r6, [r4, #0]
 8006a1e:	003e      	movs	r6, r7
 8006a20:	6165      	str	r5, [r4, #20]
 8006a22:	1aed      	subs	r5, r5, r3
 8006a24:	60a5      	str	r5, [r4, #8]
 8006a26:	42be      	cmp	r6, r7
 8006a28:	d900      	bls.n	8006a2c <__ssputs_r+0x78>
 8006a2a:	003e      	movs	r6, r7
 8006a2c:	0032      	movs	r2, r6
 8006a2e:	9903      	ldr	r1, [sp, #12]
 8006a30:	6820      	ldr	r0, [r4, #0]
 8006a32:	f000 fa9b 	bl	8006f6c <memmove>
 8006a36:	2000      	movs	r0, #0
 8006a38:	68a3      	ldr	r3, [r4, #8]
 8006a3a:	1b9b      	subs	r3, r3, r6
 8006a3c:	60a3      	str	r3, [r4, #8]
 8006a3e:	6823      	ldr	r3, [r4, #0]
 8006a40:	199b      	adds	r3, r3, r6
 8006a42:	6023      	str	r3, [r4, #0]
 8006a44:	b005      	add	sp, #20
 8006a46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006a48:	002a      	movs	r2, r5
 8006a4a:	9802      	ldr	r0, [sp, #8]
 8006a4c:	f000 fabf 	bl	8006fce <_realloc_r>
 8006a50:	1e06      	subs	r6, r0, #0
 8006a52:	d1e0      	bne.n	8006a16 <__ssputs_r+0x62>
 8006a54:	6921      	ldr	r1, [r4, #16]
 8006a56:	9802      	ldr	r0, [sp, #8]
 8006a58:	f7ff feb0 	bl	80067bc <_free_r>
 8006a5c:	230c      	movs	r3, #12
 8006a5e:	2001      	movs	r0, #1
 8006a60:	9a02      	ldr	r2, [sp, #8]
 8006a62:	4240      	negs	r0, r0
 8006a64:	6013      	str	r3, [r2, #0]
 8006a66:	89a2      	ldrh	r2, [r4, #12]
 8006a68:	3334      	adds	r3, #52	@ 0x34
 8006a6a:	4313      	orrs	r3, r2
 8006a6c:	81a3      	strh	r3, [r4, #12]
 8006a6e:	e7e9      	b.n	8006a44 <__ssputs_r+0x90>
 8006a70:	fffffb7f 	.word	0xfffffb7f

08006a74 <_svfiprintf_r>:
 8006a74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006a76:	b0a1      	sub	sp, #132	@ 0x84
 8006a78:	9003      	str	r0, [sp, #12]
 8006a7a:	001d      	movs	r5, r3
 8006a7c:	898b      	ldrh	r3, [r1, #12]
 8006a7e:	000f      	movs	r7, r1
 8006a80:	0016      	movs	r6, r2
 8006a82:	061b      	lsls	r3, r3, #24
 8006a84:	d511      	bpl.n	8006aaa <_svfiprintf_r+0x36>
 8006a86:	690b      	ldr	r3, [r1, #16]
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d10e      	bne.n	8006aaa <_svfiprintf_r+0x36>
 8006a8c:	2140      	movs	r1, #64	@ 0x40
 8006a8e:	f7ff ff01 	bl	8006894 <_malloc_r>
 8006a92:	6038      	str	r0, [r7, #0]
 8006a94:	6138      	str	r0, [r7, #16]
 8006a96:	2800      	cmp	r0, #0
 8006a98:	d105      	bne.n	8006aa6 <_svfiprintf_r+0x32>
 8006a9a:	230c      	movs	r3, #12
 8006a9c:	9a03      	ldr	r2, [sp, #12]
 8006a9e:	6013      	str	r3, [r2, #0]
 8006aa0:	2001      	movs	r0, #1
 8006aa2:	4240      	negs	r0, r0
 8006aa4:	e0cf      	b.n	8006c46 <_svfiprintf_r+0x1d2>
 8006aa6:	2340      	movs	r3, #64	@ 0x40
 8006aa8:	617b      	str	r3, [r7, #20]
 8006aaa:	2300      	movs	r3, #0
 8006aac:	ac08      	add	r4, sp, #32
 8006aae:	6163      	str	r3, [r4, #20]
 8006ab0:	3320      	adds	r3, #32
 8006ab2:	7663      	strb	r3, [r4, #25]
 8006ab4:	3310      	adds	r3, #16
 8006ab6:	76a3      	strb	r3, [r4, #26]
 8006ab8:	9507      	str	r5, [sp, #28]
 8006aba:	0035      	movs	r5, r6
 8006abc:	782b      	ldrb	r3, [r5, #0]
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d001      	beq.n	8006ac6 <_svfiprintf_r+0x52>
 8006ac2:	2b25      	cmp	r3, #37	@ 0x25
 8006ac4:	d148      	bne.n	8006b58 <_svfiprintf_r+0xe4>
 8006ac6:	1bab      	subs	r3, r5, r6
 8006ac8:	9305      	str	r3, [sp, #20]
 8006aca:	42b5      	cmp	r5, r6
 8006acc:	d00b      	beq.n	8006ae6 <_svfiprintf_r+0x72>
 8006ace:	0032      	movs	r2, r6
 8006ad0:	0039      	movs	r1, r7
 8006ad2:	9803      	ldr	r0, [sp, #12]
 8006ad4:	f7ff ff6e 	bl	80069b4 <__ssputs_r>
 8006ad8:	3001      	adds	r0, #1
 8006ada:	d100      	bne.n	8006ade <_svfiprintf_r+0x6a>
 8006adc:	e0ae      	b.n	8006c3c <_svfiprintf_r+0x1c8>
 8006ade:	6963      	ldr	r3, [r4, #20]
 8006ae0:	9a05      	ldr	r2, [sp, #20]
 8006ae2:	189b      	adds	r3, r3, r2
 8006ae4:	6163      	str	r3, [r4, #20]
 8006ae6:	782b      	ldrb	r3, [r5, #0]
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d100      	bne.n	8006aee <_svfiprintf_r+0x7a>
 8006aec:	e0a6      	b.n	8006c3c <_svfiprintf_r+0x1c8>
 8006aee:	2201      	movs	r2, #1
 8006af0:	2300      	movs	r3, #0
 8006af2:	4252      	negs	r2, r2
 8006af4:	6062      	str	r2, [r4, #4]
 8006af6:	a904      	add	r1, sp, #16
 8006af8:	3254      	adds	r2, #84	@ 0x54
 8006afa:	1852      	adds	r2, r2, r1
 8006afc:	1c6e      	adds	r6, r5, #1
 8006afe:	6023      	str	r3, [r4, #0]
 8006b00:	60e3      	str	r3, [r4, #12]
 8006b02:	60a3      	str	r3, [r4, #8]
 8006b04:	7013      	strb	r3, [r2, #0]
 8006b06:	65a3      	str	r3, [r4, #88]	@ 0x58
 8006b08:	4b54      	ldr	r3, [pc, #336]	@ (8006c5c <_svfiprintf_r+0x1e8>)
 8006b0a:	2205      	movs	r2, #5
 8006b0c:	0018      	movs	r0, r3
 8006b0e:	7831      	ldrb	r1, [r6, #0]
 8006b10:	9305      	str	r3, [sp, #20]
 8006b12:	f000 fa51 	bl	8006fb8 <memchr>
 8006b16:	1c75      	adds	r5, r6, #1
 8006b18:	2800      	cmp	r0, #0
 8006b1a:	d11f      	bne.n	8006b5c <_svfiprintf_r+0xe8>
 8006b1c:	6822      	ldr	r2, [r4, #0]
 8006b1e:	06d3      	lsls	r3, r2, #27
 8006b20:	d504      	bpl.n	8006b2c <_svfiprintf_r+0xb8>
 8006b22:	2353      	movs	r3, #83	@ 0x53
 8006b24:	a904      	add	r1, sp, #16
 8006b26:	185b      	adds	r3, r3, r1
 8006b28:	2120      	movs	r1, #32
 8006b2a:	7019      	strb	r1, [r3, #0]
 8006b2c:	0713      	lsls	r3, r2, #28
 8006b2e:	d504      	bpl.n	8006b3a <_svfiprintf_r+0xc6>
 8006b30:	2353      	movs	r3, #83	@ 0x53
 8006b32:	a904      	add	r1, sp, #16
 8006b34:	185b      	adds	r3, r3, r1
 8006b36:	212b      	movs	r1, #43	@ 0x2b
 8006b38:	7019      	strb	r1, [r3, #0]
 8006b3a:	7833      	ldrb	r3, [r6, #0]
 8006b3c:	2b2a      	cmp	r3, #42	@ 0x2a
 8006b3e:	d016      	beq.n	8006b6e <_svfiprintf_r+0xfa>
 8006b40:	0035      	movs	r5, r6
 8006b42:	2100      	movs	r1, #0
 8006b44:	200a      	movs	r0, #10
 8006b46:	68e3      	ldr	r3, [r4, #12]
 8006b48:	782a      	ldrb	r2, [r5, #0]
 8006b4a:	1c6e      	adds	r6, r5, #1
 8006b4c:	3a30      	subs	r2, #48	@ 0x30
 8006b4e:	2a09      	cmp	r2, #9
 8006b50:	d950      	bls.n	8006bf4 <_svfiprintf_r+0x180>
 8006b52:	2900      	cmp	r1, #0
 8006b54:	d111      	bne.n	8006b7a <_svfiprintf_r+0x106>
 8006b56:	e017      	b.n	8006b88 <_svfiprintf_r+0x114>
 8006b58:	3501      	adds	r5, #1
 8006b5a:	e7af      	b.n	8006abc <_svfiprintf_r+0x48>
 8006b5c:	9b05      	ldr	r3, [sp, #20]
 8006b5e:	6822      	ldr	r2, [r4, #0]
 8006b60:	1ac0      	subs	r0, r0, r3
 8006b62:	2301      	movs	r3, #1
 8006b64:	4083      	lsls	r3, r0
 8006b66:	4313      	orrs	r3, r2
 8006b68:	002e      	movs	r6, r5
 8006b6a:	6023      	str	r3, [r4, #0]
 8006b6c:	e7cc      	b.n	8006b08 <_svfiprintf_r+0x94>
 8006b6e:	9b07      	ldr	r3, [sp, #28]
 8006b70:	1d19      	adds	r1, r3, #4
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	9107      	str	r1, [sp, #28]
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	db01      	blt.n	8006b7e <_svfiprintf_r+0x10a>
 8006b7a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006b7c:	e004      	b.n	8006b88 <_svfiprintf_r+0x114>
 8006b7e:	425b      	negs	r3, r3
 8006b80:	60e3      	str	r3, [r4, #12]
 8006b82:	2302      	movs	r3, #2
 8006b84:	4313      	orrs	r3, r2
 8006b86:	6023      	str	r3, [r4, #0]
 8006b88:	782b      	ldrb	r3, [r5, #0]
 8006b8a:	2b2e      	cmp	r3, #46	@ 0x2e
 8006b8c:	d10c      	bne.n	8006ba8 <_svfiprintf_r+0x134>
 8006b8e:	786b      	ldrb	r3, [r5, #1]
 8006b90:	2b2a      	cmp	r3, #42	@ 0x2a
 8006b92:	d134      	bne.n	8006bfe <_svfiprintf_r+0x18a>
 8006b94:	9b07      	ldr	r3, [sp, #28]
 8006b96:	3502      	adds	r5, #2
 8006b98:	1d1a      	adds	r2, r3, #4
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	9207      	str	r2, [sp, #28]
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	da01      	bge.n	8006ba6 <_svfiprintf_r+0x132>
 8006ba2:	2301      	movs	r3, #1
 8006ba4:	425b      	negs	r3, r3
 8006ba6:	9309      	str	r3, [sp, #36]	@ 0x24
 8006ba8:	4e2d      	ldr	r6, [pc, #180]	@ (8006c60 <_svfiprintf_r+0x1ec>)
 8006baa:	2203      	movs	r2, #3
 8006bac:	0030      	movs	r0, r6
 8006bae:	7829      	ldrb	r1, [r5, #0]
 8006bb0:	f000 fa02 	bl	8006fb8 <memchr>
 8006bb4:	2800      	cmp	r0, #0
 8006bb6:	d006      	beq.n	8006bc6 <_svfiprintf_r+0x152>
 8006bb8:	2340      	movs	r3, #64	@ 0x40
 8006bba:	1b80      	subs	r0, r0, r6
 8006bbc:	4083      	lsls	r3, r0
 8006bbe:	6822      	ldr	r2, [r4, #0]
 8006bc0:	3501      	adds	r5, #1
 8006bc2:	4313      	orrs	r3, r2
 8006bc4:	6023      	str	r3, [r4, #0]
 8006bc6:	7829      	ldrb	r1, [r5, #0]
 8006bc8:	2206      	movs	r2, #6
 8006bca:	4826      	ldr	r0, [pc, #152]	@ (8006c64 <_svfiprintf_r+0x1f0>)
 8006bcc:	1c6e      	adds	r6, r5, #1
 8006bce:	7621      	strb	r1, [r4, #24]
 8006bd0:	f000 f9f2 	bl	8006fb8 <memchr>
 8006bd4:	2800      	cmp	r0, #0
 8006bd6:	d038      	beq.n	8006c4a <_svfiprintf_r+0x1d6>
 8006bd8:	4b23      	ldr	r3, [pc, #140]	@ (8006c68 <_svfiprintf_r+0x1f4>)
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d122      	bne.n	8006c24 <_svfiprintf_r+0x1b0>
 8006bde:	2207      	movs	r2, #7
 8006be0:	9b07      	ldr	r3, [sp, #28]
 8006be2:	3307      	adds	r3, #7
 8006be4:	4393      	bics	r3, r2
 8006be6:	3308      	adds	r3, #8
 8006be8:	9307      	str	r3, [sp, #28]
 8006bea:	6963      	ldr	r3, [r4, #20]
 8006bec:	9a04      	ldr	r2, [sp, #16]
 8006bee:	189b      	adds	r3, r3, r2
 8006bf0:	6163      	str	r3, [r4, #20]
 8006bf2:	e762      	b.n	8006aba <_svfiprintf_r+0x46>
 8006bf4:	4343      	muls	r3, r0
 8006bf6:	0035      	movs	r5, r6
 8006bf8:	2101      	movs	r1, #1
 8006bfa:	189b      	adds	r3, r3, r2
 8006bfc:	e7a4      	b.n	8006b48 <_svfiprintf_r+0xd4>
 8006bfe:	2300      	movs	r3, #0
 8006c00:	200a      	movs	r0, #10
 8006c02:	0019      	movs	r1, r3
 8006c04:	3501      	adds	r5, #1
 8006c06:	6063      	str	r3, [r4, #4]
 8006c08:	782a      	ldrb	r2, [r5, #0]
 8006c0a:	1c6e      	adds	r6, r5, #1
 8006c0c:	3a30      	subs	r2, #48	@ 0x30
 8006c0e:	2a09      	cmp	r2, #9
 8006c10:	d903      	bls.n	8006c1a <_svfiprintf_r+0x1a6>
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d0c8      	beq.n	8006ba8 <_svfiprintf_r+0x134>
 8006c16:	9109      	str	r1, [sp, #36]	@ 0x24
 8006c18:	e7c6      	b.n	8006ba8 <_svfiprintf_r+0x134>
 8006c1a:	4341      	muls	r1, r0
 8006c1c:	0035      	movs	r5, r6
 8006c1e:	2301      	movs	r3, #1
 8006c20:	1889      	adds	r1, r1, r2
 8006c22:	e7f1      	b.n	8006c08 <_svfiprintf_r+0x194>
 8006c24:	aa07      	add	r2, sp, #28
 8006c26:	9200      	str	r2, [sp, #0]
 8006c28:	0021      	movs	r1, r4
 8006c2a:	003a      	movs	r2, r7
 8006c2c:	4b0f      	ldr	r3, [pc, #60]	@ (8006c6c <_svfiprintf_r+0x1f8>)
 8006c2e:	9803      	ldr	r0, [sp, #12]
 8006c30:	e000      	b.n	8006c34 <_svfiprintf_r+0x1c0>
 8006c32:	bf00      	nop
 8006c34:	9004      	str	r0, [sp, #16]
 8006c36:	9b04      	ldr	r3, [sp, #16]
 8006c38:	3301      	adds	r3, #1
 8006c3a:	d1d6      	bne.n	8006bea <_svfiprintf_r+0x176>
 8006c3c:	89bb      	ldrh	r3, [r7, #12]
 8006c3e:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8006c40:	065b      	lsls	r3, r3, #25
 8006c42:	d500      	bpl.n	8006c46 <_svfiprintf_r+0x1d2>
 8006c44:	e72c      	b.n	8006aa0 <_svfiprintf_r+0x2c>
 8006c46:	b021      	add	sp, #132	@ 0x84
 8006c48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006c4a:	aa07      	add	r2, sp, #28
 8006c4c:	9200      	str	r2, [sp, #0]
 8006c4e:	0021      	movs	r1, r4
 8006c50:	003a      	movs	r2, r7
 8006c52:	4b06      	ldr	r3, [pc, #24]	@ (8006c6c <_svfiprintf_r+0x1f8>)
 8006c54:	9803      	ldr	r0, [sp, #12]
 8006c56:	f000 f87b 	bl	8006d50 <_printf_i>
 8006c5a:	e7eb      	b.n	8006c34 <_svfiprintf_r+0x1c0>
 8006c5c:	08007178 	.word	0x08007178
 8006c60:	0800717e 	.word	0x0800717e
 8006c64:	08007182 	.word	0x08007182
 8006c68:	00000000 	.word	0x00000000
 8006c6c:	080069b5 	.word	0x080069b5

08006c70 <_printf_common>:
 8006c70:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006c72:	0016      	movs	r6, r2
 8006c74:	9301      	str	r3, [sp, #4]
 8006c76:	688a      	ldr	r2, [r1, #8]
 8006c78:	690b      	ldr	r3, [r1, #16]
 8006c7a:	000c      	movs	r4, r1
 8006c7c:	9000      	str	r0, [sp, #0]
 8006c7e:	4293      	cmp	r3, r2
 8006c80:	da00      	bge.n	8006c84 <_printf_common+0x14>
 8006c82:	0013      	movs	r3, r2
 8006c84:	0022      	movs	r2, r4
 8006c86:	6033      	str	r3, [r6, #0]
 8006c88:	3243      	adds	r2, #67	@ 0x43
 8006c8a:	7812      	ldrb	r2, [r2, #0]
 8006c8c:	2a00      	cmp	r2, #0
 8006c8e:	d001      	beq.n	8006c94 <_printf_common+0x24>
 8006c90:	3301      	adds	r3, #1
 8006c92:	6033      	str	r3, [r6, #0]
 8006c94:	6823      	ldr	r3, [r4, #0]
 8006c96:	069b      	lsls	r3, r3, #26
 8006c98:	d502      	bpl.n	8006ca0 <_printf_common+0x30>
 8006c9a:	6833      	ldr	r3, [r6, #0]
 8006c9c:	3302      	adds	r3, #2
 8006c9e:	6033      	str	r3, [r6, #0]
 8006ca0:	6822      	ldr	r2, [r4, #0]
 8006ca2:	2306      	movs	r3, #6
 8006ca4:	0015      	movs	r5, r2
 8006ca6:	401d      	ands	r5, r3
 8006ca8:	421a      	tst	r2, r3
 8006caa:	d027      	beq.n	8006cfc <_printf_common+0x8c>
 8006cac:	0023      	movs	r3, r4
 8006cae:	3343      	adds	r3, #67	@ 0x43
 8006cb0:	781b      	ldrb	r3, [r3, #0]
 8006cb2:	1e5a      	subs	r2, r3, #1
 8006cb4:	4193      	sbcs	r3, r2
 8006cb6:	6822      	ldr	r2, [r4, #0]
 8006cb8:	0692      	lsls	r2, r2, #26
 8006cba:	d430      	bmi.n	8006d1e <_printf_common+0xae>
 8006cbc:	0022      	movs	r2, r4
 8006cbe:	9901      	ldr	r1, [sp, #4]
 8006cc0:	9800      	ldr	r0, [sp, #0]
 8006cc2:	9d08      	ldr	r5, [sp, #32]
 8006cc4:	3243      	adds	r2, #67	@ 0x43
 8006cc6:	47a8      	blx	r5
 8006cc8:	3001      	adds	r0, #1
 8006cca:	d025      	beq.n	8006d18 <_printf_common+0xa8>
 8006ccc:	2206      	movs	r2, #6
 8006cce:	6823      	ldr	r3, [r4, #0]
 8006cd0:	2500      	movs	r5, #0
 8006cd2:	4013      	ands	r3, r2
 8006cd4:	2b04      	cmp	r3, #4
 8006cd6:	d105      	bne.n	8006ce4 <_printf_common+0x74>
 8006cd8:	6833      	ldr	r3, [r6, #0]
 8006cda:	68e5      	ldr	r5, [r4, #12]
 8006cdc:	1aed      	subs	r5, r5, r3
 8006cde:	43eb      	mvns	r3, r5
 8006ce0:	17db      	asrs	r3, r3, #31
 8006ce2:	401d      	ands	r5, r3
 8006ce4:	68a3      	ldr	r3, [r4, #8]
 8006ce6:	6922      	ldr	r2, [r4, #16]
 8006ce8:	4293      	cmp	r3, r2
 8006cea:	dd01      	ble.n	8006cf0 <_printf_common+0x80>
 8006cec:	1a9b      	subs	r3, r3, r2
 8006cee:	18ed      	adds	r5, r5, r3
 8006cf0:	2600      	movs	r6, #0
 8006cf2:	42b5      	cmp	r5, r6
 8006cf4:	d120      	bne.n	8006d38 <_printf_common+0xc8>
 8006cf6:	2000      	movs	r0, #0
 8006cf8:	e010      	b.n	8006d1c <_printf_common+0xac>
 8006cfa:	3501      	adds	r5, #1
 8006cfc:	68e3      	ldr	r3, [r4, #12]
 8006cfe:	6832      	ldr	r2, [r6, #0]
 8006d00:	1a9b      	subs	r3, r3, r2
 8006d02:	42ab      	cmp	r3, r5
 8006d04:	ddd2      	ble.n	8006cac <_printf_common+0x3c>
 8006d06:	0022      	movs	r2, r4
 8006d08:	2301      	movs	r3, #1
 8006d0a:	9901      	ldr	r1, [sp, #4]
 8006d0c:	9800      	ldr	r0, [sp, #0]
 8006d0e:	9f08      	ldr	r7, [sp, #32]
 8006d10:	3219      	adds	r2, #25
 8006d12:	47b8      	blx	r7
 8006d14:	3001      	adds	r0, #1
 8006d16:	d1f0      	bne.n	8006cfa <_printf_common+0x8a>
 8006d18:	2001      	movs	r0, #1
 8006d1a:	4240      	negs	r0, r0
 8006d1c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006d1e:	2030      	movs	r0, #48	@ 0x30
 8006d20:	18e1      	adds	r1, r4, r3
 8006d22:	3143      	adds	r1, #67	@ 0x43
 8006d24:	7008      	strb	r0, [r1, #0]
 8006d26:	0021      	movs	r1, r4
 8006d28:	1c5a      	adds	r2, r3, #1
 8006d2a:	3145      	adds	r1, #69	@ 0x45
 8006d2c:	7809      	ldrb	r1, [r1, #0]
 8006d2e:	18a2      	adds	r2, r4, r2
 8006d30:	3243      	adds	r2, #67	@ 0x43
 8006d32:	3302      	adds	r3, #2
 8006d34:	7011      	strb	r1, [r2, #0]
 8006d36:	e7c1      	b.n	8006cbc <_printf_common+0x4c>
 8006d38:	0022      	movs	r2, r4
 8006d3a:	2301      	movs	r3, #1
 8006d3c:	9901      	ldr	r1, [sp, #4]
 8006d3e:	9800      	ldr	r0, [sp, #0]
 8006d40:	9f08      	ldr	r7, [sp, #32]
 8006d42:	321a      	adds	r2, #26
 8006d44:	47b8      	blx	r7
 8006d46:	3001      	adds	r0, #1
 8006d48:	d0e6      	beq.n	8006d18 <_printf_common+0xa8>
 8006d4a:	3601      	adds	r6, #1
 8006d4c:	e7d1      	b.n	8006cf2 <_printf_common+0x82>
	...

08006d50 <_printf_i>:
 8006d50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006d52:	b08b      	sub	sp, #44	@ 0x2c
 8006d54:	9206      	str	r2, [sp, #24]
 8006d56:	000a      	movs	r2, r1
 8006d58:	3243      	adds	r2, #67	@ 0x43
 8006d5a:	9307      	str	r3, [sp, #28]
 8006d5c:	9005      	str	r0, [sp, #20]
 8006d5e:	9203      	str	r2, [sp, #12]
 8006d60:	7e0a      	ldrb	r2, [r1, #24]
 8006d62:	000c      	movs	r4, r1
 8006d64:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8006d66:	2a78      	cmp	r2, #120	@ 0x78
 8006d68:	d809      	bhi.n	8006d7e <_printf_i+0x2e>
 8006d6a:	2a62      	cmp	r2, #98	@ 0x62
 8006d6c:	d80b      	bhi.n	8006d86 <_printf_i+0x36>
 8006d6e:	2a00      	cmp	r2, #0
 8006d70:	d100      	bne.n	8006d74 <_printf_i+0x24>
 8006d72:	e0bc      	b.n	8006eee <_printf_i+0x19e>
 8006d74:	497b      	ldr	r1, [pc, #492]	@ (8006f64 <_printf_i+0x214>)
 8006d76:	9104      	str	r1, [sp, #16]
 8006d78:	2a58      	cmp	r2, #88	@ 0x58
 8006d7a:	d100      	bne.n	8006d7e <_printf_i+0x2e>
 8006d7c:	e090      	b.n	8006ea0 <_printf_i+0x150>
 8006d7e:	0025      	movs	r5, r4
 8006d80:	3542      	adds	r5, #66	@ 0x42
 8006d82:	702a      	strb	r2, [r5, #0]
 8006d84:	e022      	b.n	8006dcc <_printf_i+0x7c>
 8006d86:	0010      	movs	r0, r2
 8006d88:	3863      	subs	r0, #99	@ 0x63
 8006d8a:	2815      	cmp	r0, #21
 8006d8c:	d8f7      	bhi.n	8006d7e <_printf_i+0x2e>
 8006d8e:	f7f9 f9c3 	bl	8000118 <__gnu_thumb1_case_shi>
 8006d92:	0016      	.short	0x0016
 8006d94:	fff6001f 	.word	0xfff6001f
 8006d98:	fff6fff6 	.word	0xfff6fff6
 8006d9c:	001ffff6 	.word	0x001ffff6
 8006da0:	fff6fff6 	.word	0xfff6fff6
 8006da4:	fff6fff6 	.word	0xfff6fff6
 8006da8:	003600a1 	.word	0x003600a1
 8006dac:	fff60080 	.word	0xfff60080
 8006db0:	00b2fff6 	.word	0x00b2fff6
 8006db4:	0036fff6 	.word	0x0036fff6
 8006db8:	fff6fff6 	.word	0xfff6fff6
 8006dbc:	0084      	.short	0x0084
 8006dbe:	0025      	movs	r5, r4
 8006dc0:	681a      	ldr	r2, [r3, #0]
 8006dc2:	3542      	adds	r5, #66	@ 0x42
 8006dc4:	1d11      	adds	r1, r2, #4
 8006dc6:	6019      	str	r1, [r3, #0]
 8006dc8:	6813      	ldr	r3, [r2, #0]
 8006dca:	702b      	strb	r3, [r5, #0]
 8006dcc:	2301      	movs	r3, #1
 8006dce:	e0a0      	b.n	8006f12 <_printf_i+0x1c2>
 8006dd0:	6818      	ldr	r0, [r3, #0]
 8006dd2:	6809      	ldr	r1, [r1, #0]
 8006dd4:	1d02      	adds	r2, r0, #4
 8006dd6:	060d      	lsls	r5, r1, #24
 8006dd8:	d50b      	bpl.n	8006df2 <_printf_i+0xa2>
 8006dda:	6806      	ldr	r6, [r0, #0]
 8006ddc:	601a      	str	r2, [r3, #0]
 8006dde:	2e00      	cmp	r6, #0
 8006de0:	da03      	bge.n	8006dea <_printf_i+0x9a>
 8006de2:	232d      	movs	r3, #45	@ 0x2d
 8006de4:	9a03      	ldr	r2, [sp, #12]
 8006de6:	4276      	negs	r6, r6
 8006de8:	7013      	strb	r3, [r2, #0]
 8006dea:	4b5e      	ldr	r3, [pc, #376]	@ (8006f64 <_printf_i+0x214>)
 8006dec:	270a      	movs	r7, #10
 8006dee:	9304      	str	r3, [sp, #16]
 8006df0:	e018      	b.n	8006e24 <_printf_i+0xd4>
 8006df2:	6806      	ldr	r6, [r0, #0]
 8006df4:	601a      	str	r2, [r3, #0]
 8006df6:	0649      	lsls	r1, r1, #25
 8006df8:	d5f1      	bpl.n	8006dde <_printf_i+0x8e>
 8006dfa:	b236      	sxth	r6, r6
 8006dfc:	e7ef      	b.n	8006dde <_printf_i+0x8e>
 8006dfe:	6808      	ldr	r0, [r1, #0]
 8006e00:	6819      	ldr	r1, [r3, #0]
 8006e02:	c940      	ldmia	r1!, {r6}
 8006e04:	0605      	lsls	r5, r0, #24
 8006e06:	d402      	bmi.n	8006e0e <_printf_i+0xbe>
 8006e08:	0640      	lsls	r0, r0, #25
 8006e0a:	d500      	bpl.n	8006e0e <_printf_i+0xbe>
 8006e0c:	b2b6      	uxth	r6, r6
 8006e0e:	6019      	str	r1, [r3, #0]
 8006e10:	4b54      	ldr	r3, [pc, #336]	@ (8006f64 <_printf_i+0x214>)
 8006e12:	270a      	movs	r7, #10
 8006e14:	9304      	str	r3, [sp, #16]
 8006e16:	2a6f      	cmp	r2, #111	@ 0x6f
 8006e18:	d100      	bne.n	8006e1c <_printf_i+0xcc>
 8006e1a:	3f02      	subs	r7, #2
 8006e1c:	0023      	movs	r3, r4
 8006e1e:	2200      	movs	r2, #0
 8006e20:	3343      	adds	r3, #67	@ 0x43
 8006e22:	701a      	strb	r2, [r3, #0]
 8006e24:	6863      	ldr	r3, [r4, #4]
 8006e26:	60a3      	str	r3, [r4, #8]
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	db03      	blt.n	8006e34 <_printf_i+0xe4>
 8006e2c:	2104      	movs	r1, #4
 8006e2e:	6822      	ldr	r2, [r4, #0]
 8006e30:	438a      	bics	r2, r1
 8006e32:	6022      	str	r2, [r4, #0]
 8006e34:	2e00      	cmp	r6, #0
 8006e36:	d102      	bne.n	8006e3e <_printf_i+0xee>
 8006e38:	9d03      	ldr	r5, [sp, #12]
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d00c      	beq.n	8006e58 <_printf_i+0x108>
 8006e3e:	9d03      	ldr	r5, [sp, #12]
 8006e40:	0030      	movs	r0, r6
 8006e42:	0039      	movs	r1, r7
 8006e44:	f7f9 f9f8 	bl	8000238 <__aeabi_uidivmod>
 8006e48:	9b04      	ldr	r3, [sp, #16]
 8006e4a:	3d01      	subs	r5, #1
 8006e4c:	5c5b      	ldrb	r3, [r3, r1]
 8006e4e:	702b      	strb	r3, [r5, #0]
 8006e50:	0033      	movs	r3, r6
 8006e52:	0006      	movs	r6, r0
 8006e54:	429f      	cmp	r7, r3
 8006e56:	d9f3      	bls.n	8006e40 <_printf_i+0xf0>
 8006e58:	2f08      	cmp	r7, #8
 8006e5a:	d109      	bne.n	8006e70 <_printf_i+0x120>
 8006e5c:	6823      	ldr	r3, [r4, #0]
 8006e5e:	07db      	lsls	r3, r3, #31
 8006e60:	d506      	bpl.n	8006e70 <_printf_i+0x120>
 8006e62:	6862      	ldr	r2, [r4, #4]
 8006e64:	6923      	ldr	r3, [r4, #16]
 8006e66:	429a      	cmp	r2, r3
 8006e68:	dc02      	bgt.n	8006e70 <_printf_i+0x120>
 8006e6a:	2330      	movs	r3, #48	@ 0x30
 8006e6c:	3d01      	subs	r5, #1
 8006e6e:	702b      	strb	r3, [r5, #0]
 8006e70:	9b03      	ldr	r3, [sp, #12]
 8006e72:	1b5b      	subs	r3, r3, r5
 8006e74:	6123      	str	r3, [r4, #16]
 8006e76:	9b07      	ldr	r3, [sp, #28]
 8006e78:	0021      	movs	r1, r4
 8006e7a:	9300      	str	r3, [sp, #0]
 8006e7c:	9805      	ldr	r0, [sp, #20]
 8006e7e:	9b06      	ldr	r3, [sp, #24]
 8006e80:	aa09      	add	r2, sp, #36	@ 0x24
 8006e82:	f7ff fef5 	bl	8006c70 <_printf_common>
 8006e86:	3001      	adds	r0, #1
 8006e88:	d148      	bne.n	8006f1c <_printf_i+0x1cc>
 8006e8a:	2001      	movs	r0, #1
 8006e8c:	4240      	negs	r0, r0
 8006e8e:	b00b      	add	sp, #44	@ 0x2c
 8006e90:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006e92:	2220      	movs	r2, #32
 8006e94:	6809      	ldr	r1, [r1, #0]
 8006e96:	430a      	orrs	r2, r1
 8006e98:	6022      	str	r2, [r4, #0]
 8006e9a:	2278      	movs	r2, #120	@ 0x78
 8006e9c:	4932      	ldr	r1, [pc, #200]	@ (8006f68 <_printf_i+0x218>)
 8006e9e:	9104      	str	r1, [sp, #16]
 8006ea0:	0021      	movs	r1, r4
 8006ea2:	3145      	adds	r1, #69	@ 0x45
 8006ea4:	700a      	strb	r2, [r1, #0]
 8006ea6:	6819      	ldr	r1, [r3, #0]
 8006ea8:	6822      	ldr	r2, [r4, #0]
 8006eaa:	c940      	ldmia	r1!, {r6}
 8006eac:	0610      	lsls	r0, r2, #24
 8006eae:	d402      	bmi.n	8006eb6 <_printf_i+0x166>
 8006eb0:	0650      	lsls	r0, r2, #25
 8006eb2:	d500      	bpl.n	8006eb6 <_printf_i+0x166>
 8006eb4:	b2b6      	uxth	r6, r6
 8006eb6:	6019      	str	r1, [r3, #0]
 8006eb8:	07d3      	lsls	r3, r2, #31
 8006eba:	d502      	bpl.n	8006ec2 <_printf_i+0x172>
 8006ebc:	2320      	movs	r3, #32
 8006ebe:	4313      	orrs	r3, r2
 8006ec0:	6023      	str	r3, [r4, #0]
 8006ec2:	2e00      	cmp	r6, #0
 8006ec4:	d001      	beq.n	8006eca <_printf_i+0x17a>
 8006ec6:	2710      	movs	r7, #16
 8006ec8:	e7a8      	b.n	8006e1c <_printf_i+0xcc>
 8006eca:	2220      	movs	r2, #32
 8006ecc:	6823      	ldr	r3, [r4, #0]
 8006ece:	4393      	bics	r3, r2
 8006ed0:	6023      	str	r3, [r4, #0]
 8006ed2:	e7f8      	b.n	8006ec6 <_printf_i+0x176>
 8006ed4:	681a      	ldr	r2, [r3, #0]
 8006ed6:	680d      	ldr	r5, [r1, #0]
 8006ed8:	1d10      	adds	r0, r2, #4
 8006eda:	6949      	ldr	r1, [r1, #20]
 8006edc:	6018      	str	r0, [r3, #0]
 8006ede:	6813      	ldr	r3, [r2, #0]
 8006ee0:	062e      	lsls	r6, r5, #24
 8006ee2:	d501      	bpl.n	8006ee8 <_printf_i+0x198>
 8006ee4:	6019      	str	r1, [r3, #0]
 8006ee6:	e002      	b.n	8006eee <_printf_i+0x19e>
 8006ee8:	066d      	lsls	r5, r5, #25
 8006eea:	d5fb      	bpl.n	8006ee4 <_printf_i+0x194>
 8006eec:	8019      	strh	r1, [r3, #0]
 8006eee:	2300      	movs	r3, #0
 8006ef0:	9d03      	ldr	r5, [sp, #12]
 8006ef2:	6123      	str	r3, [r4, #16]
 8006ef4:	e7bf      	b.n	8006e76 <_printf_i+0x126>
 8006ef6:	681a      	ldr	r2, [r3, #0]
 8006ef8:	1d11      	adds	r1, r2, #4
 8006efa:	6019      	str	r1, [r3, #0]
 8006efc:	6815      	ldr	r5, [r2, #0]
 8006efe:	2100      	movs	r1, #0
 8006f00:	0028      	movs	r0, r5
 8006f02:	6862      	ldr	r2, [r4, #4]
 8006f04:	f000 f858 	bl	8006fb8 <memchr>
 8006f08:	2800      	cmp	r0, #0
 8006f0a:	d001      	beq.n	8006f10 <_printf_i+0x1c0>
 8006f0c:	1b40      	subs	r0, r0, r5
 8006f0e:	6060      	str	r0, [r4, #4]
 8006f10:	6863      	ldr	r3, [r4, #4]
 8006f12:	6123      	str	r3, [r4, #16]
 8006f14:	2300      	movs	r3, #0
 8006f16:	9a03      	ldr	r2, [sp, #12]
 8006f18:	7013      	strb	r3, [r2, #0]
 8006f1a:	e7ac      	b.n	8006e76 <_printf_i+0x126>
 8006f1c:	002a      	movs	r2, r5
 8006f1e:	6923      	ldr	r3, [r4, #16]
 8006f20:	9906      	ldr	r1, [sp, #24]
 8006f22:	9805      	ldr	r0, [sp, #20]
 8006f24:	9d07      	ldr	r5, [sp, #28]
 8006f26:	47a8      	blx	r5
 8006f28:	3001      	adds	r0, #1
 8006f2a:	d0ae      	beq.n	8006e8a <_printf_i+0x13a>
 8006f2c:	6823      	ldr	r3, [r4, #0]
 8006f2e:	079b      	lsls	r3, r3, #30
 8006f30:	d415      	bmi.n	8006f5e <_printf_i+0x20e>
 8006f32:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006f34:	68e0      	ldr	r0, [r4, #12]
 8006f36:	4298      	cmp	r0, r3
 8006f38:	daa9      	bge.n	8006e8e <_printf_i+0x13e>
 8006f3a:	0018      	movs	r0, r3
 8006f3c:	e7a7      	b.n	8006e8e <_printf_i+0x13e>
 8006f3e:	0022      	movs	r2, r4
 8006f40:	2301      	movs	r3, #1
 8006f42:	9906      	ldr	r1, [sp, #24]
 8006f44:	9805      	ldr	r0, [sp, #20]
 8006f46:	9e07      	ldr	r6, [sp, #28]
 8006f48:	3219      	adds	r2, #25
 8006f4a:	47b0      	blx	r6
 8006f4c:	3001      	adds	r0, #1
 8006f4e:	d09c      	beq.n	8006e8a <_printf_i+0x13a>
 8006f50:	3501      	adds	r5, #1
 8006f52:	68e3      	ldr	r3, [r4, #12]
 8006f54:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006f56:	1a9b      	subs	r3, r3, r2
 8006f58:	42ab      	cmp	r3, r5
 8006f5a:	dcf0      	bgt.n	8006f3e <_printf_i+0x1ee>
 8006f5c:	e7e9      	b.n	8006f32 <_printf_i+0x1e2>
 8006f5e:	2500      	movs	r5, #0
 8006f60:	e7f7      	b.n	8006f52 <_printf_i+0x202>
 8006f62:	46c0      	nop			@ (mov r8, r8)
 8006f64:	08007189 	.word	0x08007189
 8006f68:	0800719a 	.word	0x0800719a

08006f6c <memmove>:
 8006f6c:	b510      	push	{r4, lr}
 8006f6e:	4288      	cmp	r0, r1
 8006f70:	d806      	bhi.n	8006f80 <memmove+0x14>
 8006f72:	2300      	movs	r3, #0
 8006f74:	429a      	cmp	r2, r3
 8006f76:	d008      	beq.n	8006f8a <memmove+0x1e>
 8006f78:	5ccc      	ldrb	r4, [r1, r3]
 8006f7a:	54c4      	strb	r4, [r0, r3]
 8006f7c:	3301      	adds	r3, #1
 8006f7e:	e7f9      	b.n	8006f74 <memmove+0x8>
 8006f80:	188b      	adds	r3, r1, r2
 8006f82:	4298      	cmp	r0, r3
 8006f84:	d2f5      	bcs.n	8006f72 <memmove+0x6>
 8006f86:	3a01      	subs	r2, #1
 8006f88:	d200      	bcs.n	8006f8c <memmove+0x20>
 8006f8a:	bd10      	pop	{r4, pc}
 8006f8c:	5c8b      	ldrb	r3, [r1, r2]
 8006f8e:	5483      	strb	r3, [r0, r2]
 8006f90:	e7f9      	b.n	8006f86 <memmove+0x1a>
	...

08006f94 <_sbrk_r>:
 8006f94:	2300      	movs	r3, #0
 8006f96:	b570      	push	{r4, r5, r6, lr}
 8006f98:	4d06      	ldr	r5, [pc, #24]	@ (8006fb4 <_sbrk_r+0x20>)
 8006f9a:	0004      	movs	r4, r0
 8006f9c:	0008      	movs	r0, r1
 8006f9e:	602b      	str	r3, [r5, #0]
 8006fa0:	f7fa f93a 	bl	8001218 <_sbrk>
 8006fa4:	1c43      	adds	r3, r0, #1
 8006fa6:	d103      	bne.n	8006fb0 <_sbrk_r+0x1c>
 8006fa8:	682b      	ldr	r3, [r5, #0]
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d000      	beq.n	8006fb0 <_sbrk_r+0x1c>
 8006fae:	6023      	str	r3, [r4, #0]
 8006fb0:	bd70      	pop	{r4, r5, r6, pc}
 8006fb2:	46c0      	nop			@ (mov r8, r8)
 8006fb4:	20001278 	.word	0x20001278

08006fb8 <memchr>:
 8006fb8:	b2c9      	uxtb	r1, r1
 8006fba:	1882      	adds	r2, r0, r2
 8006fbc:	4290      	cmp	r0, r2
 8006fbe:	d101      	bne.n	8006fc4 <memchr+0xc>
 8006fc0:	2000      	movs	r0, #0
 8006fc2:	4770      	bx	lr
 8006fc4:	7803      	ldrb	r3, [r0, #0]
 8006fc6:	428b      	cmp	r3, r1
 8006fc8:	d0fb      	beq.n	8006fc2 <memchr+0xa>
 8006fca:	3001      	adds	r0, #1
 8006fcc:	e7f6      	b.n	8006fbc <memchr+0x4>

08006fce <_realloc_r>:
 8006fce:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006fd0:	0006      	movs	r6, r0
 8006fd2:	000c      	movs	r4, r1
 8006fd4:	0015      	movs	r5, r2
 8006fd6:	2900      	cmp	r1, #0
 8006fd8:	d105      	bne.n	8006fe6 <_realloc_r+0x18>
 8006fda:	0011      	movs	r1, r2
 8006fdc:	f7ff fc5a 	bl	8006894 <_malloc_r>
 8006fe0:	0004      	movs	r4, r0
 8006fe2:	0020      	movs	r0, r4
 8006fe4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006fe6:	2a00      	cmp	r2, #0
 8006fe8:	d103      	bne.n	8006ff2 <_realloc_r+0x24>
 8006fea:	f7ff fbe7 	bl	80067bc <_free_r>
 8006fee:	2400      	movs	r4, #0
 8006ff0:	e7f7      	b.n	8006fe2 <_realloc_r+0x14>
 8006ff2:	f000 f81b 	bl	800702c <_malloc_usable_size_r>
 8006ff6:	0007      	movs	r7, r0
 8006ff8:	4285      	cmp	r5, r0
 8006ffa:	d802      	bhi.n	8007002 <_realloc_r+0x34>
 8006ffc:	0843      	lsrs	r3, r0, #1
 8006ffe:	42ab      	cmp	r3, r5
 8007000:	d3ef      	bcc.n	8006fe2 <_realloc_r+0x14>
 8007002:	0029      	movs	r1, r5
 8007004:	0030      	movs	r0, r6
 8007006:	f7ff fc45 	bl	8006894 <_malloc_r>
 800700a:	9001      	str	r0, [sp, #4]
 800700c:	2800      	cmp	r0, #0
 800700e:	d0ee      	beq.n	8006fee <_realloc_r+0x20>
 8007010:	002a      	movs	r2, r5
 8007012:	42bd      	cmp	r5, r7
 8007014:	d900      	bls.n	8007018 <_realloc_r+0x4a>
 8007016:	003a      	movs	r2, r7
 8007018:	0021      	movs	r1, r4
 800701a:	9801      	ldr	r0, [sp, #4]
 800701c:	f7ff fbc4 	bl	80067a8 <memcpy>
 8007020:	0021      	movs	r1, r4
 8007022:	0030      	movs	r0, r6
 8007024:	f7ff fbca 	bl	80067bc <_free_r>
 8007028:	9c01      	ldr	r4, [sp, #4]
 800702a:	e7da      	b.n	8006fe2 <_realloc_r+0x14>

0800702c <_malloc_usable_size_r>:
 800702c:	1f0b      	subs	r3, r1, #4
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	1f18      	subs	r0, r3, #4
 8007032:	2b00      	cmp	r3, #0
 8007034:	da01      	bge.n	800703a <_malloc_usable_size_r+0xe>
 8007036:	580b      	ldr	r3, [r1, r0]
 8007038:	18c0      	adds	r0, r0, r3
 800703a:	4770      	bx	lr

0800703c <_init>:
 800703c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800703e:	46c0      	nop			@ (mov r8, r8)
 8007040:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007042:	bc08      	pop	{r3}
 8007044:	469e      	mov	lr, r3
 8007046:	4770      	bx	lr

08007048 <_fini>:
 8007048:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800704a:	46c0      	nop			@ (mov r8, r8)
 800704c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800704e:	bc08      	pop	{r3}
 8007050:	469e      	mov	lr, r3
 8007052:	4770      	bx	lr
